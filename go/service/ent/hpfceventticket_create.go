// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yssk22/hpapp/go/service/ent/hpevent"
	"github.com/yssk22/hpapp/go/service/ent/hpfceventticket"
	"github.com/yssk22/hpapp/go/service/ent/user"
	"github.com/yssk22/hpapp/go/service/schema/enums"
)

// HPFCEventTicketCreate is the builder for creating a HPFCEventTicket entity.
type HPFCEventTicketCreate struct {
	config
	mutation *HPFCEventTicketMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (hetc *HPFCEventTicketCreate) SetCreatedAt(t time.Time) *HPFCEventTicketCreate {
	hetc.mutation.SetCreatedAt(t)
	return hetc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (hetc *HPFCEventTicketCreate) SetNillableCreatedAt(t *time.Time) *HPFCEventTicketCreate {
	if t != nil {
		hetc.SetCreatedAt(*t)
	}
	return hetc
}

// SetUpdatedAt sets the "updated_at" field.
func (hetc *HPFCEventTicketCreate) SetUpdatedAt(t time.Time) *HPFCEventTicketCreate {
	hetc.mutation.SetUpdatedAt(t)
	return hetc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (hetc *HPFCEventTicketCreate) SetNillableUpdatedAt(t *time.Time) *HPFCEventTicketCreate {
	if t != nil {
		hetc.SetUpdatedAt(*t)
	}
	return hetc
}

// SetNum sets the "num" field.
func (hetc *HPFCEventTicketCreate) SetNum(i int) *HPFCEventTicketCreate {
	hetc.mutation.SetNum(i)
	return hetc
}

// SetStatus sets the "status" field.
func (hetc *HPFCEventTicketCreate) SetStatus(eetas enums.HPFCEventTicketApplicationStatus) *HPFCEventTicketCreate {
	hetc.mutation.SetStatus(eetas)
	return hetc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (hetc *HPFCEventTicketCreate) SetNillableStatus(eetas *enums.HPFCEventTicketApplicationStatus) *HPFCEventTicketCreate {
	if eetas != nil {
		hetc.SetStatus(*eetas)
	}
	return hetc
}

// SetFcMemberSha256 sets the "fc_member_sha256" field.
func (hetc *HPFCEventTicketCreate) SetFcMemberSha256(s string) *HPFCEventTicketCreate {
	hetc.mutation.SetFcMemberSha256(s)
	return hetc
}

// SetApplicationTitle sets the "application_title" field.
func (hetc *HPFCEventTicketCreate) SetApplicationTitle(s string) *HPFCEventTicketCreate {
	hetc.mutation.SetApplicationTitle(s)
	return hetc
}

// SetApplicationID sets the "application_id" field.
func (hetc *HPFCEventTicketCreate) SetApplicationID(s string) *HPFCEventTicketCreate {
	hetc.mutation.SetApplicationID(s)
	return hetc
}

// SetNillableApplicationID sets the "application_id" field if the given value is not nil.
func (hetc *HPFCEventTicketCreate) SetNillableApplicationID(s *string) *HPFCEventTicketCreate {
	if s != nil {
		hetc.SetApplicationID(*s)
	}
	return hetc
}

// SetApplicationSite sets the "application_site" field.
func (hetc *HPFCEventTicketCreate) SetApplicationSite(eets enums.HPFCEventTicketSite) *HPFCEventTicketCreate {
	hetc.mutation.SetApplicationSite(eets)
	return hetc
}

// SetNillableApplicationSite sets the "application_site" field if the given value is not nil.
func (hetc *HPFCEventTicketCreate) SetNillableApplicationSite(eets *enums.HPFCEventTicketSite) *HPFCEventTicketCreate {
	if eets != nil {
		hetc.SetApplicationSite(*eets)
	}
	return hetc
}

// SetApplicationStartDate sets the "application_start_date" field.
func (hetc *HPFCEventTicketCreate) SetApplicationStartDate(t time.Time) *HPFCEventTicketCreate {
	hetc.mutation.SetApplicationStartDate(t)
	return hetc
}

// SetNillableApplicationStartDate sets the "application_start_date" field if the given value is not nil.
func (hetc *HPFCEventTicketCreate) SetNillableApplicationStartDate(t *time.Time) *HPFCEventTicketCreate {
	if t != nil {
		hetc.SetApplicationStartDate(*t)
	}
	return hetc
}

// SetApplicationDueDate sets the "application_due_date" field.
func (hetc *HPFCEventTicketCreate) SetApplicationDueDate(t time.Time) *HPFCEventTicketCreate {
	hetc.mutation.SetApplicationDueDate(t)
	return hetc
}

// SetNillableApplicationDueDate sets the "application_due_date" field if the given value is not nil.
func (hetc *HPFCEventTicketCreate) SetNillableApplicationDueDate(t *time.Time) *HPFCEventTicketCreate {
	if t != nil {
		hetc.SetApplicationDueDate(*t)
	}
	return hetc
}

// SetPaymentStartDate sets the "payment_start_date" field.
func (hetc *HPFCEventTicketCreate) SetPaymentStartDate(t time.Time) *HPFCEventTicketCreate {
	hetc.mutation.SetPaymentStartDate(t)
	return hetc
}

// SetNillablePaymentStartDate sets the "payment_start_date" field if the given value is not nil.
func (hetc *HPFCEventTicketCreate) SetNillablePaymentStartDate(t *time.Time) *HPFCEventTicketCreate {
	if t != nil {
		hetc.SetPaymentStartDate(*t)
	}
	return hetc
}

// SetPaymentDueDate sets the "payment_due_date" field.
func (hetc *HPFCEventTicketCreate) SetPaymentDueDate(t time.Time) *HPFCEventTicketCreate {
	hetc.mutation.SetPaymentDueDate(t)
	return hetc
}

// SetNillablePaymentDueDate sets the "payment_due_date" field if the given value is not nil.
func (hetc *HPFCEventTicketCreate) SetNillablePaymentDueDate(t *time.Time) *HPFCEventTicketCreate {
	if t != nil {
		hetc.SetPaymentDueDate(*t)
	}
	return hetc
}

// SetOwnerUserID sets the "owner_user_id" field.
func (hetc *HPFCEventTicketCreate) SetOwnerUserID(i int) *HPFCEventTicketCreate {
	hetc.mutation.SetOwnerUserID(i)
	return hetc
}

// SetEventID sets the "event" edge to the HPEvent entity by ID.
func (hetc *HPFCEventTicketCreate) SetEventID(id int) *HPFCEventTicketCreate {
	hetc.mutation.SetEventID(id)
	return hetc
}

// SetNillableEventID sets the "event" edge to the HPEvent entity by ID if the given value is not nil.
func (hetc *HPFCEventTicketCreate) SetNillableEventID(id *int) *HPFCEventTicketCreate {
	if id != nil {
		hetc = hetc.SetEventID(*id)
	}
	return hetc
}

// SetEvent sets the "event" edge to the HPEvent entity.
func (hetc *HPFCEventTicketCreate) SetEvent(h *HPEvent) *HPFCEventTicketCreate {
	return hetc.SetEventID(h.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (hetc *HPFCEventTicketCreate) SetUserID(id int) *HPFCEventTicketCreate {
	hetc.mutation.SetUserID(id)
	return hetc
}

// SetUser sets the "user" edge to the User entity.
func (hetc *HPFCEventTicketCreate) SetUser(u *User) *HPFCEventTicketCreate {
	return hetc.SetUserID(u.ID)
}

// Mutation returns the HPFCEventTicketMutation object of the builder.
func (hetc *HPFCEventTicketCreate) Mutation() *HPFCEventTicketMutation {
	return hetc.mutation
}

// Save creates the HPFCEventTicket in the database.
func (hetc *HPFCEventTicketCreate) Save(ctx context.Context) (*HPFCEventTicket, error) {
	if err := hetc.defaults(); err != nil {
		return nil, err
	}
	return withHooks[*HPFCEventTicket, HPFCEventTicketMutation](ctx, hetc.sqlSave, hetc.mutation, hetc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (hetc *HPFCEventTicketCreate) SaveX(ctx context.Context) *HPFCEventTicket {
	v, err := hetc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hetc *HPFCEventTicketCreate) Exec(ctx context.Context) error {
	_, err := hetc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hetc *HPFCEventTicketCreate) ExecX(ctx context.Context) {
	if err := hetc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hetc *HPFCEventTicketCreate) defaults() error {
	if _, ok := hetc.mutation.Status(); !ok {
		v := hpfceventticket.DefaultStatus
		hetc.mutation.SetStatus(v)
	}
	if _, ok := hetc.mutation.ApplicationSite(); !ok {
		v := hpfceventticket.DefaultApplicationSite
		hetc.mutation.SetApplicationSite(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (hetc *HPFCEventTicketCreate) check() error {
	if _, ok := hetc.mutation.Num(); !ok {
		return &ValidationError{Name: "num", err: errors.New(`ent: missing required field "HPFCEventTicket.num"`)}
	}
	if _, ok := hetc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "HPFCEventTicket.status"`)}
	}
	if v, ok := hetc.mutation.Status(); ok {
		if err := hpfceventticket.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "HPFCEventTicket.status": %w`, err)}
		}
	}
	if _, ok := hetc.mutation.FcMemberSha256(); !ok {
		return &ValidationError{Name: "fc_member_sha256", err: errors.New(`ent: missing required field "HPFCEventTicket.fc_member_sha256"`)}
	}
	if _, ok := hetc.mutation.ApplicationTitle(); !ok {
		return &ValidationError{Name: "application_title", err: errors.New(`ent: missing required field "HPFCEventTicket.application_title"`)}
	}
	if _, ok := hetc.mutation.ApplicationSite(); !ok {
		return &ValidationError{Name: "application_site", err: errors.New(`ent: missing required field "HPFCEventTicket.application_site"`)}
	}
	if v, ok := hetc.mutation.ApplicationSite(); ok {
		if err := hpfceventticket.ApplicationSiteValidator(v); err != nil {
			return &ValidationError{Name: "application_site", err: fmt.Errorf(`ent: validator failed for field "HPFCEventTicket.application_site": %w`, err)}
		}
	}
	if _, ok := hetc.mutation.OwnerUserID(); !ok {
		return &ValidationError{Name: "owner_user_id", err: errors.New(`ent: missing required field "HPFCEventTicket.owner_user_id"`)}
	}
	if _, ok := hetc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "HPFCEventTicket.user"`)}
	}
	return nil
}

func (hetc *HPFCEventTicketCreate) sqlSave(ctx context.Context) (*HPFCEventTicket, error) {
	if err := hetc.check(); err != nil {
		return nil, err
	}
	_node, _spec := hetc.createSpec()
	if err := sqlgraph.CreateNode(ctx, hetc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	hetc.mutation.id = &_node.ID
	hetc.mutation.done = true
	return _node, nil
}

func (hetc *HPFCEventTicketCreate) createSpec() (*HPFCEventTicket, *sqlgraph.CreateSpec) {
	var (
		_node = &HPFCEventTicket{config: hetc.config}
		_spec = sqlgraph.NewCreateSpec(hpfceventticket.Table, sqlgraph.NewFieldSpec(hpfceventticket.FieldID, field.TypeInt))
	)
	_spec.OnConflict = hetc.conflict
	if value, ok := hetc.mutation.CreatedAt(); ok {
		_spec.SetField(hpfceventticket.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := hetc.mutation.UpdatedAt(); ok {
		_spec.SetField(hpfceventticket.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := hetc.mutation.Num(); ok {
		_spec.SetField(hpfceventticket.FieldNum, field.TypeInt, value)
		_node.Num = value
	}
	if value, ok := hetc.mutation.Status(); ok {
		_spec.SetField(hpfceventticket.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := hetc.mutation.FcMemberSha256(); ok {
		_spec.SetField(hpfceventticket.FieldFcMemberSha256, field.TypeString, value)
		_node.FcMemberSha256 = value
	}
	if value, ok := hetc.mutation.ApplicationTitle(); ok {
		_spec.SetField(hpfceventticket.FieldApplicationTitle, field.TypeString, value)
		_node.ApplicationTitle = value
	}
	if value, ok := hetc.mutation.ApplicationID(); ok {
		_spec.SetField(hpfceventticket.FieldApplicationID, field.TypeString, value)
		_node.ApplicationID = &value
	}
	if value, ok := hetc.mutation.ApplicationSite(); ok {
		_spec.SetField(hpfceventticket.FieldApplicationSite, field.TypeEnum, value)
		_node.ApplicationSite = value
	}
	if value, ok := hetc.mutation.ApplicationStartDate(); ok {
		_spec.SetField(hpfceventticket.FieldApplicationStartDate, field.TypeTime, value)
		_node.ApplicationStartDate = &value
	}
	if value, ok := hetc.mutation.ApplicationDueDate(); ok {
		_spec.SetField(hpfceventticket.FieldApplicationDueDate, field.TypeTime, value)
		_node.ApplicationDueDate = &value
	}
	if value, ok := hetc.mutation.PaymentStartDate(); ok {
		_spec.SetField(hpfceventticket.FieldPaymentStartDate, field.TypeTime, value)
		_node.PaymentStartDate = &value
	}
	if value, ok := hetc.mutation.PaymentDueDate(); ok {
		_spec.SetField(hpfceventticket.FieldPaymentDueDate, field.TypeTime, value)
		_node.PaymentDueDate = &value
	}
	if nodes := hetc.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpfceventticket.EventTable,
			Columns: []string{hpfceventticket.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpevent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.hp_event_hpfc_event_tickets = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hetc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpfceventticket.UserTable,
			Columns: []string{hpfceventticket.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerUserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.HPFCEventTicket.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.HPFCEventTicketUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (hetc *HPFCEventTicketCreate) OnConflict(opts ...sql.ConflictOption) *HPFCEventTicketUpsertOne {
	hetc.conflict = opts
	return &HPFCEventTicketUpsertOne{
		create: hetc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.HPFCEventTicket.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (hetc *HPFCEventTicketCreate) OnConflictColumns(columns ...string) *HPFCEventTicketUpsertOne {
	hetc.conflict = append(hetc.conflict, sql.ConflictColumns(columns...))
	return &HPFCEventTicketUpsertOne{
		create: hetc,
	}
}

type (
	// HPFCEventTicketUpsertOne is the builder for "upsert"-ing
	//  one HPFCEventTicket node.
	HPFCEventTicketUpsertOne struct {
		create *HPFCEventTicketCreate
	}

	// HPFCEventTicketUpsert is the "OnConflict" setter.
	HPFCEventTicketUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *HPFCEventTicketUpsert) SetUpdatedAt(v time.Time) *HPFCEventTicketUpsert {
	u.Set(hpfceventticket.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *HPFCEventTicketUpsert) UpdateUpdatedAt() *HPFCEventTicketUpsert {
	u.SetExcluded(hpfceventticket.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *HPFCEventTicketUpsert) ClearUpdatedAt() *HPFCEventTicketUpsert {
	u.SetNull(hpfceventticket.FieldUpdatedAt)
	return u
}

// SetNum sets the "num" field.
func (u *HPFCEventTicketUpsert) SetNum(v int) *HPFCEventTicketUpsert {
	u.Set(hpfceventticket.FieldNum, v)
	return u
}

// UpdateNum sets the "num" field to the value that was provided on create.
func (u *HPFCEventTicketUpsert) UpdateNum() *HPFCEventTicketUpsert {
	u.SetExcluded(hpfceventticket.FieldNum)
	return u
}

// AddNum adds v to the "num" field.
func (u *HPFCEventTicketUpsert) AddNum(v int) *HPFCEventTicketUpsert {
	u.Add(hpfceventticket.FieldNum, v)
	return u
}

// SetStatus sets the "status" field.
func (u *HPFCEventTicketUpsert) SetStatus(v enums.HPFCEventTicketApplicationStatus) *HPFCEventTicketUpsert {
	u.Set(hpfceventticket.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *HPFCEventTicketUpsert) UpdateStatus() *HPFCEventTicketUpsert {
	u.SetExcluded(hpfceventticket.FieldStatus)
	return u
}

// SetFcMemberSha256 sets the "fc_member_sha256" field.
func (u *HPFCEventTicketUpsert) SetFcMemberSha256(v string) *HPFCEventTicketUpsert {
	u.Set(hpfceventticket.FieldFcMemberSha256, v)
	return u
}

// UpdateFcMemberSha256 sets the "fc_member_sha256" field to the value that was provided on create.
func (u *HPFCEventTicketUpsert) UpdateFcMemberSha256() *HPFCEventTicketUpsert {
	u.SetExcluded(hpfceventticket.FieldFcMemberSha256)
	return u
}

// SetApplicationTitle sets the "application_title" field.
func (u *HPFCEventTicketUpsert) SetApplicationTitle(v string) *HPFCEventTicketUpsert {
	u.Set(hpfceventticket.FieldApplicationTitle, v)
	return u
}

// UpdateApplicationTitle sets the "application_title" field to the value that was provided on create.
func (u *HPFCEventTicketUpsert) UpdateApplicationTitle() *HPFCEventTicketUpsert {
	u.SetExcluded(hpfceventticket.FieldApplicationTitle)
	return u
}

// SetApplicationID sets the "application_id" field.
func (u *HPFCEventTicketUpsert) SetApplicationID(v string) *HPFCEventTicketUpsert {
	u.Set(hpfceventticket.FieldApplicationID, v)
	return u
}

// UpdateApplicationID sets the "application_id" field to the value that was provided on create.
func (u *HPFCEventTicketUpsert) UpdateApplicationID() *HPFCEventTicketUpsert {
	u.SetExcluded(hpfceventticket.FieldApplicationID)
	return u
}

// ClearApplicationID clears the value of the "application_id" field.
func (u *HPFCEventTicketUpsert) ClearApplicationID() *HPFCEventTicketUpsert {
	u.SetNull(hpfceventticket.FieldApplicationID)
	return u
}

// SetApplicationSite sets the "application_site" field.
func (u *HPFCEventTicketUpsert) SetApplicationSite(v enums.HPFCEventTicketSite) *HPFCEventTicketUpsert {
	u.Set(hpfceventticket.FieldApplicationSite, v)
	return u
}

// UpdateApplicationSite sets the "application_site" field to the value that was provided on create.
func (u *HPFCEventTicketUpsert) UpdateApplicationSite() *HPFCEventTicketUpsert {
	u.SetExcluded(hpfceventticket.FieldApplicationSite)
	return u
}

// SetApplicationStartDate sets the "application_start_date" field.
func (u *HPFCEventTicketUpsert) SetApplicationStartDate(v time.Time) *HPFCEventTicketUpsert {
	u.Set(hpfceventticket.FieldApplicationStartDate, v)
	return u
}

// UpdateApplicationStartDate sets the "application_start_date" field to the value that was provided on create.
func (u *HPFCEventTicketUpsert) UpdateApplicationStartDate() *HPFCEventTicketUpsert {
	u.SetExcluded(hpfceventticket.FieldApplicationStartDate)
	return u
}

// ClearApplicationStartDate clears the value of the "application_start_date" field.
func (u *HPFCEventTicketUpsert) ClearApplicationStartDate() *HPFCEventTicketUpsert {
	u.SetNull(hpfceventticket.FieldApplicationStartDate)
	return u
}

// SetApplicationDueDate sets the "application_due_date" field.
func (u *HPFCEventTicketUpsert) SetApplicationDueDate(v time.Time) *HPFCEventTicketUpsert {
	u.Set(hpfceventticket.FieldApplicationDueDate, v)
	return u
}

// UpdateApplicationDueDate sets the "application_due_date" field to the value that was provided on create.
func (u *HPFCEventTicketUpsert) UpdateApplicationDueDate() *HPFCEventTicketUpsert {
	u.SetExcluded(hpfceventticket.FieldApplicationDueDate)
	return u
}

// ClearApplicationDueDate clears the value of the "application_due_date" field.
func (u *HPFCEventTicketUpsert) ClearApplicationDueDate() *HPFCEventTicketUpsert {
	u.SetNull(hpfceventticket.FieldApplicationDueDate)
	return u
}

// SetPaymentStartDate sets the "payment_start_date" field.
func (u *HPFCEventTicketUpsert) SetPaymentStartDate(v time.Time) *HPFCEventTicketUpsert {
	u.Set(hpfceventticket.FieldPaymentStartDate, v)
	return u
}

// UpdatePaymentStartDate sets the "payment_start_date" field to the value that was provided on create.
func (u *HPFCEventTicketUpsert) UpdatePaymentStartDate() *HPFCEventTicketUpsert {
	u.SetExcluded(hpfceventticket.FieldPaymentStartDate)
	return u
}

// ClearPaymentStartDate clears the value of the "payment_start_date" field.
func (u *HPFCEventTicketUpsert) ClearPaymentStartDate() *HPFCEventTicketUpsert {
	u.SetNull(hpfceventticket.FieldPaymentStartDate)
	return u
}

// SetPaymentDueDate sets the "payment_due_date" field.
func (u *HPFCEventTicketUpsert) SetPaymentDueDate(v time.Time) *HPFCEventTicketUpsert {
	u.Set(hpfceventticket.FieldPaymentDueDate, v)
	return u
}

// UpdatePaymentDueDate sets the "payment_due_date" field to the value that was provided on create.
func (u *HPFCEventTicketUpsert) UpdatePaymentDueDate() *HPFCEventTicketUpsert {
	u.SetExcluded(hpfceventticket.FieldPaymentDueDate)
	return u
}

// ClearPaymentDueDate clears the value of the "payment_due_date" field.
func (u *HPFCEventTicketUpsert) ClearPaymentDueDate() *HPFCEventTicketUpsert {
	u.SetNull(hpfceventticket.FieldPaymentDueDate)
	return u
}

// SetOwnerUserID sets the "owner_user_id" field.
func (u *HPFCEventTicketUpsert) SetOwnerUserID(v int) *HPFCEventTicketUpsert {
	u.Set(hpfceventticket.FieldOwnerUserID, v)
	return u
}

// UpdateOwnerUserID sets the "owner_user_id" field to the value that was provided on create.
func (u *HPFCEventTicketUpsert) UpdateOwnerUserID() *HPFCEventTicketUpsert {
	u.SetExcluded(hpfceventticket.FieldOwnerUserID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.HPFCEventTicket.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *HPFCEventTicketUpsertOne) UpdateNewValues() *HPFCEventTicketUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(hpfceventticket.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.HPFCEventTicket.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *HPFCEventTicketUpsertOne) Ignore() *HPFCEventTicketUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *HPFCEventTicketUpsertOne) DoNothing() *HPFCEventTicketUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the HPFCEventTicketCreate.OnConflict
// documentation for more info.
func (u *HPFCEventTicketUpsertOne) Update(set func(*HPFCEventTicketUpsert)) *HPFCEventTicketUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&HPFCEventTicketUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *HPFCEventTicketUpsertOne) SetUpdatedAt(v time.Time) *HPFCEventTicketUpsertOne {
	return u.Update(func(s *HPFCEventTicketUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *HPFCEventTicketUpsertOne) UpdateUpdatedAt() *HPFCEventTicketUpsertOne {
	return u.Update(func(s *HPFCEventTicketUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *HPFCEventTicketUpsertOne) ClearUpdatedAt() *HPFCEventTicketUpsertOne {
	return u.Update(func(s *HPFCEventTicketUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetNum sets the "num" field.
func (u *HPFCEventTicketUpsertOne) SetNum(v int) *HPFCEventTicketUpsertOne {
	return u.Update(func(s *HPFCEventTicketUpsert) {
		s.SetNum(v)
	})
}

// AddNum adds v to the "num" field.
func (u *HPFCEventTicketUpsertOne) AddNum(v int) *HPFCEventTicketUpsertOne {
	return u.Update(func(s *HPFCEventTicketUpsert) {
		s.AddNum(v)
	})
}

// UpdateNum sets the "num" field to the value that was provided on create.
func (u *HPFCEventTicketUpsertOne) UpdateNum() *HPFCEventTicketUpsertOne {
	return u.Update(func(s *HPFCEventTicketUpsert) {
		s.UpdateNum()
	})
}

// SetStatus sets the "status" field.
func (u *HPFCEventTicketUpsertOne) SetStatus(v enums.HPFCEventTicketApplicationStatus) *HPFCEventTicketUpsertOne {
	return u.Update(func(s *HPFCEventTicketUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *HPFCEventTicketUpsertOne) UpdateStatus() *HPFCEventTicketUpsertOne {
	return u.Update(func(s *HPFCEventTicketUpsert) {
		s.UpdateStatus()
	})
}

// SetFcMemberSha256 sets the "fc_member_sha256" field.
func (u *HPFCEventTicketUpsertOne) SetFcMemberSha256(v string) *HPFCEventTicketUpsertOne {
	return u.Update(func(s *HPFCEventTicketUpsert) {
		s.SetFcMemberSha256(v)
	})
}

// UpdateFcMemberSha256 sets the "fc_member_sha256" field to the value that was provided on create.
func (u *HPFCEventTicketUpsertOne) UpdateFcMemberSha256() *HPFCEventTicketUpsertOne {
	return u.Update(func(s *HPFCEventTicketUpsert) {
		s.UpdateFcMemberSha256()
	})
}

// SetApplicationTitle sets the "application_title" field.
func (u *HPFCEventTicketUpsertOne) SetApplicationTitle(v string) *HPFCEventTicketUpsertOne {
	return u.Update(func(s *HPFCEventTicketUpsert) {
		s.SetApplicationTitle(v)
	})
}

// UpdateApplicationTitle sets the "application_title" field to the value that was provided on create.
func (u *HPFCEventTicketUpsertOne) UpdateApplicationTitle() *HPFCEventTicketUpsertOne {
	return u.Update(func(s *HPFCEventTicketUpsert) {
		s.UpdateApplicationTitle()
	})
}

// SetApplicationID sets the "application_id" field.
func (u *HPFCEventTicketUpsertOne) SetApplicationID(v string) *HPFCEventTicketUpsertOne {
	return u.Update(func(s *HPFCEventTicketUpsert) {
		s.SetApplicationID(v)
	})
}

// UpdateApplicationID sets the "application_id" field to the value that was provided on create.
func (u *HPFCEventTicketUpsertOne) UpdateApplicationID() *HPFCEventTicketUpsertOne {
	return u.Update(func(s *HPFCEventTicketUpsert) {
		s.UpdateApplicationID()
	})
}

// ClearApplicationID clears the value of the "application_id" field.
func (u *HPFCEventTicketUpsertOne) ClearApplicationID() *HPFCEventTicketUpsertOne {
	return u.Update(func(s *HPFCEventTicketUpsert) {
		s.ClearApplicationID()
	})
}

// SetApplicationSite sets the "application_site" field.
func (u *HPFCEventTicketUpsertOne) SetApplicationSite(v enums.HPFCEventTicketSite) *HPFCEventTicketUpsertOne {
	return u.Update(func(s *HPFCEventTicketUpsert) {
		s.SetApplicationSite(v)
	})
}

// UpdateApplicationSite sets the "application_site" field to the value that was provided on create.
func (u *HPFCEventTicketUpsertOne) UpdateApplicationSite() *HPFCEventTicketUpsertOne {
	return u.Update(func(s *HPFCEventTicketUpsert) {
		s.UpdateApplicationSite()
	})
}

// SetApplicationStartDate sets the "application_start_date" field.
func (u *HPFCEventTicketUpsertOne) SetApplicationStartDate(v time.Time) *HPFCEventTicketUpsertOne {
	return u.Update(func(s *HPFCEventTicketUpsert) {
		s.SetApplicationStartDate(v)
	})
}

// UpdateApplicationStartDate sets the "application_start_date" field to the value that was provided on create.
func (u *HPFCEventTicketUpsertOne) UpdateApplicationStartDate() *HPFCEventTicketUpsertOne {
	return u.Update(func(s *HPFCEventTicketUpsert) {
		s.UpdateApplicationStartDate()
	})
}

// ClearApplicationStartDate clears the value of the "application_start_date" field.
func (u *HPFCEventTicketUpsertOne) ClearApplicationStartDate() *HPFCEventTicketUpsertOne {
	return u.Update(func(s *HPFCEventTicketUpsert) {
		s.ClearApplicationStartDate()
	})
}

// SetApplicationDueDate sets the "application_due_date" field.
func (u *HPFCEventTicketUpsertOne) SetApplicationDueDate(v time.Time) *HPFCEventTicketUpsertOne {
	return u.Update(func(s *HPFCEventTicketUpsert) {
		s.SetApplicationDueDate(v)
	})
}

// UpdateApplicationDueDate sets the "application_due_date" field to the value that was provided on create.
func (u *HPFCEventTicketUpsertOne) UpdateApplicationDueDate() *HPFCEventTicketUpsertOne {
	return u.Update(func(s *HPFCEventTicketUpsert) {
		s.UpdateApplicationDueDate()
	})
}

// ClearApplicationDueDate clears the value of the "application_due_date" field.
func (u *HPFCEventTicketUpsertOne) ClearApplicationDueDate() *HPFCEventTicketUpsertOne {
	return u.Update(func(s *HPFCEventTicketUpsert) {
		s.ClearApplicationDueDate()
	})
}

// SetPaymentStartDate sets the "payment_start_date" field.
func (u *HPFCEventTicketUpsertOne) SetPaymentStartDate(v time.Time) *HPFCEventTicketUpsertOne {
	return u.Update(func(s *HPFCEventTicketUpsert) {
		s.SetPaymentStartDate(v)
	})
}

// UpdatePaymentStartDate sets the "payment_start_date" field to the value that was provided on create.
func (u *HPFCEventTicketUpsertOne) UpdatePaymentStartDate() *HPFCEventTicketUpsertOne {
	return u.Update(func(s *HPFCEventTicketUpsert) {
		s.UpdatePaymentStartDate()
	})
}

// ClearPaymentStartDate clears the value of the "payment_start_date" field.
func (u *HPFCEventTicketUpsertOne) ClearPaymentStartDate() *HPFCEventTicketUpsertOne {
	return u.Update(func(s *HPFCEventTicketUpsert) {
		s.ClearPaymentStartDate()
	})
}

// SetPaymentDueDate sets the "payment_due_date" field.
func (u *HPFCEventTicketUpsertOne) SetPaymentDueDate(v time.Time) *HPFCEventTicketUpsertOne {
	return u.Update(func(s *HPFCEventTicketUpsert) {
		s.SetPaymentDueDate(v)
	})
}

// UpdatePaymentDueDate sets the "payment_due_date" field to the value that was provided on create.
func (u *HPFCEventTicketUpsertOne) UpdatePaymentDueDate() *HPFCEventTicketUpsertOne {
	return u.Update(func(s *HPFCEventTicketUpsert) {
		s.UpdatePaymentDueDate()
	})
}

// ClearPaymentDueDate clears the value of the "payment_due_date" field.
func (u *HPFCEventTicketUpsertOne) ClearPaymentDueDate() *HPFCEventTicketUpsertOne {
	return u.Update(func(s *HPFCEventTicketUpsert) {
		s.ClearPaymentDueDate()
	})
}

// SetOwnerUserID sets the "owner_user_id" field.
func (u *HPFCEventTicketUpsertOne) SetOwnerUserID(v int) *HPFCEventTicketUpsertOne {
	return u.Update(func(s *HPFCEventTicketUpsert) {
		s.SetOwnerUserID(v)
	})
}

// UpdateOwnerUserID sets the "owner_user_id" field to the value that was provided on create.
func (u *HPFCEventTicketUpsertOne) UpdateOwnerUserID() *HPFCEventTicketUpsertOne {
	return u.Update(func(s *HPFCEventTicketUpsert) {
		s.UpdateOwnerUserID()
	})
}

// Exec executes the query.
func (u *HPFCEventTicketUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for HPFCEventTicketCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *HPFCEventTicketUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *HPFCEventTicketUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *HPFCEventTicketUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// HPFCEventTicketCreateBulk is the builder for creating many HPFCEventTicket entities in bulk.
type HPFCEventTicketCreateBulk struct {
	config
	builders []*HPFCEventTicketCreate
	conflict []sql.ConflictOption
}

// Save creates the HPFCEventTicket entities in the database.
func (hetcb *HPFCEventTicketCreateBulk) Save(ctx context.Context) ([]*HPFCEventTicket, error) {
	specs := make([]*sqlgraph.CreateSpec, len(hetcb.builders))
	nodes := make([]*HPFCEventTicket, len(hetcb.builders))
	mutators := make([]Mutator, len(hetcb.builders))
	for i := range hetcb.builders {
		func(i int, root context.Context) {
			builder := hetcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HPFCEventTicketMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hetcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = hetcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hetcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hetcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hetcb *HPFCEventTicketCreateBulk) SaveX(ctx context.Context) []*HPFCEventTicket {
	v, err := hetcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hetcb *HPFCEventTicketCreateBulk) Exec(ctx context.Context) error {
	_, err := hetcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hetcb *HPFCEventTicketCreateBulk) ExecX(ctx context.Context) {
	if err := hetcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.HPFCEventTicket.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.HPFCEventTicketUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (hetcb *HPFCEventTicketCreateBulk) OnConflict(opts ...sql.ConflictOption) *HPFCEventTicketUpsertBulk {
	hetcb.conflict = opts
	return &HPFCEventTicketUpsertBulk{
		create: hetcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.HPFCEventTicket.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (hetcb *HPFCEventTicketCreateBulk) OnConflictColumns(columns ...string) *HPFCEventTicketUpsertBulk {
	hetcb.conflict = append(hetcb.conflict, sql.ConflictColumns(columns...))
	return &HPFCEventTicketUpsertBulk{
		create: hetcb,
	}
}

// HPFCEventTicketUpsertBulk is the builder for "upsert"-ing
// a bulk of HPFCEventTicket nodes.
type HPFCEventTicketUpsertBulk struct {
	create *HPFCEventTicketCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.HPFCEventTicket.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *HPFCEventTicketUpsertBulk) UpdateNewValues() *HPFCEventTicketUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(hpfceventticket.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.HPFCEventTicket.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *HPFCEventTicketUpsertBulk) Ignore() *HPFCEventTicketUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *HPFCEventTicketUpsertBulk) DoNothing() *HPFCEventTicketUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the HPFCEventTicketCreateBulk.OnConflict
// documentation for more info.
func (u *HPFCEventTicketUpsertBulk) Update(set func(*HPFCEventTicketUpsert)) *HPFCEventTicketUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&HPFCEventTicketUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *HPFCEventTicketUpsertBulk) SetUpdatedAt(v time.Time) *HPFCEventTicketUpsertBulk {
	return u.Update(func(s *HPFCEventTicketUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *HPFCEventTicketUpsertBulk) UpdateUpdatedAt() *HPFCEventTicketUpsertBulk {
	return u.Update(func(s *HPFCEventTicketUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *HPFCEventTicketUpsertBulk) ClearUpdatedAt() *HPFCEventTicketUpsertBulk {
	return u.Update(func(s *HPFCEventTicketUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetNum sets the "num" field.
func (u *HPFCEventTicketUpsertBulk) SetNum(v int) *HPFCEventTicketUpsertBulk {
	return u.Update(func(s *HPFCEventTicketUpsert) {
		s.SetNum(v)
	})
}

// AddNum adds v to the "num" field.
func (u *HPFCEventTicketUpsertBulk) AddNum(v int) *HPFCEventTicketUpsertBulk {
	return u.Update(func(s *HPFCEventTicketUpsert) {
		s.AddNum(v)
	})
}

// UpdateNum sets the "num" field to the value that was provided on create.
func (u *HPFCEventTicketUpsertBulk) UpdateNum() *HPFCEventTicketUpsertBulk {
	return u.Update(func(s *HPFCEventTicketUpsert) {
		s.UpdateNum()
	})
}

// SetStatus sets the "status" field.
func (u *HPFCEventTicketUpsertBulk) SetStatus(v enums.HPFCEventTicketApplicationStatus) *HPFCEventTicketUpsertBulk {
	return u.Update(func(s *HPFCEventTicketUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *HPFCEventTicketUpsertBulk) UpdateStatus() *HPFCEventTicketUpsertBulk {
	return u.Update(func(s *HPFCEventTicketUpsert) {
		s.UpdateStatus()
	})
}

// SetFcMemberSha256 sets the "fc_member_sha256" field.
func (u *HPFCEventTicketUpsertBulk) SetFcMemberSha256(v string) *HPFCEventTicketUpsertBulk {
	return u.Update(func(s *HPFCEventTicketUpsert) {
		s.SetFcMemberSha256(v)
	})
}

// UpdateFcMemberSha256 sets the "fc_member_sha256" field to the value that was provided on create.
func (u *HPFCEventTicketUpsertBulk) UpdateFcMemberSha256() *HPFCEventTicketUpsertBulk {
	return u.Update(func(s *HPFCEventTicketUpsert) {
		s.UpdateFcMemberSha256()
	})
}

// SetApplicationTitle sets the "application_title" field.
func (u *HPFCEventTicketUpsertBulk) SetApplicationTitle(v string) *HPFCEventTicketUpsertBulk {
	return u.Update(func(s *HPFCEventTicketUpsert) {
		s.SetApplicationTitle(v)
	})
}

// UpdateApplicationTitle sets the "application_title" field to the value that was provided on create.
func (u *HPFCEventTicketUpsertBulk) UpdateApplicationTitle() *HPFCEventTicketUpsertBulk {
	return u.Update(func(s *HPFCEventTicketUpsert) {
		s.UpdateApplicationTitle()
	})
}

// SetApplicationID sets the "application_id" field.
func (u *HPFCEventTicketUpsertBulk) SetApplicationID(v string) *HPFCEventTicketUpsertBulk {
	return u.Update(func(s *HPFCEventTicketUpsert) {
		s.SetApplicationID(v)
	})
}

// UpdateApplicationID sets the "application_id" field to the value that was provided on create.
func (u *HPFCEventTicketUpsertBulk) UpdateApplicationID() *HPFCEventTicketUpsertBulk {
	return u.Update(func(s *HPFCEventTicketUpsert) {
		s.UpdateApplicationID()
	})
}

// ClearApplicationID clears the value of the "application_id" field.
func (u *HPFCEventTicketUpsertBulk) ClearApplicationID() *HPFCEventTicketUpsertBulk {
	return u.Update(func(s *HPFCEventTicketUpsert) {
		s.ClearApplicationID()
	})
}

// SetApplicationSite sets the "application_site" field.
func (u *HPFCEventTicketUpsertBulk) SetApplicationSite(v enums.HPFCEventTicketSite) *HPFCEventTicketUpsertBulk {
	return u.Update(func(s *HPFCEventTicketUpsert) {
		s.SetApplicationSite(v)
	})
}

// UpdateApplicationSite sets the "application_site" field to the value that was provided on create.
func (u *HPFCEventTicketUpsertBulk) UpdateApplicationSite() *HPFCEventTicketUpsertBulk {
	return u.Update(func(s *HPFCEventTicketUpsert) {
		s.UpdateApplicationSite()
	})
}

// SetApplicationStartDate sets the "application_start_date" field.
func (u *HPFCEventTicketUpsertBulk) SetApplicationStartDate(v time.Time) *HPFCEventTicketUpsertBulk {
	return u.Update(func(s *HPFCEventTicketUpsert) {
		s.SetApplicationStartDate(v)
	})
}

// UpdateApplicationStartDate sets the "application_start_date" field to the value that was provided on create.
func (u *HPFCEventTicketUpsertBulk) UpdateApplicationStartDate() *HPFCEventTicketUpsertBulk {
	return u.Update(func(s *HPFCEventTicketUpsert) {
		s.UpdateApplicationStartDate()
	})
}

// ClearApplicationStartDate clears the value of the "application_start_date" field.
func (u *HPFCEventTicketUpsertBulk) ClearApplicationStartDate() *HPFCEventTicketUpsertBulk {
	return u.Update(func(s *HPFCEventTicketUpsert) {
		s.ClearApplicationStartDate()
	})
}

// SetApplicationDueDate sets the "application_due_date" field.
func (u *HPFCEventTicketUpsertBulk) SetApplicationDueDate(v time.Time) *HPFCEventTicketUpsertBulk {
	return u.Update(func(s *HPFCEventTicketUpsert) {
		s.SetApplicationDueDate(v)
	})
}

// UpdateApplicationDueDate sets the "application_due_date" field to the value that was provided on create.
func (u *HPFCEventTicketUpsertBulk) UpdateApplicationDueDate() *HPFCEventTicketUpsertBulk {
	return u.Update(func(s *HPFCEventTicketUpsert) {
		s.UpdateApplicationDueDate()
	})
}

// ClearApplicationDueDate clears the value of the "application_due_date" field.
func (u *HPFCEventTicketUpsertBulk) ClearApplicationDueDate() *HPFCEventTicketUpsertBulk {
	return u.Update(func(s *HPFCEventTicketUpsert) {
		s.ClearApplicationDueDate()
	})
}

// SetPaymentStartDate sets the "payment_start_date" field.
func (u *HPFCEventTicketUpsertBulk) SetPaymentStartDate(v time.Time) *HPFCEventTicketUpsertBulk {
	return u.Update(func(s *HPFCEventTicketUpsert) {
		s.SetPaymentStartDate(v)
	})
}

// UpdatePaymentStartDate sets the "payment_start_date" field to the value that was provided on create.
func (u *HPFCEventTicketUpsertBulk) UpdatePaymentStartDate() *HPFCEventTicketUpsertBulk {
	return u.Update(func(s *HPFCEventTicketUpsert) {
		s.UpdatePaymentStartDate()
	})
}

// ClearPaymentStartDate clears the value of the "payment_start_date" field.
func (u *HPFCEventTicketUpsertBulk) ClearPaymentStartDate() *HPFCEventTicketUpsertBulk {
	return u.Update(func(s *HPFCEventTicketUpsert) {
		s.ClearPaymentStartDate()
	})
}

// SetPaymentDueDate sets the "payment_due_date" field.
func (u *HPFCEventTicketUpsertBulk) SetPaymentDueDate(v time.Time) *HPFCEventTicketUpsertBulk {
	return u.Update(func(s *HPFCEventTicketUpsert) {
		s.SetPaymentDueDate(v)
	})
}

// UpdatePaymentDueDate sets the "payment_due_date" field to the value that was provided on create.
func (u *HPFCEventTicketUpsertBulk) UpdatePaymentDueDate() *HPFCEventTicketUpsertBulk {
	return u.Update(func(s *HPFCEventTicketUpsert) {
		s.UpdatePaymentDueDate()
	})
}

// ClearPaymentDueDate clears the value of the "payment_due_date" field.
func (u *HPFCEventTicketUpsertBulk) ClearPaymentDueDate() *HPFCEventTicketUpsertBulk {
	return u.Update(func(s *HPFCEventTicketUpsert) {
		s.ClearPaymentDueDate()
	})
}

// SetOwnerUserID sets the "owner_user_id" field.
func (u *HPFCEventTicketUpsertBulk) SetOwnerUserID(v int) *HPFCEventTicketUpsertBulk {
	return u.Update(func(s *HPFCEventTicketUpsert) {
		s.SetOwnerUserID(v)
	})
}

// UpdateOwnerUserID sets the "owner_user_id" field to the value that was provided on create.
func (u *HPFCEventTicketUpsertBulk) UpdateOwnerUserID() *HPFCEventTicketUpsertBulk {
	return u.Update(func(s *HPFCEventTicketUpsert) {
		s.UpdateOwnerUserID()
	})
}

// Exec executes the query.
func (u *HPFCEventTicketUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the HPFCEventTicketCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for HPFCEventTicketCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *HPFCEventTicketUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
