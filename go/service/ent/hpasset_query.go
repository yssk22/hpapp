// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yssk22/hpapp/go/service/ent/hpameblopost"
	"github.com/yssk22/hpapp/go/service/ent/hpartist"
	"github.com/yssk22/hpapp/go/service/ent/hpasset"
	"github.com/yssk22/hpapp/go/service/ent/hpigpost"
	"github.com/yssk22/hpapp/go/service/ent/hpmember"
	"github.com/yssk22/hpapp/go/service/ent/predicate"
)

// HPAssetQuery is the builder for querying HPAsset entities.
type HPAssetQuery struct {
	config
	ctx                  *QueryContext
	order                []hpasset.Order
	inters               []Interceptor
	predicates           []predicate.HPAsset
	withArtist           *HPArtistQuery
	withMembers          *HPMemberQuery
	withAmebloPosts      *HPAmebloPostQuery
	withIgPosts          *HPIgPostQuery
	withFKs              bool
	modifiers            []func(*sql.Selector)
	loadTotal            []func(context.Context, []*HPAsset) error
	withNamedMembers     map[string]*HPMemberQuery
	withNamedAmebloPosts map[string]*HPAmebloPostQuery
	withNamedIgPosts     map[string]*HPIgPostQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the HPAssetQuery builder.
func (haq *HPAssetQuery) Where(ps ...predicate.HPAsset) *HPAssetQuery {
	haq.predicates = append(haq.predicates, ps...)
	return haq
}

// Limit the number of records to be returned by this query.
func (haq *HPAssetQuery) Limit(limit int) *HPAssetQuery {
	haq.ctx.Limit = &limit
	return haq
}

// Offset to start from.
func (haq *HPAssetQuery) Offset(offset int) *HPAssetQuery {
	haq.ctx.Offset = &offset
	return haq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (haq *HPAssetQuery) Unique(unique bool) *HPAssetQuery {
	haq.ctx.Unique = &unique
	return haq
}

// Order specifies how the records should be ordered.
func (haq *HPAssetQuery) Order(o ...hpasset.Order) *HPAssetQuery {
	haq.order = append(haq.order, o...)
	return haq
}

// QueryArtist chains the current query on the "artist" edge.
func (haq *HPAssetQuery) QueryArtist() *HPArtistQuery {
	query := (&HPArtistClient{config: haq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := haq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := haq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hpasset.Table, hpasset.FieldID, selector),
			sqlgraph.To(hpartist.Table, hpartist.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hpasset.ArtistTable, hpasset.ArtistColumn),
		)
		fromU = sqlgraph.SetNeighbors(haq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMembers chains the current query on the "members" edge.
func (haq *HPAssetQuery) QueryMembers() *HPMemberQuery {
	query := (&HPMemberClient{config: haq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := haq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := haq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hpasset.Table, hpasset.FieldID, selector),
			sqlgraph.To(hpmember.Table, hpmember.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, hpasset.MembersTable, hpasset.MembersPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(haq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAmebloPosts chains the current query on the "ameblo_posts" edge.
func (haq *HPAssetQuery) QueryAmebloPosts() *HPAmebloPostQuery {
	query := (&HPAmebloPostClient{config: haq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := haq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := haq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hpasset.Table, hpasset.FieldID, selector),
			sqlgraph.To(hpameblopost.Table, hpameblopost.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, hpasset.AmebloPostsTable, hpasset.AmebloPostsColumn),
		)
		fromU = sqlgraph.SetNeighbors(haq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryIgPosts chains the current query on the "ig_posts" edge.
func (haq *HPAssetQuery) QueryIgPosts() *HPIgPostQuery {
	query := (&HPIgPostClient{config: haq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := haq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := haq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hpasset.Table, hpasset.FieldID, selector),
			sqlgraph.To(hpigpost.Table, hpigpost.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, hpasset.IgPostsTable, hpasset.IgPostsColumn),
		)
		fromU = sqlgraph.SetNeighbors(haq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first HPAsset entity from the query.
// Returns a *NotFoundError when no HPAsset was found.
func (haq *HPAssetQuery) First(ctx context.Context) (*HPAsset, error) {
	nodes, err := haq.Limit(1).All(setContextOp(ctx, haq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{hpasset.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (haq *HPAssetQuery) FirstX(ctx context.Context) *HPAsset {
	node, err := haq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first HPAsset ID from the query.
// Returns a *NotFoundError when no HPAsset ID was found.
func (haq *HPAssetQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = haq.Limit(1).IDs(setContextOp(ctx, haq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{hpasset.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (haq *HPAssetQuery) FirstIDX(ctx context.Context) int {
	id, err := haq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single HPAsset entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one HPAsset entity is found.
// Returns a *NotFoundError when no HPAsset entities are found.
func (haq *HPAssetQuery) Only(ctx context.Context) (*HPAsset, error) {
	nodes, err := haq.Limit(2).All(setContextOp(ctx, haq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{hpasset.Label}
	default:
		return nil, &NotSingularError{hpasset.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (haq *HPAssetQuery) OnlyX(ctx context.Context) *HPAsset {
	node, err := haq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only HPAsset ID in the query.
// Returns a *NotSingularError when more than one HPAsset ID is found.
// Returns a *NotFoundError when no entities are found.
func (haq *HPAssetQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = haq.Limit(2).IDs(setContextOp(ctx, haq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{hpasset.Label}
	default:
		err = &NotSingularError{hpasset.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (haq *HPAssetQuery) OnlyIDX(ctx context.Context) int {
	id, err := haq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of HPAssets.
func (haq *HPAssetQuery) All(ctx context.Context) ([]*HPAsset, error) {
	ctx = setContextOp(ctx, haq.ctx, "All")
	if err := haq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*HPAsset, *HPAssetQuery]()
	return withInterceptors[[]*HPAsset](ctx, haq, qr, haq.inters)
}

// AllX is like All, but panics if an error occurs.
func (haq *HPAssetQuery) AllX(ctx context.Context) []*HPAsset {
	nodes, err := haq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of HPAsset IDs.
func (haq *HPAssetQuery) IDs(ctx context.Context) (ids []int, err error) {
	if haq.ctx.Unique == nil && haq.path != nil {
		haq.Unique(true)
	}
	ctx = setContextOp(ctx, haq.ctx, "IDs")
	if err = haq.Select(hpasset.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (haq *HPAssetQuery) IDsX(ctx context.Context) []int {
	ids, err := haq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (haq *HPAssetQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, haq.ctx, "Count")
	if err := haq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, haq, querierCount[*HPAssetQuery](), haq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (haq *HPAssetQuery) CountX(ctx context.Context) int {
	count, err := haq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (haq *HPAssetQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, haq.ctx, "Exist")
	switch _, err := haq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (haq *HPAssetQuery) ExistX(ctx context.Context) bool {
	exist, err := haq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the HPAssetQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (haq *HPAssetQuery) Clone() *HPAssetQuery {
	if haq == nil {
		return nil
	}
	return &HPAssetQuery{
		config:          haq.config,
		ctx:             haq.ctx.Clone(),
		order:           append([]hpasset.Order{}, haq.order...),
		inters:          append([]Interceptor{}, haq.inters...),
		predicates:      append([]predicate.HPAsset{}, haq.predicates...),
		withArtist:      haq.withArtist.Clone(),
		withMembers:     haq.withMembers.Clone(),
		withAmebloPosts: haq.withAmebloPosts.Clone(),
		withIgPosts:     haq.withIgPosts.Clone(),
		// clone intermediate query.
		sql:  haq.sql.Clone(),
		path: haq.path,
	}
}

// WithArtist tells the query-builder to eager-load the nodes that are connected to
// the "artist" edge. The optional arguments are used to configure the query builder of the edge.
func (haq *HPAssetQuery) WithArtist(opts ...func(*HPArtistQuery)) *HPAssetQuery {
	query := (&HPArtistClient{config: haq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	haq.withArtist = query
	return haq
}

// WithMembers tells the query-builder to eager-load the nodes that are connected to
// the "members" edge. The optional arguments are used to configure the query builder of the edge.
func (haq *HPAssetQuery) WithMembers(opts ...func(*HPMemberQuery)) *HPAssetQuery {
	query := (&HPMemberClient{config: haq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	haq.withMembers = query
	return haq
}

// WithAmebloPosts tells the query-builder to eager-load the nodes that are connected to
// the "ameblo_posts" edge. The optional arguments are used to configure the query builder of the edge.
func (haq *HPAssetQuery) WithAmebloPosts(opts ...func(*HPAmebloPostQuery)) *HPAssetQuery {
	query := (&HPAmebloPostClient{config: haq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	haq.withAmebloPosts = query
	return haq
}

// WithIgPosts tells the query-builder to eager-load the nodes that are connected to
// the "ig_posts" edge. The optional arguments are used to configure the query builder of the edge.
func (haq *HPAssetQuery) WithIgPosts(opts ...func(*HPIgPostQuery)) *HPAssetQuery {
	query := (&HPIgPostClient{config: haq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	haq.withIgPosts = query
	return haq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Key string `json:"key,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.HPAsset.Query().
//		GroupBy(hpasset.FieldKey).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (haq *HPAssetQuery) GroupBy(field string, fields ...string) *HPAssetGroupBy {
	haq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &HPAssetGroupBy{build: haq}
	grbuild.flds = &haq.ctx.Fields
	grbuild.label = hpasset.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Key string `json:"key,omitempty"`
//	}
//
//	client.HPAsset.Query().
//		Select(hpasset.FieldKey).
//		Scan(ctx, &v)
//
func (haq *HPAssetQuery) Select(fields ...string) *HPAssetSelect {
	haq.ctx.Fields = append(haq.ctx.Fields, fields...)
	sbuild := &HPAssetSelect{HPAssetQuery: haq}
	sbuild.label = hpasset.Label
	sbuild.flds, sbuild.scan = &haq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a HPAssetSelect configured with the given aggregations.
func (haq *HPAssetQuery) Aggregate(fns ...AggregateFunc) *HPAssetSelect {
	return haq.Select().Aggregate(fns...)
}

func (haq *HPAssetQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range haq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, haq); err != nil {
				return err
			}
		}
	}
	for _, f := range haq.ctx.Fields {
		if !hpasset.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if haq.path != nil {
		prev, err := haq.path(ctx)
		if err != nil {
			return err
		}
		haq.sql = prev
	}
	return nil
}

func (haq *HPAssetQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*HPAsset, error) {
	var (
		nodes       = []*HPAsset{}
		withFKs     = haq.withFKs
		_spec       = haq.querySpec()
		loadedTypes = [4]bool{
			haq.withArtist != nil,
			haq.withMembers != nil,
			haq.withAmebloPosts != nil,
			haq.withIgPosts != nil,
		}
	)
	if haq.withArtist != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, hpasset.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*HPAsset).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &HPAsset{config: haq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(haq.modifiers) > 0 {
		_spec.Modifiers = haq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, haq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := haq.withArtist; query != nil {
		if err := haq.loadArtist(ctx, query, nodes, nil,
			func(n *HPAsset, e *HPArtist) { n.Edges.Artist = e }); err != nil {
			return nil, err
		}
	}
	if query := haq.withMembers; query != nil {
		if err := haq.loadMembers(ctx, query, nodes,
			func(n *HPAsset) { n.Edges.Members = []*HPMember{} },
			func(n *HPAsset, e *HPMember) { n.Edges.Members = append(n.Edges.Members, e) }); err != nil {
			return nil, err
		}
	}
	if query := haq.withAmebloPosts; query != nil {
		if err := haq.loadAmebloPosts(ctx, query, nodes,
			func(n *HPAsset) { n.Edges.AmebloPosts = []*HPAmebloPost{} },
			func(n *HPAsset, e *HPAmebloPost) { n.Edges.AmebloPosts = append(n.Edges.AmebloPosts, e) }); err != nil {
			return nil, err
		}
	}
	if query := haq.withIgPosts; query != nil {
		if err := haq.loadIgPosts(ctx, query, nodes,
			func(n *HPAsset) { n.Edges.IgPosts = []*HPIgPost{} },
			func(n *HPAsset, e *HPIgPost) { n.Edges.IgPosts = append(n.Edges.IgPosts, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range haq.withNamedMembers {
		if err := haq.loadMembers(ctx, query, nodes,
			func(n *HPAsset) { n.appendNamedMembers(name) },
			func(n *HPAsset, e *HPMember) { n.appendNamedMembers(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range haq.withNamedAmebloPosts {
		if err := haq.loadAmebloPosts(ctx, query, nodes,
			func(n *HPAsset) { n.appendNamedAmebloPosts(name) },
			func(n *HPAsset, e *HPAmebloPost) { n.appendNamedAmebloPosts(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range haq.withNamedIgPosts {
		if err := haq.loadIgPosts(ctx, query, nodes,
			func(n *HPAsset) { n.appendNamedIgPosts(name) },
			func(n *HPAsset, e *HPIgPost) { n.appendNamedIgPosts(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range haq.loadTotal {
		if err := haq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (haq *HPAssetQuery) loadArtist(ctx context.Context, query *HPArtistQuery, nodes []*HPAsset, init func(*HPAsset), assign func(*HPAsset, *HPArtist)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*HPAsset)
	for i := range nodes {
		if nodes[i].hp_artist_assets == nil {
			continue
		}
		fk := *nodes[i].hp_artist_assets
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(hpartist.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "hp_artist_assets" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (haq *HPAssetQuery) loadMembers(ctx context.Context, query *HPMemberQuery, nodes []*HPAsset, init func(*HPAsset), assign func(*HPAsset, *HPMember)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*HPAsset)
	nids := make(map[int]map[*HPAsset]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(hpasset.MembersTable)
		s.Join(joinT).On(s.C(hpmember.FieldID), joinT.C(hpasset.MembersPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(hpasset.MembersPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(hpasset.MembersPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*HPAsset]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*HPMember](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "members" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (haq *HPAssetQuery) loadAmebloPosts(ctx context.Context, query *HPAmebloPostQuery, nodes []*HPAsset, init func(*HPAsset), assign func(*HPAsset, *HPAmebloPost)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*HPAsset)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.HPAmebloPost(func(s *sql.Selector) {
		s.Where(sql.InValues(hpasset.AmebloPostsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.hp_asset_ameblo_posts
		if fk == nil {
			return fmt.Errorf(`foreign-key "hp_asset_ameblo_posts" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "hp_asset_ameblo_posts" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (haq *HPAssetQuery) loadIgPosts(ctx context.Context, query *HPIgPostQuery, nodes []*HPAsset, init func(*HPAsset), assign func(*HPAsset, *HPIgPost)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*HPAsset)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.HPIgPost(func(s *sql.Selector) {
		s.Where(sql.InValues(hpasset.IgPostsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.hp_asset_ig_posts
		if fk == nil {
			return fmt.Errorf(`foreign-key "hp_asset_ig_posts" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "hp_asset_ig_posts" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (haq *HPAssetQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := haq.querySpec()
	if len(haq.modifiers) > 0 {
		_spec.Modifiers = haq.modifiers
	}
	_spec.Node.Columns = haq.ctx.Fields
	if len(haq.ctx.Fields) > 0 {
		_spec.Unique = haq.ctx.Unique != nil && *haq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, haq.driver, _spec)
}

func (haq *HPAssetQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(hpasset.Table, hpasset.Columns, sqlgraph.NewFieldSpec(hpasset.FieldID, field.TypeInt))
	_spec.From = haq.sql
	if unique := haq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if haq.path != nil {
		_spec.Unique = true
	}
	if fields := haq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hpasset.FieldID)
		for i := range fields {
			if fields[i] != hpasset.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := haq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := haq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := haq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := haq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (haq *HPAssetQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(haq.driver.Dialect())
	t1 := builder.Table(hpasset.Table)
	columns := haq.ctx.Fields
	if len(columns) == 0 {
		columns = hpasset.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if haq.sql != nil {
		selector = haq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if haq.ctx.Unique != nil && *haq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range haq.predicates {
		p(selector)
	}
	for _, p := range haq.order {
		p(selector)
	}
	if offset := haq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := haq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedMembers tells the query-builder to eager-load the nodes that are connected to the "members"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (haq *HPAssetQuery) WithNamedMembers(name string, opts ...func(*HPMemberQuery)) *HPAssetQuery {
	query := (&HPMemberClient{config: haq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if haq.withNamedMembers == nil {
		haq.withNamedMembers = make(map[string]*HPMemberQuery)
	}
	haq.withNamedMembers[name] = query
	return haq
}

// WithNamedAmebloPosts tells the query-builder to eager-load the nodes that are connected to the "ameblo_posts"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (haq *HPAssetQuery) WithNamedAmebloPosts(name string, opts ...func(*HPAmebloPostQuery)) *HPAssetQuery {
	query := (&HPAmebloPostClient{config: haq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if haq.withNamedAmebloPosts == nil {
		haq.withNamedAmebloPosts = make(map[string]*HPAmebloPostQuery)
	}
	haq.withNamedAmebloPosts[name] = query
	return haq
}

// WithNamedIgPosts tells the query-builder to eager-load the nodes that are connected to the "ig_posts"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (haq *HPAssetQuery) WithNamedIgPosts(name string, opts ...func(*HPIgPostQuery)) *HPAssetQuery {
	query := (&HPIgPostClient{config: haq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if haq.withNamedIgPosts == nil {
		haq.withNamedIgPosts = make(map[string]*HPIgPostQuery)
	}
	haq.withNamedIgPosts[name] = query
	return haq
}

// HPAssetGroupBy is the group-by builder for HPAsset entities.
type HPAssetGroupBy struct {
	selector
	build *HPAssetQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (hagb *HPAssetGroupBy) Aggregate(fns ...AggregateFunc) *HPAssetGroupBy {
	hagb.fns = append(hagb.fns, fns...)
	return hagb
}

// Scan applies the selector query and scans the result into the given value.
func (hagb *HPAssetGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, hagb.build.ctx, "GroupBy")
	if err := hagb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*HPAssetQuery, *HPAssetGroupBy](ctx, hagb.build, hagb, hagb.build.inters, v)
}

func (hagb *HPAssetGroupBy) sqlScan(ctx context.Context, root *HPAssetQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(hagb.fns))
	for _, fn := range hagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*hagb.flds)+len(hagb.fns))
		for _, f := range *hagb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*hagb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := hagb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// HPAssetSelect is the builder for selecting fields of HPAsset entities.
type HPAssetSelect struct {
	*HPAssetQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (has *HPAssetSelect) Aggregate(fns ...AggregateFunc) *HPAssetSelect {
	has.fns = append(has.fns, fns...)
	return has
}

// Scan applies the selector query and scans the result into the given value.
func (has *HPAssetSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, has.ctx, "Select")
	if err := has.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*HPAssetQuery, *HPAssetSelect](ctx, has.HPAssetQuery, has, has.inters, v)
}

func (has *HPAssetSelect) sqlScan(ctx context.Context, root *HPAssetQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(has.fns))
	for _, fn := range has.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*has.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := has.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
