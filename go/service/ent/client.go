// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/yssk22/hpapp/go/service/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/yssk22/hpapp/go/service/ent/auth"
	"github.com/yssk22/hpapp/go/service/ent/hpameblopost"
	"github.com/yssk22/hpapp/go/service/ent/hpartist"
	"github.com/yssk22/hpapp/go/service/ent/hpasset"
	"github.com/yssk22/hpapp/go/service/ent/hpblob"
	"github.com/yssk22/hpapp/go/service/ent/hpelineupmallitem"
	"github.com/yssk22/hpapp/go/service/ent/hpelineupmallitempurchasehistory"
	"github.com/yssk22/hpapp/go/service/ent/hpevent"
	"github.com/yssk22/hpapp/go/service/ent/hpfceventticket"
	"github.com/yssk22/hpapp/go/service/ent/hpfeeditem"
	"github.com/yssk22/hpapp/go/service/ent/hpfollow"
	"github.com/yssk22/hpapp/go/service/ent/hpigpost"
	"github.com/yssk22/hpapp/go/service/ent/hpmember"
	"github.com/yssk22/hpapp/go/service/ent/hpsorthistory"
	"github.com/yssk22/hpapp/go/service/ent/hpviewhistory"
	"github.com/yssk22/hpapp/go/service/ent/testent"
	"github.com/yssk22/hpapp/go/service/ent/user"
	"github.com/yssk22/hpapp/go/service/ent/usernotificationlog"
	"github.com/yssk22/hpapp/go/service/ent/usernotificationsetting"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Auth is the client for interacting with the Auth builders.
	Auth *AuthClient
	// HPAmebloPost is the client for interacting with the HPAmebloPost builders.
	HPAmebloPost *HPAmebloPostClient
	// HPArtist is the client for interacting with the HPArtist builders.
	HPArtist *HPArtistClient
	// HPAsset is the client for interacting with the HPAsset builders.
	HPAsset *HPAssetClient
	// HPBlob is the client for interacting with the HPBlob builders.
	HPBlob *HPBlobClient
	// HPElineupMallItem is the client for interacting with the HPElineupMallItem builders.
	HPElineupMallItem *HPElineupMallItemClient
	// HPElineupMallItemPurchaseHistory is the client for interacting with the HPElineupMallItemPurchaseHistory builders.
	HPElineupMallItemPurchaseHistory *HPElineupMallItemPurchaseHistoryClient
	// HPEvent is the client for interacting with the HPEvent builders.
	HPEvent *HPEventClient
	// HPFCEventTicket is the client for interacting with the HPFCEventTicket builders.
	HPFCEventTicket *HPFCEventTicketClient
	// HPFeedItem is the client for interacting with the HPFeedItem builders.
	HPFeedItem *HPFeedItemClient
	// HPFollow is the client for interacting with the HPFollow builders.
	HPFollow *HPFollowClient
	// HPIgPost is the client for interacting with the HPIgPost builders.
	HPIgPost *HPIgPostClient
	// HPMember is the client for interacting with the HPMember builders.
	HPMember *HPMemberClient
	// HPSortHistory is the client for interacting with the HPSortHistory builders.
	HPSortHistory *HPSortHistoryClient
	// HPViewHistory is the client for interacting with the HPViewHistory builders.
	HPViewHistory *HPViewHistoryClient
	// TestEnt is the client for interacting with the TestEnt builders.
	TestEnt *TestEntClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserNotificationLog is the client for interacting with the UserNotificationLog builders.
	UserNotificationLog *UserNotificationLogClient
	// UserNotificationSetting is the client for interacting with the UserNotificationSetting builders.
	UserNotificationSetting *UserNotificationSettingClient
	// additional fields for node api
	tables tables
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Auth = NewAuthClient(c.config)
	c.HPAmebloPost = NewHPAmebloPostClient(c.config)
	c.HPArtist = NewHPArtistClient(c.config)
	c.HPAsset = NewHPAssetClient(c.config)
	c.HPBlob = NewHPBlobClient(c.config)
	c.HPElineupMallItem = NewHPElineupMallItemClient(c.config)
	c.HPElineupMallItemPurchaseHistory = NewHPElineupMallItemPurchaseHistoryClient(c.config)
	c.HPEvent = NewHPEventClient(c.config)
	c.HPFCEventTicket = NewHPFCEventTicketClient(c.config)
	c.HPFeedItem = NewHPFeedItemClient(c.config)
	c.HPFollow = NewHPFollowClient(c.config)
	c.HPIgPost = NewHPIgPostClient(c.config)
	c.HPMember = NewHPMemberClient(c.config)
	c.HPSortHistory = NewHPSortHistoryClient(c.config)
	c.HPViewHistory = NewHPViewHistoryClient(c.config)
	c.TestEnt = NewTestEntClient(c.config)
	c.User = NewUserClient(c.config)
	c.UserNotificationLog = NewUserNotificationLogClient(c.config)
	c.UserNotificationSetting = NewUserNotificationSettingClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                              ctx,
		config:                           cfg,
		Auth:                             NewAuthClient(cfg),
		HPAmebloPost:                     NewHPAmebloPostClient(cfg),
		HPArtist:                         NewHPArtistClient(cfg),
		HPAsset:                          NewHPAssetClient(cfg),
		HPBlob:                           NewHPBlobClient(cfg),
		HPElineupMallItem:                NewHPElineupMallItemClient(cfg),
		HPElineupMallItemPurchaseHistory: NewHPElineupMallItemPurchaseHistoryClient(cfg),
		HPEvent:                          NewHPEventClient(cfg),
		HPFCEventTicket:                  NewHPFCEventTicketClient(cfg),
		HPFeedItem:                       NewHPFeedItemClient(cfg),
		HPFollow:                         NewHPFollowClient(cfg),
		HPIgPost:                         NewHPIgPostClient(cfg),
		HPMember:                         NewHPMemberClient(cfg),
		HPSortHistory:                    NewHPSortHistoryClient(cfg),
		HPViewHistory:                    NewHPViewHistoryClient(cfg),
		TestEnt:                          NewTestEntClient(cfg),
		User:                             NewUserClient(cfg),
		UserNotificationLog:              NewUserNotificationLogClient(cfg),
		UserNotificationSetting:          NewUserNotificationSettingClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                              ctx,
		config:                           cfg,
		Auth:                             NewAuthClient(cfg),
		HPAmebloPost:                     NewHPAmebloPostClient(cfg),
		HPArtist:                         NewHPArtistClient(cfg),
		HPAsset:                          NewHPAssetClient(cfg),
		HPBlob:                           NewHPBlobClient(cfg),
		HPElineupMallItem:                NewHPElineupMallItemClient(cfg),
		HPElineupMallItemPurchaseHistory: NewHPElineupMallItemPurchaseHistoryClient(cfg),
		HPEvent:                          NewHPEventClient(cfg),
		HPFCEventTicket:                  NewHPFCEventTicketClient(cfg),
		HPFeedItem:                       NewHPFeedItemClient(cfg),
		HPFollow:                         NewHPFollowClient(cfg),
		HPIgPost:                         NewHPIgPostClient(cfg),
		HPMember:                         NewHPMemberClient(cfg),
		HPSortHistory:                    NewHPSortHistoryClient(cfg),
		HPViewHistory:                    NewHPViewHistoryClient(cfg),
		TestEnt:                          NewTestEntClient(cfg),
		User:                             NewUserClient(cfg),
		UserNotificationLog:              NewUserNotificationLogClient(cfg),
		UserNotificationSetting:          NewUserNotificationSettingClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Auth.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Auth, c.HPAmebloPost, c.HPArtist, c.HPAsset, c.HPBlob, c.HPElineupMallItem,
		c.HPElineupMallItemPurchaseHistory, c.HPEvent, c.HPFCEventTicket, c.HPFeedItem,
		c.HPFollow, c.HPIgPost, c.HPMember, c.HPSortHistory, c.HPViewHistory,
		c.TestEnt, c.User, c.UserNotificationLog, c.UserNotificationSetting,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Auth, c.HPAmebloPost, c.HPArtist, c.HPAsset, c.HPBlob, c.HPElineupMallItem,
		c.HPElineupMallItemPurchaseHistory, c.HPEvent, c.HPFCEventTicket, c.HPFeedItem,
		c.HPFollow, c.HPIgPost, c.HPMember, c.HPSortHistory, c.HPViewHistory,
		c.TestEnt, c.User, c.UserNotificationLog, c.UserNotificationSetting,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AuthMutation:
		return c.Auth.mutate(ctx, m)
	case *HPAmebloPostMutation:
		return c.HPAmebloPost.mutate(ctx, m)
	case *HPArtistMutation:
		return c.HPArtist.mutate(ctx, m)
	case *HPAssetMutation:
		return c.HPAsset.mutate(ctx, m)
	case *HPBlobMutation:
		return c.HPBlob.mutate(ctx, m)
	case *HPElineupMallItemMutation:
		return c.HPElineupMallItem.mutate(ctx, m)
	case *HPElineupMallItemPurchaseHistoryMutation:
		return c.HPElineupMallItemPurchaseHistory.mutate(ctx, m)
	case *HPEventMutation:
		return c.HPEvent.mutate(ctx, m)
	case *HPFCEventTicketMutation:
		return c.HPFCEventTicket.mutate(ctx, m)
	case *HPFeedItemMutation:
		return c.HPFeedItem.mutate(ctx, m)
	case *HPFollowMutation:
		return c.HPFollow.mutate(ctx, m)
	case *HPIgPostMutation:
		return c.HPIgPost.mutate(ctx, m)
	case *HPMemberMutation:
		return c.HPMember.mutate(ctx, m)
	case *HPSortHistoryMutation:
		return c.HPSortHistory.mutate(ctx, m)
	case *HPViewHistoryMutation:
		return c.HPViewHistory.mutate(ctx, m)
	case *TestEntMutation:
		return c.TestEnt.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *UserNotificationLogMutation:
		return c.UserNotificationLog.mutate(ctx, m)
	case *UserNotificationSettingMutation:
		return c.UserNotificationSetting.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AuthClient is a client for the Auth schema.
type AuthClient struct {
	config
}

// NewAuthClient returns a client for the Auth from the given config.
func NewAuthClient(c config) *AuthClient {
	return &AuthClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `auth.Hooks(f(g(h())))`.
func (c *AuthClient) Use(hooks ...Hook) {
	c.hooks.Auth = append(c.hooks.Auth, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `auth.Intercept(f(g(h())))`.
func (c *AuthClient) Intercept(interceptors ...Interceptor) {
	c.inters.Auth = append(c.inters.Auth, interceptors...)
}

// Create returns a builder for creating a Auth entity.
func (c *AuthClient) Create() *AuthCreate {
	mutation := newAuthMutation(c.config, OpCreate)
	return &AuthCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Auth entities.
func (c *AuthClient) CreateBulk(builders ...*AuthCreate) *AuthCreateBulk {
	return &AuthCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Auth.
func (c *AuthClient) Update() *AuthUpdate {
	mutation := newAuthMutation(c.config, OpUpdate)
	return &AuthUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AuthClient) UpdateOne(a *Auth) *AuthUpdateOne {
	mutation := newAuthMutation(c.config, OpUpdateOne, withAuth(a))
	return &AuthUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AuthClient) UpdateOneID(id int) *AuthUpdateOne {
	mutation := newAuthMutation(c.config, OpUpdateOne, withAuthID(id))
	return &AuthUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Auth.
func (c *AuthClient) Delete() *AuthDelete {
	mutation := newAuthMutation(c.config, OpDelete)
	return &AuthDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AuthClient) DeleteOne(a *Auth) *AuthDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AuthClient) DeleteOneID(id int) *AuthDeleteOne {
	builder := c.Delete().Where(auth.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AuthDeleteOne{builder}
}

// Query returns a query builder for Auth.
func (c *AuthClient) Query() *AuthQuery {
	return &AuthQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAuth},
		inters: c.Interceptors(),
	}
}

// Get returns a Auth entity by its id.
func (c *AuthClient) Get(ctx context.Context, id int) (*Auth, error) {
	return c.Query().Where(auth.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AuthClient) GetX(ctx context.Context, id int) *Auth {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Auth.
func (c *AuthClient) QueryUser(a *Auth) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(auth.Table, auth.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, auth.UserTable, auth.UserColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AuthClient) Hooks() []Hook {
	hooks := c.hooks.Auth
	return append(hooks[:len(hooks):len(hooks)], auth.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *AuthClient) Interceptors() []Interceptor {
	return c.inters.Auth
}

func (c *AuthClient) mutate(ctx context.Context, m *AuthMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AuthCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AuthUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AuthUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AuthDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Auth mutation op: %q", m.Op())
	}
}

// HPAmebloPostClient is a client for the HPAmebloPost schema.
type HPAmebloPostClient struct {
	config
}

// NewHPAmebloPostClient returns a client for the HPAmebloPost from the given config.
func NewHPAmebloPostClient(c config) *HPAmebloPostClient {
	return &HPAmebloPostClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `hpameblopost.Hooks(f(g(h())))`.
func (c *HPAmebloPostClient) Use(hooks ...Hook) {
	c.hooks.HPAmebloPost = append(c.hooks.HPAmebloPost, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `hpameblopost.Intercept(f(g(h())))`.
func (c *HPAmebloPostClient) Intercept(interceptors ...Interceptor) {
	c.inters.HPAmebloPost = append(c.inters.HPAmebloPost, interceptors...)
}

// Create returns a builder for creating a HPAmebloPost entity.
func (c *HPAmebloPostClient) Create() *HPAmebloPostCreate {
	mutation := newHPAmebloPostMutation(c.config, OpCreate)
	return &HPAmebloPostCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of HPAmebloPost entities.
func (c *HPAmebloPostClient) CreateBulk(builders ...*HPAmebloPostCreate) *HPAmebloPostCreateBulk {
	return &HPAmebloPostCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for HPAmebloPost.
func (c *HPAmebloPostClient) Update() *HPAmebloPostUpdate {
	mutation := newHPAmebloPostMutation(c.config, OpUpdate)
	return &HPAmebloPostUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HPAmebloPostClient) UpdateOne(hap *HPAmebloPost) *HPAmebloPostUpdateOne {
	mutation := newHPAmebloPostMutation(c.config, OpUpdateOne, withHPAmebloPost(hap))
	return &HPAmebloPostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HPAmebloPostClient) UpdateOneID(id int) *HPAmebloPostUpdateOne {
	mutation := newHPAmebloPostMutation(c.config, OpUpdateOne, withHPAmebloPostID(id))
	return &HPAmebloPostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for HPAmebloPost.
func (c *HPAmebloPostClient) Delete() *HPAmebloPostDelete {
	mutation := newHPAmebloPostMutation(c.config, OpDelete)
	return &HPAmebloPostDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *HPAmebloPostClient) DeleteOne(hap *HPAmebloPost) *HPAmebloPostDeleteOne {
	return c.DeleteOneID(hap.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *HPAmebloPostClient) DeleteOneID(id int) *HPAmebloPostDeleteOne {
	builder := c.Delete().Where(hpameblopost.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HPAmebloPostDeleteOne{builder}
}

// Query returns a query builder for HPAmebloPost.
func (c *HPAmebloPostClient) Query() *HPAmebloPostQuery {
	return &HPAmebloPostQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeHPAmebloPost},
		inters: c.Interceptors(),
	}
}

// Get returns a HPAmebloPost entity by its id.
func (c *HPAmebloPostClient) Get(ctx context.Context, id int) (*HPAmebloPost, error) {
	return c.Query().Where(hpameblopost.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HPAmebloPostClient) GetX(ctx context.Context, id int) *HPAmebloPost {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwnerArtist queries the owner_artist edge of a HPAmebloPost.
func (c *HPAmebloPostClient) QueryOwnerArtist(hap *HPAmebloPost) *HPArtistQuery {
	query := (&HPArtistClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hap.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hpameblopost.Table, hpameblopost.FieldID, id),
			sqlgraph.To(hpartist.Table, hpartist.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hpameblopost.OwnerArtistTable, hpameblopost.OwnerArtistColumn),
		)
		fromV = sqlgraph.Neighbors(hap.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOwnerMember queries the owner_member edge of a HPAmebloPost.
func (c *HPAmebloPostClient) QueryOwnerMember(hap *HPAmebloPost) *HPMemberQuery {
	query := (&HPMemberClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hap.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hpameblopost.Table, hpameblopost.FieldID, id),
			sqlgraph.To(hpmember.Table, hpmember.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hpameblopost.OwnerMemberTable, hpameblopost.OwnerMemberColumn),
		)
		fromV = sqlgraph.Neighbors(hap.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTaggedArtists queries the tagged_artists edge of a HPAmebloPost.
func (c *HPAmebloPostClient) QueryTaggedArtists(hap *HPAmebloPost) *HPArtistQuery {
	query := (&HPArtistClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hap.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hpameblopost.Table, hpameblopost.FieldID, id),
			sqlgraph.To(hpartist.Table, hpartist.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, hpameblopost.TaggedArtistsTable, hpameblopost.TaggedArtistsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(hap.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTaggedMembers queries the tagged_members edge of a HPAmebloPost.
func (c *HPAmebloPostClient) QueryTaggedMembers(hap *HPAmebloPost) *HPMemberQuery {
	query := (&HPMemberClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hap.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hpameblopost.Table, hpameblopost.FieldID, id),
			sqlgraph.To(hpmember.Table, hpmember.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, hpameblopost.TaggedMembersTable, hpameblopost.TaggedMembersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(hap.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAsset queries the asset edge of a HPAmebloPost.
func (c *HPAmebloPostClient) QueryAsset(hap *HPAmebloPost) *HPAssetQuery {
	query := (&HPAssetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hap.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hpameblopost.Table, hpameblopost.FieldID, id),
			sqlgraph.To(hpasset.Table, hpasset.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hpameblopost.AssetTable, hpameblopost.AssetColumn),
		)
		fromV = sqlgraph.Neighbors(hap.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBlobs queries the blobs edge of a HPAmebloPost.
func (c *HPAmebloPostClient) QueryBlobs(hap *HPAmebloPost) *HPBlobQuery {
	query := (&HPBlobClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hap.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hpameblopost.Table, hpameblopost.FieldID, id),
			sqlgraph.To(hpblob.Table, hpblob.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, hpameblopost.BlobsTable, hpameblopost.BlobsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(hap.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *HPAmebloPostClient) Hooks() []Hook {
	hooks := c.hooks.HPAmebloPost
	return append(hooks[:len(hooks):len(hooks)], hpameblopost.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *HPAmebloPostClient) Interceptors() []Interceptor {
	return c.inters.HPAmebloPost
}

func (c *HPAmebloPostClient) mutate(ctx context.Context, m *HPAmebloPostMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&HPAmebloPostCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&HPAmebloPostUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&HPAmebloPostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&HPAmebloPostDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown HPAmebloPost mutation op: %q", m.Op())
	}
}

// HPArtistClient is a client for the HPArtist schema.
type HPArtistClient struct {
	config
}

// NewHPArtistClient returns a client for the HPArtist from the given config.
func NewHPArtistClient(c config) *HPArtistClient {
	return &HPArtistClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `hpartist.Hooks(f(g(h())))`.
func (c *HPArtistClient) Use(hooks ...Hook) {
	c.hooks.HPArtist = append(c.hooks.HPArtist, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `hpartist.Intercept(f(g(h())))`.
func (c *HPArtistClient) Intercept(interceptors ...Interceptor) {
	c.inters.HPArtist = append(c.inters.HPArtist, interceptors...)
}

// Create returns a builder for creating a HPArtist entity.
func (c *HPArtistClient) Create() *HPArtistCreate {
	mutation := newHPArtistMutation(c.config, OpCreate)
	return &HPArtistCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of HPArtist entities.
func (c *HPArtistClient) CreateBulk(builders ...*HPArtistCreate) *HPArtistCreateBulk {
	return &HPArtistCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for HPArtist.
func (c *HPArtistClient) Update() *HPArtistUpdate {
	mutation := newHPArtistMutation(c.config, OpUpdate)
	return &HPArtistUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HPArtistClient) UpdateOne(ha *HPArtist) *HPArtistUpdateOne {
	mutation := newHPArtistMutation(c.config, OpUpdateOne, withHPArtist(ha))
	return &HPArtistUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HPArtistClient) UpdateOneID(id int) *HPArtistUpdateOne {
	mutation := newHPArtistMutation(c.config, OpUpdateOne, withHPArtistID(id))
	return &HPArtistUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for HPArtist.
func (c *HPArtistClient) Delete() *HPArtistDelete {
	mutation := newHPArtistMutation(c.config, OpDelete)
	return &HPArtistDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *HPArtistClient) DeleteOne(ha *HPArtist) *HPArtistDeleteOne {
	return c.DeleteOneID(ha.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *HPArtistClient) DeleteOneID(id int) *HPArtistDeleteOne {
	builder := c.Delete().Where(hpartist.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HPArtistDeleteOne{builder}
}

// Query returns a query builder for HPArtist.
func (c *HPArtistClient) Query() *HPArtistQuery {
	return &HPArtistQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeHPArtist},
		inters: c.Interceptors(),
	}
}

// Get returns a HPArtist entity by its id.
func (c *HPArtistClient) Get(ctx context.Context, id int) (*HPArtist, error) {
	return c.Query().Where(hpartist.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HPArtistClient) GetX(ctx context.Context, id int) *HPArtist {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMembers queries the members edge of a HPArtist.
func (c *HPArtistClient) QueryMembers(ha *HPArtist) *HPMemberQuery {
	query := (&HPMemberClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ha.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hpartist.Table, hpartist.FieldID, id),
			sqlgraph.To(hpmember.Table, hpmember.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, hpartist.MembersTable, hpartist.MembersColumn),
		)
		fromV = sqlgraph.Neighbors(ha.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAssets queries the assets edge of a HPArtist.
func (c *HPArtistClient) QueryAssets(ha *HPArtist) *HPAssetQuery {
	query := (&HPAssetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ha.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hpartist.Table, hpartist.FieldID, id),
			sqlgraph.To(hpasset.Table, hpasset.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, hpartist.AssetsTable, hpartist.AssetsColumn),
		)
		fromV = sqlgraph.Neighbors(ha.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOwningFeed queries the owning_feed edge of a HPArtist.
func (c *HPArtistClient) QueryOwningFeed(ha *HPArtist) *HPFeedItemQuery {
	query := (&HPFeedItemClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ha.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hpartist.Table, hpartist.FieldID, id),
			sqlgraph.To(hpfeeditem.Table, hpfeeditem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, hpartist.OwningFeedTable, hpartist.OwningFeedColumn),
		)
		fromV = sqlgraph.Neighbors(ha.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTaggedFeed queries the tagged_feed edge of a HPArtist.
func (c *HPArtistClient) QueryTaggedFeed(ha *HPArtist) *HPFeedItemQuery {
	query := (&HPFeedItemClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ha.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hpartist.Table, hpartist.FieldID, id),
			sqlgraph.To(hpfeeditem.Table, hpfeeditem.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, hpartist.TaggedFeedTable, hpartist.TaggedFeedPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ha.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOwningIgPosts queries the owning_ig_posts edge of a HPArtist.
func (c *HPArtistClient) QueryOwningIgPosts(ha *HPArtist) *HPIgPostQuery {
	query := (&HPIgPostClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ha.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hpartist.Table, hpartist.FieldID, id),
			sqlgraph.To(hpigpost.Table, hpigpost.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, hpartist.OwningIgPostsTable, hpartist.OwningIgPostsColumn),
		)
		fromV = sqlgraph.Neighbors(ha.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTaggedIgPosts queries the tagged_ig_posts edge of a HPArtist.
func (c *HPArtistClient) QueryTaggedIgPosts(ha *HPArtist) *HPIgPostQuery {
	query := (&HPIgPostClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ha.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hpartist.Table, hpartist.FieldID, id),
			sqlgraph.To(hpigpost.Table, hpigpost.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, hpartist.TaggedIgPostsTable, hpartist.TaggedIgPostsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ha.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOwningAmebloPosts queries the owning_ameblo_posts edge of a HPArtist.
func (c *HPArtistClient) QueryOwningAmebloPosts(ha *HPArtist) *HPAmebloPostQuery {
	query := (&HPAmebloPostClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ha.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hpartist.Table, hpartist.FieldID, id),
			sqlgraph.To(hpameblopost.Table, hpameblopost.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, hpartist.OwningAmebloPostsTable, hpartist.OwningAmebloPostsColumn),
		)
		fromV = sqlgraph.Neighbors(ha.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTaggedAmebloPosts queries the tagged_ameblo_posts edge of a HPArtist.
func (c *HPArtistClient) QueryTaggedAmebloPosts(ha *HPArtist) *HPAmebloPostQuery {
	query := (&HPAmebloPostClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ha.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hpartist.Table, hpartist.FieldID, id),
			sqlgraph.To(hpameblopost.Table, hpameblopost.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, hpartist.TaggedAmebloPostsTable, hpartist.TaggedAmebloPostsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ha.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTaggedElineupMallItems queries the tagged_elineup_mall_items edge of a HPArtist.
func (c *HPArtistClient) QueryTaggedElineupMallItems(ha *HPArtist) *HPElineupMallItemQuery {
	query := (&HPElineupMallItemClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ha.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hpartist.Table, hpartist.FieldID, id),
			sqlgraph.To(hpelineupmallitem.Table, hpelineupmallitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, hpartist.TaggedElineupMallItemsTable, hpartist.TaggedElineupMallItemsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ha.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFollowedBy queries the followed_by edge of a HPArtist.
func (c *HPArtistClient) QueryFollowedBy(ha *HPArtist) *HPFollowQuery {
	query := (&HPFollowClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ha.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hpartist.Table, hpartist.FieldID, id),
			sqlgraph.To(hpfollow.Table, hpfollow.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, hpartist.FollowedByTable, hpartist.FollowedByColumn),
		)
		fromV = sqlgraph.Neighbors(ha.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *HPArtistClient) Hooks() []Hook {
	hooks := c.hooks.HPArtist
	return append(hooks[:len(hooks):len(hooks)], hpartist.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *HPArtistClient) Interceptors() []Interceptor {
	return c.inters.HPArtist
}

func (c *HPArtistClient) mutate(ctx context.Context, m *HPArtistMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&HPArtistCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&HPArtistUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&HPArtistUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&HPArtistDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown HPArtist mutation op: %q", m.Op())
	}
}

// HPAssetClient is a client for the HPAsset schema.
type HPAssetClient struct {
	config
}

// NewHPAssetClient returns a client for the HPAsset from the given config.
func NewHPAssetClient(c config) *HPAssetClient {
	return &HPAssetClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `hpasset.Hooks(f(g(h())))`.
func (c *HPAssetClient) Use(hooks ...Hook) {
	c.hooks.HPAsset = append(c.hooks.HPAsset, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `hpasset.Intercept(f(g(h())))`.
func (c *HPAssetClient) Intercept(interceptors ...Interceptor) {
	c.inters.HPAsset = append(c.inters.HPAsset, interceptors...)
}

// Create returns a builder for creating a HPAsset entity.
func (c *HPAssetClient) Create() *HPAssetCreate {
	mutation := newHPAssetMutation(c.config, OpCreate)
	return &HPAssetCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of HPAsset entities.
func (c *HPAssetClient) CreateBulk(builders ...*HPAssetCreate) *HPAssetCreateBulk {
	return &HPAssetCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for HPAsset.
func (c *HPAssetClient) Update() *HPAssetUpdate {
	mutation := newHPAssetMutation(c.config, OpUpdate)
	return &HPAssetUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HPAssetClient) UpdateOne(ha *HPAsset) *HPAssetUpdateOne {
	mutation := newHPAssetMutation(c.config, OpUpdateOne, withHPAsset(ha))
	return &HPAssetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HPAssetClient) UpdateOneID(id int) *HPAssetUpdateOne {
	mutation := newHPAssetMutation(c.config, OpUpdateOne, withHPAssetID(id))
	return &HPAssetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for HPAsset.
func (c *HPAssetClient) Delete() *HPAssetDelete {
	mutation := newHPAssetMutation(c.config, OpDelete)
	return &HPAssetDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *HPAssetClient) DeleteOne(ha *HPAsset) *HPAssetDeleteOne {
	return c.DeleteOneID(ha.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *HPAssetClient) DeleteOneID(id int) *HPAssetDeleteOne {
	builder := c.Delete().Where(hpasset.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HPAssetDeleteOne{builder}
}

// Query returns a query builder for HPAsset.
func (c *HPAssetClient) Query() *HPAssetQuery {
	return &HPAssetQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeHPAsset},
		inters: c.Interceptors(),
	}
}

// Get returns a HPAsset entity by its id.
func (c *HPAssetClient) Get(ctx context.Context, id int) (*HPAsset, error) {
	return c.Query().Where(hpasset.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HPAssetClient) GetX(ctx context.Context, id int) *HPAsset {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryArtist queries the artist edge of a HPAsset.
func (c *HPAssetClient) QueryArtist(ha *HPAsset) *HPArtistQuery {
	query := (&HPArtistClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ha.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hpasset.Table, hpasset.FieldID, id),
			sqlgraph.To(hpartist.Table, hpartist.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hpasset.ArtistTable, hpasset.ArtistColumn),
		)
		fromV = sqlgraph.Neighbors(ha.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMembers queries the members edge of a HPAsset.
func (c *HPAssetClient) QueryMembers(ha *HPAsset) *HPMemberQuery {
	query := (&HPMemberClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ha.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hpasset.Table, hpasset.FieldID, id),
			sqlgraph.To(hpmember.Table, hpmember.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, hpasset.MembersTable, hpasset.MembersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ha.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAmebloPosts queries the ameblo_posts edge of a HPAsset.
func (c *HPAssetClient) QueryAmebloPosts(ha *HPAsset) *HPAmebloPostQuery {
	query := (&HPAmebloPostClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ha.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hpasset.Table, hpasset.FieldID, id),
			sqlgraph.To(hpameblopost.Table, hpameblopost.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, hpasset.AmebloPostsTable, hpasset.AmebloPostsColumn),
		)
		fromV = sqlgraph.Neighbors(ha.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryIgPosts queries the ig_posts edge of a HPAsset.
func (c *HPAssetClient) QueryIgPosts(ha *HPAsset) *HPIgPostQuery {
	query := (&HPIgPostClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ha.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hpasset.Table, hpasset.FieldID, id),
			sqlgraph.To(hpigpost.Table, hpigpost.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, hpasset.IgPostsTable, hpasset.IgPostsColumn),
		)
		fromV = sqlgraph.Neighbors(ha.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *HPAssetClient) Hooks() []Hook {
	return c.hooks.HPAsset
}

// Interceptors returns the client interceptors.
func (c *HPAssetClient) Interceptors() []Interceptor {
	return c.inters.HPAsset
}

func (c *HPAssetClient) mutate(ctx context.Context, m *HPAssetMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&HPAssetCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&HPAssetUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&HPAssetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&HPAssetDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown HPAsset mutation op: %q", m.Op())
	}
}

// HPBlobClient is a client for the HPBlob schema.
type HPBlobClient struct {
	config
}

// NewHPBlobClient returns a client for the HPBlob from the given config.
func NewHPBlobClient(c config) *HPBlobClient {
	return &HPBlobClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `hpblob.Hooks(f(g(h())))`.
func (c *HPBlobClient) Use(hooks ...Hook) {
	c.hooks.HPBlob = append(c.hooks.HPBlob, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `hpblob.Intercept(f(g(h())))`.
func (c *HPBlobClient) Intercept(interceptors ...Interceptor) {
	c.inters.HPBlob = append(c.inters.HPBlob, interceptors...)
}

// Create returns a builder for creating a HPBlob entity.
func (c *HPBlobClient) Create() *HPBlobCreate {
	mutation := newHPBlobMutation(c.config, OpCreate)
	return &HPBlobCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of HPBlob entities.
func (c *HPBlobClient) CreateBulk(builders ...*HPBlobCreate) *HPBlobCreateBulk {
	return &HPBlobCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for HPBlob.
func (c *HPBlobClient) Update() *HPBlobUpdate {
	mutation := newHPBlobMutation(c.config, OpUpdate)
	return &HPBlobUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HPBlobClient) UpdateOne(hb *HPBlob) *HPBlobUpdateOne {
	mutation := newHPBlobMutation(c.config, OpUpdateOne, withHPBlob(hb))
	return &HPBlobUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HPBlobClient) UpdateOneID(id int) *HPBlobUpdateOne {
	mutation := newHPBlobMutation(c.config, OpUpdateOne, withHPBlobID(id))
	return &HPBlobUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for HPBlob.
func (c *HPBlobClient) Delete() *HPBlobDelete {
	mutation := newHPBlobMutation(c.config, OpDelete)
	return &HPBlobDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *HPBlobClient) DeleteOne(hb *HPBlob) *HPBlobDeleteOne {
	return c.DeleteOneID(hb.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *HPBlobClient) DeleteOneID(id int) *HPBlobDeleteOne {
	builder := c.Delete().Where(hpblob.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HPBlobDeleteOne{builder}
}

// Query returns a query builder for HPBlob.
func (c *HPBlobClient) Query() *HPBlobQuery {
	return &HPBlobQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeHPBlob},
		inters: c.Interceptors(),
	}
}

// Get returns a HPBlob entity by its id.
func (c *HPBlobClient) Get(ctx context.Context, id int) (*HPBlob, error) {
	return c.Query().Where(hpblob.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HPBlobClient) GetX(ctx context.Context, id int) *HPBlob {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwnerArtist queries the owner_artist edge of a HPBlob.
func (c *HPBlobClient) QueryOwnerArtist(hb *HPBlob) *HPArtistQuery {
	query := (&HPArtistClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hpblob.Table, hpblob.FieldID, id),
			sqlgraph.To(hpartist.Table, hpartist.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hpblob.OwnerArtistTable, hpblob.OwnerArtistColumn),
		)
		fromV = sqlgraph.Neighbors(hb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOwnerMember queries the owner_member edge of a HPBlob.
func (c *HPBlobClient) QueryOwnerMember(hb *HPBlob) *HPMemberQuery {
	query := (&HPMemberClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hpblob.Table, hpblob.FieldID, id),
			sqlgraph.To(hpmember.Table, hpmember.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hpblob.OwnerMemberTable, hpblob.OwnerMemberColumn),
		)
		fromV = sqlgraph.Neighbors(hb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAmebloPosts queries the ameblo_posts edge of a HPBlob.
func (c *HPBlobClient) QueryAmebloPosts(hb *HPBlob) *HPAmebloPostQuery {
	query := (&HPAmebloPostClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hpblob.Table, hpblob.FieldID, id),
			sqlgraph.To(hpameblopost.Table, hpameblopost.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, hpblob.AmebloPostsTable, hpblob.AmebloPostsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(hb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryIgPosts queries the ig_posts edge of a HPBlob.
func (c *HPBlobClient) QueryIgPosts(hb *HPBlob) *HPIgPostQuery {
	query := (&HPIgPostClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hpblob.Table, hpblob.FieldID, id),
			sqlgraph.To(hpigpost.Table, hpigpost.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, hpblob.IgPostsTable, hpblob.IgPostsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(hb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *HPBlobClient) Hooks() []Hook {
	hooks := c.hooks.HPBlob
	return append(hooks[:len(hooks):len(hooks)], hpblob.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *HPBlobClient) Interceptors() []Interceptor {
	return c.inters.HPBlob
}

func (c *HPBlobClient) mutate(ctx context.Context, m *HPBlobMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&HPBlobCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&HPBlobUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&HPBlobUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&HPBlobDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown HPBlob mutation op: %q", m.Op())
	}
}

// HPElineupMallItemClient is a client for the HPElineupMallItem schema.
type HPElineupMallItemClient struct {
	config
}

// NewHPElineupMallItemClient returns a client for the HPElineupMallItem from the given config.
func NewHPElineupMallItemClient(c config) *HPElineupMallItemClient {
	return &HPElineupMallItemClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `hpelineupmallitem.Hooks(f(g(h())))`.
func (c *HPElineupMallItemClient) Use(hooks ...Hook) {
	c.hooks.HPElineupMallItem = append(c.hooks.HPElineupMallItem, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `hpelineupmallitem.Intercept(f(g(h())))`.
func (c *HPElineupMallItemClient) Intercept(interceptors ...Interceptor) {
	c.inters.HPElineupMallItem = append(c.inters.HPElineupMallItem, interceptors...)
}

// Create returns a builder for creating a HPElineupMallItem entity.
func (c *HPElineupMallItemClient) Create() *HPElineupMallItemCreate {
	mutation := newHPElineupMallItemMutation(c.config, OpCreate)
	return &HPElineupMallItemCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of HPElineupMallItem entities.
func (c *HPElineupMallItemClient) CreateBulk(builders ...*HPElineupMallItemCreate) *HPElineupMallItemCreateBulk {
	return &HPElineupMallItemCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for HPElineupMallItem.
func (c *HPElineupMallItemClient) Update() *HPElineupMallItemUpdate {
	mutation := newHPElineupMallItemMutation(c.config, OpUpdate)
	return &HPElineupMallItemUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HPElineupMallItemClient) UpdateOne(hemi *HPElineupMallItem) *HPElineupMallItemUpdateOne {
	mutation := newHPElineupMallItemMutation(c.config, OpUpdateOne, withHPElineupMallItem(hemi))
	return &HPElineupMallItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HPElineupMallItemClient) UpdateOneID(id int) *HPElineupMallItemUpdateOne {
	mutation := newHPElineupMallItemMutation(c.config, OpUpdateOne, withHPElineupMallItemID(id))
	return &HPElineupMallItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for HPElineupMallItem.
func (c *HPElineupMallItemClient) Delete() *HPElineupMallItemDelete {
	mutation := newHPElineupMallItemMutation(c.config, OpDelete)
	return &HPElineupMallItemDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *HPElineupMallItemClient) DeleteOne(hemi *HPElineupMallItem) *HPElineupMallItemDeleteOne {
	return c.DeleteOneID(hemi.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *HPElineupMallItemClient) DeleteOneID(id int) *HPElineupMallItemDeleteOne {
	builder := c.Delete().Where(hpelineupmallitem.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HPElineupMallItemDeleteOne{builder}
}

// Query returns a query builder for HPElineupMallItem.
func (c *HPElineupMallItemClient) Query() *HPElineupMallItemQuery {
	return &HPElineupMallItemQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeHPElineupMallItem},
		inters: c.Interceptors(),
	}
}

// Get returns a HPElineupMallItem entity by its id.
func (c *HPElineupMallItemClient) Get(ctx context.Context, id int) (*HPElineupMallItem, error) {
	return c.Query().Where(hpelineupmallitem.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HPElineupMallItemClient) GetX(ctx context.Context, id int) *HPElineupMallItem {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTaggedArtists queries the tagged_artists edge of a HPElineupMallItem.
func (c *HPElineupMallItemClient) QueryTaggedArtists(hemi *HPElineupMallItem) *HPArtistQuery {
	query := (&HPArtistClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hemi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hpelineupmallitem.Table, hpelineupmallitem.FieldID, id),
			sqlgraph.To(hpartist.Table, hpartist.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, hpelineupmallitem.TaggedArtistsTable, hpelineupmallitem.TaggedArtistsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(hemi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTaggedMembers queries the tagged_members edge of a HPElineupMallItem.
func (c *HPElineupMallItemClient) QueryTaggedMembers(hemi *HPElineupMallItem) *HPMemberQuery {
	query := (&HPMemberClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hemi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hpelineupmallitem.Table, hpelineupmallitem.FieldID, id),
			sqlgraph.To(hpmember.Table, hpmember.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, hpelineupmallitem.TaggedMembersTable, hpelineupmallitem.TaggedMembersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(hemi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPurchaseHistories queries the purchase_histories edge of a HPElineupMallItem.
func (c *HPElineupMallItemClient) QueryPurchaseHistories(hemi *HPElineupMallItem) *HPElineupMallItemPurchaseHistoryQuery {
	query := (&HPElineupMallItemPurchaseHistoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hemi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hpelineupmallitem.Table, hpelineupmallitem.FieldID, id),
			sqlgraph.To(hpelineupmallitempurchasehistory.Table, hpelineupmallitempurchasehistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, hpelineupmallitem.PurchaseHistoriesTable, hpelineupmallitem.PurchaseHistoriesColumn),
		)
		fromV = sqlgraph.Neighbors(hemi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *HPElineupMallItemClient) Hooks() []Hook {
	hooks := c.hooks.HPElineupMallItem
	return append(hooks[:len(hooks):len(hooks)], hpelineupmallitem.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *HPElineupMallItemClient) Interceptors() []Interceptor {
	return c.inters.HPElineupMallItem
}

func (c *HPElineupMallItemClient) mutate(ctx context.Context, m *HPElineupMallItemMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&HPElineupMallItemCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&HPElineupMallItemUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&HPElineupMallItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&HPElineupMallItemDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown HPElineupMallItem mutation op: %q", m.Op())
	}
}

// HPElineupMallItemPurchaseHistoryClient is a client for the HPElineupMallItemPurchaseHistory schema.
type HPElineupMallItemPurchaseHistoryClient struct {
	config
}

// NewHPElineupMallItemPurchaseHistoryClient returns a client for the HPElineupMallItemPurchaseHistory from the given config.
func NewHPElineupMallItemPurchaseHistoryClient(c config) *HPElineupMallItemPurchaseHistoryClient {
	return &HPElineupMallItemPurchaseHistoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `hpelineupmallitempurchasehistory.Hooks(f(g(h())))`.
func (c *HPElineupMallItemPurchaseHistoryClient) Use(hooks ...Hook) {
	c.hooks.HPElineupMallItemPurchaseHistory = append(c.hooks.HPElineupMallItemPurchaseHistory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `hpelineupmallitempurchasehistory.Intercept(f(g(h())))`.
func (c *HPElineupMallItemPurchaseHistoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.HPElineupMallItemPurchaseHistory = append(c.inters.HPElineupMallItemPurchaseHistory, interceptors...)
}

// Create returns a builder for creating a HPElineupMallItemPurchaseHistory entity.
func (c *HPElineupMallItemPurchaseHistoryClient) Create() *HPElineupMallItemPurchaseHistoryCreate {
	mutation := newHPElineupMallItemPurchaseHistoryMutation(c.config, OpCreate)
	return &HPElineupMallItemPurchaseHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of HPElineupMallItemPurchaseHistory entities.
func (c *HPElineupMallItemPurchaseHistoryClient) CreateBulk(builders ...*HPElineupMallItemPurchaseHistoryCreate) *HPElineupMallItemPurchaseHistoryCreateBulk {
	return &HPElineupMallItemPurchaseHistoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for HPElineupMallItemPurchaseHistory.
func (c *HPElineupMallItemPurchaseHistoryClient) Update() *HPElineupMallItemPurchaseHistoryUpdate {
	mutation := newHPElineupMallItemPurchaseHistoryMutation(c.config, OpUpdate)
	return &HPElineupMallItemPurchaseHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HPElineupMallItemPurchaseHistoryClient) UpdateOne(hemiph *HPElineupMallItemPurchaseHistory) *HPElineupMallItemPurchaseHistoryUpdateOne {
	mutation := newHPElineupMallItemPurchaseHistoryMutation(c.config, OpUpdateOne, withHPElineupMallItemPurchaseHistory(hemiph))
	return &HPElineupMallItemPurchaseHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HPElineupMallItemPurchaseHistoryClient) UpdateOneID(id int) *HPElineupMallItemPurchaseHistoryUpdateOne {
	mutation := newHPElineupMallItemPurchaseHistoryMutation(c.config, OpUpdateOne, withHPElineupMallItemPurchaseHistoryID(id))
	return &HPElineupMallItemPurchaseHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for HPElineupMallItemPurchaseHistory.
func (c *HPElineupMallItemPurchaseHistoryClient) Delete() *HPElineupMallItemPurchaseHistoryDelete {
	mutation := newHPElineupMallItemPurchaseHistoryMutation(c.config, OpDelete)
	return &HPElineupMallItemPurchaseHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *HPElineupMallItemPurchaseHistoryClient) DeleteOne(hemiph *HPElineupMallItemPurchaseHistory) *HPElineupMallItemPurchaseHistoryDeleteOne {
	return c.DeleteOneID(hemiph.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *HPElineupMallItemPurchaseHistoryClient) DeleteOneID(id int) *HPElineupMallItemPurchaseHistoryDeleteOne {
	builder := c.Delete().Where(hpelineupmallitempurchasehistory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HPElineupMallItemPurchaseHistoryDeleteOne{builder}
}

// Query returns a query builder for HPElineupMallItemPurchaseHistory.
func (c *HPElineupMallItemPurchaseHistoryClient) Query() *HPElineupMallItemPurchaseHistoryQuery {
	return &HPElineupMallItemPurchaseHistoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeHPElineupMallItemPurchaseHistory},
		inters: c.Interceptors(),
	}
}

// Get returns a HPElineupMallItemPurchaseHistory entity by its id.
func (c *HPElineupMallItemPurchaseHistoryClient) Get(ctx context.Context, id int) (*HPElineupMallItemPurchaseHistory, error) {
	return c.Query().Where(hpelineupmallitempurchasehistory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HPElineupMallItemPurchaseHistoryClient) GetX(ctx context.Context, id int) *HPElineupMallItemPurchaseHistory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryElineupMallItem queries the elineup_mall_item edge of a HPElineupMallItemPurchaseHistory.
func (c *HPElineupMallItemPurchaseHistoryClient) QueryElineupMallItem(hemiph *HPElineupMallItemPurchaseHistory) *HPElineupMallItemQuery {
	query := (&HPElineupMallItemClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hemiph.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hpelineupmallitempurchasehistory.Table, hpelineupmallitempurchasehistory.FieldID, id),
			sqlgraph.To(hpelineupmallitem.Table, hpelineupmallitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hpelineupmallitempurchasehistory.ElineupMallItemTable, hpelineupmallitempurchasehistory.ElineupMallItemColumn),
		)
		fromV = sqlgraph.Neighbors(hemiph.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOwner queries the owner edge of a HPElineupMallItemPurchaseHistory.
func (c *HPElineupMallItemPurchaseHistoryClient) QueryOwner(hemiph *HPElineupMallItemPurchaseHistory) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hemiph.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hpelineupmallitempurchasehistory.Table, hpelineupmallitempurchasehistory.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hpelineupmallitempurchasehistory.OwnerTable, hpelineupmallitempurchasehistory.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(hemiph.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *HPElineupMallItemPurchaseHistoryClient) Hooks() []Hook {
	hooks := c.hooks.HPElineupMallItemPurchaseHistory
	return append(hooks[:len(hooks):len(hooks)], hpelineupmallitempurchasehistory.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *HPElineupMallItemPurchaseHistoryClient) Interceptors() []Interceptor {
	return c.inters.HPElineupMallItemPurchaseHistory
}

func (c *HPElineupMallItemPurchaseHistoryClient) mutate(ctx context.Context, m *HPElineupMallItemPurchaseHistoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&HPElineupMallItemPurchaseHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&HPElineupMallItemPurchaseHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&HPElineupMallItemPurchaseHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&HPElineupMallItemPurchaseHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown HPElineupMallItemPurchaseHistory mutation op: %q", m.Op())
	}
}

// HPEventClient is a client for the HPEvent schema.
type HPEventClient struct {
	config
}

// NewHPEventClient returns a client for the HPEvent from the given config.
func NewHPEventClient(c config) *HPEventClient {
	return &HPEventClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `hpevent.Hooks(f(g(h())))`.
func (c *HPEventClient) Use(hooks ...Hook) {
	c.hooks.HPEvent = append(c.hooks.HPEvent, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `hpevent.Intercept(f(g(h())))`.
func (c *HPEventClient) Intercept(interceptors ...Interceptor) {
	c.inters.HPEvent = append(c.inters.HPEvent, interceptors...)
}

// Create returns a builder for creating a HPEvent entity.
func (c *HPEventClient) Create() *HPEventCreate {
	mutation := newHPEventMutation(c.config, OpCreate)
	return &HPEventCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of HPEvent entities.
func (c *HPEventClient) CreateBulk(builders ...*HPEventCreate) *HPEventCreateBulk {
	return &HPEventCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for HPEvent.
func (c *HPEventClient) Update() *HPEventUpdate {
	mutation := newHPEventMutation(c.config, OpUpdate)
	return &HPEventUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HPEventClient) UpdateOne(he *HPEvent) *HPEventUpdateOne {
	mutation := newHPEventMutation(c.config, OpUpdateOne, withHPEvent(he))
	return &HPEventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HPEventClient) UpdateOneID(id int) *HPEventUpdateOne {
	mutation := newHPEventMutation(c.config, OpUpdateOne, withHPEventID(id))
	return &HPEventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for HPEvent.
func (c *HPEventClient) Delete() *HPEventDelete {
	mutation := newHPEventMutation(c.config, OpDelete)
	return &HPEventDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *HPEventClient) DeleteOne(he *HPEvent) *HPEventDeleteOne {
	return c.DeleteOneID(he.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *HPEventClient) DeleteOneID(id int) *HPEventDeleteOne {
	builder := c.Delete().Where(hpevent.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HPEventDeleteOne{builder}
}

// Query returns a query builder for HPEvent.
func (c *HPEventClient) Query() *HPEventQuery {
	return &HPEventQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeHPEvent},
		inters: c.Interceptors(),
	}
}

// Get returns a HPEvent entity by its id.
func (c *HPEventClient) Get(ctx context.Context, id int) (*HPEvent, error) {
	return c.Query().Where(hpevent.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HPEventClient) GetX(ctx context.Context, id int) *HPEvent {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMembers queries the members edge of a HPEvent.
func (c *HPEventClient) QueryMembers(he *HPEvent) *HPMemberQuery {
	query := (&HPMemberClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := he.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hpevent.Table, hpevent.FieldID, id),
			sqlgraph.To(hpmember.Table, hpmember.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, hpevent.MembersTable, hpevent.MembersColumn),
		)
		fromV = sqlgraph.Neighbors(he.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryArtists queries the artists edge of a HPEvent.
func (c *HPEventClient) QueryArtists(he *HPEvent) *HPArtistQuery {
	query := (&HPArtistClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := he.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hpevent.Table, hpevent.FieldID, id),
			sqlgraph.To(hpartist.Table, hpartist.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, hpevent.ArtistsTable, hpevent.ArtistsColumn),
		)
		fromV = sqlgraph.Neighbors(he.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHpfcEventTickets queries the hpfc_event_tickets edge of a HPEvent.
func (c *HPEventClient) QueryHpfcEventTickets(he *HPEvent) *HPFCEventTicketQuery {
	query := (&HPFCEventTicketClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := he.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hpevent.Table, hpevent.FieldID, id),
			sqlgraph.To(hpfceventticket.Table, hpfceventticket.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, hpevent.HpfcEventTicketsTable, hpevent.HpfcEventTicketsColumn),
		)
		fromV = sqlgraph.Neighbors(he.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *HPEventClient) Hooks() []Hook {
	hooks := c.hooks.HPEvent
	return append(hooks[:len(hooks):len(hooks)], hpevent.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *HPEventClient) Interceptors() []Interceptor {
	return c.inters.HPEvent
}

func (c *HPEventClient) mutate(ctx context.Context, m *HPEventMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&HPEventCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&HPEventUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&HPEventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&HPEventDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown HPEvent mutation op: %q", m.Op())
	}
}

// HPFCEventTicketClient is a client for the HPFCEventTicket schema.
type HPFCEventTicketClient struct {
	config
}

// NewHPFCEventTicketClient returns a client for the HPFCEventTicket from the given config.
func NewHPFCEventTicketClient(c config) *HPFCEventTicketClient {
	return &HPFCEventTicketClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `hpfceventticket.Hooks(f(g(h())))`.
func (c *HPFCEventTicketClient) Use(hooks ...Hook) {
	c.hooks.HPFCEventTicket = append(c.hooks.HPFCEventTicket, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `hpfceventticket.Intercept(f(g(h())))`.
func (c *HPFCEventTicketClient) Intercept(interceptors ...Interceptor) {
	c.inters.HPFCEventTicket = append(c.inters.HPFCEventTicket, interceptors...)
}

// Create returns a builder for creating a HPFCEventTicket entity.
func (c *HPFCEventTicketClient) Create() *HPFCEventTicketCreate {
	mutation := newHPFCEventTicketMutation(c.config, OpCreate)
	return &HPFCEventTicketCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of HPFCEventTicket entities.
func (c *HPFCEventTicketClient) CreateBulk(builders ...*HPFCEventTicketCreate) *HPFCEventTicketCreateBulk {
	return &HPFCEventTicketCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for HPFCEventTicket.
func (c *HPFCEventTicketClient) Update() *HPFCEventTicketUpdate {
	mutation := newHPFCEventTicketMutation(c.config, OpUpdate)
	return &HPFCEventTicketUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HPFCEventTicketClient) UpdateOne(het *HPFCEventTicket) *HPFCEventTicketUpdateOne {
	mutation := newHPFCEventTicketMutation(c.config, OpUpdateOne, withHPFCEventTicket(het))
	return &HPFCEventTicketUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HPFCEventTicketClient) UpdateOneID(id int) *HPFCEventTicketUpdateOne {
	mutation := newHPFCEventTicketMutation(c.config, OpUpdateOne, withHPFCEventTicketID(id))
	return &HPFCEventTicketUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for HPFCEventTicket.
func (c *HPFCEventTicketClient) Delete() *HPFCEventTicketDelete {
	mutation := newHPFCEventTicketMutation(c.config, OpDelete)
	return &HPFCEventTicketDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *HPFCEventTicketClient) DeleteOne(het *HPFCEventTicket) *HPFCEventTicketDeleteOne {
	return c.DeleteOneID(het.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *HPFCEventTicketClient) DeleteOneID(id int) *HPFCEventTicketDeleteOne {
	builder := c.Delete().Where(hpfceventticket.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HPFCEventTicketDeleteOne{builder}
}

// Query returns a query builder for HPFCEventTicket.
func (c *HPFCEventTicketClient) Query() *HPFCEventTicketQuery {
	return &HPFCEventTicketQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeHPFCEventTicket},
		inters: c.Interceptors(),
	}
}

// Get returns a HPFCEventTicket entity by its id.
func (c *HPFCEventTicketClient) Get(ctx context.Context, id int) (*HPFCEventTicket, error) {
	return c.Query().Where(hpfceventticket.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HPFCEventTicketClient) GetX(ctx context.Context, id int) *HPFCEventTicket {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEvent queries the event edge of a HPFCEventTicket.
func (c *HPFCEventTicketClient) QueryEvent(het *HPFCEventTicket) *HPEventQuery {
	query := (&HPEventClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := het.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hpfceventticket.Table, hpfceventticket.FieldID, id),
			sqlgraph.To(hpevent.Table, hpevent.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hpfceventticket.EventTable, hpfceventticket.EventColumn),
		)
		fromV = sqlgraph.Neighbors(het.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a HPFCEventTicket.
func (c *HPFCEventTicketClient) QueryUser(het *HPFCEventTicket) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := het.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hpfceventticket.Table, hpfceventticket.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hpfceventticket.UserTable, hpfceventticket.UserColumn),
		)
		fromV = sqlgraph.Neighbors(het.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *HPFCEventTicketClient) Hooks() []Hook {
	hooks := c.hooks.HPFCEventTicket
	return append(hooks[:len(hooks):len(hooks)], hpfceventticket.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *HPFCEventTicketClient) Interceptors() []Interceptor {
	return c.inters.HPFCEventTicket
}

func (c *HPFCEventTicketClient) mutate(ctx context.Context, m *HPFCEventTicketMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&HPFCEventTicketCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&HPFCEventTicketUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&HPFCEventTicketUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&HPFCEventTicketDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown HPFCEventTicket mutation op: %q", m.Op())
	}
}

// HPFeedItemClient is a client for the HPFeedItem schema.
type HPFeedItemClient struct {
	config
}

// NewHPFeedItemClient returns a client for the HPFeedItem from the given config.
func NewHPFeedItemClient(c config) *HPFeedItemClient {
	return &HPFeedItemClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `hpfeeditem.Hooks(f(g(h())))`.
func (c *HPFeedItemClient) Use(hooks ...Hook) {
	c.hooks.HPFeedItem = append(c.hooks.HPFeedItem, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `hpfeeditem.Intercept(f(g(h())))`.
func (c *HPFeedItemClient) Intercept(interceptors ...Interceptor) {
	c.inters.HPFeedItem = append(c.inters.HPFeedItem, interceptors...)
}

// Create returns a builder for creating a HPFeedItem entity.
func (c *HPFeedItemClient) Create() *HPFeedItemCreate {
	mutation := newHPFeedItemMutation(c.config, OpCreate)
	return &HPFeedItemCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of HPFeedItem entities.
func (c *HPFeedItemClient) CreateBulk(builders ...*HPFeedItemCreate) *HPFeedItemCreateBulk {
	return &HPFeedItemCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for HPFeedItem.
func (c *HPFeedItemClient) Update() *HPFeedItemUpdate {
	mutation := newHPFeedItemMutation(c.config, OpUpdate)
	return &HPFeedItemUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HPFeedItemClient) UpdateOne(hfi *HPFeedItem) *HPFeedItemUpdateOne {
	mutation := newHPFeedItemMutation(c.config, OpUpdateOne, withHPFeedItem(hfi))
	return &HPFeedItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HPFeedItemClient) UpdateOneID(id int) *HPFeedItemUpdateOne {
	mutation := newHPFeedItemMutation(c.config, OpUpdateOne, withHPFeedItemID(id))
	return &HPFeedItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for HPFeedItem.
func (c *HPFeedItemClient) Delete() *HPFeedItemDelete {
	mutation := newHPFeedItemMutation(c.config, OpDelete)
	return &HPFeedItemDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *HPFeedItemClient) DeleteOne(hfi *HPFeedItem) *HPFeedItemDeleteOne {
	return c.DeleteOneID(hfi.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *HPFeedItemClient) DeleteOneID(id int) *HPFeedItemDeleteOne {
	builder := c.Delete().Where(hpfeeditem.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HPFeedItemDeleteOne{builder}
}

// Query returns a query builder for HPFeedItem.
func (c *HPFeedItemClient) Query() *HPFeedItemQuery {
	return &HPFeedItemQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeHPFeedItem},
		inters: c.Interceptors(),
	}
}

// Get returns a HPFeedItem entity by its id.
func (c *HPFeedItemClient) Get(ctx context.Context, id int) (*HPFeedItem, error) {
	return c.Query().Where(hpfeeditem.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HPFeedItemClient) GetX(ctx context.Context, id int) *HPFeedItem {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryViewHistories queries the view_histories edge of a HPFeedItem.
func (c *HPFeedItemClient) QueryViewHistories(hfi *HPFeedItem) *HPViewHistoryQuery {
	query := (&HPViewHistoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hfi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hpfeeditem.Table, hpfeeditem.FieldID, id),
			sqlgraph.To(hpviewhistory.Table, hpviewhistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, hpfeeditem.ViewHistoriesTable, hpfeeditem.ViewHistoriesColumn),
		)
		fromV = sqlgraph.Neighbors(hfi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOwnerArtist queries the owner_artist edge of a HPFeedItem.
func (c *HPFeedItemClient) QueryOwnerArtist(hfi *HPFeedItem) *HPArtistQuery {
	query := (&HPArtistClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hfi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hpfeeditem.Table, hpfeeditem.FieldID, id),
			sqlgraph.To(hpartist.Table, hpartist.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hpfeeditem.OwnerArtistTable, hpfeeditem.OwnerArtistColumn),
		)
		fromV = sqlgraph.Neighbors(hfi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOwnerMember queries the owner_member edge of a HPFeedItem.
func (c *HPFeedItemClient) QueryOwnerMember(hfi *HPFeedItem) *HPMemberQuery {
	query := (&HPMemberClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hfi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hpfeeditem.Table, hpfeeditem.FieldID, id),
			sqlgraph.To(hpmember.Table, hpmember.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hpfeeditem.OwnerMemberTable, hpfeeditem.OwnerMemberColumn),
		)
		fromV = sqlgraph.Neighbors(hfi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTaggedArtists queries the tagged_artists edge of a HPFeedItem.
func (c *HPFeedItemClient) QueryTaggedArtists(hfi *HPFeedItem) *HPArtistQuery {
	query := (&HPArtistClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hfi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hpfeeditem.Table, hpfeeditem.FieldID, id),
			sqlgraph.To(hpartist.Table, hpartist.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, hpfeeditem.TaggedArtistsTable, hpfeeditem.TaggedArtistsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(hfi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTaggedMembers queries the tagged_members edge of a HPFeedItem.
func (c *HPFeedItemClient) QueryTaggedMembers(hfi *HPFeedItem) *HPMemberQuery {
	query := (&HPMemberClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hfi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hpfeeditem.Table, hpfeeditem.FieldID, id),
			sqlgraph.To(hpmember.Table, hpmember.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, hpfeeditem.TaggedMembersTable, hpfeeditem.TaggedMembersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(hfi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *HPFeedItemClient) Hooks() []Hook {
	hooks := c.hooks.HPFeedItem
	return append(hooks[:len(hooks):len(hooks)], hpfeeditem.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *HPFeedItemClient) Interceptors() []Interceptor {
	return c.inters.HPFeedItem
}

func (c *HPFeedItemClient) mutate(ctx context.Context, m *HPFeedItemMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&HPFeedItemCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&HPFeedItemUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&HPFeedItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&HPFeedItemDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown HPFeedItem mutation op: %q", m.Op())
	}
}

// HPFollowClient is a client for the HPFollow schema.
type HPFollowClient struct {
	config
}

// NewHPFollowClient returns a client for the HPFollow from the given config.
func NewHPFollowClient(c config) *HPFollowClient {
	return &HPFollowClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `hpfollow.Hooks(f(g(h())))`.
func (c *HPFollowClient) Use(hooks ...Hook) {
	c.hooks.HPFollow = append(c.hooks.HPFollow, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `hpfollow.Intercept(f(g(h())))`.
func (c *HPFollowClient) Intercept(interceptors ...Interceptor) {
	c.inters.HPFollow = append(c.inters.HPFollow, interceptors...)
}

// Create returns a builder for creating a HPFollow entity.
func (c *HPFollowClient) Create() *HPFollowCreate {
	mutation := newHPFollowMutation(c.config, OpCreate)
	return &HPFollowCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of HPFollow entities.
func (c *HPFollowClient) CreateBulk(builders ...*HPFollowCreate) *HPFollowCreateBulk {
	return &HPFollowCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for HPFollow.
func (c *HPFollowClient) Update() *HPFollowUpdate {
	mutation := newHPFollowMutation(c.config, OpUpdate)
	return &HPFollowUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HPFollowClient) UpdateOne(hf *HPFollow) *HPFollowUpdateOne {
	mutation := newHPFollowMutation(c.config, OpUpdateOne, withHPFollow(hf))
	return &HPFollowUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HPFollowClient) UpdateOneID(id int) *HPFollowUpdateOne {
	mutation := newHPFollowMutation(c.config, OpUpdateOne, withHPFollowID(id))
	return &HPFollowUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for HPFollow.
func (c *HPFollowClient) Delete() *HPFollowDelete {
	mutation := newHPFollowMutation(c.config, OpDelete)
	return &HPFollowDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *HPFollowClient) DeleteOne(hf *HPFollow) *HPFollowDeleteOne {
	return c.DeleteOneID(hf.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *HPFollowClient) DeleteOneID(id int) *HPFollowDeleteOne {
	builder := c.Delete().Where(hpfollow.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HPFollowDeleteOne{builder}
}

// Query returns a query builder for HPFollow.
func (c *HPFollowClient) Query() *HPFollowQuery {
	return &HPFollowQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeHPFollow},
		inters: c.Interceptors(),
	}
}

// Get returns a HPFollow entity by its id.
func (c *HPFollowClient) Get(ctx context.Context, id int) (*HPFollow, error) {
	return c.Query().Where(hpfollow.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HPFollowClient) GetX(ctx context.Context, id int) *HPFollow {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a HPFollow.
func (c *HPFollowClient) QueryUser(hf *HPFollow) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hpfollow.Table, hpfollow.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hpfollow.UserTable, hpfollow.UserColumn),
		)
		fromV = sqlgraph.Neighbors(hf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMember queries the member edge of a HPFollow.
func (c *HPFollowClient) QueryMember(hf *HPFollow) *HPMemberQuery {
	query := (&HPMemberClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hpfollow.Table, hpfollow.FieldID, id),
			sqlgraph.To(hpmember.Table, hpmember.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hpfollow.MemberTable, hpfollow.MemberColumn),
		)
		fromV = sqlgraph.Neighbors(hf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryArtist queries the artist edge of a HPFollow.
func (c *HPFollowClient) QueryArtist(hf *HPFollow) *HPArtistQuery {
	query := (&HPArtistClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hpfollow.Table, hpfollow.FieldID, id),
			sqlgraph.To(hpartist.Table, hpartist.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hpfollow.ArtistTable, hpfollow.ArtistColumn),
		)
		fromV = sqlgraph.Neighbors(hf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *HPFollowClient) Hooks() []Hook {
	hooks := c.hooks.HPFollow
	return append(hooks[:len(hooks):len(hooks)], hpfollow.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *HPFollowClient) Interceptors() []Interceptor {
	return c.inters.HPFollow
}

func (c *HPFollowClient) mutate(ctx context.Context, m *HPFollowMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&HPFollowCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&HPFollowUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&HPFollowUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&HPFollowDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown HPFollow mutation op: %q", m.Op())
	}
}

// HPIgPostClient is a client for the HPIgPost schema.
type HPIgPostClient struct {
	config
}

// NewHPIgPostClient returns a client for the HPIgPost from the given config.
func NewHPIgPostClient(c config) *HPIgPostClient {
	return &HPIgPostClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `hpigpost.Hooks(f(g(h())))`.
func (c *HPIgPostClient) Use(hooks ...Hook) {
	c.hooks.HPIgPost = append(c.hooks.HPIgPost, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `hpigpost.Intercept(f(g(h())))`.
func (c *HPIgPostClient) Intercept(interceptors ...Interceptor) {
	c.inters.HPIgPost = append(c.inters.HPIgPost, interceptors...)
}

// Create returns a builder for creating a HPIgPost entity.
func (c *HPIgPostClient) Create() *HPIgPostCreate {
	mutation := newHPIgPostMutation(c.config, OpCreate)
	return &HPIgPostCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of HPIgPost entities.
func (c *HPIgPostClient) CreateBulk(builders ...*HPIgPostCreate) *HPIgPostCreateBulk {
	return &HPIgPostCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for HPIgPost.
func (c *HPIgPostClient) Update() *HPIgPostUpdate {
	mutation := newHPIgPostMutation(c.config, OpUpdate)
	return &HPIgPostUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HPIgPostClient) UpdateOne(hip *HPIgPost) *HPIgPostUpdateOne {
	mutation := newHPIgPostMutation(c.config, OpUpdateOne, withHPIgPost(hip))
	return &HPIgPostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HPIgPostClient) UpdateOneID(id int) *HPIgPostUpdateOne {
	mutation := newHPIgPostMutation(c.config, OpUpdateOne, withHPIgPostID(id))
	return &HPIgPostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for HPIgPost.
func (c *HPIgPostClient) Delete() *HPIgPostDelete {
	mutation := newHPIgPostMutation(c.config, OpDelete)
	return &HPIgPostDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *HPIgPostClient) DeleteOne(hip *HPIgPost) *HPIgPostDeleteOne {
	return c.DeleteOneID(hip.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *HPIgPostClient) DeleteOneID(id int) *HPIgPostDeleteOne {
	builder := c.Delete().Where(hpigpost.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HPIgPostDeleteOne{builder}
}

// Query returns a query builder for HPIgPost.
func (c *HPIgPostClient) Query() *HPIgPostQuery {
	return &HPIgPostQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeHPIgPost},
		inters: c.Interceptors(),
	}
}

// Get returns a HPIgPost entity by its id.
func (c *HPIgPostClient) Get(ctx context.Context, id int) (*HPIgPost, error) {
	return c.Query().Where(hpigpost.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HPIgPostClient) GetX(ctx context.Context, id int) *HPIgPost {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwnerArtist queries the owner_artist edge of a HPIgPost.
func (c *HPIgPostClient) QueryOwnerArtist(hip *HPIgPost) *HPArtistQuery {
	query := (&HPArtistClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hip.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hpigpost.Table, hpigpost.FieldID, id),
			sqlgraph.To(hpartist.Table, hpartist.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hpigpost.OwnerArtistTable, hpigpost.OwnerArtistColumn),
		)
		fromV = sqlgraph.Neighbors(hip.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOwnerMember queries the owner_member edge of a HPIgPost.
func (c *HPIgPostClient) QueryOwnerMember(hip *HPIgPost) *HPMemberQuery {
	query := (&HPMemberClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hip.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hpigpost.Table, hpigpost.FieldID, id),
			sqlgraph.To(hpmember.Table, hpmember.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hpigpost.OwnerMemberTable, hpigpost.OwnerMemberColumn),
		)
		fromV = sqlgraph.Neighbors(hip.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAsset queries the asset edge of a HPIgPost.
func (c *HPIgPostClient) QueryAsset(hip *HPIgPost) *HPAssetQuery {
	query := (&HPAssetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hip.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hpigpost.Table, hpigpost.FieldID, id),
			sqlgraph.To(hpasset.Table, hpasset.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hpigpost.AssetTable, hpigpost.AssetColumn),
		)
		fromV = sqlgraph.Neighbors(hip.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTaggedArtists queries the tagged_artists edge of a HPIgPost.
func (c *HPIgPostClient) QueryTaggedArtists(hip *HPIgPost) *HPArtistQuery {
	query := (&HPArtistClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hip.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hpigpost.Table, hpigpost.FieldID, id),
			sqlgraph.To(hpartist.Table, hpartist.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, hpigpost.TaggedArtistsTable, hpigpost.TaggedArtistsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(hip.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTaggedMembers queries the tagged_members edge of a HPIgPost.
func (c *HPIgPostClient) QueryTaggedMembers(hip *HPIgPost) *HPMemberQuery {
	query := (&HPMemberClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hip.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hpigpost.Table, hpigpost.FieldID, id),
			sqlgraph.To(hpmember.Table, hpmember.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, hpigpost.TaggedMembersTable, hpigpost.TaggedMembersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(hip.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBlobs queries the blobs edge of a HPIgPost.
func (c *HPIgPostClient) QueryBlobs(hip *HPIgPost) *HPBlobQuery {
	query := (&HPBlobClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hip.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hpigpost.Table, hpigpost.FieldID, id),
			sqlgraph.To(hpblob.Table, hpblob.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, hpigpost.BlobsTable, hpigpost.BlobsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(hip.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *HPIgPostClient) Hooks() []Hook {
	hooks := c.hooks.HPIgPost
	return append(hooks[:len(hooks):len(hooks)], hpigpost.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *HPIgPostClient) Interceptors() []Interceptor {
	return c.inters.HPIgPost
}

func (c *HPIgPostClient) mutate(ctx context.Context, m *HPIgPostMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&HPIgPostCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&HPIgPostUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&HPIgPostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&HPIgPostDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown HPIgPost mutation op: %q", m.Op())
	}
}

// HPMemberClient is a client for the HPMember schema.
type HPMemberClient struct {
	config
}

// NewHPMemberClient returns a client for the HPMember from the given config.
func NewHPMemberClient(c config) *HPMemberClient {
	return &HPMemberClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `hpmember.Hooks(f(g(h())))`.
func (c *HPMemberClient) Use(hooks ...Hook) {
	c.hooks.HPMember = append(c.hooks.HPMember, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `hpmember.Intercept(f(g(h())))`.
func (c *HPMemberClient) Intercept(interceptors ...Interceptor) {
	c.inters.HPMember = append(c.inters.HPMember, interceptors...)
}

// Create returns a builder for creating a HPMember entity.
func (c *HPMemberClient) Create() *HPMemberCreate {
	mutation := newHPMemberMutation(c.config, OpCreate)
	return &HPMemberCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of HPMember entities.
func (c *HPMemberClient) CreateBulk(builders ...*HPMemberCreate) *HPMemberCreateBulk {
	return &HPMemberCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for HPMember.
func (c *HPMemberClient) Update() *HPMemberUpdate {
	mutation := newHPMemberMutation(c.config, OpUpdate)
	return &HPMemberUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HPMemberClient) UpdateOne(hm *HPMember) *HPMemberUpdateOne {
	mutation := newHPMemberMutation(c.config, OpUpdateOne, withHPMember(hm))
	return &HPMemberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HPMemberClient) UpdateOneID(id int) *HPMemberUpdateOne {
	mutation := newHPMemberMutation(c.config, OpUpdateOne, withHPMemberID(id))
	return &HPMemberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for HPMember.
func (c *HPMemberClient) Delete() *HPMemberDelete {
	mutation := newHPMemberMutation(c.config, OpDelete)
	return &HPMemberDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *HPMemberClient) DeleteOne(hm *HPMember) *HPMemberDeleteOne {
	return c.DeleteOneID(hm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *HPMemberClient) DeleteOneID(id int) *HPMemberDeleteOne {
	builder := c.Delete().Where(hpmember.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HPMemberDeleteOne{builder}
}

// Query returns a query builder for HPMember.
func (c *HPMemberClient) Query() *HPMemberQuery {
	return &HPMemberQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeHPMember},
		inters: c.Interceptors(),
	}
}

// Get returns a HPMember entity by its id.
func (c *HPMemberClient) Get(ctx context.Context, id int) (*HPMember, error) {
	return c.Query().Where(hpmember.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HPMemberClient) GetX(ctx context.Context, id int) *HPMember {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAssets queries the assets edge of a HPMember.
func (c *HPMemberClient) QueryAssets(hm *HPMember) *HPAssetQuery {
	query := (&HPAssetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hpmember.Table, hpmember.FieldID, id),
			sqlgraph.To(hpasset.Table, hpasset.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, hpmember.AssetsTable, hpmember.AssetsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(hm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryArtist queries the artist edge of a HPMember.
func (c *HPMemberClient) QueryArtist(hm *HPMember) *HPArtistQuery {
	query := (&HPArtistClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hpmember.Table, hpmember.FieldID, id),
			sqlgraph.To(hpartist.Table, hpartist.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hpmember.ArtistTable, hpmember.ArtistColumn),
		)
		fromV = sqlgraph.Neighbors(hm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOwningFeed queries the owning_feed edge of a HPMember.
func (c *HPMemberClient) QueryOwningFeed(hm *HPMember) *HPFeedItemQuery {
	query := (&HPFeedItemClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hpmember.Table, hpmember.FieldID, id),
			sqlgraph.To(hpfeeditem.Table, hpfeeditem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, hpmember.OwningFeedTable, hpmember.OwningFeedColumn),
		)
		fromV = sqlgraph.Neighbors(hm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTaggedFeed queries the tagged_feed edge of a HPMember.
func (c *HPMemberClient) QueryTaggedFeed(hm *HPMember) *HPFeedItemQuery {
	query := (&HPFeedItemClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hpmember.Table, hpmember.FieldID, id),
			sqlgraph.To(hpfeeditem.Table, hpfeeditem.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, hpmember.TaggedFeedTable, hpmember.TaggedFeedPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(hm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOwningIgPosts queries the owning_ig_posts edge of a HPMember.
func (c *HPMemberClient) QueryOwningIgPosts(hm *HPMember) *HPIgPostQuery {
	query := (&HPIgPostClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hpmember.Table, hpmember.FieldID, id),
			sqlgraph.To(hpigpost.Table, hpigpost.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, hpmember.OwningIgPostsTable, hpmember.OwningIgPostsColumn),
		)
		fromV = sqlgraph.Neighbors(hm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTaggedIgPosts queries the tagged_ig_posts edge of a HPMember.
func (c *HPMemberClient) QueryTaggedIgPosts(hm *HPMember) *HPIgPostQuery {
	query := (&HPIgPostClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hpmember.Table, hpmember.FieldID, id),
			sqlgraph.To(hpigpost.Table, hpigpost.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, hpmember.TaggedIgPostsTable, hpmember.TaggedIgPostsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(hm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOwningAmebloPosts queries the owning_ameblo_posts edge of a HPMember.
func (c *HPMemberClient) QueryOwningAmebloPosts(hm *HPMember) *HPAmebloPostQuery {
	query := (&HPAmebloPostClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hpmember.Table, hpmember.FieldID, id),
			sqlgraph.To(hpameblopost.Table, hpameblopost.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, hpmember.OwningAmebloPostsTable, hpmember.OwningAmebloPostsColumn),
		)
		fromV = sqlgraph.Neighbors(hm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTaggedAmebloPosts queries the tagged_ameblo_posts edge of a HPMember.
func (c *HPMemberClient) QueryTaggedAmebloPosts(hm *HPMember) *HPAmebloPostQuery {
	query := (&HPAmebloPostClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hpmember.Table, hpmember.FieldID, id),
			sqlgraph.To(hpameblopost.Table, hpameblopost.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, hpmember.TaggedAmebloPostsTable, hpmember.TaggedAmebloPostsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(hm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTaggedElineupMallItems queries the tagged_elineup_mall_items edge of a HPMember.
func (c *HPMemberClient) QueryTaggedElineupMallItems(hm *HPMember) *HPElineupMallItemQuery {
	query := (&HPElineupMallItemClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hpmember.Table, hpmember.FieldID, id),
			sqlgraph.To(hpelineupmallitem.Table, hpelineupmallitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, hpmember.TaggedElineupMallItemsTable, hpmember.TaggedElineupMallItemsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(hm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFollowedBy queries the followed_by edge of a HPMember.
func (c *HPMemberClient) QueryFollowedBy(hm *HPMember) *HPFollowQuery {
	query := (&HPFollowClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hpmember.Table, hpmember.FieldID, id),
			sqlgraph.To(hpfollow.Table, hpfollow.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, hpmember.FollowedByTable, hpmember.FollowedByColumn),
		)
		fromV = sqlgraph.Neighbors(hm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *HPMemberClient) Hooks() []Hook {
	hooks := c.hooks.HPMember
	return append(hooks[:len(hooks):len(hooks)], hpmember.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *HPMemberClient) Interceptors() []Interceptor {
	return c.inters.HPMember
}

func (c *HPMemberClient) mutate(ctx context.Context, m *HPMemberMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&HPMemberCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&HPMemberUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&HPMemberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&HPMemberDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown HPMember mutation op: %q", m.Op())
	}
}

// HPSortHistoryClient is a client for the HPSortHistory schema.
type HPSortHistoryClient struct {
	config
}

// NewHPSortHistoryClient returns a client for the HPSortHistory from the given config.
func NewHPSortHistoryClient(c config) *HPSortHistoryClient {
	return &HPSortHistoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `hpsorthistory.Hooks(f(g(h())))`.
func (c *HPSortHistoryClient) Use(hooks ...Hook) {
	c.hooks.HPSortHistory = append(c.hooks.HPSortHistory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `hpsorthistory.Intercept(f(g(h())))`.
func (c *HPSortHistoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.HPSortHistory = append(c.inters.HPSortHistory, interceptors...)
}

// Create returns a builder for creating a HPSortHistory entity.
func (c *HPSortHistoryClient) Create() *HPSortHistoryCreate {
	mutation := newHPSortHistoryMutation(c.config, OpCreate)
	return &HPSortHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of HPSortHistory entities.
func (c *HPSortHistoryClient) CreateBulk(builders ...*HPSortHistoryCreate) *HPSortHistoryCreateBulk {
	return &HPSortHistoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for HPSortHistory.
func (c *HPSortHistoryClient) Update() *HPSortHistoryUpdate {
	mutation := newHPSortHistoryMutation(c.config, OpUpdate)
	return &HPSortHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HPSortHistoryClient) UpdateOne(hsh *HPSortHistory) *HPSortHistoryUpdateOne {
	mutation := newHPSortHistoryMutation(c.config, OpUpdateOne, withHPSortHistory(hsh))
	return &HPSortHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HPSortHistoryClient) UpdateOneID(id int) *HPSortHistoryUpdateOne {
	mutation := newHPSortHistoryMutation(c.config, OpUpdateOne, withHPSortHistoryID(id))
	return &HPSortHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for HPSortHistory.
func (c *HPSortHistoryClient) Delete() *HPSortHistoryDelete {
	mutation := newHPSortHistoryMutation(c.config, OpDelete)
	return &HPSortHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *HPSortHistoryClient) DeleteOne(hsh *HPSortHistory) *HPSortHistoryDeleteOne {
	return c.DeleteOneID(hsh.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *HPSortHistoryClient) DeleteOneID(id int) *HPSortHistoryDeleteOne {
	builder := c.Delete().Where(hpsorthistory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HPSortHistoryDeleteOne{builder}
}

// Query returns a query builder for HPSortHistory.
func (c *HPSortHistoryClient) Query() *HPSortHistoryQuery {
	return &HPSortHistoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeHPSortHistory},
		inters: c.Interceptors(),
	}
}

// Get returns a HPSortHistory entity by its id.
func (c *HPSortHistoryClient) Get(ctx context.Context, id int) (*HPSortHistory, error) {
	return c.Query().Where(hpsorthistory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HPSortHistoryClient) GetX(ctx context.Context, id int) *HPSortHistory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a HPSortHistory.
func (c *HPSortHistoryClient) QueryOwner(hsh *HPSortHistory) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hsh.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hpsorthistory.Table, hpsorthistory.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hpsorthistory.OwnerTable, hpsorthistory.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(hsh.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *HPSortHistoryClient) Hooks() []Hook {
	hooks := c.hooks.HPSortHistory
	return append(hooks[:len(hooks):len(hooks)], hpsorthistory.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *HPSortHistoryClient) Interceptors() []Interceptor {
	return c.inters.HPSortHistory
}

func (c *HPSortHistoryClient) mutate(ctx context.Context, m *HPSortHistoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&HPSortHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&HPSortHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&HPSortHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&HPSortHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown HPSortHistory mutation op: %q", m.Op())
	}
}

// HPViewHistoryClient is a client for the HPViewHistory schema.
type HPViewHistoryClient struct {
	config
}

// NewHPViewHistoryClient returns a client for the HPViewHistory from the given config.
func NewHPViewHistoryClient(c config) *HPViewHistoryClient {
	return &HPViewHistoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `hpviewhistory.Hooks(f(g(h())))`.
func (c *HPViewHistoryClient) Use(hooks ...Hook) {
	c.hooks.HPViewHistory = append(c.hooks.HPViewHistory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `hpviewhistory.Intercept(f(g(h())))`.
func (c *HPViewHistoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.HPViewHistory = append(c.inters.HPViewHistory, interceptors...)
}

// Create returns a builder for creating a HPViewHistory entity.
func (c *HPViewHistoryClient) Create() *HPViewHistoryCreate {
	mutation := newHPViewHistoryMutation(c.config, OpCreate)
	return &HPViewHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of HPViewHistory entities.
func (c *HPViewHistoryClient) CreateBulk(builders ...*HPViewHistoryCreate) *HPViewHistoryCreateBulk {
	return &HPViewHistoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for HPViewHistory.
func (c *HPViewHistoryClient) Update() *HPViewHistoryUpdate {
	mutation := newHPViewHistoryMutation(c.config, OpUpdate)
	return &HPViewHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HPViewHistoryClient) UpdateOne(hvh *HPViewHistory) *HPViewHistoryUpdateOne {
	mutation := newHPViewHistoryMutation(c.config, OpUpdateOne, withHPViewHistory(hvh))
	return &HPViewHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HPViewHistoryClient) UpdateOneID(id int) *HPViewHistoryUpdateOne {
	mutation := newHPViewHistoryMutation(c.config, OpUpdateOne, withHPViewHistoryID(id))
	return &HPViewHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for HPViewHistory.
func (c *HPViewHistoryClient) Delete() *HPViewHistoryDelete {
	mutation := newHPViewHistoryMutation(c.config, OpDelete)
	return &HPViewHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *HPViewHistoryClient) DeleteOne(hvh *HPViewHistory) *HPViewHistoryDeleteOne {
	return c.DeleteOneID(hvh.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *HPViewHistoryClient) DeleteOneID(id int) *HPViewHistoryDeleteOne {
	builder := c.Delete().Where(hpviewhistory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HPViewHistoryDeleteOne{builder}
}

// Query returns a query builder for HPViewHistory.
func (c *HPViewHistoryClient) Query() *HPViewHistoryQuery {
	return &HPViewHistoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeHPViewHistory},
		inters: c.Interceptors(),
	}
}

// Get returns a HPViewHistory entity by its id.
func (c *HPViewHistoryClient) Get(ctx context.Context, id int) (*HPViewHistory, error) {
	return c.Query().Where(hpviewhistory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HPViewHistoryClient) GetX(ctx context.Context, id int) *HPViewHistory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFeed queries the feed edge of a HPViewHistory.
func (c *HPViewHistoryClient) QueryFeed(hvh *HPViewHistory) *HPFeedItemQuery {
	query := (&HPFeedItemClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hvh.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hpviewhistory.Table, hpviewhistory.FieldID, id),
			sqlgraph.To(hpfeeditem.Table, hpfeeditem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hpviewhistory.FeedTable, hpviewhistory.FeedColumn),
		)
		fromV = sqlgraph.Neighbors(hvh.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a HPViewHistory.
func (c *HPViewHistoryClient) QueryUser(hvh *HPViewHistory) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hvh.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hpviewhistory.Table, hpviewhistory.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hpviewhistory.UserTable, hpviewhistory.UserColumn),
		)
		fromV = sqlgraph.Neighbors(hvh.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *HPViewHistoryClient) Hooks() []Hook {
	hooks := c.hooks.HPViewHistory
	return append(hooks[:len(hooks):len(hooks)], hpviewhistory.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *HPViewHistoryClient) Interceptors() []Interceptor {
	return c.inters.HPViewHistory
}

func (c *HPViewHistoryClient) mutate(ctx context.Context, m *HPViewHistoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&HPViewHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&HPViewHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&HPViewHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&HPViewHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown HPViewHistory mutation op: %q", m.Op())
	}
}

// TestEntClient is a client for the TestEnt schema.
type TestEntClient struct {
	config
}

// NewTestEntClient returns a client for the TestEnt from the given config.
func NewTestEntClient(c config) *TestEntClient {
	return &TestEntClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `testent.Hooks(f(g(h())))`.
func (c *TestEntClient) Use(hooks ...Hook) {
	c.hooks.TestEnt = append(c.hooks.TestEnt, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `testent.Intercept(f(g(h())))`.
func (c *TestEntClient) Intercept(interceptors ...Interceptor) {
	c.inters.TestEnt = append(c.inters.TestEnt, interceptors...)
}

// Create returns a builder for creating a TestEnt entity.
func (c *TestEntClient) Create() *TestEntCreate {
	mutation := newTestEntMutation(c.config, OpCreate)
	return &TestEntCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TestEnt entities.
func (c *TestEntClient) CreateBulk(builders ...*TestEntCreate) *TestEntCreateBulk {
	return &TestEntCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TestEnt.
func (c *TestEntClient) Update() *TestEntUpdate {
	mutation := newTestEntMutation(c.config, OpUpdate)
	return &TestEntUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TestEntClient) UpdateOne(te *TestEnt) *TestEntUpdateOne {
	mutation := newTestEntMutation(c.config, OpUpdateOne, withTestEnt(te))
	return &TestEntUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TestEntClient) UpdateOneID(id int) *TestEntUpdateOne {
	mutation := newTestEntMutation(c.config, OpUpdateOne, withTestEntID(id))
	return &TestEntUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TestEnt.
func (c *TestEntClient) Delete() *TestEntDelete {
	mutation := newTestEntMutation(c.config, OpDelete)
	return &TestEntDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TestEntClient) DeleteOne(te *TestEnt) *TestEntDeleteOne {
	return c.DeleteOneID(te.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TestEntClient) DeleteOneID(id int) *TestEntDeleteOne {
	builder := c.Delete().Where(testent.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TestEntDeleteOne{builder}
}

// Query returns a query builder for TestEnt.
func (c *TestEntClient) Query() *TestEntQuery {
	return &TestEntQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTestEnt},
		inters: c.Interceptors(),
	}
}

// Get returns a TestEnt entity by its id.
func (c *TestEntClient) Get(ctx context.Context, id int) (*TestEnt, error) {
	return c.Query().Where(testent.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TestEntClient) GetX(ctx context.Context, id int) *TestEnt {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TestEntClient) Hooks() []Hook {
	return c.hooks.TestEnt
}

// Interceptors returns the client interceptors.
func (c *TestEntClient) Interceptors() []Interceptor {
	return c.inters.TestEnt
}

func (c *TestEntClient) mutate(ctx context.Context, m *TestEntMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TestEntCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TestEntUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TestEntUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TestEntDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown TestEnt mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAuth queries the auth edge of a User.
func (c *UserClient) QueryAuth(u *User) *AuthQuery {
	query := (&AuthClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(auth.Table, auth.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.AuthTable, user.AuthColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotificationSettings queries the notification_settings edge of a User.
func (c *UserClient) QueryNotificationSettings(u *User) *UserNotificationSettingQuery {
	query := (&UserNotificationSettingClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(usernotificationsetting.Table, usernotificationsetting.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.NotificationSettingsTable, user.NotificationSettingsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHpviewHistory queries the hpview_history edge of a User.
func (c *UserClient) QueryHpviewHistory(u *User) *HPViewHistoryQuery {
	query := (&HPViewHistoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(hpviewhistory.Table, hpviewhistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.HpviewHistoryTable, user.HpviewHistoryColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHpfollow queries the hpfollow edge of a User.
func (c *UserClient) QueryHpfollow(u *User) *HPFollowQuery {
	query := (&HPFollowClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(hpfollow.Table, hpfollow.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.HpfollowTable, user.HpfollowColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHpsortHistory queries the hpsort_history edge of a User.
func (c *UserClient) QueryHpsortHistory(u *User) *HPSortHistoryQuery {
	query := (&HPSortHistoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(hpsorthistory.Table, hpsorthistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.HpsortHistoryTable, user.HpsortHistoryColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHpfcEventTickets queries the hpfc_event_tickets edge of a User.
func (c *UserClient) QueryHpfcEventTickets(u *User) *HPFCEventTicketQuery {
	query := (&HPFCEventTicketClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(hpfceventticket.Table, hpfceventticket.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.HpfcEventTicketsTable, user.HpfcEventTicketsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryElineupMallPurchaseHistories queries the elineup_mall_purchase_histories edge of a User.
func (c *UserClient) QueryElineupMallPurchaseHistories(u *User) *HPElineupMallItemPurchaseHistoryQuery {
	query := (&HPElineupMallItemPurchaseHistoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(hpelineupmallitempurchasehistory.Table, hpelineupmallitempurchasehistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ElineupMallPurchaseHistoriesTable, user.ElineupMallPurchaseHistoriesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	hooks := c.hooks.User
	return append(hooks[:len(hooks):len(hooks)], user.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// UserNotificationLogClient is a client for the UserNotificationLog schema.
type UserNotificationLogClient struct {
	config
}

// NewUserNotificationLogClient returns a client for the UserNotificationLog from the given config.
func NewUserNotificationLogClient(c config) *UserNotificationLogClient {
	return &UserNotificationLogClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `usernotificationlog.Hooks(f(g(h())))`.
func (c *UserNotificationLogClient) Use(hooks ...Hook) {
	c.hooks.UserNotificationLog = append(c.hooks.UserNotificationLog, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `usernotificationlog.Intercept(f(g(h())))`.
func (c *UserNotificationLogClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserNotificationLog = append(c.inters.UserNotificationLog, interceptors...)
}

// Create returns a builder for creating a UserNotificationLog entity.
func (c *UserNotificationLogClient) Create() *UserNotificationLogCreate {
	mutation := newUserNotificationLogMutation(c.config, OpCreate)
	return &UserNotificationLogCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserNotificationLog entities.
func (c *UserNotificationLogClient) CreateBulk(builders ...*UserNotificationLogCreate) *UserNotificationLogCreateBulk {
	return &UserNotificationLogCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserNotificationLog.
func (c *UserNotificationLogClient) Update() *UserNotificationLogUpdate {
	mutation := newUserNotificationLogMutation(c.config, OpUpdate)
	return &UserNotificationLogUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserNotificationLogClient) UpdateOne(unl *UserNotificationLog) *UserNotificationLogUpdateOne {
	mutation := newUserNotificationLogMutation(c.config, OpUpdateOne, withUserNotificationLog(unl))
	return &UserNotificationLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserNotificationLogClient) UpdateOneID(id int) *UserNotificationLogUpdateOne {
	mutation := newUserNotificationLogMutation(c.config, OpUpdateOne, withUserNotificationLogID(id))
	return &UserNotificationLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserNotificationLog.
func (c *UserNotificationLogClient) Delete() *UserNotificationLogDelete {
	mutation := newUserNotificationLogMutation(c.config, OpDelete)
	return &UserNotificationLogDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserNotificationLogClient) DeleteOne(unl *UserNotificationLog) *UserNotificationLogDeleteOne {
	return c.DeleteOneID(unl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserNotificationLogClient) DeleteOneID(id int) *UserNotificationLogDeleteOne {
	builder := c.Delete().Where(usernotificationlog.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserNotificationLogDeleteOne{builder}
}

// Query returns a query builder for UserNotificationLog.
func (c *UserNotificationLogClient) Query() *UserNotificationLogQuery {
	return &UserNotificationLogQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserNotificationLog},
		inters: c.Interceptors(),
	}
}

// Get returns a UserNotificationLog entity by its id.
func (c *UserNotificationLogClient) Get(ctx context.Context, id int) (*UserNotificationLog, error) {
	return c.Query().Where(usernotificationlog.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserNotificationLogClient) GetX(ctx context.Context, id int) *UserNotificationLog {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryReceivers queries the receivers edge of a UserNotificationLog.
func (c *UserNotificationLogClient) QueryReceivers(unl *UserNotificationLog) *UserNotificationSettingQuery {
	query := (&UserNotificationSettingClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := unl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usernotificationlog.Table, usernotificationlog.FieldID, id),
			sqlgraph.To(usernotificationsetting.Table, usernotificationsetting.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, usernotificationlog.ReceiversTable, usernotificationlog.ReceiversPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(unl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserNotificationLogClient) Hooks() []Hook {
	hooks := c.hooks.UserNotificationLog
	return append(hooks[:len(hooks):len(hooks)], usernotificationlog.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *UserNotificationLogClient) Interceptors() []Interceptor {
	return c.inters.UserNotificationLog
}

func (c *UserNotificationLogClient) mutate(ctx context.Context, m *UserNotificationLogMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserNotificationLogCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserNotificationLogUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserNotificationLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserNotificationLogDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserNotificationLog mutation op: %q", m.Op())
	}
}

// UserNotificationSettingClient is a client for the UserNotificationSetting schema.
type UserNotificationSettingClient struct {
	config
}

// NewUserNotificationSettingClient returns a client for the UserNotificationSetting from the given config.
func NewUserNotificationSettingClient(c config) *UserNotificationSettingClient {
	return &UserNotificationSettingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `usernotificationsetting.Hooks(f(g(h())))`.
func (c *UserNotificationSettingClient) Use(hooks ...Hook) {
	c.hooks.UserNotificationSetting = append(c.hooks.UserNotificationSetting, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `usernotificationsetting.Intercept(f(g(h())))`.
func (c *UserNotificationSettingClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserNotificationSetting = append(c.inters.UserNotificationSetting, interceptors...)
}

// Create returns a builder for creating a UserNotificationSetting entity.
func (c *UserNotificationSettingClient) Create() *UserNotificationSettingCreate {
	mutation := newUserNotificationSettingMutation(c.config, OpCreate)
	return &UserNotificationSettingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserNotificationSetting entities.
func (c *UserNotificationSettingClient) CreateBulk(builders ...*UserNotificationSettingCreate) *UserNotificationSettingCreateBulk {
	return &UserNotificationSettingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserNotificationSetting.
func (c *UserNotificationSettingClient) Update() *UserNotificationSettingUpdate {
	mutation := newUserNotificationSettingMutation(c.config, OpUpdate)
	return &UserNotificationSettingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserNotificationSettingClient) UpdateOne(uns *UserNotificationSetting) *UserNotificationSettingUpdateOne {
	mutation := newUserNotificationSettingMutation(c.config, OpUpdateOne, withUserNotificationSetting(uns))
	return &UserNotificationSettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserNotificationSettingClient) UpdateOneID(id int) *UserNotificationSettingUpdateOne {
	mutation := newUserNotificationSettingMutation(c.config, OpUpdateOne, withUserNotificationSettingID(id))
	return &UserNotificationSettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserNotificationSetting.
func (c *UserNotificationSettingClient) Delete() *UserNotificationSettingDelete {
	mutation := newUserNotificationSettingMutation(c.config, OpDelete)
	return &UserNotificationSettingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserNotificationSettingClient) DeleteOne(uns *UserNotificationSetting) *UserNotificationSettingDeleteOne {
	return c.DeleteOneID(uns.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserNotificationSettingClient) DeleteOneID(id int) *UserNotificationSettingDeleteOne {
	builder := c.Delete().Where(usernotificationsetting.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserNotificationSettingDeleteOne{builder}
}

// Query returns a query builder for UserNotificationSetting.
func (c *UserNotificationSettingClient) Query() *UserNotificationSettingQuery {
	return &UserNotificationSettingQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserNotificationSetting},
		inters: c.Interceptors(),
	}
}

// Get returns a UserNotificationSetting entity by its id.
func (c *UserNotificationSettingClient) Get(ctx context.Context, id int) (*UserNotificationSetting, error) {
	return c.Query().Where(usernotificationsetting.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserNotificationSettingClient) GetX(ctx context.Context, id int) *UserNotificationSetting {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a UserNotificationSetting.
func (c *UserNotificationSettingClient) QueryUser(uns *UserNotificationSetting) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := uns.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usernotificationsetting.Table, usernotificationsetting.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, usernotificationsetting.UserTable, usernotificationsetting.UserColumn),
		)
		fromV = sqlgraph.Neighbors(uns.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotificationLogs queries the notification_logs edge of a UserNotificationSetting.
func (c *UserNotificationSettingClient) QueryNotificationLogs(uns *UserNotificationSetting) *UserNotificationLogQuery {
	query := (&UserNotificationLogClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := uns.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usernotificationsetting.Table, usernotificationsetting.FieldID, id),
			sqlgraph.To(usernotificationlog.Table, usernotificationlog.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, usernotificationsetting.NotificationLogsTable, usernotificationsetting.NotificationLogsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(uns.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserNotificationSettingClient) Hooks() []Hook {
	hooks := c.hooks.UserNotificationSetting
	return append(hooks[:len(hooks):len(hooks)], usernotificationsetting.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *UserNotificationSettingClient) Interceptors() []Interceptor {
	return c.inters.UserNotificationSetting
}

func (c *UserNotificationSettingClient) mutate(ctx context.Context, m *UserNotificationSettingMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserNotificationSettingCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserNotificationSettingUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserNotificationSettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserNotificationSettingDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserNotificationSetting mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Auth, HPAmebloPost, HPArtist, HPAsset, HPBlob, HPElineupMallItem,
		HPElineupMallItemPurchaseHistory, HPEvent, HPFCEventTicket, HPFeedItem,
		HPFollow, HPIgPost, HPMember, HPSortHistory, HPViewHistory, TestEnt, User,
		UserNotificationLog, UserNotificationSetting []ent.Hook
	}
	inters struct {
		Auth, HPAmebloPost, HPArtist, HPAsset, HPBlob, HPElineupMallItem,
		HPElineupMallItemPurchaseHistory, HPEvent, HPFCEventTicket, HPFeedItem,
		HPFollow, HPIgPost, HPMember, HPSortHistory, HPViewHistory, TestEnt, User,
		UserNotificationLog, UserNotificationSetting []ent.Interceptor
	}
)
