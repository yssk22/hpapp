// Code generated by ent, DO NOT EDIT.

package hpigpost

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/yssk22/hpapp/go/service/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldLTE(FieldID, id))
}

// CrawledAt applies equality check predicate on the "crawled_at" field. It's identical to CrawledAtEQ.
func CrawledAt(v time.Time) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldEQ(FieldCrawledAt, v))
}

// ErrorCount applies equality check predicate on the "error_count" field. It's identical to ErrorCountEQ.
func ErrorCount(v int) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldEQ(FieldErrorCount, v))
}

// LastErrorMessage applies equality check predicate on the "last_error_message" field. It's identical to LastErrorMessageEQ.
func LastErrorMessage(v string) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldEQ(FieldLastErrorMessage, v))
}

// RecrawlRequired applies equality check predicate on the "recrawl_required" field. It's identical to RecrawlRequiredEQ.
func RecrawlRequired(v bool) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldEQ(FieldRecrawlRequired, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldEQ(FieldUpdatedAt, v))
}

// Shortcode applies equality check predicate on the "shortcode" field. It's identical to ShortcodeEQ.
func Shortcode(v string) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldEQ(FieldShortcode, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldEQ(FieldDescription, v))
}

// PostAt applies equality check predicate on the "post_at" field. It's identical to PostAtEQ.
func PostAt(v time.Time) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldEQ(FieldPostAt, v))
}

// Likes applies equality check predicate on the "likes" field. It's identical to LikesEQ.
func Likes(v int) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldEQ(FieldLikes, v))
}

// Comments applies equality check predicate on the "comments" field. It's identical to CommentsEQ.
func Comments(v int) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldEQ(FieldComments, v))
}

// OwnerArtistID applies equality check predicate on the "owner_artist_id" field. It's identical to OwnerArtistIDEQ.
func OwnerArtistID(v int) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldEQ(FieldOwnerArtistID, v))
}

// OwnerMemberID applies equality check predicate on the "owner_member_id" field. It's identical to OwnerMemberIDEQ.
func OwnerMemberID(v int) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldEQ(FieldOwnerMemberID, v))
}

// CrawledAtEQ applies the EQ predicate on the "crawled_at" field.
func CrawledAtEQ(v time.Time) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldEQ(FieldCrawledAt, v))
}

// CrawledAtNEQ applies the NEQ predicate on the "crawled_at" field.
func CrawledAtNEQ(v time.Time) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldNEQ(FieldCrawledAt, v))
}

// CrawledAtIn applies the In predicate on the "crawled_at" field.
func CrawledAtIn(vs ...time.Time) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldIn(FieldCrawledAt, vs...))
}

// CrawledAtNotIn applies the NotIn predicate on the "crawled_at" field.
func CrawledAtNotIn(vs ...time.Time) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldNotIn(FieldCrawledAt, vs...))
}

// CrawledAtGT applies the GT predicate on the "crawled_at" field.
func CrawledAtGT(v time.Time) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldGT(FieldCrawledAt, v))
}

// CrawledAtGTE applies the GTE predicate on the "crawled_at" field.
func CrawledAtGTE(v time.Time) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldGTE(FieldCrawledAt, v))
}

// CrawledAtLT applies the LT predicate on the "crawled_at" field.
func CrawledAtLT(v time.Time) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldLT(FieldCrawledAt, v))
}

// CrawledAtLTE applies the LTE predicate on the "crawled_at" field.
func CrawledAtLTE(v time.Time) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldLTE(FieldCrawledAt, v))
}

// CrawledAtIsNil applies the IsNil predicate on the "crawled_at" field.
func CrawledAtIsNil() predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldIsNull(FieldCrawledAt))
}

// CrawledAtNotNil applies the NotNil predicate on the "crawled_at" field.
func CrawledAtNotNil() predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldNotNull(FieldCrawledAt))
}

// ErrorCountEQ applies the EQ predicate on the "error_count" field.
func ErrorCountEQ(v int) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldEQ(FieldErrorCount, v))
}

// ErrorCountNEQ applies the NEQ predicate on the "error_count" field.
func ErrorCountNEQ(v int) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldNEQ(FieldErrorCount, v))
}

// ErrorCountIn applies the In predicate on the "error_count" field.
func ErrorCountIn(vs ...int) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldIn(FieldErrorCount, vs...))
}

// ErrorCountNotIn applies the NotIn predicate on the "error_count" field.
func ErrorCountNotIn(vs ...int) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldNotIn(FieldErrorCount, vs...))
}

// ErrorCountGT applies the GT predicate on the "error_count" field.
func ErrorCountGT(v int) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldGT(FieldErrorCount, v))
}

// ErrorCountGTE applies the GTE predicate on the "error_count" field.
func ErrorCountGTE(v int) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldGTE(FieldErrorCount, v))
}

// ErrorCountLT applies the LT predicate on the "error_count" field.
func ErrorCountLT(v int) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldLT(FieldErrorCount, v))
}

// ErrorCountLTE applies the LTE predicate on the "error_count" field.
func ErrorCountLTE(v int) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldLTE(FieldErrorCount, v))
}

// ManuallyModifiedIsNil applies the IsNil predicate on the "manually_modified" field.
func ManuallyModifiedIsNil() predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldIsNull(FieldManuallyModified))
}

// ManuallyModifiedNotNil applies the NotNil predicate on the "manually_modified" field.
func ManuallyModifiedNotNil() predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldNotNull(FieldManuallyModified))
}

// LastErrorMessageEQ applies the EQ predicate on the "last_error_message" field.
func LastErrorMessageEQ(v string) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldEQ(FieldLastErrorMessage, v))
}

// LastErrorMessageNEQ applies the NEQ predicate on the "last_error_message" field.
func LastErrorMessageNEQ(v string) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldNEQ(FieldLastErrorMessage, v))
}

// LastErrorMessageIn applies the In predicate on the "last_error_message" field.
func LastErrorMessageIn(vs ...string) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldIn(FieldLastErrorMessage, vs...))
}

// LastErrorMessageNotIn applies the NotIn predicate on the "last_error_message" field.
func LastErrorMessageNotIn(vs ...string) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldNotIn(FieldLastErrorMessage, vs...))
}

// LastErrorMessageGT applies the GT predicate on the "last_error_message" field.
func LastErrorMessageGT(v string) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldGT(FieldLastErrorMessage, v))
}

// LastErrorMessageGTE applies the GTE predicate on the "last_error_message" field.
func LastErrorMessageGTE(v string) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldGTE(FieldLastErrorMessage, v))
}

// LastErrorMessageLT applies the LT predicate on the "last_error_message" field.
func LastErrorMessageLT(v string) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldLT(FieldLastErrorMessage, v))
}

// LastErrorMessageLTE applies the LTE predicate on the "last_error_message" field.
func LastErrorMessageLTE(v string) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldLTE(FieldLastErrorMessage, v))
}

// LastErrorMessageContains applies the Contains predicate on the "last_error_message" field.
func LastErrorMessageContains(v string) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldContains(FieldLastErrorMessage, v))
}

// LastErrorMessageHasPrefix applies the HasPrefix predicate on the "last_error_message" field.
func LastErrorMessageHasPrefix(v string) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldHasPrefix(FieldLastErrorMessage, v))
}

// LastErrorMessageHasSuffix applies the HasSuffix predicate on the "last_error_message" field.
func LastErrorMessageHasSuffix(v string) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldHasSuffix(FieldLastErrorMessage, v))
}

// LastErrorMessageIsNil applies the IsNil predicate on the "last_error_message" field.
func LastErrorMessageIsNil() predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldIsNull(FieldLastErrorMessage))
}

// LastErrorMessageNotNil applies the NotNil predicate on the "last_error_message" field.
func LastErrorMessageNotNil() predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldNotNull(FieldLastErrorMessage))
}

// LastErrorMessageEqualFold applies the EqualFold predicate on the "last_error_message" field.
func LastErrorMessageEqualFold(v string) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldEqualFold(FieldLastErrorMessage, v))
}

// LastErrorMessageContainsFold applies the ContainsFold predicate on the "last_error_message" field.
func LastErrorMessageContainsFold(v string) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldContainsFold(FieldLastErrorMessage, v))
}

// RecrawlRequiredEQ applies the EQ predicate on the "recrawl_required" field.
func RecrawlRequiredEQ(v bool) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldEQ(FieldRecrawlRequired, v))
}

// RecrawlRequiredNEQ applies the NEQ predicate on the "recrawl_required" field.
func RecrawlRequiredNEQ(v bool) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldNEQ(FieldRecrawlRequired, v))
}

// RecrawlRequiredIsNil applies the IsNil predicate on the "recrawl_required" field.
func RecrawlRequiredIsNil() predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldIsNull(FieldRecrawlRequired))
}

// RecrawlRequiredNotNil applies the NotNil predicate on the "recrawl_required" field.
func RecrawlRequiredNotNil() predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldNotNull(FieldRecrawlRequired))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldNotNull(FieldUpdatedAt))
}

// ShortcodeEQ applies the EQ predicate on the "shortcode" field.
func ShortcodeEQ(v string) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldEQ(FieldShortcode, v))
}

// ShortcodeNEQ applies the NEQ predicate on the "shortcode" field.
func ShortcodeNEQ(v string) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldNEQ(FieldShortcode, v))
}

// ShortcodeIn applies the In predicate on the "shortcode" field.
func ShortcodeIn(vs ...string) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldIn(FieldShortcode, vs...))
}

// ShortcodeNotIn applies the NotIn predicate on the "shortcode" field.
func ShortcodeNotIn(vs ...string) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldNotIn(FieldShortcode, vs...))
}

// ShortcodeGT applies the GT predicate on the "shortcode" field.
func ShortcodeGT(v string) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldGT(FieldShortcode, v))
}

// ShortcodeGTE applies the GTE predicate on the "shortcode" field.
func ShortcodeGTE(v string) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldGTE(FieldShortcode, v))
}

// ShortcodeLT applies the LT predicate on the "shortcode" field.
func ShortcodeLT(v string) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldLT(FieldShortcode, v))
}

// ShortcodeLTE applies the LTE predicate on the "shortcode" field.
func ShortcodeLTE(v string) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldLTE(FieldShortcode, v))
}

// ShortcodeContains applies the Contains predicate on the "shortcode" field.
func ShortcodeContains(v string) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldContains(FieldShortcode, v))
}

// ShortcodeHasPrefix applies the HasPrefix predicate on the "shortcode" field.
func ShortcodeHasPrefix(v string) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldHasPrefix(FieldShortcode, v))
}

// ShortcodeHasSuffix applies the HasSuffix predicate on the "shortcode" field.
func ShortcodeHasSuffix(v string) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldHasSuffix(FieldShortcode, v))
}

// ShortcodeEqualFold applies the EqualFold predicate on the "shortcode" field.
func ShortcodeEqualFold(v string) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldEqualFold(FieldShortcode, v))
}

// ShortcodeContainsFold applies the ContainsFold predicate on the "shortcode" field.
func ShortcodeContainsFold(v string) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldContainsFold(FieldShortcode, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldContainsFold(FieldDescription, v))
}

// PostAtEQ applies the EQ predicate on the "post_at" field.
func PostAtEQ(v time.Time) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldEQ(FieldPostAt, v))
}

// PostAtNEQ applies the NEQ predicate on the "post_at" field.
func PostAtNEQ(v time.Time) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldNEQ(FieldPostAt, v))
}

// PostAtIn applies the In predicate on the "post_at" field.
func PostAtIn(vs ...time.Time) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldIn(FieldPostAt, vs...))
}

// PostAtNotIn applies the NotIn predicate on the "post_at" field.
func PostAtNotIn(vs ...time.Time) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldNotIn(FieldPostAt, vs...))
}

// PostAtGT applies the GT predicate on the "post_at" field.
func PostAtGT(v time.Time) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldGT(FieldPostAt, v))
}

// PostAtGTE applies the GTE predicate on the "post_at" field.
func PostAtGTE(v time.Time) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldGTE(FieldPostAt, v))
}

// PostAtLT applies the LT predicate on the "post_at" field.
func PostAtLT(v time.Time) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldLT(FieldPostAt, v))
}

// PostAtLTE applies the LTE predicate on the "post_at" field.
func PostAtLTE(v time.Time) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldLTE(FieldPostAt, v))
}

// LikesEQ applies the EQ predicate on the "likes" field.
func LikesEQ(v int) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldEQ(FieldLikes, v))
}

// LikesNEQ applies the NEQ predicate on the "likes" field.
func LikesNEQ(v int) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldNEQ(FieldLikes, v))
}

// LikesIn applies the In predicate on the "likes" field.
func LikesIn(vs ...int) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldIn(FieldLikes, vs...))
}

// LikesNotIn applies the NotIn predicate on the "likes" field.
func LikesNotIn(vs ...int) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldNotIn(FieldLikes, vs...))
}

// LikesGT applies the GT predicate on the "likes" field.
func LikesGT(v int) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldGT(FieldLikes, v))
}

// LikesGTE applies the GTE predicate on the "likes" field.
func LikesGTE(v int) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldGTE(FieldLikes, v))
}

// LikesLT applies the LT predicate on the "likes" field.
func LikesLT(v int) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldLT(FieldLikes, v))
}

// LikesLTE applies the LTE predicate on the "likes" field.
func LikesLTE(v int) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldLTE(FieldLikes, v))
}

// CommentsEQ applies the EQ predicate on the "comments" field.
func CommentsEQ(v int) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldEQ(FieldComments, v))
}

// CommentsNEQ applies the NEQ predicate on the "comments" field.
func CommentsNEQ(v int) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldNEQ(FieldComments, v))
}

// CommentsIn applies the In predicate on the "comments" field.
func CommentsIn(vs ...int) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldIn(FieldComments, vs...))
}

// CommentsNotIn applies the NotIn predicate on the "comments" field.
func CommentsNotIn(vs ...int) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldNotIn(FieldComments, vs...))
}

// CommentsGT applies the GT predicate on the "comments" field.
func CommentsGT(v int) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldGT(FieldComments, v))
}

// CommentsGTE applies the GTE predicate on the "comments" field.
func CommentsGTE(v int) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldGTE(FieldComments, v))
}

// CommentsLT applies the LT predicate on the "comments" field.
func CommentsLT(v int) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldLT(FieldComments, v))
}

// CommentsLTE applies the LTE predicate on the "comments" field.
func CommentsLTE(v int) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldLTE(FieldComments, v))
}

// RecrawlArgsIsNil applies the IsNil predicate on the "recrawl_args" field.
func RecrawlArgsIsNil() predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldIsNull(FieldRecrawlArgs))
}

// RecrawlArgsNotNil applies the NotNil predicate on the "recrawl_args" field.
func RecrawlArgsNotNil() predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldNotNull(FieldRecrawlArgs))
}

// OwnerArtistIDEQ applies the EQ predicate on the "owner_artist_id" field.
func OwnerArtistIDEQ(v int) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldEQ(FieldOwnerArtistID, v))
}

// OwnerArtistIDNEQ applies the NEQ predicate on the "owner_artist_id" field.
func OwnerArtistIDNEQ(v int) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldNEQ(FieldOwnerArtistID, v))
}

// OwnerArtistIDIn applies the In predicate on the "owner_artist_id" field.
func OwnerArtistIDIn(vs ...int) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldIn(FieldOwnerArtistID, vs...))
}

// OwnerArtistIDNotIn applies the NotIn predicate on the "owner_artist_id" field.
func OwnerArtistIDNotIn(vs ...int) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldNotIn(FieldOwnerArtistID, vs...))
}

// OwnerArtistIDIsNil applies the IsNil predicate on the "owner_artist_id" field.
func OwnerArtistIDIsNil() predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldIsNull(FieldOwnerArtistID))
}

// OwnerArtistIDNotNil applies the NotNil predicate on the "owner_artist_id" field.
func OwnerArtistIDNotNil() predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldNotNull(FieldOwnerArtistID))
}

// OwnerMemberIDEQ applies the EQ predicate on the "owner_member_id" field.
func OwnerMemberIDEQ(v int) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldEQ(FieldOwnerMemberID, v))
}

// OwnerMemberIDNEQ applies the NEQ predicate on the "owner_member_id" field.
func OwnerMemberIDNEQ(v int) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldNEQ(FieldOwnerMemberID, v))
}

// OwnerMemberIDIn applies the In predicate on the "owner_member_id" field.
func OwnerMemberIDIn(vs ...int) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldIn(FieldOwnerMemberID, vs...))
}

// OwnerMemberIDNotIn applies the NotIn predicate on the "owner_member_id" field.
func OwnerMemberIDNotIn(vs ...int) predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldNotIn(FieldOwnerMemberID, vs...))
}

// OwnerMemberIDIsNil applies the IsNil predicate on the "owner_member_id" field.
func OwnerMemberIDIsNil() predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldIsNull(FieldOwnerMemberID))
}

// OwnerMemberIDNotNil applies the NotNil predicate on the "owner_member_id" field.
func OwnerMemberIDNotNil() predicate.HPIgPost {
	return predicate.HPIgPost(sql.FieldNotNull(FieldOwnerMemberID))
}

// HasOwnerArtist applies the HasEdge predicate on the "owner_artist" edge.
func HasOwnerArtist() predicate.HPIgPost {
	return predicate.HPIgPost(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerArtistTable, OwnerArtistColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerArtistWith applies the HasEdge predicate on the "owner_artist" edge with a given conditions (other predicates).
func HasOwnerArtistWith(preds ...predicate.HPArtist) predicate.HPIgPost {
	return predicate.HPIgPost(func(s *sql.Selector) {
		step := newOwnerArtistStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOwnerMember applies the HasEdge predicate on the "owner_member" edge.
func HasOwnerMember() predicate.HPIgPost {
	return predicate.HPIgPost(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerMemberTable, OwnerMemberColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerMemberWith applies the HasEdge predicate on the "owner_member" edge with a given conditions (other predicates).
func HasOwnerMemberWith(preds ...predicate.HPMember) predicate.HPIgPost {
	return predicate.HPIgPost(func(s *sql.Selector) {
		step := newOwnerMemberStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAsset applies the HasEdge predicate on the "asset" edge.
func HasAsset() predicate.HPIgPost {
	return predicate.HPIgPost(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AssetTable, AssetColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAssetWith applies the HasEdge predicate on the "asset" edge with a given conditions (other predicates).
func HasAssetWith(preds ...predicate.HPAsset) predicate.HPIgPost {
	return predicate.HPIgPost(func(s *sql.Selector) {
		step := newAssetStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTaggedArtists applies the HasEdge predicate on the "tagged_artists" edge.
func HasTaggedArtists() predicate.HPIgPost {
	return predicate.HPIgPost(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, TaggedArtistsTable, TaggedArtistsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTaggedArtistsWith applies the HasEdge predicate on the "tagged_artists" edge with a given conditions (other predicates).
func HasTaggedArtistsWith(preds ...predicate.HPArtist) predicate.HPIgPost {
	return predicate.HPIgPost(func(s *sql.Selector) {
		step := newTaggedArtistsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTaggedMembers applies the HasEdge predicate on the "tagged_members" edge.
func HasTaggedMembers() predicate.HPIgPost {
	return predicate.HPIgPost(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, TaggedMembersTable, TaggedMembersPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTaggedMembersWith applies the HasEdge predicate on the "tagged_members" edge with a given conditions (other predicates).
func HasTaggedMembersWith(preds ...predicate.HPMember) predicate.HPIgPost {
	return predicate.HPIgPost(func(s *sql.Selector) {
		step := newTaggedMembersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBlobs applies the HasEdge predicate on the "blobs" edge.
func HasBlobs() predicate.HPIgPost {
	return predicate.HPIgPost(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, BlobsTable, BlobsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBlobsWith applies the HasEdge predicate on the "blobs" edge with a given conditions (other predicates).
func HasBlobsWith(preds ...predicate.HPBlob) predicate.HPIgPost {
	return predicate.HPIgPost(func(s *sql.Selector) {
		step := newBlobsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.HPIgPost) predicate.HPIgPost {
	return predicate.HPIgPost(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.HPIgPost) predicate.HPIgPost {
	return predicate.HPIgPost(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.HPIgPost) predicate.HPIgPost {
	return predicate.HPIgPost(func(s *sql.Selector) {
		p(s.Not())
	})
}
