// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yssk22/hpapp/go/service/ent/hpevent"
	"github.com/yssk22/hpapp/go/service/ent/hpfceventticket"
	"github.com/yssk22/hpapp/go/service/ent/predicate"
	"github.com/yssk22/hpapp/go/service/ent/user"
	"github.com/yssk22/hpapp/go/service/schema/enums"
)

// HPFCEventTicketUpdate is the builder for updating HPFCEventTicket entities.
type HPFCEventTicketUpdate struct {
	config
	hooks    []Hook
	mutation *HPFCEventTicketMutation
}

// Where appends a list predicates to the HPFCEventTicketUpdate builder.
func (hetu *HPFCEventTicketUpdate) Where(ps ...predicate.HPFCEventTicket) *HPFCEventTicketUpdate {
	hetu.mutation.Where(ps...)
	return hetu
}

// SetUpdatedAt sets the "updated_at" field.
func (hetu *HPFCEventTicketUpdate) SetUpdatedAt(t time.Time) *HPFCEventTicketUpdate {
	hetu.mutation.SetUpdatedAt(t)
	return hetu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (hetu *HPFCEventTicketUpdate) SetNillableUpdatedAt(t *time.Time) *HPFCEventTicketUpdate {
	if t != nil {
		hetu.SetUpdatedAt(*t)
	}
	return hetu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (hetu *HPFCEventTicketUpdate) ClearUpdatedAt() *HPFCEventTicketUpdate {
	hetu.mutation.ClearUpdatedAt()
	return hetu
}

// SetNum sets the "num" field.
func (hetu *HPFCEventTicketUpdate) SetNum(i int) *HPFCEventTicketUpdate {
	hetu.mutation.ResetNum()
	hetu.mutation.SetNum(i)
	return hetu
}

// AddNum adds i to the "num" field.
func (hetu *HPFCEventTicketUpdate) AddNum(i int) *HPFCEventTicketUpdate {
	hetu.mutation.AddNum(i)
	return hetu
}

// SetStatus sets the "status" field.
func (hetu *HPFCEventTicketUpdate) SetStatus(eetas enums.HPFCEventTicketApplicationStatus) *HPFCEventTicketUpdate {
	hetu.mutation.SetStatus(eetas)
	return hetu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (hetu *HPFCEventTicketUpdate) SetNillableStatus(eetas *enums.HPFCEventTicketApplicationStatus) *HPFCEventTicketUpdate {
	if eetas != nil {
		hetu.SetStatus(*eetas)
	}
	return hetu
}

// SetFcMemberSha256 sets the "fc_member_sha256" field.
func (hetu *HPFCEventTicketUpdate) SetFcMemberSha256(s string) *HPFCEventTicketUpdate {
	hetu.mutation.SetFcMemberSha256(s)
	return hetu
}

// SetApplicationTitle sets the "application_title" field.
func (hetu *HPFCEventTicketUpdate) SetApplicationTitle(s string) *HPFCEventTicketUpdate {
	hetu.mutation.SetApplicationTitle(s)
	return hetu
}

// SetApplicationID sets the "application_id" field.
func (hetu *HPFCEventTicketUpdate) SetApplicationID(s string) *HPFCEventTicketUpdate {
	hetu.mutation.SetApplicationID(s)
	return hetu
}

// SetNillableApplicationID sets the "application_id" field if the given value is not nil.
func (hetu *HPFCEventTicketUpdate) SetNillableApplicationID(s *string) *HPFCEventTicketUpdate {
	if s != nil {
		hetu.SetApplicationID(*s)
	}
	return hetu
}

// ClearApplicationID clears the value of the "application_id" field.
func (hetu *HPFCEventTicketUpdate) ClearApplicationID() *HPFCEventTicketUpdate {
	hetu.mutation.ClearApplicationID()
	return hetu
}

// SetApplicationSite sets the "application_site" field.
func (hetu *HPFCEventTicketUpdate) SetApplicationSite(eetas enums.HPFCEventTicketApplicationSite) *HPFCEventTicketUpdate {
	hetu.mutation.SetApplicationSite(eetas)
	return hetu
}

// SetNillableApplicationSite sets the "application_site" field if the given value is not nil.
func (hetu *HPFCEventTicketUpdate) SetNillableApplicationSite(eetas *enums.HPFCEventTicketApplicationSite) *HPFCEventTicketUpdate {
	if eetas != nil {
		hetu.SetApplicationSite(*eetas)
	}
	return hetu
}

// SetApplicationStartDate sets the "application_start_date" field.
func (hetu *HPFCEventTicketUpdate) SetApplicationStartDate(t time.Time) *HPFCEventTicketUpdate {
	hetu.mutation.SetApplicationStartDate(t)
	return hetu
}

// SetNillableApplicationStartDate sets the "application_start_date" field if the given value is not nil.
func (hetu *HPFCEventTicketUpdate) SetNillableApplicationStartDate(t *time.Time) *HPFCEventTicketUpdate {
	if t != nil {
		hetu.SetApplicationStartDate(*t)
	}
	return hetu
}

// ClearApplicationStartDate clears the value of the "application_start_date" field.
func (hetu *HPFCEventTicketUpdate) ClearApplicationStartDate() *HPFCEventTicketUpdate {
	hetu.mutation.ClearApplicationStartDate()
	return hetu
}

// SetApplicationDueDate sets the "application_due_date" field.
func (hetu *HPFCEventTicketUpdate) SetApplicationDueDate(t time.Time) *HPFCEventTicketUpdate {
	hetu.mutation.SetApplicationDueDate(t)
	return hetu
}

// SetNillableApplicationDueDate sets the "application_due_date" field if the given value is not nil.
func (hetu *HPFCEventTicketUpdate) SetNillableApplicationDueDate(t *time.Time) *HPFCEventTicketUpdate {
	if t != nil {
		hetu.SetApplicationDueDate(*t)
	}
	return hetu
}

// ClearApplicationDueDate clears the value of the "application_due_date" field.
func (hetu *HPFCEventTicketUpdate) ClearApplicationDueDate() *HPFCEventTicketUpdate {
	hetu.mutation.ClearApplicationDueDate()
	return hetu
}

// SetPaymentStartDate sets the "payment_start_date" field.
func (hetu *HPFCEventTicketUpdate) SetPaymentStartDate(t time.Time) *HPFCEventTicketUpdate {
	hetu.mutation.SetPaymentStartDate(t)
	return hetu
}

// SetNillablePaymentStartDate sets the "payment_start_date" field if the given value is not nil.
func (hetu *HPFCEventTicketUpdate) SetNillablePaymentStartDate(t *time.Time) *HPFCEventTicketUpdate {
	if t != nil {
		hetu.SetPaymentStartDate(*t)
	}
	return hetu
}

// ClearPaymentStartDate clears the value of the "payment_start_date" field.
func (hetu *HPFCEventTicketUpdate) ClearPaymentStartDate() *HPFCEventTicketUpdate {
	hetu.mutation.ClearPaymentStartDate()
	return hetu
}

// SetPaymentDueDate sets the "payment_due_date" field.
func (hetu *HPFCEventTicketUpdate) SetPaymentDueDate(t time.Time) *HPFCEventTicketUpdate {
	hetu.mutation.SetPaymentDueDate(t)
	return hetu
}

// SetNillablePaymentDueDate sets the "payment_due_date" field if the given value is not nil.
func (hetu *HPFCEventTicketUpdate) SetNillablePaymentDueDate(t *time.Time) *HPFCEventTicketUpdate {
	if t != nil {
		hetu.SetPaymentDueDate(*t)
	}
	return hetu
}

// ClearPaymentDueDate clears the value of the "payment_due_date" field.
func (hetu *HPFCEventTicketUpdate) ClearPaymentDueDate() *HPFCEventTicketUpdate {
	hetu.mutation.ClearPaymentDueDate()
	return hetu
}

// SetOwnerUserID sets the "owner_user_id" field.
func (hetu *HPFCEventTicketUpdate) SetOwnerUserID(i int) *HPFCEventTicketUpdate {
	hetu.mutation.SetOwnerUserID(i)
	return hetu
}

// SetEventID sets the "event" edge to the HPEvent entity by ID.
func (hetu *HPFCEventTicketUpdate) SetEventID(id int) *HPFCEventTicketUpdate {
	hetu.mutation.SetEventID(id)
	return hetu
}

// SetNillableEventID sets the "event" edge to the HPEvent entity by ID if the given value is not nil.
func (hetu *HPFCEventTicketUpdate) SetNillableEventID(id *int) *HPFCEventTicketUpdate {
	if id != nil {
		hetu = hetu.SetEventID(*id)
	}
	return hetu
}

// SetEvent sets the "event" edge to the HPEvent entity.
func (hetu *HPFCEventTicketUpdate) SetEvent(h *HPEvent) *HPFCEventTicketUpdate {
	return hetu.SetEventID(h.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (hetu *HPFCEventTicketUpdate) SetUserID(id int) *HPFCEventTicketUpdate {
	hetu.mutation.SetUserID(id)
	return hetu
}

// SetUser sets the "user" edge to the User entity.
func (hetu *HPFCEventTicketUpdate) SetUser(u *User) *HPFCEventTicketUpdate {
	return hetu.SetUserID(u.ID)
}

// Mutation returns the HPFCEventTicketMutation object of the builder.
func (hetu *HPFCEventTicketUpdate) Mutation() *HPFCEventTicketMutation {
	return hetu.mutation
}

// ClearEvent clears the "event" edge to the HPEvent entity.
func (hetu *HPFCEventTicketUpdate) ClearEvent() *HPFCEventTicketUpdate {
	hetu.mutation.ClearEvent()
	return hetu
}

// ClearUser clears the "user" edge to the User entity.
func (hetu *HPFCEventTicketUpdate) ClearUser() *HPFCEventTicketUpdate {
	hetu.mutation.ClearUser()
	return hetu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hetu *HPFCEventTicketUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, HPFCEventTicketMutation](ctx, hetu.sqlSave, hetu.mutation, hetu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hetu *HPFCEventTicketUpdate) SaveX(ctx context.Context) int {
	affected, err := hetu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hetu *HPFCEventTicketUpdate) Exec(ctx context.Context) error {
	_, err := hetu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hetu *HPFCEventTicketUpdate) ExecX(ctx context.Context) {
	if err := hetu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hetu *HPFCEventTicketUpdate) check() error {
	if v, ok := hetu.mutation.Status(); ok {
		if err := hpfceventticket.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "HPFCEventTicket.status": %w`, err)}
		}
	}
	if v, ok := hetu.mutation.ApplicationSite(); ok {
		if err := hpfceventticket.ApplicationSiteValidator(v); err != nil {
			return &ValidationError{Name: "application_site", err: fmt.Errorf(`ent: validator failed for field "HPFCEventTicket.application_site": %w`, err)}
		}
	}
	if _, ok := hetu.mutation.UserID(); hetu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "HPFCEventTicket.user"`)
	}
	return nil
}

func (hetu *HPFCEventTicketUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := hetu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(hpfceventticket.Table, hpfceventticket.Columns, sqlgraph.NewFieldSpec(hpfceventticket.FieldID, field.TypeInt))
	if ps := hetu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if hetu.mutation.CreatedAtCleared() {
		_spec.ClearField(hpfceventticket.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := hetu.mutation.UpdatedAt(); ok {
		_spec.SetField(hpfceventticket.FieldUpdatedAt, field.TypeTime, value)
	}
	if hetu.mutation.UpdatedAtCleared() {
		_spec.ClearField(hpfceventticket.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := hetu.mutation.Num(); ok {
		_spec.SetField(hpfceventticket.FieldNum, field.TypeInt, value)
	}
	if value, ok := hetu.mutation.AddedNum(); ok {
		_spec.AddField(hpfceventticket.FieldNum, field.TypeInt, value)
	}
	if value, ok := hetu.mutation.Status(); ok {
		_spec.SetField(hpfceventticket.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := hetu.mutation.FcMemberSha256(); ok {
		_spec.SetField(hpfceventticket.FieldFcMemberSha256, field.TypeString, value)
	}
	if value, ok := hetu.mutation.ApplicationTitle(); ok {
		_spec.SetField(hpfceventticket.FieldApplicationTitle, field.TypeString, value)
	}
	if value, ok := hetu.mutation.ApplicationID(); ok {
		_spec.SetField(hpfceventticket.FieldApplicationID, field.TypeString, value)
	}
	if hetu.mutation.ApplicationIDCleared() {
		_spec.ClearField(hpfceventticket.FieldApplicationID, field.TypeString)
	}
	if value, ok := hetu.mutation.ApplicationSite(); ok {
		_spec.SetField(hpfceventticket.FieldApplicationSite, field.TypeEnum, value)
	}
	if value, ok := hetu.mutation.ApplicationStartDate(); ok {
		_spec.SetField(hpfceventticket.FieldApplicationStartDate, field.TypeTime, value)
	}
	if hetu.mutation.ApplicationStartDateCleared() {
		_spec.ClearField(hpfceventticket.FieldApplicationStartDate, field.TypeTime)
	}
	if value, ok := hetu.mutation.ApplicationDueDate(); ok {
		_spec.SetField(hpfceventticket.FieldApplicationDueDate, field.TypeTime, value)
	}
	if hetu.mutation.ApplicationDueDateCleared() {
		_spec.ClearField(hpfceventticket.FieldApplicationDueDate, field.TypeTime)
	}
	if value, ok := hetu.mutation.PaymentStartDate(); ok {
		_spec.SetField(hpfceventticket.FieldPaymentStartDate, field.TypeTime, value)
	}
	if hetu.mutation.PaymentStartDateCleared() {
		_spec.ClearField(hpfceventticket.FieldPaymentStartDate, field.TypeTime)
	}
	if value, ok := hetu.mutation.PaymentDueDate(); ok {
		_spec.SetField(hpfceventticket.FieldPaymentDueDate, field.TypeTime, value)
	}
	if hetu.mutation.PaymentDueDateCleared() {
		_spec.ClearField(hpfceventticket.FieldPaymentDueDate, field.TypeTime)
	}
	if hetu.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpfceventticket.EventTable,
			Columns: []string{hpfceventticket.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpevent.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hetu.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpfceventticket.EventTable,
			Columns: []string{hpfceventticket.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpevent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hetu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpfceventticket.UserTable,
			Columns: []string{hpfceventticket.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hetu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpfceventticket.UserTable,
			Columns: []string{hpfceventticket.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hetu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hpfceventticket.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	hetu.mutation.done = true
	return n, nil
}

// HPFCEventTicketUpdateOne is the builder for updating a single HPFCEventTicket entity.
type HPFCEventTicketUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HPFCEventTicketMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (hetuo *HPFCEventTicketUpdateOne) SetUpdatedAt(t time.Time) *HPFCEventTicketUpdateOne {
	hetuo.mutation.SetUpdatedAt(t)
	return hetuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (hetuo *HPFCEventTicketUpdateOne) SetNillableUpdatedAt(t *time.Time) *HPFCEventTicketUpdateOne {
	if t != nil {
		hetuo.SetUpdatedAt(*t)
	}
	return hetuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (hetuo *HPFCEventTicketUpdateOne) ClearUpdatedAt() *HPFCEventTicketUpdateOne {
	hetuo.mutation.ClearUpdatedAt()
	return hetuo
}

// SetNum sets the "num" field.
func (hetuo *HPFCEventTicketUpdateOne) SetNum(i int) *HPFCEventTicketUpdateOne {
	hetuo.mutation.ResetNum()
	hetuo.mutation.SetNum(i)
	return hetuo
}

// AddNum adds i to the "num" field.
func (hetuo *HPFCEventTicketUpdateOne) AddNum(i int) *HPFCEventTicketUpdateOne {
	hetuo.mutation.AddNum(i)
	return hetuo
}

// SetStatus sets the "status" field.
func (hetuo *HPFCEventTicketUpdateOne) SetStatus(eetas enums.HPFCEventTicketApplicationStatus) *HPFCEventTicketUpdateOne {
	hetuo.mutation.SetStatus(eetas)
	return hetuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (hetuo *HPFCEventTicketUpdateOne) SetNillableStatus(eetas *enums.HPFCEventTicketApplicationStatus) *HPFCEventTicketUpdateOne {
	if eetas != nil {
		hetuo.SetStatus(*eetas)
	}
	return hetuo
}

// SetFcMemberSha256 sets the "fc_member_sha256" field.
func (hetuo *HPFCEventTicketUpdateOne) SetFcMemberSha256(s string) *HPFCEventTicketUpdateOne {
	hetuo.mutation.SetFcMemberSha256(s)
	return hetuo
}

// SetApplicationTitle sets the "application_title" field.
func (hetuo *HPFCEventTicketUpdateOne) SetApplicationTitle(s string) *HPFCEventTicketUpdateOne {
	hetuo.mutation.SetApplicationTitle(s)
	return hetuo
}

// SetApplicationID sets the "application_id" field.
func (hetuo *HPFCEventTicketUpdateOne) SetApplicationID(s string) *HPFCEventTicketUpdateOne {
	hetuo.mutation.SetApplicationID(s)
	return hetuo
}

// SetNillableApplicationID sets the "application_id" field if the given value is not nil.
func (hetuo *HPFCEventTicketUpdateOne) SetNillableApplicationID(s *string) *HPFCEventTicketUpdateOne {
	if s != nil {
		hetuo.SetApplicationID(*s)
	}
	return hetuo
}

// ClearApplicationID clears the value of the "application_id" field.
func (hetuo *HPFCEventTicketUpdateOne) ClearApplicationID() *HPFCEventTicketUpdateOne {
	hetuo.mutation.ClearApplicationID()
	return hetuo
}

// SetApplicationSite sets the "application_site" field.
func (hetuo *HPFCEventTicketUpdateOne) SetApplicationSite(eetas enums.HPFCEventTicketApplicationSite) *HPFCEventTicketUpdateOne {
	hetuo.mutation.SetApplicationSite(eetas)
	return hetuo
}

// SetNillableApplicationSite sets the "application_site" field if the given value is not nil.
func (hetuo *HPFCEventTicketUpdateOne) SetNillableApplicationSite(eetas *enums.HPFCEventTicketApplicationSite) *HPFCEventTicketUpdateOne {
	if eetas != nil {
		hetuo.SetApplicationSite(*eetas)
	}
	return hetuo
}

// SetApplicationStartDate sets the "application_start_date" field.
func (hetuo *HPFCEventTicketUpdateOne) SetApplicationStartDate(t time.Time) *HPFCEventTicketUpdateOne {
	hetuo.mutation.SetApplicationStartDate(t)
	return hetuo
}

// SetNillableApplicationStartDate sets the "application_start_date" field if the given value is not nil.
func (hetuo *HPFCEventTicketUpdateOne) SetNillableApplicationStartDate(t *time.Time) *HPFCEventTicketUpdateOne {
	if t != nil {
		hetuo.SetApplicationStartDate(*t)
	}
	return hetuo
}

// ClearApplicationStartDate clears the value of the "application_start_date" field.
func (hetuo *HPFCEventTicketUpdateOne) ClearApplicationStartDate() *HPFCEventTicketUpdateOne {
	hetuo.mutation.ClearApplicationStartDate()
	return hetuo
}

// SetApplicationDueDate sets the "application_due_date" field.
func (hetuo *HPFCEventTicketUpdateOne) SetApplicationDueDate(t time.Time) *HPFCEventTicketUpdateOne {
	hetuo.mutation.SetApplicationDueDate(t)
	return hetuo
}

// SetNillableApplicationDueDate sets the "application_due_date" field if the given value is not nil.
func (hetuo *HPFCEventTicketUpdateOne) SetNillableApplicationDueDate(t *time.Time) *HPFCEventTicketUpdateOne {
	if t != nil {
		hetuo.SetApplicationDueDate(*t)
	}
	return hetuo
}

// ClearApplicationDueDate clears the value of the "application_due_date" field.
func (hetuo *HPFCEventTicketUpdateOne) ClearApplicationDueDate() *HPFCEventTicketUpdateOne {
	hetuo.mutation.ClearApplicationDueDate()
	return hetuo
}

// SetPaymentStartDate sets the "payment_start_date" field.
func (hetuo *HPFCEventTicketUpdateOne) SetPaymentStartDate(t time.Time) *HPFCEventTicketUpdateOne {
	hetuo.mutation.SetPaymentStartDate(t)
	return hetuo
}

// SetNillablePaymentStartDate sets the "payment_start_date" field if the given value is not nil.
func (hetuo *HPFCEventTicketUpdateOne) SetNillablePaymentStartDate(t *time.Time) *HPFCEventTicketUpdateOne {
	if t != nil {
		hetuo.SetPaymentStartDate(*t)
	}
	return hetuo
}

// ClearPaymentStartDate clears the value of the "payment_start_date" field.
func (hetuo *HPFCEventTicketUpdateOne) ClearPaymentStartDate() *HPFCEventTicketUpdateOne {
	hetuo.mutation.ClearPaymentStartDate()
	return hetuo
}

// SetPaymentDueDate sets the "payment_due_date" field.
func (hetuo *HPFCEventTicketUpdateOne) SetPaymentDueDate(t time.Time) *HPFCEventTicketUpdateOne {
	hetuo.mutation.SetPaymentDueDate(t)
	return hetuo
}

// SetNillablePaymentDueDate sets the "payment_due_date" field if the given value is not nil.
func (hetuo *HPFCEventTicketUpdateOne) SetNillablePaymentDueDate(t *time.Time) *HPFCEventTicketUpdateOne {
	if t != nil {
		hetuo.SetPaymentDueDate(*t)
	}
	return hetuo
}

// ClearPaymentDueDate clears the value of the "payment_due_date" field.
func (hetuo *HPFCEventTicketUpdateOne) ClearPaymentDueDate() *HPFCEventTicketUpdateOne {
	hetuo.mutation.ClearPaymentDueDate()
	return hetuo
}

// SetOwnerUserID sets the "owner_user_id" field.
func (hetuo *HPFCEventTicketUpdateOne) SetOwnerUserID(i int) *HPFCEventTicketUpdateOne {
	hetuo.mutation.SetOwnerUserID(i)
	return hetuo
}

// SetEventID sets the "event" edge to the HPEvent entity by ID.
func (hetuo *HPFCEventTicketUpdateOne) SetEventID(id int) *HPFCEventTicketUpdateOne {
	hetuo.mutation.SetEventID(id)
	return hetuo
}

// SetNillableEventID sets the "event" edge to the HPEvent entity by ID if the given value is not nil.
func (hetuo *HPFCEventTicketUpdateOne) SetNillableEventID(id *int) *HPFCEventTicketUpdateOne {
	if id != nil {
		hetuo = hetuo.SetEventID(*id)
	}
	return hetuo
}

// SetEvent sets the "event" edge to the HPEvent entity.
func (hetuo *HPFCEventTicketUpdateOne) SetEvent(h *HPEvent) *HPFCEventTicketUpdateOne {
	return hetuo.SetEventID(h.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (hetuo *HPFCEventTicketUpdateOne) SetUserID(id int) *HPFCEventTicketUpdateOne {
	hetuo.mutation.SetUserID(id)
	return hetuo
}

// SetUser sets the "user" edge to the User entity.
func (hetuo *HPFCEventTicketUpdateOne) SetUser(u *User) *HPFCEventTicketUpdateOne {
	return hetuo.SetUserID(u.ID)
}

// Mutation returns the HPFCEventTicketMutation object of the builder.
func (hetuo *HPFCEventTicketUpdateOne) Mutation() *HPFCEventTicketMutation {
	return hetuo.mutation
}

// ClearEvent clears the "event" edge to the HPEvent entity.
func (hetuo *HPFCEventTicketUpdateOne) ClearEvent() *HPFCEventTicketUpdateOne {
	hetuo.mutation.ClearEvent()
	return hetuo
}

// ClearUser clears the "user" edge to the User entity.
func (hetuo *HPFCEventTicketUpdateOne) ClearUser() *HPFCEventTicketUpdateOne {
	hetuo.mutation.ClearUser()
	return hetuo
}

// Where appends a list predicates to the HPFCEventTicketUpdate builder.
func (hetuo *HPFCEventTicketUpdateOne) Where(ps ...predicate.HPFCEventTicket) *HPFCEventTicketUpdateOne {
	hetuo.mutation.Where(ps...)
	return hetuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (hetuo *HPFCEventTicketUpdateOne) Select(field string, fields ...string) *HPFCEventTicketUpdateOne {
	hetuo.fields = append([]string{field}, fields...)
	return hetuo
}

// Save executes the query and returns the updated HPFCEventTicket entity.
func (hetuo *HPFCEventTicketUpdateOne) Save(ctx context.Context) (*HPFCEventTicket, error) {
	return withHooks[*HPFCEventTicket, HPFCEventTicketMutation](ctx, hetuo.sqlSave, hetuo.mutation, hetuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hetuo *HPFCEventTicketUpdateOne) SaveX(ctx context.Context) *HPFCEventTicket {
	node, err := hetuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (hetuo *HPFCEventTicketUpdateOne) Exec(ctx context.Context) error {
	_, err := hetuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hetuo *HPFCEventTicketUpdateOne) ExecX(ctx context.Context) {
	if err := hetuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hetuo *HPFCEventTicketUpdateOne) check() error {
	if v, ok := hetuo.mutation.Status(); ok {
		if err := hpfceventticket.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "HPFCEventTicket.status": %w`, err)}
		}
	}
	if v, ok := hetuo.mutation.ApplicationSite(); ok {
		if err := hpfceventticket.ApplicationSiteValidator(v); err != nil {
			return &ValidationError{Name: "application_site", err: fmt.Errorf(`ent: validator failed for field "HPFCEventTicket.application_site": %w`, err)}
		}
	}
	if _, ok := hetuo.mutation.UserID(); hetuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "HPFCEventTicket.user"`)
	}
	return nil
}

func (hetuo *HPFCEventTicketUpdateOne) sqlSave(ctx context.Context) (_node *HPFCEventTicket, err error) {
	if err := hetuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(hpfceventticket.Table, hpfceventticket.Columns, sqlgraph.NewFieldSpec(hpfceventticket.FieldID, field.TypeInt))
	id, ok := hetuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "HPFCEventTicket.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := hetuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hpfceventticket.FieldID)
		for _, f := range fields {
			if !hpfceventticket.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != hpfceventticket.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := hetuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if hetuo.mutation.CreatedAtCleared() {
		_spec.ClearField(hpfceventticket.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := hetuo.mutation.UpdatedAt(); ok {
		_spec.SetField(hpfceventticket.FieldUpdatedAt, field.TypeTime, value)
	}
	if hetuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(hpfceventticket.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := hetuo.mutation.Num(); ok {
		_spec.SetField(hpfceventticket.FieldNum, field.TypeInt, value)
	}
	if value, ok := hetuo.mutation.AddedNum(); ok {
		_spec.AddField(hpfceventticket.FieldNum, field.TypeInt, value)
	}
	if value, ok := hetuo.mutation.Status(); ok {
		_spec.SetField(hpfceventticket.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := hetuo.mutation.FcMemberSha256(); ok {
		_spec.SetField(hpfceventticket.FieldFcMemberSha256, field.TypeString, value)
	}
	if value, ok := hetuo.mutation.ApplicationTitle(); ok {
		_spec.SetField(hpfceventticket.FieldApplicationTitle, field.TypeString, value)
	}
	if value, ok := hetuo.mutation.ApplicationID(); ok {
		_spec.SetField(hpfceventticket.FieldApplicationID, field.TypeString, value)
	}
	if hetuo.mutation.ApplicationIDCleared() {
		_spec.ClearField(hpfceventticket.FieldApplicationID, field.TypeString)
	}
	if value, ok := hetuo.mutation.ApplicationSite(); ok {
		_spec.SetField(hpfceventticket.FieldApplicationSite, field.TypeEnum, value)
	}
	if value, ok := hetuo.mutation.ApplicationStartDate(); ok {
		_spec.SetField(hpfceventticket.FieldApplicationStartDate, field.TypeTime, value)
	}
	if hetuo.mutation.ApplicationStartDateCleared() {
		_spec.ClearField(hpfceventticket.FieldApplicationStartDate, field.TypeTime)
	}
	if value, ok := hetuo.mutation.ApplicationDueDate(); ok {
		_spec.SetField(hpfceventticket.FieldApplicationDueDate, field.TypeTime, value)
	}
	if hetuo.mutation.ApplicationDueDateCleared() {
		_spec.ClearField(hpfceventticket.FieldApplicationDueDate, field.TypeTime)
	}
	if value, ok := hetuo.mutation.PaymentStartDate(); ok {
		_spec.SetField(hpfceventticket.FieldPaymentStartDate, field.TypeTime, value)
	}
	if hetuo.mutation.PaymentStartDateCleared() {
		_spec.ClearField(hpfceventticket.FieldPaymentStartDate, field.TypeTime)
	}
	if value, ok := hetuo.mutation.PaymentDueDate(); ok {
		_spec.SetField(hpfceventticket.FieldPaymentDueDate, field.TypeTime, value)
	}
	if hetuo.mutation.PaymentDueDateCleared() {
		_spec.ClearField(hpfceventticket.FieldPaymentDueDate, field.TypeTime)
	}
	if hetuo.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpfceventticket.EventTable,
			Columns: []string{hpfceventticket.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpevent.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hetuo.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpfceventticket.EventTable,
			Columns: []string{hpfceventticket.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpevent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hetuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpfceventticket.UserTable,
			Columns: []string{hpfceventticket.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hetuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpfceventticket.UserTable,
			Columns: []string{hpfceventticket.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &HPFCEventTicket{config: hetuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, hetuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hpfceventticket.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	hetuo.mutation.done = true
	return _node, nil
}
