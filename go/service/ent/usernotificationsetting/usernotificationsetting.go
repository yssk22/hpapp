// Code generated by ent, DO NOT EDIT.

package usernotificationsetting

import (
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the usernotificationsetting type in the database.
	Label = "user_notification_setting"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldToken holds the string denoting the token field in the database.
	FieldToken = "token"
	// FieldSlug holds the string denoting the slug field in the database.
	FieldSlug = "slug"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldEnableNewPosts holds the string denoting the enable_new_posts field in the database.
	FieldEnableNewPosts = "enable_new_posts"
	// FieldEnablePaymentStart holds the string denoting the enable_payment_start field in the database.
	FieldEnablePaymentStart = "enable_payment_start"
	// FieldEnablePaymentDue holds the string denoting the enable_payment_due field in the database.
	FieldEnablePaymentDue = "enable_payment_due"
	// FieldOwnerUserID holds the string denoting the owner_user_id field in the database.
	FieldOwnerUserID = "user_notification_settings"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeNotificationLogs holds the string denoting the notification_logs edge name in mutations.
	EdgeNotificationLogs = "notification_logs"
	// Table holds the table name of the usernotificationsetting in the database.
	Table = "user_notification_settings"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "user_notification_settings"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_notification_settings"
	// NotificationLogsTable is the table that holds the notification_logs relation/edge. The primary key declared below.
	NotificationLogsTable = "user_notification_log_receivers"
	// NotificationLogsInverseTable is the table name for the UserNotificationLog entity.
	// It exists in this package in order to avoid circular dependency with the "usernotificationlog" package.
	NotificationLogsInverseTable = "user_notification_logs"
)

// Columns holds all SQL columns for usernotificationsetting fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldToken,
	FieldSlug,
	FieldName,
	FieldEnableNewPosts,
	FieldEnablePaymentStart,
	FieldEnablePaymentDue,
	FieldOwnerUserID,
}

var (
	// NotificationLogsPrimaryKey and NotificationLogsColumn2 are the table columns denoting the
	// primary key for the notification_logs relation (M2M).
	NotificationLogsPrimaryKey = []string{"user_notification_log_id", "user_notification_setting_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/yssk22/hpapp/go/service/ent/runtime"
var (
	Hooks  [2]ent.Hook
	Policy ent.Policy
)

// Order defines the ordering method for the UserNotificationSetting queries.
type Order func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByToken orders the results by the token field.
func ByToken(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldToken, opts...).ToFunc()
}

// BySlug orders the results by the slug field.
func BySlug(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldSlug, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByEnableNewPosts orders the results by the enable_new_posts field.
func ByEnableNewPosts(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldEnableNewPosts, opts...).ToFunc()
}

// ByEnablePaymentStart orders the results by the enable_payment_start field.
func ByEnablePaymentStart(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldEnablePaymentStart, opts...).ToFunc()
}

// ByEnablePaymentDue orders the results by the enable_payment_due field.
func ByEnablePaymentDue(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldEnablePaymentDue, opts...).ToFunc()
}

// ByOwnerUserID orders the results by the owner_user_id field.
func ByOwnerUserID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldOwnerUserID, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByNotificationLogsCount orders the results by notification_logs count.
func ByNotificationLogsCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNotificationLogsStep(), opts...)
	}
}

// ByNotificationLogs orders the results by notification_logs terms.
func ByNotificationLogs(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNotificationLogsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newNotificationLogsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NotificationLogsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, NotificationLogsTable, NotificationLogsPrimaryKey...),
	)
}
