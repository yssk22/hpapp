// Code generated by ent, DO NOT EDIT.

package usernotificationsetting

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/yssk22/hpapp/go/service/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldEQ(FieldUpdatedAt, v))
}

// Token applies equality check predicate on the "token" field. It's identical to TokenEQ.
func Token(v string) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldEQ(FieldToken, v))
}

// Slug applies equality check predicate on the "slug" field. It's identical to SlugEQ.
func Slug(v string) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldEQ(FieldSlug, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldEQ(FieldName, v))
}

// EnableNewPosts applies equality check predicate on the "enable_new_posts" field. It's identical to EnableNewPostsEQ.
func EnableNewPosts(v bool) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldEQ(FieldEnableNewPosts, v))
}

// EnablePaymentStart applies equality check predicate on the "enable_payment_start" field. It's identical to EnablePaymentStartEQ.
func EnablePaymentStart(v bool) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldEQ(FieldEnablePaymentStart, v))
}

// EnablePaymentDue applies equality check predicate on the "enable_payment_due" field. It's identical to EnablePaymentDueEQ.
func EnablePaymentDue(v bool) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldEQ(FieldEnablePaymentDue, v))
}

// OwnerUserID applies equality check predicate on the "owner_user_id" field. It's identical to OwnerUserIDEQ.
func OwnerUserID(v int) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldEQ(FieldOwnerUserID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldNotNull(FieldUpdatedAt))
}

// TokenEQ applies the EQ predicate on the "token" field.
func TokenEQ(v string) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldEQ(FieldToken, v))
}

// TokenNEQ applies the NEQ predicate on the "token" field.
func TokenNEQ(v string) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldNEQ(FieldToken, v))
}

// TokenIn applies the In predicate on the "token" field.
func TokenIn(vs ...string) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldIn(FieldToken, vs...))
}

// TokenNotIn applies the NotIn predicate on the "token" field.
func TokenNotIn(vs ...string) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldNotIn(FieldToken, vs...))
}

// TokenGT applies the GT predicate on the "token" field.
func TokenGT(v string) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldGT(FieldToken, v))
}

// TokenGTE applies the GTE predicate on the "token" field.
func TokenGTE(v string) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldGTE(FieldToken, v))
}

// TokenLT applies the LT predicate on the "token" field.
func TokenLT(v string) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldLT(FieldToken, v))
}

// TokenLTE applies the LTE predicate on the "token" field.
func TokenLTE(v string) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldLTE(FieldToken, v))
}

// TokenContains applies the Contains predicate on the "token" field.
func TokenContains(v string) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldContains(FieldToken, v))
}

// TokenHasPrefix applies the HasPrefix predicate on the "token" field.
func TokenHasPrefix(v string) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldHasPrefix(FieldToken, v))
}

// TokenHasSuffix applies the HasSuffix predicate on the "token" field.
func TokenHasSuffix(v string) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldHasSuffix(FieldToken, v))
}

// TokenEqualFold applies the EqualFold predicate on the "token" field.
func TokenEqualFold(v string) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldEqualFold(FieldToken, v))
}

// TokenContainsFold applies the ContainsFold predicate on the "token" field.
func TokenContainsFold(v string) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldContainsFold(FieldToken, v))
}

// SlugEQ applies the EQ predicate on the "slug" field.
func SlugEQ(v string) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldEQ(FieldSlug, v))
}

// SlugNEQ applies the NEQ predicate on the "slug" field.
func SlugNEQ(v string) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldNEQ(FieldSlug, v))
}

// SlugIn applies the In predicate on the "slug" field.
func SlugIn(vs ...string) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldIn(FieldSlug, vs...))
}

// SlugNotIn applies the NotIn predicate on the "slug" field.
func SlugNotIn(vs ...string) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldNotIn(FieldSlug, vs...))
}

// SlugGT applies the GT predicate on the "slug" field.
func SlugGT(v string) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldGT(FieldSlug, v))
}

// SlugGTE applies the GTE predicate on the "slug" field.
func SlugGTE(v string) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldGTE(FieldSlug, v))
}

// SlugLT applies the LT predicate on the "slug" field.
func SlugLT(v string) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldLT(FieldSlug, v))
}

// SlugLTE applies the LTE predicate on the "slug" field.
func SlugLTE(v string) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldLTE(FieldSlug, v))
}

// SlugContains applies the Contains predicate on the "slug" field.
func SlugContains(v string) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldContains(FieldSlug, v))
}

// SlugHasPrefix applies the HasPrefix predicate on the "slug" field.
func SlugHasPrefix(v string) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldHasPrefix(FieldSlug, v))
}

// SlugHasSuffix applies the HasSuffix predicate on the "slug" field.
func SlugHasSuffix(v string) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldHasSuffix(FieldSlug, v))
}

// SlugEqualFold applies the EqualFold predicate on the "slug" field.
func SlugEqualFold(v string) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldEqualFold(FieldSlug, v))
}

// SlugContainsFold applies the ContainsFold predicate on the "slug" field.
func SlugContainsFold(v string) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldContainsFold(FieldSlug, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldContainsFold(FieldName, v))
}

// EnableNewPostsEQ applies the EQ predicate on the "enable_new_posts" field.
func EnableNewPostsEQ(v bool) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldEQ(FieldEnableNewPosts, v))
}

// EnableNewPostsNEQ applies the NEQ predicate on the "enable_new_posts" field.
func EnableNewPostsNEQ(v bool) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldNEQ(FieldEnableNewPosts, v))
}

// EnablePaymentStartEQ applies the EQ predicate on the "enable_payment_start" field.
func EnablePaymentStartEQ(v bool) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldEQ(FieldEnablePaymentStart, v))
}

// EnablePaymentStartNEQ applies the NEQ predicate on the "enable_payment_start" field.
func EnablePaymentStartNEQ(v bool) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldNEQ(FieldEnablePaymentStart, v))
}

// EnablePaymentDueEQ applies the EQ predicate on the "enable_payment_due" field.
func EnablePaymentDueEQ(v bool) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldEQ(FieldEnablePaymentDue, v))
}

// EnablePaymentDueNEQ applies the NEQ predicate on the "enable_payment_due" field.
func EnablePaymentDueNEQ(v bool) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldNEQ(FieldEnablePaymentDue, v))
}

// OwnerUserIDEQ applies the EQ predicate on the "owner_user_id" field.
func OwnerUserIDEQ(v int) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldEQ(FieldOwnerUserID, v))
}

// OwnerUserIDNEQ applies the NEQ predicate on the "owner_user_id" field.
func OwnerUserIDNEQ(v int) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldNEQ(FieldOwnerUserID, v))
}

// OwnerUserIDIn applies the In predicate on the "owner_user_id" field.
func OwnerUserIDIn(vs ...int) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldIn(FieldOwnerUserID, vs...))
}

// OwnerUserIDNotIn applies the NotIn predicate on the "owner_user_id" field.
func OwnerUserIDNotIn(vs ...int) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldNotIn(FieldOwnerUserID, vs...))
}

// OwnerUserIDIsNil applies the IsNil predicate on the "owner_user_id" field.
func OwnerUserIDIsNil() predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldIsNull(FieldOwnerUserID))
}

// OwnerUserIDNotNil applies the NotNil predicate on the "owner_user_id" field.
func OwnerUserIDNotNil() predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(sql.FieldNotNull(FieldOwnerUserID))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNotificationLogs applies the HasEdge predicate on the "notification_logs" edge.
func HasNotificationLogs() predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, NotificationLogsTable, NotificationLogsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNotificationLogsWith applies the HasEdge predicate on the "notification_logs" edge with a given conditions (other predicates).
func HasNotificationLogsWith(preds ...predicate.UserNotificationLog) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(func(s *sql.Selector) {
		step := newNotificationLogsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserNotificationSetting) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserNotificationSetting) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserNotificationSetting) predicate.UserNotificationSetting {
	return predicate.UserNotificationSetting(func(s *sql.Selector) {
		p(s.Not())
	})
}
