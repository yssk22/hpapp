// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yssk22/hpapp/go/service/ent/hpameblopost"
	"github.com/yssk22/hpapp/go/service/ent/hpartist"
	"github.com/yssk22/hpapp/go/service/ent/hpblob"
	"github.com/yssk22/hpapp/go/service/ent/hpigpost"
	"github.com/yssk22/hpapp/go/service/ent/hpmember"
	"github.com/yssk22/hpapp/go/service/ent/predicate"
	"github.com/yssk22/hpapp/go/service/schema/enums"
	"github.com/yssk22/hpapp/go/service/schema/jsonfields"
)

// HPBlobUpdate is the builder for updating HPBlob entities.
type HPBlobUpdate struct {
	config
	hooks    []Hook
	mutation *HPBlobMutation
}

// Where appends a list predicates to the HPBlobUpdate builder.
func (hbu *HPBlobUpdate) Where(ps ...predicate.HPBlob) *HPBlobUpdate {
	hbu.mutation.Where(ps...)
	return hbu
}

// SetUpdatedAt sets the "updated_at" field.
func (hbu *HPBlobUpdate) SetUpdatedAt(t time.Time) *HPBlobUpdate {
	hbu.mutation.SetUpdatedAt(t)
	return hbu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (hbu *HPBlobUpdate) SetNillableUpdatedAt(t *time.Time) *HPBlobUpdate {
	if t != nil {
		hbu.SetUpdatedAt(*t)
	}
	return hbu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (hbu *HPBlobUpdate) ClearUpdatedAt() *HPBlobUpdate {
	hbu.mutation.ClearUpdatedAt()
	return hbu
}

// SetStoragePath sets the "storage_path" field.
func (hbu *HPBlobUpdate) SetStoragePath(s string) *HPBlobUpdate {
	hbu.mutation.SetStoragePath(s)
	return hbu
}

// SetSourceURL sets the "source_url" field.
func (hbu *HPBlobUpdate) SetSourceURL(s string) *HPBlobUpdate {
	hbu.mutation.SetSourceURL(s)
	return hbu
}

// SetSourceHTMLURL sets the "source_html_url" field.
func (hbu *HPBlobUpdate) SetSourceHTMLURL(s string) *HPBlobUpdate {
	hbu.mutation.SetSourceHTMLURL(s)
	return hbu
}

// SetStatus sets the "status" field.
func (hbu *HPBlobUpdate) SetStatus(ebs enums.HPBlobStatus) *HPBlobUpdate {
	hbu.mutation.SetStatus(ebs)
	return hbu
}

// SetStatusMessage sets the "status_message" field.
func (hbu *HPBlobUpdate) SetStatusMessage(s string) *HPBlobUpdate {
	hbu.mutation.SetStatusMessage(s)
	return hbu
}

// SetNillableStatusMessage sets the "status_message" field if the given value is not nil.
func (hbu *HPBlobUpdate) SetNillableStatusMessage(s *string) *HPBlobUpdate {
	if s != nil {
		hbu.SetStatusMessage(*s)
	}
	return hbu
}

// ClearStatusMessage clears the value of the "status_message" field.
func (hbu *HPBlobUpdate) ClearStatusMessage() *HPBlobUpdate {
	hbu.mutation.ClearStatusMessage()
	return hbu
}

// SetStatusErrorCount sets the "status_error_count" field.
func (hbu *HPBlobUpdate) SetStatusErrorCount(i int) *HPBlobUpdate {
	hbu.mutation.ResetStatusErrorCount()
	hbu.mutation.SetStatusErrorCount(i)
	return hbu
}

// SetNillableStatusErrorCount sets the "status_error_count" field if the given value is not nil.
func (hbu *HPBlobUpdate) SetNillableStatusErrorCount(i *int) *HPBlobUpdate {
	if i != nil {
		hbu.SetStatusErrorCount(*i)
	}
	return hbu
}

// AddStatusErrorCount adds i to the "status_error_count" field.
func (hbu *HPBlobUpdate) AddStatusErrorCount(i int) *HPBlobUpdate {
	hbu.mutation.AddStatusErrorCount(i)
	return hbu
}

// ClearStatusErrorCount clears the value of the "status_error_count" field.
func (hbu *HPBlobUpdate) ClearStatusErrorCount() *HPBlobUpdate {
	hbu.mutation.ClearStatusErrorCount()
	return hbu
}

// SetType sets the "type" field.
func (hbu *HPBlobUpdate) SetType(ebt enums.HPBlobType) *HPBlobUpdate {
	hbu.mutation.SetType(ebt)
	return hbu
}

// SetSubType sets the "sub_type" field.
func (hbu *HPBlobUpdate) SetSubType(ebst enums.HPBlobSubType) *HPBlobUpdate {
	hbu.mutation.SetSubType(ebst)
	return hbu
}

// SetWidth sets the "width" field.
func (hbu *HPBlobUpdate) SetWidth(i int) *HPBlobUpdate {
	hbu.mutation.ResetWidth()
	hbu.mutation.SetWidth(i)
	return hbu
}

// SetNillableWidth sets the "width" field if the given value is not nil.
func (hbu *HPBlobUpdate) SetNillableWidth(i *int) *HPBlobUpdate {
	if i != nil {
		hbu.SetWidth(*i)
	}
	return hbu
}

// AddWidth adds i to the "width" field.
func (hbu *HPBlobUpdate) AddWidth(i int) *HPBlobUpdate {
	hbu.mutation.AddWidth(i)
	return hbu
}

// ClearWidth clears the value of the "width" field.
func (hbu *HPBlobUpdate) ClearWidth() *HPBlobUpdate {
	hbu.mutation.ClearWidth()
	return hbu
}

// SetHeight sets the "height" field.
func (hbu *HPBlobUpdate) SetHeight(i int) *HPBlobUpdate {
	hbu.mutation.ResetHeight()
	hbu.mutation.SetHeight(i)
	return hbu
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (hbu *HPBlobUpdate) SetNillableHeight(i *int) *HPBlobUpdate {
	if i != nil {
		hbu.SetHeight(*i)
	}
	return hbu
}

// AddHeight adds i to the "height" field.
func (hbu *HPBlobUpdate) AddHeight(i int) *HPBlobUpdate {
	hbu.mutation.AddHeight(i)
	return hbu
}

// ClearHeight clears the value of the "height" field.
func (hbu *HPBlobUpdate) ClearHeight() *HPBlobUpdate {
	hbu.mutation.ClearHeight()
	return hbu
}

// SetSize sets the "size" field.
func (hbu *HPBlobUpdate) SetSize(i int64) *HPBlobUpdate {
	hbu.mutation.ResetSize()
	hbu.mutation.SetSize(i)
	return hbu
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (hbu *HPBlobUpdate) SetNillableSize(i *int64) *HPBlobUpdate {
	if i != nil {
		hbu.SetSize(*i)
	}
	return hbu
}

// AddSize adds i to the "size" field.
func (hbu *HPBlobUpdate) AddSize(i int64) *HPBlobUpdate {
	hbu.mutation.AddSize(i)
	return hbu
}

// ClearSize clears the value of the "size" field.
func (hbu *HPBlobUpdate) ClearSize() *HPBlobUpdate {
	hbu.mutation.ClearSize()
	return hbu
}

// SetOwnerArtistID sets the "owner_artist_id" field.
func (hbu *HPBlobUpdate) SetOwnerArtistID(i int) *HPBlobUpdate {
	hbu.mutation.SetOwnerArtistID(i)
	return hbu
}

// SetNillableOwnerArtistID sets the "owner_artist_id" field if the given value is not nil.
func (hbu *HPBlobUpdate) SetNillableOwnerArtistID(i *int) *HPBlobUpdate {
	if i != nil {
		hbu.SetOwnerArtistID(*i)
	}
	return hbu
}

// ClearOwnerArtistID clears the value of the "owner_artist_id" field.
func (hbu *HPBlobUpdate) ClearOwnerArtistID() *HPBlobUpdate {
	hbu.mutation.ClearOwnerArtistID()
	return hbu
}

// SetOwnerMemberID sets the "owner_member_id" field.
func (hbu *HPBlobUpdate) SetOwnerMemberID(i int) *HPBlobUpdate {
	hbu.mutation.SetOwnerMemberID(i)
	return hbu
}

// SetNillableOwnerMemberID sets the "owner_member_id" field if the given value is not nil.
func (hbu *HPBlobUpdate) SetNillableOwnerMemberID(i *int) *HPBlobUpdate {
	if i != nil {
		hbu.SetOwnerMemberID(*i)
	}
	return hbu
}

// ClearOwnerMemberID clears the value of the "owner_member_id" field.
func (hbu *HPBlobUpdate) ClearOwnerMemberID() *HPBlobUpdate {
	hbu.mutation.ClearOwnerMemberID()
	return hbu
}

// SetNumFaces sets the "num_faces" field.
func (hbu *HPBlobUpdate) SetNumFaces(i int) *HPBlobUpdate {
	hbu.mutation.ResetNumFaces()
	hbu.mutation.SetNumFaces(i)
	return hbu
}

// SetNillableNumFaces sets the "num_faces" field if the given value is not nil.
func (hbu *HPBlobUpdate) SetNillableNumFaces(i *int) *HPBlobUpdate {
	if i != nil {
		hbu.SetNumFaces(*i)
	}
	return hbu
}

// AddNumFaces adds i to the "num_faces" field.
func (hbu *HPBlobUpdate) AddNumFaces(i int) *HPBlobUpdate {
	hbu.mutation.AddNumFaces(i)
	return hbu
}

// ClearNumFaces clears the value of the "num_faces" field.
func (hbu *HPBlobUpdate) ClearNumFaces() *HPBlobUpdate {
	hbu.mutation.ClearNumFaces()
	return hbu
}

// SetFaces sets the "faces" field.
func (hbu *HPBlobUpdate) SetFaces(jbif jsonfields.HPBlobImageFace) *HPBlobUpdate {
	hbu.mutation.SetFaces(jbif)
	return hbu
}

// SetNillableFaces sets the "faces" field if the given value is not nil.
func (hbu *HPBlobUpdate) SetNillableFaces(jbif *jsonfields.HPBlobImageFace) *HPBlobUpdate {
	if jbif != nil {
		hbu.SetFaces(*jbif)
	}
	return hbu
}

// ClearFaces clears the value of the "faces" field.
func (hbu *HPBlobUpdate) ClearFaces() *HPBlobUpdate {
	hbu.mutation.ClearFaces()
	return hbu
}

// SetFaceRecognitionStatus sets the "face_recognition_status" field.
func (hbu *HPBlobUpdate) SetFaceRecognitionStatus(ebfrs enums.HPBlobFaceRecognitionStatus) *HPBlobUpdate {
	hbu.mutation.SetFaceRecognitionStatus(ebfrs)
	return hbu
}

// SetNillableFaceRecognitionStatus sets the "face_recognition_status" field if the given value is not nil.
func (hbu *HPBlobUpdate) SetNillableFaceRecognitionStatus(ebfrs *enums.HPBlobFaceRecognitionStatus) *HPBlobUpdate {
	if ebfrs != nil {
		hbu.SetFaceRecognitionStatus(*ebfrs)
	}
	return hbu
}

// ClearFaceRecognitionStatus clears the value of the "face_recognition_status" field.
func (hbu *HPBlobUpdate) ClearFaceRecognitionStatus() *HPBlobUpdate {
	hbu.mutation.ClearFaceRecognitionStatus()
	return hbu
}

// SetThumbnail sets the "thumbnail" field.
func (hbu *HPBlobUpdate) SetThumbnail(jbt *jsonfields.HPBlobThumbnail) *HPBlobUpdate {
	hbu.mutation.SetThumbnail(jbt)
	return hbu
}

// ClearThumbnail clears the value of the "thumbnail" field.
func (hbu *HPBlobUpdate) ClearThumbnail() *HPBlobUpdate {
	hbu.mutation.ClearThumbnail()
	return hbu
}

// SetDurationSeconds sets the "duration_seconds" field.
func (hbu *HPBlobUpdate) SetDurationSeconds(f float64) *HPBlobUpdate {
	hbu.mutation.ResetDurationSeconds()
	hbu.mutation.SetDurationSeconds(f)
	return hbu
}

// SetNillableDurationSeconds sets the "duration_seconds" field if the given value is not nil.
func (hbu *HPBlobUpdate) SetNillableDurationSeconds(f *float64) *HPBlobUpdate {
	if f != nil {
		hbu.SetDurationSeconds(*f)
	}
	return hbu
}

// AddDurationSeconds adds f to the "duration_seconds" field.
func (hbu *HPBlobUpdate) AddDurationSeconds(f float64) *HPBlobUpdate {
	hbu.mutation.AddDurationSeconds(f)
	return hbu
}

// ClearDurationSeconds clears the value of the "duration_seconds" field.
func (hbu *HPBlobUpdate) ClearDurationSeconds() *HPBlobUpdate {
	hbu.mutation.ClearDurationSeconds()
	return hbu
}

// SetOwnerArtist sets the "owner_artist" edge to the HPArtist entity.
func (hbu *HPBlobUpdate) SetOwnerArtist(h *HPArtist) *HPBlobUpdate {
	return hbu.SetOwnerArtistID(h.ID)
}

// SetOwnerMember sets the "owner_member" edge to the HPMember entity.
func (hbu *HPBlobUpdate) SetOwnerMember(h *HPMember) *HPBlobUpdate {
	return hbu.SetOwnerMemberID(h.ID)
}

// AddAmebloPostIDs adds the "ameblo_posts" edge to the HPAmebloPost entity by IDs.
func (hbu *HPBlobUpdate) AddAmebloPostIDs(ids ...int) *HPBlobUpdate {
	hbu.mutation.AddAmebloPostIDs(ids...)
	return hbu
}

// AddAmebloPosts adds the "ameblo_posts" edges to the HPAmebloPost entity.
func (hbu *HPBlobUpdate) AddAmebloPosts(h ...*HPAmebloPost) *HPBlobUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hbu.AddAmebloPostIDs(ids...)
}

// AddIgPostIDs adds the "ig_posts" edge to the HPIgPost entity by IDs.
func (hbu *HPBlobUpdate) AddIgPostIDs(ids ...int) *HPBlobUpdate {
	hbu.mutation.AddIgPostIDs(ids...)
	return hbu
}

// AddIgPosts adds the "ig_posts" edges to the HPIgPost entity.
func (hbu *HPBlobUpdate) AddIgPosts(h ...*HPIgPost) *HPBlobUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hbu.AddIgPostIDs(ids...)
}

// Mutation returns the HPBlobMutation object of the builder.
func (hbu *HPBlobUpdate) Mutation() *HPBlobMutation {
	return hbu.mutation
}

// ClearOwnerArtist clears the "owner_artist" edge to the HPArtist entity.
func (hbu *HPBlobUpdate) ClearOwnerArtist() *HPBlobUpdate {
	hbu.mutation.ClearOwnerArtist()
	return hbu
}

// ClearOwnerMember clears the "owner_member" edge to the HPMember entity.
func (hbu *HPBlobUpdate) ClearOwnerMember() *HPBlobUpdate {
	hbu.mutation.ClearOwnerMember()
	return hbu
}

// ClearAmebloPosts clears all "ameblo_posts" edges to the HPAmebloPost entity.
func (hbu *HPBlobUpdate) ClearAmebloPosts() *HPBlobUpdate {
	hbu.mutation.ClearAmebloPosts()
	return hbu
}

// RemoveAmebloPostIDs removes the "ameblo_posts" edge to HPAmebloPost entities by IDs.
func (hbu *HPBlobUpdate) RemoveAmebloPostIDs(ids ...int) *HPBlobUpdate {
	hbu.mutation.RemoveAmebloPostIDs(ids...)
	return hbu
}

// RemoveAmebloPosts removes "ameblo_posts" edges to HPAmebloPost entities.
func (hbu *HPBlobUpdate) RemoveAmebloPosts(h ...*HPAmebloPost) *HPBlobUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hbu.RemoveAmebloPostIDs(ids...)
}

// ClearIgPosts clears all "ig_posts" edges to the HPIgPost entity.
func (hbu *HPBlobUpdate) ClearIgPosts() *HPBlobUpdate {
	hbu.mutation.ClearIgPosts()
	return hbu
}

// RemoveIgPostIDs removes the "ig_posts" edge to HPIgPost entities by IDs.
func (hbu *HPBlobUpdate) RemoveIgPostIDs(ids ...int) *HPBlobUpdate {
	hbu.mutation.RemoveIgPostIDs(ids...)
	return hbu
}

// RemoveIgPosts removes "ig_posts" edges to HPIgPost entities.
func (hbu *HPBlobUpdate) RemoveIgPosts(h ...*HPIgPost) *HPBlobUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hbu.RemoveIgPostIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hbu *HPBlobUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, HPBlobMutation](ctx, hbu.sqlSave, hbu.mutation, hbu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hbu *HPBlobUpdate) SaveX(ctx context.Context) int {
	affected, err := hbu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hbu *HPBlobUpdate) Exec(ctx context.Context) error {
	_, err := hbu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hbu *HPBlobUpdate) ExecX(ctx context.Context) {
	if err := hbu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hbu *HPBlobUpdate) check() error {
	if v, ok := hbu.mutation.StoragePath(); ok {
		if err := hpblob.StoragePathValidator(v); err != nil {
			return &ValidationError{Name: "storage_path", err: fmt.Errorf(`ent: validator failed for field "HPBlob.storage_path": %w`, err)}
		}
	}
	if v, ok := hbu.mutation.SourceURL(); ok {
		if err := hpblob.SourceURLValidator(v); err != nil {
			return &ValidationError{Name: "source_url", err: fmt.Errorf(`ent: validator failed for field "HPBlob.source_url": %w`, err)}
		}
	}
	if v, ok := hbu.mutation.SourceHTMLURL(); ok {
		if err := hpblob.SourceHTMLURLValidator(v); err != nil {
			return &ValidationError{Name: "source_html_url", err: fmt.Errorf(`ent: validator failed for field "HPBlob.source_html_url": %w`, err)}
		}
	}
	if v, ok := hbu.mutation.Status(); ok {
		if err := hpblob.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "HPBlob.status": %w`, err)}
		}
	}
	if v, ok := hbu.mutation.GetType(); ok {
		if err := hpblob.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "HPBlob.type": %w`, err)}
		}
	}
	if v, ok := hbu.mutation.SubType(); ok {
		if err := hpblob.SubTypeValidator(v); err != nil {
			return &ValidationError{Name: "sub_type", err: fmt.Errorf(`ent: validator failed for field "HPBlob.sub_type": %w`, err)}
		}
	}
	if v, ok := hbu.mutation.FaceRecognitionStatus(); ok {
		if err := hpblob.FaceRecognitionStatusValidator(v); err != nil {
			return &ValidationError{Name: "face_recognition_status", err: fmt.Errorf(`ent: validator failed for field "HPBlob.face_recognition_status": %w`, err)}
		}
	}
	return nil
}

func (hbu *HPBlobUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := hbu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(hpblob.Table, hpblob.Columns, sqlgraph.NewFieldSpec(hpblob.FieldID, field.TypeInt))
	if ps := hbu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if hbu.mutation.CreatedAtCleared() {
		_spec.ClearField(hpblob.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := hbu.mutation.UpdatedAt(); ok {
		_spec.SetField(hpblob.FieldUpdatedAt, field.TypeTime, value)
	}
	if hbu.mutation.UpdatedAtCleared() {
		_spec.ClearField(hpblob.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := hbu.mutation.StoragePath(); ok {
		_spec.SetField(hpblob.FieldStoragePath, field.TypeString, value)
	}
	if value, ok := hbu.mutation.SourceURL(); ok {
		_spec.SetField(hpblob.FieldSourceURL, field.TypeString, value)
	}
	if value, ok := hbu.mutation.SourceHTMLURL(); ok {
		_spec.SetField(hpblob.FieldSourceHTMLURL, field.TypeString, value)
	}
	if value, ok := hbu.mutation.Status(); ok {
		_spec.SetField(hpblob.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := hbu.mutation.StatusMessage(); ok {
		_spec.SetField(hpblob.FieldStatusMessage, field.TypeString, value)
	}
	if hbu.mutation.StatusMessageCleared() {
		_spec.ClearField(hpblob.FieldStatusMessage, field.TypeString)
	}
	if value, ok := hbu.mutation.StatusErrorCount(); ok {
		_spec.SetField(hpblob.FieldStatusErrorCount, field.TypeInt, value)
	}
	if value, ok := hbu.mutation.AddedStatusErrorCount(); ok {
		_spec.AddField(hpblob.FieldStatusErrorCount, field.TypeInt, value)
	}
	if hbu.mutation.StatusErrorCountCleared() {
		_spec.ClearField(hpblob.FieldStatusErrorCount, field.TypeInt)
	}
	if value, ok := hbu.mutation.GetType(); ok {
		_spec.SetField(hpblob.FieldType, field.TypeEnum, value)
	}
	if value, ok := hbu.mutation.SubType(); ok {
		_spec.SetField(hpblob.FieldSubType, field.TypeEnum, value)
	}
	if value, ok := hbu.mutation.Width(); ok {
		_spec.SetField(hpblob.FieldWidth, field.TypeInt, value)
	}
	if value, ok := hbu.mutation.AddedWidth(); ok {
		_spec.AddField(hpblob.FieldWidth, field.TypeInt, value)
	}
	if hbu.mutation.WidthCleared() {
		_spec.ClearField(hpblob.FieldWidth, field.TypeInt)
	}
	if value, ok := hbu.mutation.Height(); ok {
		_spec.SetField(hpblob.FieldHeight, field.TypeInt, value)
	}
	if value, ok := hbu.mutation.AddedHeight(); ok {
		_spec.AddField(hpblob.FieldHeight, field.TypeInt, value)
	}
	if hbu.mutation.HeightCleared() {
		_spec.ClearField(hpblob.FieldHeight, field.TypeInt)
	}
	if value, ok := hbu.mutation.Size(); ok {
		_spec.SetField(hpblob.FieldSize, field.TypeInt64, value)
	}
	if value, ok := hbu.mutation.AddedSize(); ok {
		_spec.AddField(hpblob.FieldSize, field.TypeInt64, value)
	}
	if hbu.mutation.SizeCleared() {
		_spec.ClearField(hpblob.FieldSize, field.TypeInt64)
	}
	if value, ok := hbu.mutation.NumFaces(); ok {
		_spec.SetField(hpblob.FieldNumFaces, field.TypeInt, value)
	}
	if value, ok := hbu.mutation.AddedNumFaces(); ok {
		_spec.AddField(hpblob.FieldNumFaces, field.TypeInt, value)
	}
	if hbu.mutation.NumFacesCleared() {
		_spec.ClearField(hpblob.FieldNumFaces, field.TypeInt)
	}
	if value, ok := hbu.mutation.Faces(); ok {
		_spec.SetField(hpblob.FieldFaces, field.TypeJSON, value)
	}
	if hbu.mutation.FacesCleared() {
		_spec.ClearField(hpblob.FieldFaces, field.TypeJSON)
	}
	if value, ok := hbu.mutation.FaceRecognitionStatus(); ok {
		_spec.SetField(hpblob.FieldFaceRecognitionStatus, field.TypeEnum, value)
	}
	if hbu.mutation.FaceRecognitionStatusCleared() {
		_spec.ClearField(hpblob.FieldFaceRecognitionStatus, field.TypeEnum)
	}
	if value, ok := hbu.mutation.Thumbnail(); ok {
		_spec.SetField(hpblob.FieldThumbnail, field.TypeJSON, value)
	}
	if hbu.mutation.ThumbnailCleared() {
		_spec.ClearField(hpblob.FieldThumbnail, field.TypeJSON)
	}
	if value, ok := hbu.mutation.DurationSeconds(); ok {
		_spec.SetField(hpblob.FieldDurationSeconds, field.TypeFloat64, value)
	}
	if value, ok := hbu.mutation.AddedDurationSeconds(); ok {
		_spec.AddField(hpblob.FieldDurationSeconds, field.TypeFloat64, value)
	}
	if hbu.mutation.DurationSecondsCleared() {
		_spec.ClearField(hpblob.FieldDurationSeconds, field.TypeFloat64)
	}
	if hbu.mutation.OwnerArtistCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hpblob.OwnerArtistTable,
			Columns: []string{hpblob.OwnerArtistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpartist.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hbu.mutation.OwnerArtistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hpblob.OwnerArtistTable,
			Columns: []string{hpblob.OwnerArtistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpartist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hbu.mutation.OwnerMemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hpblob.OwnerMemberTable,
			Columns: []string{hpblob.OwnerMemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpmember.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hbu.mutation.OwnerMemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hpblob.OwnerMemberTable,
			Columns: []string{hpblob.OwnerMemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hbu.mutation.AmebloPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpblob.AmebloPostsTable,
			Columns: hpblob.AmebloPostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpameblopost.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hbu.mutation.RemovedAmebloPostsIDs(); len(nodes) > 0 && !hbu.mutation.AmebloPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpblob.AmebloPostsTable,
			Columns: hpblob.AmebloPostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpameblopost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hbu.mutation.AmebloPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpblob.AmebloPostsTable,
			Columns: hpblob.AmebloPostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpameblopost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hbu.mutation.IgPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpblob.IgPostsTable,
			Columns: hpblob.IgPostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpigpost.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hbu.mutation.RemovedIgPostsIDs(); len(nodes) > 0 && !hbu.mutation.IgPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpblob.IgPostsTable,
			Columns: hpblob.IgPostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpigpost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hbu.mutation.IgPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpblob.IgPostsTable,
			Columns: hpblob.IgPostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpigpost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hbu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hpblob.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	hbu.mutation.done = true
	return n, nil
}

// HPBlobUpdateOne is the builder for updating a single HPBlob entity.
type HPBlobUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HPBlobMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (hbuo *HPBlobUpdateOne) SetUpdatedAt(t time.Time) *HPBlobUpdateOne {
	hbuo.mutation.SetUpdatedAt(t)
	return hbuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (hbuo *HPBlobUpdateOne) SetNillableUpdatedAt(t *time.Time) *HPBlobUpdateOne {
	if t != nil {
		hbuo.SetUpdatedAt(*t)
	}
	return hbuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (hbuo *HPBlobUpdateOne) ClearUpdatedAt() *HPBlobUpdateOne {
	hbuo.mutation.ClearUpdatedAt()
	return hbuo
}

// SetStoragePath sets the "storage_path" field.
func (hbuo *HPBlobUpdateOne) SetStoragePath(s string) *HPBlobUpdateOne {
	hbuo.mutation.SetStoragePath(s)
	return hbuo
}

// SetSourceURL sets the "source_url" field.
func (hbuo *HPBlobUpdateOne) SetSourceURL(s string) *HPBlobUpdateOne {
	hbuo.mutation.SetSourceURL(s)
	return hbuo
}

// SetSourceHTMLURL sets the "source_html_url" field.
func (hbuo *HPBlobUpdateOne) SetSourceHTMLURL(s string) *HPBlobUpdateOne {
	hbuo.mutation.SetSourceHTMLURL(s)
	return hbuo
}

// SetStatus sets the "status" field.
func (hbuo *HPBlobUpdateOne) SetStatus(ebs enums.HPBlobStatus) *HPBlobUpdateOne {
	hbuo.mutation.SetStatus(ebs)
	return hbuo
}

// SetStatusMessage sets the "status_message" field.
func (hbuo *HPBlobUpdateOne) SetStatusMessage(s string) *HPBlobUpdateOne {
	hbuo.mutation.SetStatusMessage(s)
	return hbuo
}

// SetNillableStatusMessage sets the "status_message" field if the given value is not nil.
func (hbuo *HPBlobUpdateOne) SetNillableStatusMessage(s *string) *HPBlobUpdateOne {
	if s != nil {
		hbuo.SetStatusMessage(*s)
	}
	return hbuo
}

// ClearStatusMessage clears the value of the "status_message" field.
func (hbuo *HPBlobUpdateOne) ClearStatusMessage() *HPBlobUpdateOne {
	hbuo.mutation.ClearStatusMessage()
	return hbuo
}

// SetStatusErrorCount sets the "status_error_count" field.
func (hbuo *HPBlobUpdateOne) SetStatusErrorCount(i int) *HPBlobUpdateOne {
	hbuo.mutation.ResetStatusErrorCount()
	hbuo.mutation.SetStatusErrorCount(i)
	return hbuo
}

// SetNillableStatusErrorCount sets the "status_error_count" field if the given value is not nil.
func (hbuo *HPBlobUpdateOne) SetNillableStatusErrorCount(i *int) *HPBlobUpdateOne {
	if i != nil {
		hbuo.SetStatusErrorCount(*i)
	}
	return hbuo
}

// AddStatusErrorCount adds i to the "status_error_count" field.
func (hbuo *HPBlobUpdateOne) AddStatusErrorCount(i int) *HPBlobUpdateOne {
	hbuo.mutation.AddStatusErrorCount(i)
	return hbuo
}

// ClearStatusErrorCount clears the value of the "status_error_count" field.
func (hbuo *HPBlobUpdateOne) ClearStatusErrorCount() *HPBlobUpdateOne {
	hbuo.mutation.ClearStatusErrorCount()
	return hbuo
}

// SetType sets the "type" field.
func (hbuo *HPBlobUpdateOne) SetType(ebt enums.HPBlobType) *HPBlobUpdateOne {
	hbuo.mutation.SetType(ebt)
	return hbuo
}

// SetSubType sets the "sub_type" field.
func (hbuo *HPBlobUpdateOne) SetSubType(ebst enums.HPBlobSubType) *HPBlobUpdateOne {
	hbuo.mutation.SetSubType(ebst)
	return hbuo
}

// SetWidth sets the "width" field.
func (hbuo *HPBlobUpdateOne) SetWidth(i int) *HPBlobUpdateOne {
	hbuo.mutation.ResetWidth()
	hbuo.mutation.SetWidth(i)
	return hbuo
}

// SetNillableWidth sets the "width" field if the given value is not nil.
func (hbuo *HPBlobUpdateOne) SetNillableWidth(i *int) *HPBlobUpdateOne {
	if i != nil {
		hbuo.SetWidth(*i)
	}
	return hbuo
}

// AddWidth adds i to the "width" field.
func (hbuo *HPBlobUpdateOne) AddWidth(i int) *HPBlobUpdateOne {
	hbuo.mutation.AddWidth(i)
	return hbuo
}

// ClearWidth clears the value of the "width" field.
func (hbuo *HPBlobUpdateOne) ClearWidth() *HPBlobUpdateOne {
	hbuo.mutation.ClearWidth()
	return hbuo
}

// SetHeight sets the "height" field.
func (hbuo *HPBlobUpdateOne) SetHeight(i int) *HPBlobUpdateOne {
	hbuo.mutation.ResetHeight()
	hbuo.mutation.SetHeight(i)
	return hbuo
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (hbuo *HPBlobUpdateOne) SetNillableHeight(i *int) *HPBlobUpdateOne {
	if i != nil {
		hbuo.SetHeight(*i)
	}
	return hbuo
}

// AddHeight adds i to the "height" field.
func (hbuo *HPBlobUpdateOne) AddHeight(i int) *HPBlobUpdateOne {
	hbuo.mutation.AddHeight(i)
	return hbuo
}

// ClearHeight clears the value of the "height" field.
func (hbuo *HPBlobUpdateOne) ClearHeight() *HPBlobUpdateOne {
	hbuo.mutation.ClearHeight()
	return hbuo
}

// SetSize sets the "size" field.
func (hbuo *HPBlobUpdateOne) SetSize(i int64) *HPBlobUpdateOne {
	hbuo.mutation.ResetSize()
	hbuo.mutation.SetSize(i)
	return hbuo
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (hbuo *HPBlobUpdateOne) SetNillableSize(i *int64) *HPBlobUpdateOne {
	if i != nil {
		hbuo.SetSize(*i)
	}
	return hbuo
}

// AddSize adds i to the "size" field.
func (hbuo *HPBlobUpdateOne) AddSize(i int64) *HPBlobUpdateOne {
	hbuo.mutation.AddSize(i)
	return hbuo
}

// ClearSize clears the value of the "size" field.
func (hbuo *HPBlobUpdateOne) ClearSize() *HPBlobUpdateOne {
	hbuo.mutation.ClearSize()
	return hbuo
}

// SetOwnerArtistID sets the "owner_artist_id" field.
func (hbuo *HPBlobUpdateOne) SetOwnerArtistID(i int) *HPBlobUpdateOne {
	hbuo.mutation.SetOwnerArtistID(i)
	return hbuo
}

// SetNillableOwnerArtistID sets the "owner_artist_id" field if the given value is not nil.
func (hbuo *HPBlobUpdateOne) SetNillableOwnerArtistID(i *int) *HPBlobUpdateOne {
	if i != nil {
		hbuo.SetOwnerArtistID(*i)
	}
	return hbuo
}

// ClearOwnerArtistID clears the value of the "owner_artist_id" field.
func (hbuo *HPBlobUpdateOne) ClearOwnerArtistID() *HPBlobUpdateOne {
	hbuo.mutation.ClearOwnerArtistID()
	return hbuo
}

// SetOwnerMemberID sets the "owner_member_id" field.
func (hbuo *HPBlobUpdateOne) SetOwnerMemberID(i int) *HPBlobUpdateOne {
	hbuo.mutation.SetOwnerMemberID(i)
	return hbuo
}

// SetNillableOwnerMemberID sets the "owner_member_id" field if the given value is not nil.
func (hbuo *HPBlobUpdateOne) SetNillableOwnerMemberID(i *int) *HPBlobUpdateOne {
	if i != nil {
		hbuo.SetOwnerMemberID(*i)
	}
	return hbuo
}

// ClearOwnerMemberID clears the value of the "owner_member_id" field.
func (hbuo *HPBlobUpdateOne) ClearOwnerMemberID() *HPBlobUpdateOne {
	hbuo.mutation.ClearOwnerMemberID()
	return hbuo
}

// SetNumFaces sets the "num_faces" field.
func (hbuo *HPBlobUpdateOne) SetNumFaces(i int) *HPBlobUpdateOne {
	hbuo.mutation.ResetNumFaces()
	hbuo.mutation.SetNumFaces(i)
	return hbuo
}

// SetNillableNumFaces sets the "num_faces" field if the given value is not nil.
func (hbuo *HPBlobUpdateOne) SetNillableNumFaces(i *int) *HPBlobUpdateOne {
	if i != nil {
		hbuo.SetNumFaces(*i)
	}
	return hbuo
}

// AddNumFaces adds i to the "num_faces" field.
func (hbuo *HPBlobUpdateOne) AddNumFaces(i int) *HPBlobUpdateOne {
	hbuo.mutation.AddNumFaces(i)
	return hbuo
}

// ClearNumFaces clears the value of the "num_faces" field.
func (hbuo *HPBlobUpdateOne) ClearNumFaces() *HPBlobUpdateOne {
	hbuo.mutation.ClearNumFaces()
	return hbuo
}

// SetFaces sets the "faces" field.
func (hbuo *HPBlobUpdateOne) SetFaces(jbif jsonfields.HPBlobImageFace) *HPBlobUpdateOne {
	hbuo.mutation.SetFaces(jbif)
	return hbuo
}

// SetNillableFaces sets the "faces" field if the given value is not nil.
func (hbuo *HPBlobUpdateOne) SetNillableFaces(jbif *jsonfields.HPBlobImageFace) *HPBlobUpdateOne {
	if jbif != nil {
		hbuo.SetFaces(*jbif)
	}
	return hbuo
}

// ClearFaces clears the value of the "faces" field.
func (hbuo *HPBlobUpdateOne) ClearFaces() *HPBlobUpdateOne {
	hbuo.mutation.ClearFaces()
	return hbuo
}

// SetFaceRecognitionStatus sets the "face_recognition_status" field.
func (hbuo *HPBlobUpdateOne) SetFaceRecognitionStatus(ebfrs enums.HPBlobFaceRecognitionStatus) *HPBlobUpdateOne {
	hbuo.mutation.SetFaceRecognitionStatus(ebfrs)
	return hbuo
}

// SetNillableFaceRecognitionStatus sets the "face_recognition_status" field if the given value is not nil.
func (hbuo *HPBlobUpdateOne) SetNillableFaceRecognitionStatus(ebfrs *enums.HPBlobFaceRecognitionStatus) *HPBlobUpdateOne {
	if ebfrs != nil {
		hbuo.SetFaceRecognitionStatus(*ebfrs)
	}
	return hbuo
}

// ClearFaceRecognitionStatus clears the value of the "face_recognition_status" field.
func (hbuo *HPBlobUpdateOne) ClearFaceRecognitionStatus() *HPBlobUpdateOne {
	hbuo.mutation.ClearFaceRecognitionStatus()
	return hbuo
}

// SetThumbnail sets the "thumbnail" field.
func (hbuo *HPBlobUpdateOne) SetThumbnail(jbt *jsonfields.HPBlobThumbnail) *HPBlobUpdateOne {
	hbuo.mutation.SetThumbnail(jbt)
	return hbuo
}

// ClearThumbnail clears the value of the "thumbnail" field.
func (hbuo *HPBlobUpdateOne) ClearThumbnail() *HPBlobUpdateOne {
	hbuo.mutation.ClearThumbnail()
	return hbuo
}

// SetDurationSeconds sets the "duration_seconds" field.
func (hbuo *HPBlobUpdateOne) SetDurationSeconds(f float64) *HPBlobUpdateOne {
	hbuo.mutation.ResetDurationSeconds()
	hbuo.mutation.SetDurationSeconds(f)
	return hbuo
}

// SetNillableDurationSeconds sets the "duration_seconds" field if the given value is not nil.
func (hbuo *HPBlobUpdateOne) SetNillableDurationSeconds(f *float64) *HPBlobUpdateOne {
	if f != nil {
		hbuo.SetDurationSeconds(*f)
	}
	return hbuo
}

// AddDurationSeconds adds f to the "duration_seconds" field.
func (hbuo *HPBlobUpdateOne) AddDurationSeconds(f float64) *HPBlobUpdateOne {
	hbuo.mutation.AddDurationSeconds(f)
	return hbuo
}

// ClearDurationSeconds clears the value of the "duration_seconds" field.
func (hbuo *HPBlobUpdateOne) ClearDurationSeconds() *HPBlobUpdateOne {
	hbuo.mutation.ClearDurationSeconds()
	return hbuo
}

// SetOwnerArtist sets the "owner_artist" edge to the HPArtist entity.
func (hbuo *HPBlobUpdateOne) SetOwnerArtist(h *HPArtist) *HPBlobUpdateOne {
	return hbuo.SetOwnerArtistID(h.ID)
}

// SetOwnerMember sets the "owner_member" edge to the HPMember entity.
func (hbuo *HPBlobUpdateOne) SetOwnerMember(h *HPMember) *HPBlobUpdateOne {
	return hbuo.SetOwnerMemberID(h.ID)
}

// AddAmebloPostIDs adds the "ameblo_posts" edge to the HPAmebloPost entity by IDs.
func (hbuo *HPBlobUpdateOne) AddAmebloPostIDs(ids ...int) *HPBlobUpdateOne {
	hbuo.mutation.AddAmebloPostIDs(ids...)
	return hbuo
}

// AddAmebloPosts adds the "ameblo_posts" edges to the HPAmebloPost entity.
func (hbuo *HPBlobUpdateOne) AddAmebloPosts(h ...*HPAmebloPost) *HPBlobUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hbuo.AddAmebloPostIDs(ids...)
}

// AddIgPostIDs adds the "ig_posts" edge to the HPIgPost entity by IDs.
func (hbuo *HPBlobUpdateOne) AddIgPostIDs(ids ...int) *HPBlobUpdateOne {
	hbuo.mutation.AddIgPostIDs(ids...)
	return hbuo
}

// AddIgPosts adds the "ig_posts" edges to the HPIgPost entity.
func (hbuo *HPBlobUpdateOne) AddIgPosts(h ...*HPIgPost) *HPBlobUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hbuo.AddIgPostIDs(ids...)
}

// Mutation returns the HPBlobMutation object of the builder.
func (hbuo *HPBlobUpdateOne) Mutation() *HPBlobMutation {
	return hbuo.mutation
}

// ClearOwnerArtist clears the "owner_artist" edge to the HPArtist entity.
func (hbuo *HPBlobUpdateOne) ClearOwnerArtist() *HPBlobUpdateOne {
	hbuo.mutation.ClearOwnerArtist()
	return hbuo
}

// ClearOwnerMember clears the "owner_member" edge to the HPMember entity.
func (hbuo *HPBlobUpdateOne) ClearOwnerMember() *HPBlobUpdateOne {
	hbuo.mutation.ClearOwnerMember()
	return hbuo
}

// ClearAmebloPosts clears all "ameblo_posts" edges to the HPAmebloPost entity.
func (hbuo *HPBlobUpdateOne) ClearAmebloPosts() *HPBlobUpdateOne {
	hbuo.mutation.ClearAmebloPosts()
	return hbuo
}

// RemoveAmebloPostIDs removes the "ameblo_posts" edge to HPAmebloPost entities by IDs.
func (hbuo *HPBlobUpdateOne) RemoveAmebloPostIDs(ids ...int) *HPBlobUpdateOne {
	hbuo.mutation.RemoveAmebloPostIDs(ids...)
	return hbuo
}

// RemoveAmebloPosts removes "ameblo_posts" edges to HPAmebloPost entities.
func (hbuo *HPBlobUpdateOne) RemoveAmebloPosts(h ...*HPAmebloPost) *HPBlobUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hbuo.RemoveAmebloPostIDs(ids...)
}

// ClearIgPosts clears all "ig_posts" edges to the HPIgPost entity.
func (hbuo *HPBlobUpdateOne) ClearIgPosts() *HPBlobUpdateOne {
	hbuo.mutation.ClearIgPosts()
	return hbuo
}

// RemoveIgPostIDs removes the "ig_posts" edge to HPIgPost entities by IDs.
func (hbuo *HPBlobUpdateOne) RemoveIgPostIDs(ids ...int) *HPBlobUpdateOne {
	hbuo.mutation.RemoveIgPostIDs(ids...)
	return hbuo
}

// RemoveIgPosts removes "ig_posts" edges to HPIgPost entities.
func (hbuo *HPBlobUpdateOne) RemoveIgPosts(h ...*HPIgPost) *HPBlobUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hbuo.RemoveIgPostIDs(ids...)
}

// Where appends a list predicates to the HPBlobUpdate builder.
func (hbuo *HPBlobUpdateOne) Where(ps ...predicate.HPBlob) *HPBlobUpdateOne {
	hbuo.mutation.Where(ps...)
	return hbuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (hbuo *HPBlobUpdateOne) Select(field string, fields ...string) *HPBlobUpdateOne {
	hbuo.fields = append([]string{field}, fields...)
	return hbuo
}

// Save executes the query and returns the updated HPBlob entity.
func (hbuo *HPBlobUpdateOne) Save(ctx context.Context) (*HPBlob, error) {
	return withHooks[*HPBlob, HPBlobMutation](ctx, hbuo.sqlSave, hbuo.mutation, hbuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hbuo *HPBlobUpdateOne) SaveX(ctx context.Context) *HPBlob {
	node, err := hbuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (hbuo *HPBlobUpdateOne) Exec(ctx context.Context) error {
	_, err := hbuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hbuo *HPBlobUpdateOne) ExecX(ctx context.Context) {
	if err := hbuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hbuo *HPBlobUpdateOne) check() error {
	if v, ok := hbuo.mutation.StoragePath(); ok {
		if err := hpblob.StoragePathValidator(v); err != nil {
			return &ValidationError{Name: "storage_path", err: fmt.Errorf(`ent: validator failed for field "HPBlob.storage_path": %w`, err)}
		}
	}
	if v, ok := hbuo.mutation.SourceURL(); ok {
		if err := hpblob.SourceURLValidator(v); err != nil {
			return &ValidationError{Name: "source_url", err: fmt.Errorf(`ent: validator failed for field "HPBlob.source_url": %w`, err)}
		}
	}
	if v, ok := hbuo.mutation.SourceHTMLURL(); ok {
		if err := hpblob.SourceHTMLURLValidator(v); err != nil {
			return &ValidationError{Name: "source_html_url", err: fmt.Errorf(`ent: validator failed for field "HPBlob.source_html_url": %w`, err)}
		}
	}
	if v, ok := hbuo.mutation.Status(); ok {
		if err := hpblob.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "HPBlob.status": %w`, err)}
		}
	}
	if v, ok := hbuo.mutation.GetType(); ok {
		if err := hpblob.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "HPBlob.type": %w`, err)}
		}
	}
	if v, ok := hbuo.mutation.SubType(); ok {
		if err := hpblob.SubTypeValidator(v); err != nil {
			return &ValidationError{Name: "sub_type", err: fmt.Errorf(`ent: validator failed for field "HPBlob.sub_type": %w`, err)}
		}
	}
	if v, ok := hbuo.mutation.FaceRecognitionStatus(); ok {
		if err := hpblob.FaceRecognitionStatusValidator(v); err != nil {
			return &ValidationError{Name: "face_recognition_status", err: fmt.Errorf(`ent: validator failed for field "HPBlob.face_recognition_status": %w`, err)}
		}
	}
	return nil
}

func (hbuo *HPBlobUpdateOne) sqlSave(ctx context.Context) (_node *HPBlob, err error) {
	if err := hbuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(hpblob.Table, hpblob.Columns, sqlgraph.NewFieldSpec(hpblob.FieldID, field.TypeInt))
	id, ok := hbuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "HPBlob.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := hbuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hpblob.FieldID)
		for _, f := range fields {
			if !hpblob.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != hpblob.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := hbuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if hbuo.mutation.CreatedAtCleared() {
		_spec.ClearField(hpblob.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := hbuo.mutation.UpdatedAt(); ok {
		_spec.SetField(hpblob.FieldUpdatedAt, field.TypeTime, value)
	}
	if hbuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(hpblob.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := hbuo.mutation.StoragePath(); ok {
		_spec.SetField(hpblob.FieldStoragePath, field.TypeString, value)
	}
	if value, ok := hbuo.mutation.SourceURL(); ok {
		_spec.SetField(hpblob.FieldSourceURL, field.TypeString, value)
	}
	if value, ok := hbuo.mutation.SourceHTMLURL(); ok {
		_spec.SetField(hpblob.FieldSourceHTMLURL, field.TypeString, value)
	}
	if value, ok := hbuo.mutation.Status(); ok {
		_spec.SetField(hpblob.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := hbuo.mutation.StatusMessage(); ok {
		_spec.SetField(hpblob.FieldStatusMessage, field.TypeString, value)
	}
	if hbuo.mutation.StatusMessageCleared() {
		_spec.ClearField(hpblob.FieldStatusMessage, field.TypeString)
	}
	if value, ok := hbuo.mutation.StatusErrorCount(); ok {
		_spec.SetField(hpblob.FieldStatusErrorCount, field.TypeInt, value)
	}
	if value, ok := hbuo.mutation.AddedStatusErrorCount(); ok {
		_spec.AddField(hpblob.FieldStatusErrorCount, field.TypeInt, value)
	}
	if hbuo.mutation.StatusErrorCountCleared() {
		_spec.ClearField(hpblob.FieldStatusErrorCount, field.TypeInt)
	}
	if value, ok := hbuo.mutation.GetType(); ok {
		_spec.SetField(hpblob.FieldType, field.TypeEnum, value)
	}
	if value, ok := hbuo.mutation.SubType(); ok {
		_spec.SetField(hpblob.FieldSubType, field.TypeEnum, value)
	}
	if value, ok := hbuo.mutation.Width(); ok {
		_spec.SetField(hpblob.FieldWidth, field.TypeInt, value)
	}
	if value, ok := hbuo.mutation.AddedWidth(); ok {
		_spec.AddField(hpblob.FieldWidth, field.TypeInt, value)
	}
	if hbuo.mutation.WidthCleared() {
		_spec.ClearField(hpblob.FieldWidth, field.TypeInt)
	}
	if value, ok := hbuo.mutation.Height(); ok {
		_spec.SetField(hpblob.FieldHeight, field.TypeInt, value)
	}
	if value, ok := hbuo.mutation.AddedHeight(); ok {
		_spec.AddField(hpblob.FieldHeight, field.TypeInt, value)
	}
	if hbuo.mutation.HeightCleared() {
		_spec.ClearField(hpblob.FieldHeight, field.TypeInt)
	}
	if value, ok := hbuo.mutation.Size(); ok {
		_spec.SetField(hpblob.FieldSize, field.TypeInt64, value)
	}
	if value, ok := hbuo.mutation.AddedSize(); ok {
		_spec.AddField(hpblob.FieldSize, field.TypeInt64, value)
	}
	if hbuo.mutation.SizeCleared() {
		_spec.ClearField(hpblob.FieldSize, field.TypeInt64)
	}
	if value, ok := hbuo.mutation.NumFaces(); ok {
		_spec.SetField(hpblob.FieldNumFaces, field.TypeInt, value)
	}
	if value, ok := hbuo.mutation.AddedNumFaces(); ok {
		_spec.AddField(hpblob.FieldNumFaces, field.TypeInt, value)
	}
	if hbuo.mutation.NumFacesCleared() {
		_spec.ClearField(hpblob.FieldNumFaces, field.TypeInt)
	}
	if value, ok := hbuo.mutation.Faces(); ok {
		_spec.SetField(hpblob.FieldFaces, field.TypeJSON, value)
	}
	if hbuo.mutation.FacesCleared() {
		_spec.ClearField(hpblob.FieldFaces, field.TypeJSON)
	}
	if value, ok := hbuo.mutation.FaceRecognitionStatus(); ok {
		_spec.SetField(hpblob.FieldFaceRecognitionStatus, field.TypeEnum, value)
	}
	if hbuo.mutation.FaceRecognitionStatusCleared() {
		_spec.ClearField(hpblob.FieldFaceRecognitionStatus, field.TypeEnum)
	}
	if value, ok := hbuo.mutation.Thumbnail(); ok {
		_spec.SetField(hpblob.FieldThumbnail, field.TypeJSON, value)
	}
	if hbuo.mutation.ThumbnailCleared() {
		_spec.ClearField(hpblob.FieldThumbnail, field.TypeJSON)
	}
	if value, ok := hbuo.mutation.DurationSeconds(); ok {
		_spec.SetField(hpblob.FieldDurationSeconds, field.TypeFloat64, value)
	}
	if value, ok := hbuo.mutation.AddedDurationSeconds(); ok {
		_spec.AddField(hpblob.FieldDurationSeconds, field.TypeFloat64, value)
	}
	if hbuo.mutation.DurationSecondsCleared() {
		_spec.ClearField(hpblob.FieldDurationSeconds, field.TypeFloat64)
	}
	if hbuo.mutation.OwnerArtistCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hpblob.OwnerArtistTable,
			Columns: []string{hpblob.OwnerArtistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpartist.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hbuo.mutation.OwnerArtistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hpblob.OwnerArtistTable,
			Columns: []string{hpblob.OwnerArtistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpartist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hbuo.mutation.OwnerMemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hpblob.OwnerMemberTable,
			Columns: []string{hpblob.OwnerMemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpmember.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hbuo.mutation.OwnerMemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hpblob.OwnerMemberTable,
			Columns: []string{hpblob.OwnerMemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hbuo.mutation.AmebloPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpblob.AmebloPostsTable,
			Columns: hpblob.AmebloPostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpameblopost.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hbuo.mutation.RemovedAmebloPostsIDs(); len(nodes) > 0 && !hbuo.mutation.AmebloPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpblob.AmebloPostsTable,
			Columns: hpblob.AmebloPostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpameblopost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hbuo.mutation.AmebloPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpblob.AmebloPostsTable,
			Columns: hpblob.AmebloPostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpameblopost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hbuo.mutation.IgPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpblob.IgPostsTable,
			Columns: hpblob.IgPostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpigpost.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hbuo.mutation.RemovedIgPostsIDs(); len(nodes) > 0 && !hbuo.mutation.IgPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpblob.IgPostsTable,
			Columns: hpblob.IgPostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpigpost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hbuo.mutation.IgPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpblob.IgPostsTable,
			Columns: hpblob.IgPostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpigpost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &HPBlob{config: hbuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, hbuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hpblob.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	hbuo.mutation.done = true
	return _node, nil
}
