// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yssk22/hpapp/go/service/ent/predicate"
	"github.com/yssk22/hpapp/go/service/ent/usernotificationsetting"
)

// UserNotificationSettingDelete is the builder for deleting a UserNotificationSetting entity.
type UserNotificationSettingDelete struct {
	config
	hooks    []Hook
	mutation *UserNotificationSettingMutation
}

// Where appends a list predicates to the UserNotificationSettingDelete builder.
func (unsd *UserNotificationSettingDelete) Where(ps ...predicate.UserNotificationSetting) *UserNotificationSettingDelete {
	unsd.mutation.Where(ps...)
	return unsd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (unsd *UserNotificationSettingDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, UserNotificationSettingMutation](ctx, unsd.sqlExec, unsd.mutation, unsd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (unsd *UserNotificationSettingDelete) ExecX(ctx context.Context) int {
	n, err := unsd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (unsd *UserNotificationSettingDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(usernotificationsetting.Table, sqlgraph.NewFieldSpec(usernotificationsetting.FieldID, field.TypeInt))
	if ps := unsd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, unsd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	unsd.mutation.done = true
	return affected, err
}

// UserNotificationSettingDeleteOne is the builder for deleting a single UserNotificationSetting entity.
type UserNotificationSettingDeleteOne struct {
	unsd *UserNotificationSettingDelete
}

// Where appends a list predicates to the UserNotificationSettingDelete builder.
func (unsdo *UserNotificationSettingDeleteOne) Where(ps ...predicate.UserNotificationSetting) *UserNotificationSettingDeleteOne {
	unsdo.unsd.mutation.Where(ps...)
	return unsdo
}

// Exec executes the deletion query.
func (unsdo *UserNotificationSettingDeleteOne) Exec(ctx context.Context) error {
	n, err := unsdo.unsd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{usernotificationsetting.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (unsdo *UserNotificationSettingDeleteOne) ExecX(ctx context.Context) {
	if err := unsdo.Exec(ctx); err != nil {
		panic(err)
	}
}
