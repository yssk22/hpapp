// Code generated by ent, DO NOT EDIT.

package hpmember

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/yssk22/hpapp/go/service/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.HPMember {
	return predicate.HPMember(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.HPMember {
	return predicate.HPMember(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.HPMember {
	return predicate.HPMember(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.HPMember {
	return predicate.HPMember(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.HPMember {
	return predicate.HPMember(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.HPMember {
	return predicate.HPMember(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.HPMember {
	return predicate.HPMember(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.HPMember {
	return predicate.HPMember(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.HPMember {
	return predicate.HPMember(sql.FieldLTE(FieldID, id))
}

// CrawledAt applies equality check predicate on the "crawled_at" field. It's identical to CrawledAtEQ.
func CrawledAt(v time.Time) predicate.HPMember {
	return predicate.HPMember(sql.FieldEQ(FieldCrawledAt, v))
}

// ErrorCount applies equality check predicate on the "error_count" field. It's identical to ErrorCountEQ.
func ErrorCount(v int) predicate.HPMember {
	return predicate.HPMember(sql.FieldEQ(FieldErrorCount, v))
}

// LastErrorMessage applies equality check predicate on the "last_error_message" field. It's identical to LastErrorMessageEQ.
func LastErrorMessage(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldEQ(FieldLastErrorMessage, v))
}

// RecrawlRequired applies equality check predicate on the "recrawl_required" field. It's identical to RecrawlRequiredEQ.
func RecrawlRequired(v bool) predicate.HPMember {
	return predicate.HPMember(sql.FieldEQ(FieldRecrawlRequired, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.HPMember {
	return predicate.HPMember(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.HPMember {
	return predicate.HPMember(sql.FieldEQ(FieldUpdatedAt, v))
}

// Key applies equality check predicate on the "key" field. It's identical to KeyEQ.
func Key(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldEQ(FieldKey, v))
}

// ArtistKey applies equality check predicate on the "artist_key" field. It's identical to ArtistKeyEQ.
func ArtistKey(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldEQ(FieldArtistKey, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldEQ(FieldName, v))
}

// NameKana applies equality check predicate on the "name_kana" field. It's identical to NameKanaEQ.
func NameKana(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldEQ(FieldNameKana, v))
}

// ThumbnailURL applies equality check predicate on the "thumbnail_url" field. It's identical to ThumbnailURLEQ.
func ThumbnailURL(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldEQ(FieldThumbnailURL, v))
}

// DateOfBirth applies equality check predicate on the "date_of_birth" field. It's identical to DateOfBirthEQ.
func DateOfBirth(v time.Time) predicate.HPMember {
	return predicate.HPMember(sql.FieldEQ(FieldDateOfBirth, v))
}

// BloodType applies equality check predicate on the "blood_type" field. It's identical to BloodTypeEQ.
func BloodType(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldEQ(FieldBloodType, v))
}

// Hometown applies equality check predicate on the "hometown" field. It's identical to HometownEQ.
func Hometown(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldEQ(FieldHometown, v))
}

// JoinAt applies equality check predicate on the "join_at" field. It's identical to JoinAtEQ.
func JoinAt(v time.Time) predicate.HPMember {
	return predicate.HPMember(sql.FieldEQ(FieldJoinAt, v))
}

// GraduateAt applies equality check predicate on the "graduate_at" field. It's identical to GraduateAtEQ.
func GraduateAt(v time.Time) predicate.HPMember {
	return predicate.HPMember(sql.FieldEQ(FieldGraduateAt, v))
}

// ColorRgb applies equality check predicate on the "color_rgb" field. It's identical to ColorRgbEQ.
func ColorRgb(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldEQ(FieldColorRgb, v))
}

// ColorName applies equality check predicate on the "color_name" field. It's identical to ColorNameEQ.
func ColorName(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldEQ(FieldColorName, v))
}

// ArtistID applies equality check predicate on the "artist_id" field. It's identical to ArtistIDEQ.
func ArtistID(v int) predicate.HPMember {
	return predicate.HPMember(sql.FieldEQ(FieldArtistID, v))
}

// CrawledAtEQ applies the EQ predicate on the "crawled_at" field.
func CrawledAtEQ(v time.Time) predicate.HPMember {
	return predicate.HPMember(sql.FieldEQ(FieldCrawledAt, v))
}

// CrawledAtNEQ applies the NEQ predicate on the "crawled_at" field.
func CrawledAtNEQ(v time.Time) predicate.HPMember {
	return predicate.HPMember(sql.FieldNEQ(FieldCrawledAt, v))
}

// CrawledAtIn applies the In predicate on the "crawled_at" field.
func CrawledAtIn(vs ...time.Time) predicate.HPMember {
	return predicate.HPMember(sql.FieldIn(FieldCrawledAt, vs...))
}

// CrawledAtNotIn applies the NotIn predicate on the "crawled_at" field.
func CrawledAtNotIn(vs ...time.Time) predicate.HPMember {
	return predicate.HPMember(sql.FieldNotIn(FieldCrawledAt, vs...))
}

// CrawledAtGT applies the GT predicate on the "crawled_at" field.
func CrawledAtGT(v time.Time) predicate.HPMember {
	return predicate.HPMember(sql.FieldGT(FieldCrawledAt, v))
}

// CrawledAtGTE applies the GTE predicate on the "crawled_at" field.
func CrawledAtGTE(v time.Time) predicate.HPMember {
	return predicate.HPMember(sql.FieldGTE(FieldCrawledAt, v))
}

// CrawledAtLT applies the LT predicate on the "crawled_at" field.
func CrawledAtLT(v time.Time) predicate.HPMember {
	return predicate.HPMember(sql.FieldLT(FieldCrawledAt, v))
}

// CrawledAtLTE applies the LTE predicate on the "crawled_at" field.
func CrawledAtLTE(v time.Time) predicate.HPMember {
	return predicate.HPMember(sql.FieldLTE(FieldCrawledAt, v))
}

// CrawledAtIsNil applies the IsNil predicate on the "crawled_at" field.
func CrawledAtIsNil() predicate.HPMember {
	return predicate.HPMember(sql.FieldIsNull(FieldCrawledAt))
}

// CrawledAtNotNil applies the NotNil predicate on the "crawled_at" field.
func CrawledAtNotNil() predicate.HPMember {
	return predicate.HPMember(sql.FieldNotNull(FieldCrawledAt))
}

// ErrorCountEQ applies the EQ predicate on the "error_count" field.
func ErrorCountEQ(v int) predicate.HPMember {
	return predicate.HPMember(sql.FieldEQ(FieldErrorCount, v))
}

// ErrorCountNEQ applies the NEQ predicate on the "error_count" field.
func ErrorCountNEQ(v int) predicate.HPMember {
	return predicate.HPMember(sql.FieldNEQ(FieldErrorCount, v))
}

// ErrorCountIn applies the In predicate on the "error_count" field.
func ErrorCountIn(vs ...int) predicate.HPMember {
	return predicate.HPMember(sql.FieldIn(FieldErrorCount, vs...))
}

// ErrorCountNotIn applies the NotIn predicate on the "error_count" field.
func ErrorCountNotIn(vs ...int) predicate.HPMember {
	return predicate.HPMember(sql.FieldNotIn(FieldErrorCount, vs...))
}

// ErrorCountGT applies the GT predicate on the "error_count" field.
func ErrorCountGT(v int) predicate.HPMember {
	return predicate.HPMember(sql.FieldGT(FieldErrorCount, v))
}

// ErrorCountGTE applies the GTE predicate on the "error_count" field.
func ErrorCountGTE(v int) predicate.HPMember {
	return predicate.HPMember(sql.FieldGTE(FieldErrorCount, v))
}

// ErrorCountLT applies the LT predicate on the "error_count" field.
func ErrorCountLT(v int) predicate.HPMember {
	return predicate.HPMember(sql.FieldLT(FieldErrorCount, v))
}

// ErrorCountLTE applies the LTE predicate on the "error_count" field.
func ErrorCountLTE(v int) predicate.HPMember {
	return predicate.HPMember(sql.FieldLTE(FieldErrorCount, v))
}

// ManuallyModifiedIsNil applies the IsNil predicate on the "manually_modified" field.
func ManuallyModifiedIsNil() predicate.HPMember {
	return predicate.HPMember(sql.FieldIsNull(FieldManuallyModified))
}

// ManuallyModifiedNotNil applies the NotNil predicate on the "manually_modified" field.
func ManuallyModifiedNotNil() predicate.HPMember {
	return predicate.HPMember(sql.FieldNotNull(FieldManuallyModified))
}

// LastErrorMessageEQ applies the EQ predicate on the "last_error_message" field.
func LastErrorMessageEQ(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldEQ(FieldLastErrorMessage, v))
}

// LastErrorMessageNEQ applies the NEQ predicate on the "last_error_message" field.
func LastErrorMessageNEQ(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldNEQ(FieldLastErrorMessage, v))
}

// LastErrorMessageIn applies the In predicate on the "last_error_message" field.
func LastErrorMessageIn(vs ...string) predicate.HPMember {
	return predicate.HPMember(sql.FieldIn(FieldLastErrorMessage, vs...))
}

// LastErrorMessageNotIn applies the NotIn predicate on the "last_error_message" field.
func LastErrorMessageNotIn(vs ...string) predicate.HPMember {
	return predicate.HPMember(sql.FieldNotIn(FieldLastErrorMessage, vs...))
}

// LastErrorMessageGT applies the GT predicate on the "last_error_message" field.
func LastErrorMessageGT(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldGT(FieldLastErrorMessage, v))
}

// LastErrorMessageGTE applies the GTE predicate on the "last_error_message" field.
func LastErrorMessageGTE(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldGTE(FieldLastErrorMessage, v))
}

// LastErrorMessageLT applies the LT predicate on the "last_error_message" field.
func LastErrorMessageLT(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldLT(FieldLastErrorMessage, v))
}

// LastErrorMessageLTE applies the LTE predicate on the "last_error_message" field.
func LastErrorMessageLTE(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldLTE(FieldLastErrorMessage, v))
}

// LastErrorMessageContains applies the Contains predicate on the "last_error_message" field.
func LastErrorMessageContains(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldContains(FieldLastErrorMessage, v))
}

// LastErrorMessageHasPrefix applies the HasPrefix predicate on the "last_error_message" field.
func LastErrorMessageHasPrefix(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldHasPrefix(FieldLastErrorMessage, v))
}

// LastErrorMessageHasSuffix applies the HasSuffix predicate on the "last_error_message" field.
func LastErrorMessageHasSuffix(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldHasSuffix(FieldLastErrorMessage, v))
}

// LastErrorMessageIsNil applies the IsNil predicate on the "last_error_message" field.
func LastErrorMessageIsNil() predicate.HPMember {
	return predicate.HPMember(sql.FieldIsNull(FieldLastErrorMessage))
}

// LastErrorMessageNotNil applies the NotNil predicate on the "last_error_message" field.
func LastErrorMessageNotNil() predicate.HPMember {
	return predicate.HPMember(sql.FieldNotNull(FieldLastErrorMessage))
}

// LastErrorMessageEqualFold applies the EqualFold predicate on the "last_error_message" field.
func LastErrorMessageEqualFold(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldEqualFold(FieldLastErrorMessage, v))
}

// LastErrorMessageContainsFold applies the ContainsFold predicate on the "last_error_message" field.
func LastErrorMessageContainsFold(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldContainsFold(FieldLastErrorMessage, v))
}

// RecrawlRequiredEQ applies the EQ predicate on the "recrawl_required" field.
func RecrawlRequiredEQ(v bool) predicate.HPMember {
	return predicate.HPMember(sql.FieldEQ(FieldRecrawlRequired, v))
}

// RecrawlRequiredNEQ applies the NEQ predicate on the "recrawl_required" field.
func RecrawlRequiredNEQ(v bool) predicate.HPMember {
	return predicate.HPMember(sql.FieldNEQ(FieldRecrawlRequired, v))
}

// RecrawlRequiredIsNil applies the IsNil predicate on the "recrawl_required" field.
func RecrawlRequiredIsNil() predicate.HPMember {
	return predicate.HPMember(sql.FieldIsNull(FieldRecrawlRequired))
}

// RecrawlRequiredNotNil applies the NotNil predicate on the "recrawl_required" field.
func RecrawlRequiredNotNil() predicate.HPMember {
	return predicate.HPMember(sql.FieldNotNull(FieldRecrawlRequired))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.HPMember {
	return predicate.HPMember(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.HPMember {
	return predicate.HPMember(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.HPMember {
	return predicate.HPMember(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.HPMember {
	return predicate.HPMember(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.HPMember {
	return predicate.HPMember(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.HPMember {
	return predicate.HPMember(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.HPMember {
	return predicate.HPMember(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.HPMember {
	return predicate.HPMember(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.HPMember {
	return predicate.HPMember(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.HPMember {
	return predicate.HPMember(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.HPMember {
	return predicate.HPMember(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.HPMember {
	return predicate.HPMember(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.HPMember {
	return predicate.HPMember(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.HPMember {
	return predicate.HPMember(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.HPMember {
	return predicate.HPMember(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.HPMember {
	return predicate.HPMember(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.HPMember {
	return predicate.HPMember(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.HPMember {
	return predicate.HPMember(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.HPMember {
	return predicate.HPMember(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.HPMember {
	return predicate.HPMember(sql.FieldNotNull(FieldUpdatedAt))
}

// KeyEQ applies the EQ predicate on the "key" field.
func KeyEQ(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldEQ(FieldKey, v))
}

// KeyNEQ applies the NEQ predicate on the "key" field.
func KeyNEQ(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldNEQ(FieldKey, v))
}

// KeyIn applies the In predicate on the "key" field.
func KeyIn(vs ...string) predicate.HPMember {
	return predicate.HPMember(sql.FieldIn(FieldKey, vs...))
}

// KeyNotIn applies the NotIn predicate on the "key" field.
func KeyNotIn(vs ...string) predicate.HPMember {
	return predicate.HPMember(sql.FieldNotIn(FieldKey, vs...))
}

// KeyGT applies the GT predicate on the "key" field.
func KeyGT(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldGT(FieldKey, v))
}

// KeyGTE applies the GTE predicate on the "key" field.
func KeyGTE(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldGTE(FieldKey, v))
}

// KeyLT applies the LT predicate on the "key" field.
func KeyLT(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldLT(FieldKey, v))
}

// KeyLTE applies the LTE predicate on the "key" field.
func KeyLTE(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldLTE(FieldKey, v))
}

// KeyContains applies the Contains predicate on the "key" field.
func KeyContains(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldContains(FieldKey, v))
}

// KeyHasPrefix applies the HasPrefix predicate on the "key" field.
func KeyHasPrefix(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldHasPrefix(FieldKey, v))
}

// KeyHasSuffix applies the HasSuffix predicate on the "key" field.
func KeyHasSuffix(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldHasSuffix(FieldKey, v))
}

// KeyEqualFold applies the EqualFold predicate on the "key" field.
func KeyEqualFold(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldEqualFold(FieldKey, v))
}

// KeyContainsFold applies the ContainsFold predicate on the "key" field.
func KeyContainsFold(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldContainsFold(FieldKey, v))
}

// ArtistKeyEQ applies the EQ predicate on the "artist_key" field.
func ArtistKeyEQ(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldEQ(FieldArtistKey, v))
}

// ArtistKeyNEQ applies the NEQ predicate on the "artist_key" field.
func ArtistKeyNEQ(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldNEQ(FieldArtistKey, v))
}

// ArtistKeyIn applies the In predicate on the "artist_key" field.
func ArtistKeyIn(vs ...string) predicate.HPMember {
	return predicate.HPMember(sql.FieldIn(FieldArtistKey, vs...))
}

// ArtistKeyNotIn applies the NotIn predicate on the "artist_key" field.
func ArtistKeyNotIn(vs ...string) predicate.HPMember {
	return predicate.HPMember(sql.FieldNotIn(FieldArtistKey, vs...))
}

// ArtistKeyGT applies the GT predicate on the "artist_key" field.
func ArtistKeyGT(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldGT(FieldArtistKey, v))
}

// ArtistKeyGTE applies the GTE predicate on the "artist_key" field.
func ArtistKeyGTE(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldGTE(FieldArtistKey, v))
}

// ArtistKeyLT applies the LT predicate on the "artist_key" field.
func ArtistKeyLT(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldLT(FieldArtistKey, v))
}

// ArtistKeyLTE applies the LTE predicate on the "artist_key" field.
func ArtistKeyLTE(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldLTE(FieldArtistKey, v))
}

// ArtistKeyContains applies the Contains predicate on the "artist_key" field.
func ArtistKeyContains(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldContains(FieldArtistKey, v))
}

// ArtistKeyHasPrefix applies the HasPrefix predicate on the "artist_key" field.
func ArtistKeyHasPrefix(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldHasPrefix(FieldArtistKey, v))
}

// ArtistKeyHasSuffix applies the HasSuffix predicate on the "artist_key" field.
func ArtistKeyHasSuffix(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldHasSuffix(FieldArtistKey, v))
}

// ArtistKeyEqualFold applies the EqualFold predicate on the "artist_key" field.
func ArtistKeyEqualFold(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldEqualFold(FieldArtistKey, v))
}

// ArtistKeyContainsFold applies the ContainsFold predicate on the "artist_key" field.
func ArtistKeyContainsFold(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldContainsFold(FieldArtistKey, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.HPMember {
	return predicate.HPMember(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.HPMember {
	return predicate.HPMember(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldContainsFold(FieldName, v))
}

// NameKanaEQ applies the EQ predicate on the "name_kana" field.
func NameKanaEQ(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldEQ(FieldNameKana, v))
}

// NameKanaNEQ applies the NEQ predicate on the "name_kana" field.
func NameKanaNEQ(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldNEQ(FieldNameKana, v))
}

// NameKanaIn applies the In predicate on the "name_kana" field.
func NameKanaIn(vs ...string) predicate.HPMember {
	return predicate.HPMember(sql.FieldIn(FieldNameKana, vs...))
}

// NameKanaNotIn applies the NotIn predicate on the "name_kana" field.
func NameKanaNotIn(vs ...string) predicate.HPMember {
	return predicate.HPMember(sql.FieldNotIn(FieldNameKana, vs...))
}

// NameKanaGT applies the GT predicate on the "name_kana" field.
func NameKanaGT(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldGT(FieldNameKana, v))
}

// NameKanaGTE applies the GTE predicate on the "name_kana" field.
func NameKanaGTE(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldGTE(FieldNameKana, v))
}

// NameKanaLT applies the LT predicate on the "name_kana" field.
func NameKanaLT(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldLT(FieldNameKana, v))
}

// NameKanaLTE applies the LTE predicate on the "name_kana" field.
func NameKanaLTE(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldLTE(FieldNameKana, v))
}

// NameKanaContains applies the Contains predicate on the "name_kana" field.
func NameKanaContains(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldContains(FieldNameKana, v))
}

// NameKanaHasPrefix applies the HasPrefix predicate on the "name_kana" field.
func NameKanaHasPrefix(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldHasPrefix(FieldNameKana, v))
}

// NameKanaHasSuffix applies the HasSuffix predicate on the "name_kana" field.
func NameKanaHasSuffix(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldHasSuffix(FieldNameKana, v))
}

// NameKanaEqualFold applies the EqualFold predicate on the "name_kana" field.
func NameKanaEqualFold(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldEqualFold(FieldNameKana, v))
}

// NameKanaContainsFold applies the ContainsFold predicate on the "name_kana" field.
func NameKanaContainsFold(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldContainsFold(FieldNameKana, v))
}

// ThumbnailURLEQ applies the EQ predicate on the "thumbnail_url" field.
func ThumbnailURLEQ(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldEQ(FieldThumbnailURL, v))
}

// ThumbnailURLNEQ applies the NEQ predicate on the "thumbnail_url" field.
func ThumbnailURLNEQ(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldNEQ(FieldThumbnailURL, v))
}

// ThumbnailURLIn applies the In predicate on the "thumbnail_url" field.
func ThumbnailURLIn(vs ...string) predicate.HPMember {
	return predicate.HPMember(sql.FieldIn(FieldThumbnailURL, vs...))
}

// ThumbnailURLNotIn applies the NotIn predicate on the "thumbnail_url" field.
func ThumbnailURLNotIn(vs ...string) predicate.HPMember {
	return predicate.HPMember(sql.FieldNotIn(FieldThumbnailURL, vs...))
}

// ThumbnailURLGT applies the GT predicate on the "thumbnail_url" field.
func ThumbnailURLGT(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldGT(FieldThumbnailURL, v))
}

// ThumbnailURLGTE applies the GTE predicate on the "thumbnail_url" field.
func ThumbnailURLGTE(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldGTE(FieldThumbnailURL, v))
}

// ThumbnailURLLT applies the LT predicate on the "thumbnail_url" field.
func ThumbnailURLLT(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldLT(FieldThumbnailURL, v))
}

// ThumbnailURLLTE applies the LTE predicate on the "thumbnail_url" field.
func ThumbnailURLLTE(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldLTE(FieldThumbnailURL, v))
}

// ThumbnailURLContains applies the Contains predicate on the "thumbnail_url" field.
func ThumbnailURLContains(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldContains(FieldThumbnailURL, v))
}

// ThumbnailURLHasPrefix applies the HasPrefix predicate on the "thumbnail_url" field.
func ThumbnailURLHasPrefix(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldHasPrefix(FieldThumbnailURL, v))
}

// ThumbnailURLHasSuffix applies the HasSuffix predicate on the "thumbnail_url" field.
func ThumbnailURLHasSuffix(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldHasSuffix(FieldThumbnailURL, v))
}

// ThumbnailURLEqualFold applies the EqualFold predicate on the "thumbnail_url" field.
func ThumbnailURLEqualFold(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldEqualFold(FieldThumbnailURL, v))
}

// ThumbnailURLContainsFold applies the ContainsFold predicate on the "thumbnail_url" field.
func ThumbnailURLContainsFold(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldContainsFold(FieldThumbnailURL, v))
}

// DateOfBirthEQ applies the EQ predicate on the "date_of_birth" field.
func DateOfBirthEQ(v time.Time) predicate.HPMember {
	return predicate.HPMember(sql.FieldEQ(FieldDateOfBirth, v))
}

// DateOfBirthNEQ applies the NEQ predicate on the "date_of_birth" field.
func DateOfBirthNEQ(v time.Time) predicate.HPMember {
	return predicate.HPMember(sql.FieldNEQ(FieldDateOfBirth, v))
}

// DateOfBirthIn applies the In predicate on the "date_of_birth" field.
func DateOfBirthIn(vs ...time.Time) predicate.HPMember {
	return predicate.HPMember(sql.FieldIn(FieldDateOfBirth, vs...))
}

// DateOfBirthNotIn applies the NotIn predicate on the "date_of_birth" field.
func DateOfBirthNotIn(vs ...time.Time) predicate.HPMember {
	return predicate.HPMember(sql.FieldNotIn(FieldDateOfBirth, vs...))
}

// DateOfBirthGT applies the GT predicate on the "date_of_birth" field.
func DateOfBirthGT(v time.Time) predicate.HPMember {
	return predicate.HPMember(sql.FieldGT(FieldDateOfBirth, v))
}

// DateOfBirthGTE applies the GTE predicate on the "date_of_birth" field.
func DateOfBirthGTE(v time.Time) predicate.HPMember {
	return predicate.HPMember(sql.FieldGTE(FieldDateOfBirth, v))
}

// DateOfBirthLT applies the LT predicate on the "date_of_birth" field.
func DateOfBirthLT(v time.Time) predicate.HPMember {
	return predicate.HPMember(sql.FieldLT(FieldDateOfBirth, v))
}

// DateOfBirthLTE applies the LTE predicate on the "date_of_birth" field.
func DateOfBirthLTE(v time.Time) predicate.HPMember {
	return predicate.HPMember(sql.FieldLTE(FieldDateOfBirth, v))
}

// BloodTypeEQ applies the EQ predicate on the "blood_type" field.
func BloodTypeEQ(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldEQ(FieldBloodType, v))
}

// BloodTypeNEQ applies the NEQ predicate on the "blood_type" field.
func BloodTypeNEQ(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldNEQ(FieldBloodType, v))
}

// BloodTypeIn applies the In predicate on the "blood_type" field.
func BloodTypeIn(vs ...string) predicate.HPMember {
	return predicate.HPMember(sql.FieldIn(FieldBloodType, vs...))
}

// BloodTypeNotIn applies the NotIn predicate on the "blood_type" field.
func BloodTypeNotIn(vs ...string) predicate.HPMember {
	return predicate.HPMember(sql.FieldNotIn(FieldBloodType, vs...))
}

// BloodTypeGT applies the GT predicate on the "blood_type" field.
func BloodTypeGT(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldGT(FieldBloodType, v))
}

// BloodTypeGTE applies the GTE predicate on the "blood_type" field.
func BloodTypeGTE(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldGTE(FieldBloodType, v))
}

// BloodTypeLT applies the LT predicate on the "blood_type" field.
func BloodTypeLT(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldLT(FieldBloodType, v))
}

// BloodTypeLTE applies the LTE predicate on the "blood_type" field.
func BloodTypeLTE(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldLTE(FieldBloodType, v))
}

// BloodTypeContains applies the Contains predicate on the "blood_type" field.
func BloodTypeContains(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldContains(FieldBloodType, v))
}

// BloodTypeHasPrefix applies the HasPrefix predicate on the "blood_type" field.
func BloodTypeHasPrefix(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldHasPrefix(FieldBloodType, v))
}

// BloodTypeHasSuffix applies the HasSuffix predicate on the "blood_type" field.
func BloodTypeHasSuffix(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldHasSuffix(FieldBloodType, v))
}

// BloodTypeEqualFold applies the EqualFold predicate on the "blood_type" field.
func BloodTypeEqualFold(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldEqualFold(FieldBloodType, v))
}

// BloodTypeContainsFold applies the ContainsFold predicate on the "blood_type" field.
func BloodTypeContainsFold(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldContainsFold(FieldBloodType, v))
}

// HometownEQ applies the EQ predicate on the "hometown" field.
func HometownEQ(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldEQ(FieldHometown, v))
}

// HometownNEQ applies the NEQ predicate on the "hometown" field.
func HometownNEQ(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldNEQ(FieldHometown, v))
}

// HometownIn applies the In predicate on the "hometown" field.
func HometownIn(vs ...string) predicate.HPMember {
	return predicate.HPMember(sql.FieldIn(FieldHometown, vs...))
}

// HometownNotIn applies the NotIn predicate on the "hometown" field.
func HometownNotIn(vs ...string) predicate.HPMember {
	return predicate.HPMember(sql.FieldNotIn(FieldHometown, vs...))
}

// HometownGT applies the GT predicate on the "hometown" field.
func HometownGT(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldGT(FieldHometown, v))
}

// HometownGTE applies the GTE predicate on the "hometown" field.
func HometownGTE(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldGTE(FieldHometown, v))
}

// HometownLT applies the LT predicate on the "hometown" field.
func HometownLT(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldLT(FieldHometown, v))
}

// HometownLTE applies the LTE predicate on the "hometown" field.
func HometownLTE(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldLTE(FieldHometown, v))
}

// HometownContains applies the Contains predicate on the "hometown" field.
func HometownContains(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldContains(FieldHometown, v))
}

// HometownHasPrefix applies the HasPrefix predicate on the "hometown" field.
func HometownHasPrefix(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldHasPrefix(FieldHometown, v))
}

// HometownHasSuffix applies the HasSuffix predicate on the "hometown" field.
func HometownHasSuffix(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldHasSuffix(FieldHometown, v))
}

// HometownEqualFold applies the EqualFold predicate on the "hometown" field.
func HometownEqualFold(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldEqualFold(FieldHometown, v))
}

// HometownContainsFold applies the ContainsFold predicate on the "hometown" field.
func HometownContainsFold(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldContainsFold(FieldHometown, v))
}

// JoinAtEQ applies the EQ predicate on the "join_at" field.
func JoinAtEQ(v time.Time) predicate.HPMember {
	return predicate.HPMember(sql.FieldEQ(FieldJoinAt, v))
}

// JoinAtNEQ applies the NEQ predicate on the "join_at" field.
func JoinAtNEQ(v time.Time) predicate.HPMember {
	return predicate.HPMember(sql.FieldNEQ(FieldJoinAt, v))
}

// JoinAtIn applies the In predicate on the "join_at" field.
func JoinAtIn(vs ...time.Time) predicate.HPMember {
	return predicate.HPMember(sql.FieldIn(FieldJoinAt, vs...))
}

// JoinAtNotIn applies the NotIn predicate on the "join_at" field.
func JoinAtNotIn(vs ...time.Time) predicate.HPMember {
	return predicate.HPMember(sql.FieldNotIn(FieldJoinAt, vs...))
}

// JoinAtGT applies the GT predicate on the "join_at" field.
func JoinAtGT(v time.Time) predicate.HPMember {
	return predicate.HPMember(sql.FieldGT(FieldJoinAt, v))
}

// JoinAtGTE applies the GTE predicate on the "join_at" field.
func JoinAtGTE(v time.Time) predicate.HPMember {
	return predicate.HPMember(sql.FieldGTE(FieldJoinAt, v))
}

// JoinAtLT applies the LT predicate on the "join_at" field.
func JoinAtLT(v time.Time) predicate.HPMember {
	return predicate.HPMember(sql.FieldLT(FieldJoinAt, v))
}

// JoinAtLTE applies the LTE predicate on the "join_at" field.
func JoinAtLTE(v time.Time) predicate.HPMember {
	return predicate.HPMember(sql.FieldLTE(FieldJoinAt, v))
}

// JoinAtIsNil applies the IsNil predicate on the "join_at" field.
func JoinAtIsNil() predicate.HPMember {
	return predicate.HPMember(sql.FieldIsNull(FieldJoinAt))
}

// JoinAtNotNil applies the NotNil predicate on the "join_at" field.
func JoinAtNotNil() predicate.HPMember {
	return predicate.HPMember(sql.FieldNotNull(FieldJoinAt))
}

// GraduateAtEQ applies the EQ predicate on the "graduate_at" field.
func GraduateAtEQ(v time.Time) predicate.HPMember {
	return predicate.HPMember(sql.FieldEQ(FieldGraduateAt, v))
}

// GraduateAtNEQ applies the NEQ predicate on the "graduate_at" field.
func GraduateAtNEQ(v time.Time) predicate.HPMember {
	return predicate.HPMember(sql.FieldNEQ(FieldGraduateAt, v))
}

// GraduateAtIn applies the In predicate on the "graduate_at" field.
func GraduateAtIn(vs ...time.Time) predicate.HPMember {
	return predicate.HPMember(sql.FieldIn(FieldGraduateAt, vs...))
}

// GraduateAtNotIn applies the NotIn predicate on the "graduate_at" field.
func GraduateAtNotIn(vs ...time.Time) predicate.HPMember {
	return predicate.HPMember(sql.FieldNotIn(FieldGraduateAt, vs...))
}

// GraduateAtGT applies the GT predicate on the "graduate_at" field.
func GraduateAtGT(v time.Time) predicate.HPMember {
	return predicate.HPMember(sql.FieldGT(FieldGraduateAt, v))
}

// GraduateAtGTE applies the GTE predicate on the "graduate_at" field.
func GraduateAtGTE(v time.Time) predicate.HPMember {
	return predicate.HPMember(sql.FieldGTE(FieldGraduateAt, v))
}

// GraduateAtLT applies the LT predicate on the "graduate_at" field.
func GraduateAtLT(v time.Time) predicate.HPMember {
	return predicate.HPMember(sql.FieldLT(FieldGraduateAt, v))
}

// GraduateAtLTE applies the LTE predicate on the "graduate_at" field.
func GraduateAtLTE(v time.Time) predicate.HPMember {
	return predicate.HPMember(sql.FieldLTE(FieldGraduateAt, v))
}

// GraduateAtIsNil applies the IsNil predicate on the "graduate_at" field.
func GraduateAtIsNil() predicate.HPMember {
	return predicate.HPMember(sql.FieldIsNull(FieldGraduateAt))
}

// GraduateAtNotNil applies the NotNil predicate on the "graduate_at" field.
func GraduateAtNotNil() predicate.HPMember {
	return predicate.HPMember(sql.FieldNotNull(FieldGraduateAt))
}

// ColorRgbEQ applies the EQ predicate on the "color_rgb" field.
func ColorRgbEQ(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldEQ(FieldColorRgb, v))
}

// ColorRgbNEQ applies the NEQ predicate on the "color_rgb" field.
func ColorRgbNEQ(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldNEQ(FieldColorRgb, v))
}

// ColorRgbIn applies the In predicate on the "color_rgb" field.
func ColorRgbIn(vs ...string) predicate.HPMember {
	return predicate.HPMember(sql.FieldIn(FieldColorRgb, vs...))
}

// ColorRgbNotIn applies the NotIn predicate on the "color_rgb" field.
func ColorRgbNotIn(vs ...string) predicate.HPMember {
	return predicate.HPMember(sql.FieldNotIn(FieldColorRgb, vs...))
}

// ColorRgbGT applies the GT predicate on the "color_rgb" field.
func ColorRgbGT(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldGT(FieldColorRgb, v))
}

// ColorRgbGTE applies the GTE predicate on the "color_rgb" field.
func ColorRgbGTE(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldGTE(FieldColorRgb, v))
}

// ColorRgbLT applies the LT predicate on the "color_rgb" field.
func ColorRgbLT(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldLT(FieldColorRgb, v))
}

// ColorRgbLTE applies the LTE predicate on the "color_rgb" field.
func ColorRgbLTE(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldLTE(FieldColorRgb, v))
}

// ColorRgbContains applies the Contains predicate on the "color_rgb" field.
func ColorRgbContains(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldContains(FieldColorRgb, v))
}

// ColorRgbHasPrefix applies the HasPrefix predicate on the "color_rgb" field.
func ColorRgbHasPrefix(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldHasPrefix(FieldColorRgb, v))
}

// ColorRgbHasSuffix applies the HasSuffix predicate on the "color_rgb" field.
func ColorRgbHasSuffix(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldHasSuffix(FieldColorRgb, v))
}

// ColorRgbEqualFold applies the EqualFold predicate on the "color_rgb" field.
func ColorRgbEqualFold(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldEqualFold(FieldColorRgb, v))
}

// ColorRgbContainsFold applies the ContainsFold predicate on the "color_rgb" field.
func ColorRgbContainsFold(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldContainsFold(FieldColorRgb, v))
}

// ColorNameEQ applies the EQ predicate on the "color_name" field.
func ColorNameEQ(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldEQ(FieldColorName, v))
}

// ColorNameNEQ applies the NEQ predicate on the "color_name" field.
func ColorNameNEQ(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldNEQ(FieldColorName, v))
}

// ColorNameIn applies the In predicate on the "color_name" field.
func ColorNameIn(vs ...string) predicate.HPMember {
	return predicate.HPMember(sql.FieldIn(FieldColorName, vs...))
}

// ColorNameNotIn applies the NotIn predicate on the "color_name" field.
func ColorNameNotIn(vs ...string) predicate.HPMember {
	return predicate.HPMember(sql.FieldNotIn(FieldColorName, vs...))
}

// ColorNameGT applies the GT predicate on the "color_name" field.
func ColorNameGT(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldGT(FieldColorName, v))
}

// ColorNameGTE applies the GTE predicate on the "color_name" field.
func ColorNameGTE(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldGTE(FieldColorName, v))
}

// ColorNameLT applies the LT predicate on the "color_name" field.
func ColorNameLT(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldLT(FieldColorName, v))
}

// ColorNameLTE applies the LTE predicate on the "color_name" field.
func ColorNameLTE(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldLTE(FieldColorName, v))
}

// ColorNameContains applies the Contains predicate on the "color_name" field.
func ColorNameContains(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldContains(FieldColorName, v))
}

// ColorNameHasPrefix applies the HasPrefix predicate on the "color_name" field.
func ColorNameHasPrefix(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldHasPrefix(FieldColorName, v))
}

// ColorNameHasSuffix applies the HasSuffix predicate on the "color_name" field.
func ColorNameHasSuffix(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldHasSuffix(FieldColorName, v))
}

// ColorNameEqualFold applies the EqualFold predicate on the "color_name" field.
func ColorNameEqualFold(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldEqualFold(FieldColorName, v))
}

// ColorNameContainsFold applies the ContainsFold predicate on the "color_name" field.
func ColorNameContainsFold(v string) predicate.HPMember {
	return predicate.HPMember(sql.FieldContainsFold(FieldColorName, v))
}

// ArtistIDEQ applies the EQ predicate on the "artist_id" field.
func ArtistIDEQ(v int) predicate.HPMember {
	return predicate.HPMember(sql.FieldEQ(FieldArtistID, v))
}

// ArtistIDNEQ applies the NEQ predicate on the "artist_id" field.
func ArtistIDNEQ(v int) predicate.HPMember {
	return predicate.HPMember(sql.FieldNEQ(FieldArtistID, v))
}

// ArtistIDIn applies the In predicate on the "artist_id" field.
func ArtistIDIn(vs ...int) predicate.HPMember {
	return predicate.HPMember(sql.FieldIn(FieldArtistID, vs...))
}

// ArtistIDNotIn applies the NotIn predicate on the "artist_id" field.
func ArtistIDNotIn(vs ...int) predicate.HPMember {
	return predicate.HPMember(sql.FieldNotIn(FieldArtistID, vs...))
}

// ArtistIDIsNil applies the IsNil predicate on the "artist_id" field.
func ArtistIDIsNil() predicate.HPMember {
	return predicate.HPMember(sql.FieldIsNull(FieldArtistID))
}

// ArtistIDNotNil applies the NotNil predicate on the "artist_id" field.
func ArtistIDNotNil() predicate.HPMember {
	return predicate.HPMember(sql.FieldNotNull(FieldArtistID))
}

// HasAssets applies the HasEdge predicate on the "assets" edge.
func HasAssets() predicate.HPMember {
	return predicate.HPMember(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, AssetsTable, AssetsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAssetsWith applies the HasEdge predicate on the "assets" edge with a given conditions (other predicates).
func HasAssetsWith(preds ...predicate.HPAsset) predicate.HPMember {
	return predicate.HPMember(func(s *sql.Selector) {
		step := newAssetsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasArtist applies the HasEdge predicate on the "artist" edge.
func HasArtist() predicate.HPMember {
	return predicate.HPMember(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ArtistTable, ArtistColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasArtistWith applies the HasEdge predicate on the "artist" edge with a given conditions (other predicates).
func HasArtistWith(preds ...predicate.HPArtist) predicate.HPMember {
	return predicate.HPMember(func(s *sql.Selector) {
		step := newArtistStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOwningFeed applies the HasEdge predicate on the "owning_feed" edge.
func HasOwningFeed() predicate.HPMember {
	return predicate.HPMember(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OwningFeedTable, OwningFeedColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwningFeedWith applies the HasEdge predicate on the "owning_feed" edge with a given conditions (other predicates).
func HasOwningFeedWith(preds ...predicate.HPFeedItem) predicate.HPMember {
	return predicate.HPMember(func(s *sql.Selector) {
		step := newOwningFeedStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTaggedFeed applies the HasEdge predicate on the "tagged_feed" edge.
func HasTaggedFeed() predicate.HPMember {
	return predicate.HPMember(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, TaggedFeedTable, TaggedFeedPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTaggedFeedWith applies the HasEdge predicate on the "tagged_feed" edge with a given conditions (other predicates).
func HasTaggedFeedWith(preds ...predicate.HPFeedItem) predicate.HPMember {
	return predicate.HPMember(func(s *sql.Selector) {
		step := newTaggedFeedStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOwningIgPosts applies the HasEdge predicate on the "owning_ig_posts" edge.
func HasOwningIgPosts() predicate.HPMember {
	return predicate.HPMember(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OwningIgPostsTable, OwningIgPostsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwningIgPostsWith applies the HasEdge predicate on the "owning_ig_posts" edge with a given conditions (other predicates).
func HasOwningIgPostsWith(preds ...predicate.HPIgPost) predicate.HPMember {
	return predicate.HPMember(func(s *sql.Selector) {
		step := newOwningIgPostsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTaggedIgPosts applies the HasEdge predicate on the "tagged_ig_posts" edge.
func HasTaggedIgPosts() predicate.HPMember {
	return predicate.HPMember(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, TaggedIgPostsTable, TaggedIgPostsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTaggedIgPostsWith applies the HasEdge predicate on the "tagged_ig_posts" edge with a given conditions (other predicates).
func HasTaggedIgPostsWith(preds ...predicate.HPIgPost) predicate.HPMember {
	return predicate.HPMember(func(s *sql.Selector) {
		step := newTaggedIgPostsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOwningAmebloPosts applies the HasEdge predicate on the "owning_ameblo_posts" edge.
func HasOwningAmebloPosts() predicate.HPMember {
	return predicate.HPMember(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OwningAmebloPostsTable, OwningAmebloPostsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwningAmebloPostsWith applies the HasEdge predicate on the "owning_ameblo_posts" edge with a given conditions (other predicates).
func HasOwningAmebloPostsWith(preds ...predicate.HPAmebloPost) predicate.HPMember {
	return predicate.HPMember(func(s *sql.Selector) {
		step := newOwningAmebloPostsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTaggedAmebloPosts applies the HasEdge predicate on the "tagged_ameblo_posts" edge.
func HasTaggedAmebloPosts() predicate.HPMember {
	return predicate.HPMember(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, TaggedAmebloPostsTable, TaggedAmebloPostsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTaggedAmebloPostsWith applies the HasEdge predicate on the "tagged_ameblo_posts" edge with a given conditions (other predicates).
func HasTaggedAmebloPostsWith(preds ...predicate.HPAmebloPost) predicate.HPMember {
	return predicate.HPMember(func(s *sql.Selector) {
		step := newTaggedAmebloPostsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTaggedElineupMallItems applies the HasEdge predicate on the "tagged_elineup_mall_items" edge.
func HasTaggedElineupMallItems() predicate.HPMember {
	return predicate.HPMember(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, TaggedElineupMallItemsTable, TaggedElineupMallItemsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTaggedElineupMallItemsWith applies the HasEdge predicate on the "tagged_elineup_mall_items" edge with a given conditions (other predicates).
func HasTaggedElineupMallItemsWith(preds ...predicate.HPElineupMallItem) predicate.HPMember {
	return predicate.HPMember(func(s *sql.Selector) {
		step := newTaggedElineupMallItemsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFollowedBy applies the HasEdge predicate on the "followed_by" edge.
func HasFollowedBy() predicate.HPMember {
	return predicate.HPMember(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FollowedByTable, FollowedByColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFollowedByWith applies the HasEdge predicate on the "followed_by" edge with a given conditions (other predicates).
func HasFollowedByWith(preds ...predicate.HPFollow) predicate.HPMember {
	return predicate.HPMember(func(s *sql.Selector) {
		step := newFollowedByStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.HPMember) predicate.HPMember {
	return predicate.HPMember(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.HPMember) predicate.HPMember {
	return predicate.HPMember(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.HPMember) predicate.HPMember {
	return predicate.HPMember(func(s *sql.Selector) {
		p(s.Not())
	})
}
