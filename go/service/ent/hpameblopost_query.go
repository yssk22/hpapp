// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yssk22/hpapp/go/service/ent/hpameblopost"
	"github.com/yssk22/hpapp/go/service/ent/hpartist"
	"github.com/yssk22/hpapp/go/service/ent/hpasset"
	"github.com/yssk22/hpapp/go/service/ent/hpblob"
	"github.com/yssk22/hpapp/go/service/ent/hpmember"
	"github.com/yssk22/hpapp/go/service/ent/predicate"
)

// HPAmebloPostQuery is the builder for querying HPAmebloPost entities.
type HPAmebloPostQuery struct {
	config
	ctx                    *QueryContext
	order                  []hpameblopost.Order
	inters                 []Interceptor
	predicates             []predicate.HPAmebloPost
	withOwnerArtist        *HPArtistQuery
	withOwnerMember        *HPMemberQuery
	withTaggedArtists      *HPArtistQuery
	withTaggedMembers      *HPMemberQuery
	withAsset              *HPAssetQuery
	withBlobs              *HPBlobQuery
	withFKs                bool
	modifiers              []func(*sql.Selector)
	loadTotal              []func(context.Context, []*HPAmebloPost) error
	withNamedTaggedArtists map[string]*HPArtistQuery
	withNamedTaggedMembers map[string]*HPMemberQuery
	withNamedBlobs         map[string]*HPBlobQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the HPAmebloPostQuery builder.
func (hapq *HPAmebloPostQuery) Where(ps ...predicate.HPAmebloPost) *HPAmebloPostQuery {
	hapq.predicates = append(hapq.predicates, ps...)
	return hapq
}

// Limit the number of records to be returned by this query.
func (hapq *HPAmebloPostQuery) Limit(limit int) *HPAmebloPostQuery {
	hapq.ctx.Limit = &limit
	return hapq
}

// Offset to start from.
func (hapq *HPAmebloPostQuery) Offset(offset int) *HPAmebloPostQuery {
	hapq.ctx.Offset = &offset
	return hapq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (hapq *HPAmebloPostQuery) Unique(unique bool) *HPAmebloPostQuery {
	hapq.ctx.Unique = &unique
	return hapq
}

// Order specifies how the records should be ordered.
func (hapq *HPAmebloPostQuery) Order(o ...hpameblopost.Order) *HPAmebloPostQuery {
	hapq.order = append(hapq.order, o...)
	return hapq
}

// QueryOwnerArtist chains the current query on the "owner_artist" edge.
func (hapq *HPAmebloPostQuery) QueryOwnerArtist() *HPArtistQuery {
	query := (&HPArtistClient{config: hapq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hapq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hapq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hpameblopost.Table, hpameblopost.FieldID, selector),
			sqlgraph.To(hpartist.Table, hpartist.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hpameblopost.OwnerArtistTable, hpameblopost.OwnerArtistColumn),
		)
		fromU = sqlgraph.SetNeighbors(hapq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOwnerMember chains the current query on the "owner_member" edge.
func (hapq *HPAmebloPostQuery) QueryOwnerMember() *HPMemberQuery {
	query := (&HPMemberClient{config: hapq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hapq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hapq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hpameblopost.Table, hpameblopost.FieldID, selector),
			sqlgraph.To(hpmember.Table, hpmember.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hpameblopost.OwnerMemberTable, hpameblopost.OwnerMemberColumn),
		)
		fromU = sqlgraph.SetNeighbors(hapq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTaggedArtists chains the current query on the "tagged_artists" edge.
func (hapq *HPAmebloPostQuery) QueryTaggedArtists() *HPArtistQuery {
	query := (&HPArtistClient{config: hapq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hapq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hapq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hpameblopost.Table, hpameblopost.FieldID, selector),
			sqlgraph.To(hpartist.Table, hpartist.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, hpameblopost.TaggedArtistsTable, hpameblopost.TaggedArtistsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(hapq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTaggedMembers chains the current query on the "tagged_members" edge.
func (hapq *HPAmebloPostQuery) QueryTaggedMembers() *HPMemberQuery {
	query := (&HPMemberClient{config: hapq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hapq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hapq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hpameblopost.Table, hpameblopost.FieldID, selector),
			sqlgraph.To(hpmember.Table, hpmember.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, hpameblopost.TaggedMembersTable, hpameblopost.TaggedMembersPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(hapq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAsset chains the current query on the "asset" edge.
func (hapq *HPAmebloPostQuery) QueryAsset() *HPAssetQuery {
	query := (&HPAssetClient{config: hapq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hapq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hapq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hpameblopost.Table, hpameblopost.FieldID, selector),
			sqlgraph.To(hpasset.Table, hpasset.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hpameblopost.AssetTable, hpameblopost.AssetColumn),
		)
		fromU = sqlgraph.SetNeighbors(hapq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBlobs chains the current query on the "blobs" edge.
func (hapq *HPAmebloPostQuery) QueryBlobs() *HPBlobQuery {
	query := (&HPBlobClient{config: hapq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hapq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hapq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hpameblopost.Table, hpameblopost.FieldID, selector),
			sqlgraph.To(hpblob.Table, hpblob.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, hpameblopost.BlobsTable, hpameblopost.BlobsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(hapq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first HPAmebloPost entity from the query.
// Returns a *NotFoundError when no HPAmebloPost was found.
func (hapq *HPAmebloPostQuery) First(ctx context.Context) (*HPAmebloPost, error) {
	nodes, err := hapq.Limit(1).All(setContextOp(ctx, hapq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{hpameblopost.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (hapq *HPAmebloPostQuery) FirstX(ctx context.Context) *HPAmebloPost {
	node, err := hapq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first HPAmebloPost ID from the query.
// Returns a *NotFoundError when no HPAmebloPost ID was found.
func (hapq *HPAmebloPostQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = hapq.Limit(1).IDs(setContextOp(ctx, hapq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{hpameblopost.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (hapq *HPAmebloPostQuery) FirstIDX(ctx context.Context) int {
	id, err := hapq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single HPAmebloPost entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one HPAmebloPost entity is found.
// Returns a *NotFoundError when no HPAmebloPost entities are found.
func (hapq *HPAmebloPostQuery) Only(ctx context.Context) (*HPAmebloPost, error) {
	nodes, err := hapq.Limit(2).All(setContextOp(ctx, hapq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{hpameblopost.Label}
	default:
		return nil, &NotSingularError{hpameblopost.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (hapq *HPAmebloPostQuery) OnlyX(ctx context.Context) *HPAmebloPost {
	node, err := hapq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only HPAmebloPost ID in the query.
// Returns a *NotSingularError when more than one HPAmebloPost ID is found.
// Returns a *NotFoundError when no entities are found.
func (hapq *HPAmebloPostQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = hapq.Limit(2).IDs(setContextOp(ctx, hapq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{hpameblopost.Label}
	default:
		err = &NotSingularError{hpameblopost.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (hapq *HPAmebloPostQuery) OnlyIDX(ctx context.Context) int {
	id, err := hapq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of HPAmebloPosts.
func (hapq *HPAmebloPostQuery) All(ctx context.Context) ([]*HPAmebloPost, error) {
	ctx = setContextOp(ctx, hapq.ctx, "All")
	if err := hapq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*HPAmebloPost, *HPAmebloPostQuery]()
	return withInterceptors[[]*HPAmebloPost](ctx, hapq, qr, hapq.inters)
}

// AllX is like All, but panics if an error occurs.
func (hapq *HPAmebloPostQuery) AllX(ctx context.Context) []*HPAmebloPost {
	nodes, err := hapq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of HPAmebloPost IDs.
func (hapq *HPAmebloPostQuery) IDs(ctx context.Context) (ids []int, err error) {
	if hapq.ctx.Unique == nil && hapq.path != nil {
		hapq.Unique(true)
	}
	ctx = setContextOp(ctx, hapq.ctx, "IDs")
	if err = hapq.Select(hpameblopost.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (hapq *HPAmebloPostQuery) IDsX(ctx context.Context) []int {
	ids, err := hapq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (hapq *HPAmebloPostQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, hapq.ctx, "Count")
	if err := hapq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, hapq, querierCount[*HPAmebloPostQuery](), hapq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (hapq *HPAmebloPostQuery) CountX(ctx context.Context) int {
	count, err := hapq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (hapq *HPAmebloPostQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, hapq.ctx, "Exist")
	switch _, err := hapq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (hapq *HPAmebloPostQuery) ExistX(ctx context.Context) bool {
	exist, err := hapq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the HPAmebloPostQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (hapq *HPAmebloPostQuery) Clone() *HPAmebloPostQuery {
	if hapq == nil {
		return nil
	}
	return &HPAmebloPostQuery{
		config:            hapq.config,
		ctx:               hapq.ctx.Clone(),
		order:             append([]hpameblopost.Order{}, hapq.order...),
		inters:            append([]Interceptor{}, hapq.inters...),
		predicates:        append([]predicate.HPAmebloPost{}, hapq.predicates...),
		withOwnerArtist:   hapq.withOwnerArtist.Clone(),
		withOwnerMember:   hapq.withOwnerMember.Clone(),
		withTaggedArtists: hapq.withTaggedArtists.Clone(),
		withTaggedMembers: hapq.withTaggedMembers.Clone(),
		withAsset:         hapq.withAsset.Clone(),
		withBlobs:         hapq.withBlobs.Clone(),
		// clone intermediate query.
		sql:  hapq.sql.Clone(),
		path: hapq.path,
	}
}

// WithOwnerArtist tells the query-builder to eager-load the nodes that are connected to
// the "owner_artist" edge. The optional arguments are used to configure the query builder of the edge.
func (hapq *HPAmebloPostQuery) WithOwnerArtist(opts ...func(*HPArtistQuery)) *HPAmebloPostQuery {
	query := (&HPArtistClient{config: hapq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hapq.withOwnerArtist = query
	return hapq
}

// WithOwnerMember tells the query-builder to eager-load the nodes that are connected to
// the "owner_member" edge. The optional arguments are used to configure the query builder of the edge.
func (hapq *HPAmebloPostQuery) WithOwnerMember(opts ...func(*HPMemberQuery)) *HPAmebloPostQuery {
	query := (&HPMemberClient{config: hapq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hapq.withOwnerMember = query
	return hapq
}

// WithTaggedArtists tells the query-builder to eager-load the nodes that are connected to
// the "tagged_artists" edge. The optional arguments are used to configure the query builder of the edge.
func (hapq *HPAmebloPostQuery) WithTaggedArtists(opts ...func(*HPArtistQuery)) *HPAmebloPostQuery {
	query := (&HPArtistClient{config: hapq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hapq.withTaggedArtists = query
	return hapq
}

// WithTaggedMembers tells the query-builder to eager-load the nodes that are connected to
// the "tagged_members" edge. The optional arguments are used to configure the query builder of the edge.
func (hapq *HPAmebloPostQuery) WithTaggedMembers(opts ...func(*HPMemberQuery)) *HPAmebloPostQuery {
	query := (&HPMemberClient{config: hapq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hapq.withTaggedMembers = query
	return hapq
}

// WithAsset tells the query-builder to eager-load the nodes that are connected to
// the "asset" edge. The optional arguments are used to configure the query builder of the edge.
func (hapq *HPAmebloPostQuery) WithAsset(opts ...func(*HPAssetQuery)) *HPAmebloPostQuery {
	query := (&HPAssetClient{config: hapq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hapq.withAsset = query
	return hapq
}

// WithBlobs tells the query-builder to eager-load the nodes that are connected to
// the "blobs" edge. The optional arguments are used to configure the query builder of the edge.
func (hapq *HPAmebloPostQuery) WithBlobs(opts ...func(*HPBlobQuery)) *HPAmebloPostQuery {
	query := (&HPBlobClient{config: hapq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hapq.withBlobs = query
	return hapq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CrawledAt time.Time `json:"crawled_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.HPAmebloPost.Query().
//		GroupBy(hpameblopost.FieldCrawledAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (hapq *HPAmebloPostQuery) GroupBy(field string, fields ...string) *HPAmebloPostGroupBy {
	hapq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &HPAmebloPostGroupBy{build: hapq}
	grbuild.flds = &hapq.ctx.Fields
	grbuild.label = hpameblopost.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CrawledAt time.Time `json:"crawled_at,omitempty"`
//	}
//
//	client.HPAmebloPost.Query().
//		Select(hpameblopost.FieldCrawledAt).
//		Scan(ctx, &v)
//
func (hapq *HPAmebloPostQuery) Select(fields ...string) *HPAmebloPostSelect {
	hapq.ctx.Fields = append(hapq.ctx.Fields, fields...)
	sbuild := &HPAmebloPostSelect{HPAmebloPostQuery: hapq}
	sbuild.label = hpameblopost.Label
	sbuild.flds, sbuild.scan = &hapq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a HPAmebloPostSelect configured with the given aggregations.
func (hapq *HPAmebloPostQuery) Aggregate(fns ...AggregateFunc) *HPAmebloPostSelect {
	return hapq.Select().Aggregate(fns...)
}

func (hapq *HPAmebloPostQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range hapq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, hapq); err != nil {
				return err
			}
		}
	}
	for _, f := range hapq.ctx.Fields {
		if !hpameblopost.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if hapq.path != nil {
		prev, err := hapq.path(ctx)
		if err != nil {
			return err
		}
		hapq.sql = prev
	}
	return nil
}

func (hapq *HPAmebloPostQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*HPAmebloPost, error) {
	var (
		nodes       = []*HPAmebloPost{}
		withFKs     = hapq.withFKs
		_spec       = hapq.querySpec()
		loadedTypes = [6]bool{
			hapq.withOwnerArtist != nil,
			hapq.withOwnerMember != nil,
			hapq.withTaggedArtists != nil,
			hapq.withTaggedMembers != nil,
			hapq.withAsset != nil,
			hapq.withBlobs != nil,
		}
	)
	if hapq.withAsset != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, hpameblopost.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*HPAmebloPost).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &HPAmebloPost{config: hapq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(hapq.modifiers) > 0 {
		_spec.Modifiers = hapq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, hapq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := hapq.withOwnerArtist; query != nil {
		if err := hapq.loadOwnerArtist(ctx, query, nodes, nil,
			func(n *HPAmebloPost, e *HPArtist) { n.Edges.OwnerArtist = e }); err != nil {
			return nil, err
		}
	}
	if query := hapq.withOwnerMember; query != nil {
		if err := hapq.loadOwnerMember(ctx, query, nodes, nil,
			func(n *HPAmebloPost, e *HPMember) { n.Edges.OwnerMember = e }); err != nil {
			return nil, err
		}
	}
	if query := hapq.withTaggedArtists; query != nil {
		if err := hapq.loadTaggedArtists(ctx, query, nodes,
			func(n *HPAmebloPost) { n.Edges.TaggedArtists = []*HPArtist{} },
			func(n *HPAmebloPost, e *HPArtist) { n.Edges.TaggedArtists = append(n.Edges.TaggedArtists, e) }); err != nil {
			return nil, err
		}
	}
	if query := hapq.withTaggedMembers; query != nil {
		if err := hapq.loadTaggedMembers(ctx, query, nodes,
			func(n *HPAmebloPost) { n.Edges.TaggedMembers = []*HPMember{} },
			func(n *HPAmebloPost, e *HPMember) { n.Edges.TaggedMembers = append(n.Edges.TaggedMembers, e) }); err != nil {
			return nil, err
		}
	}
	if query := hapq.withAsset; query != nil {
		if err := hapq.loadAsset(ctx, query, nodes, nil,
			func(n *HPAmebloPost, e *HPAsset) { n.Edges.Asset = e }); err != nil {
			return nil, err
		}
	}
	if query := hapq.withBlobs; query != nil {
		if err := hapq.loadBlobs(ctx, query, nodes,
			func(n *HPAmebloPost) { n.Edges.Blobs = []*HPBlob{} },
			func(n *HPAmebloPost, e *HPBlob) { n.Edges.Blobs = append(n.Edges.Blobs, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range hapq.withNamedTaggedArtists {
		if err := hapq.loadTaggedArtists(ctx, query, nodes,
			func(n *HPAmebloPost) { n.appendNamedTaggedArtists(name) },
			func(n *HPAmebloPost, e *HPArtist) { n.appendNamedTaggedArtists(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range hapq.withNamedTaggedMembers {
		if err := hapq.loadTaggedMembers(ctx, query, nodes,
			func(n *HPAmebloPost) { n.appendNamedTaggedMembers(name) },
			func(n *HPAmebloPost, e *HPMember) { n.appendNamedTaggedMembers(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range hapq.withNamedBlobs {
		if err := hapq.loadBlobs(ctx, query, nodes,
			func(n *HPAmebloPost) { n.appendNamedBlobs(name) },
			func(n *HPAmebloPost, e *HPBlob) { n.appendNamedBlobs(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range hapq.loadTotal {
		if err := hapq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (hapq *HPAmebloPostQuery) loadOwnerArtist(ctx context.Context, query *HPArtistQuery, nodes []*HPAmebloPost, init func(*HPAmebloPost), assign func(*HPAmebloPost, *HPArtist)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*HPAmebloPost)
	for i := range nodes {
		if nodes[i].OwnerArtistID == nil {
			continue
		}
		fk := *nodes[i].OwnerArtistID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(hpartist.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "owner_artist_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (hapq *HPAmebloPostQuery) loadOwnerMember(ctx context.Context, query *HPMemberQuery, nodes []*HPAmebloPost, init func(*HPAmebloPost), assign func(*HPAmebloPost, *HPMember)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*HPAmebloPost)
	for i := range nodes {
		if nodes[i].OwnerMemberID == nil {
			continue
		}
		fk := *nodes[i].OwnerMemberID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(hpmember.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "owner_member_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (hapq *HPAmebloPostQuery) loadTaggedArtists(ctx context.Context, query *HPArtistQuery, nodes []*HPAmebloPost, init func(*HPAmebloPost), assign func(*HPAmebloPost, *HPArtist)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*HPAmebloPost)
	nids := make(map[int]map[*HPAmebloPost]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(hpameblopost.TaggedArtistsTable)
		s.Join(joinT).On(s.C(hpartist.FieldID), joinT.C(hpameblopost.TaggedArtistsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(hpameblopost.TaggedArtistsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(hpameblopost.TaggedArtistsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*HPAmebloPost]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*HPArtist](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "tagged_artists" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (hapq *HPAmebloPostQuery) loadTaggedMembers(ctx context.Context, query *HPMemberQuery, nodes []*HPAmebloPost, init func(*HPAmebloPost), assign func(*HPAmebloPost, *HPMember)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*HPAmebloPost)
	nids := make(map[int]map[*HPAmebloPost]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(hpameblopost.TaggedMembersTable)
		s.Join(joinT).On(s.C(hpmember.FieldID), joinT.C(hpameblopost.TaggedMembersPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(hpameblopost.TaggedMembersPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(hpameblopost.TaggedMembersPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*HPAmebloPost]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*HPMember](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "tagged_members" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (hapq *HPAmebloPostQuery) loadAsset(ctx context.Context, query *HPAssetQuery, nodes []*HPAmebloPost, init func(*HPAmebloPost), assign func(*HPAmebloPost, *HPAsset)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*HPAmebloPost)
	for i := range nodes {
		if nodes[i].hp_asset_ameblo_posts == nil {
			continue
		}
		fk := *nodes[i].hp_asset_ameblo_posts
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(hpasset.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "hp_asset_ameblo_posts" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (hapq *HPAmebloPostQuery) loadBlobs(ctx context.Context, query *HPBlobQuery, nodes []*HPAmebloPost, init func(*HPAmebloPost), assign func(*HPAmebloPost, *HPBlob)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*HPAmebloPost)
	nids := make(map[int]map[*HPAmebloPost]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(hpameblopost.BlobsTable)
		s.Join(joinT).On(s.C(hpblob.FieldID), joinT.C(hpameblopost.BlobsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(hpameblopost.BlobsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(hpameblopost.BlobsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*HPAmebloPost]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*HPBlob](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "blobs" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (hapq *HPAmebloPostQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := hapq.querySpec()
	if len(hapq.modifiers) > 0 {
		_spec.Modifiers = hapq.modifiers
	}
	_spec.Node.Columns = hapq.ctx.Fields
	if len(hapq.ctx.Fields) > 0 {
		_spec.Unique = hapq.ctx.Unique != nil && *hapq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, hapq.driver, _spec)
}

func (hapq *HPAmebloPostQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(hpameblopost.Table, hpameblopost.Columns, sqlgraph.NewFieldSpec(hpameblopost.FieldID, field.TypeInt))
	_spec.From = hapq.sql
	if unique := hapq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if hapq.path != nil {
		_spec.Unique = true
	}
	if fields := hapq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hpameblopost.FieldID)
		for i := range fields {
			if fields[i] != hpameblopost.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if hapq.withOwnerArtist != nil {
			_spec.Node.AddColumnOnce(hpameblopost.FieldOwnerArtistID)
		}
		if hapq.withOwnerMember != nil {
			_spec.Node.AddColumnOnce(hpameblopost.FieldOwnerMemberID)
		}
	}
	if ps := hapq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := hapq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := hapq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := hapq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (hapq *HPAmebloPostQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(hapq.driver.Dialect())
	t1 := builder.Table(hpameblopost.Table)
	columns := hapq.ctx.Fields
	if len(columns) == 0 {
		columns = hpameblopost.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if hapq.sql != nil {
		selector = hapq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if hapq.ctx.Unique != nil && *hapq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range hapq.predicates {
		p(selector)
	}
	for _, p := range hapq.order {
		p(selector)
	}
	if offset := hapq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := hapq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedTaggedArtists tells the query-builder to eager-load the nodes that are connected to the "tagged_artists"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (hapq *HPAmebloPostQuery) WithNamedTaggedArtists(name string, opts ...func(*HPArtistQuery)) *HPAmebloPostQuery {
	query := (&HPArtistClient{config: hapq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if hapq.withNamedTaggedArtists == nil {
		hapq.withNamedTaggedArtists = make(map[string]*HPArtistQuery)
	}
	hapq.withNamedTaggedArtists[name] = query
	return hapq
}

// WithNamedTaggedMembers tells the query-builder to eager-load the nodes that are connected to the "tagged_members"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (hapq *HPAmebloPostQuery) WithNamedTaggedMembers(name string, opts ...func(*HPMemberQuery)) *HPAmebloPostQuery {
	query := (&HPMemberClient{config: hapq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if hapq.withNamedTaggedMembers == nil {
		hapq.withNamedTaggedMembers = make(map[string]*HPMemberQuery)
	}
	hapq.withNamedTaggedMembers[name] = query
	return hapq
}

// WithNamedBlobs tells the query-builder to eager-load the nodes that are connected to the "blobs"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (hapq *HPAmebloPostQuery) WithNamedBlobs(name string, opts ...func(*HPBlobQuery)) *HPAmebloPostQuery {
	query := (&HPBlobClient{config: hapq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if hapq.withNamedBlobs == nil {
		hapq.withNamedBlobs = make(map[string]*HPBlobQuery)
	}
	hapq.withNamedBlobs[name] = query
	return hapq
}

// HPAmebloPostGroupBy is the group-by builder for HPAmebloPost entities.
type HPAmebloPostGroupBy struct {
	selector
	build *HPAmebloPostQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (hapgb *HPAmebloPostGroupBy) Aggregate(fns ...AggregateFunc) *HPAmebloPostGroupBy {
	hapgb.fns = append(hapgb.fns, fns...)
	return hapgb
}

// Scan applies the selector query and scans the result into the given value.
func (hapgb *HPAmebloPostGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, hapgb.build.ctx, "GroupBy")
	if err := hapgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*HPAmebloPostQuery, *HPAmebloPostGroupBy](ctx, hapgb.build, hapgb, hapgb.build.inters, v)
}

func (hapgb *HPAmebloPostGroupBy) sqlScan(ctx context.Context, root *HPAmebloPostQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(hapgb.fns))
	for _, fn := range hapgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*hapgb.flds)+len(hapgb.fns))
		for _, f := range *hapgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*hapgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := hapgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// HPAmebloPostSelect is the builder for selecting fields of HPAmebloPost entities.
type HPAmebloPostSelect struct {
	*HPAmebloPostQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (haps *HPAmebloPostSelect) Aggregate(fns ...AggregateFunc) *HPAmebloPostSelect {
	haps.fns = append(haps.fns, fns...)
	return haps
}

// Scan applies the selector query and scans the result into the given value.
func (haps *HPAmebloPostSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, haps.ctx, "Select")
	if err := haps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*HPAmebloPostQuery, *HPAmebloPostSelect](ctx, haps.HPAmebloPostQuery, haps, haps.inters, v)
}

func (haps *HPAmebloPostSelect) sqlScan(ctx context.Context, root *HPAmebloPostQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(haps.fns))
	for _, fn := range haps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*haps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := haps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
