// Code generated by ent, DO NOT EDIT.

package metricdryrun

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/yssk22/hpapp/go/service/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldEQ(FieldUpdatedAt, v))
}

// MetricName applies equality check predicate on the "metric_name" field. It's identical to MetricNameEQ.
func MetricName(v string) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldEQ(FieldMetricName, v))
}

// Date applies equality check predicate on the "date" field. It's identical to DateEQ.
func Date(v string) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldEQ(FieldDate, v))
}

// Value applies equality check predicate on the "value" field. It's identical to ValueEQ.
func Value(v float64) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldEQ(FieldValue, v))
}

// OwnerUserID applies equality check predicate on the "owner_user_id" field. It's identical to OwnerUserIDEQ.
func OwnerUserID(v int) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldEQ(FieldOwnerUserID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldNotNull(FieldUpdatedAt))
}

// MetricNameEQ applies the EQ predicate on the "metric_name" field.
func MetricNameEQ(v string) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldEQ(FieldMetricName, v))
}

// MetricNameNEQ applies the NEQ predicate on the "metric_name" field.
func MetricNameNEQ(v string) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldNEQ(FieldMetricName, v))
}

// MetricNameIn applies the In predicate on the "metric_name" field.
func MetricNameIn(vs ...string) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldIn(FieldMetricName, vs...))
}

// MetricNameNotIn applies the NotIn predicate on the "metric_name" field.
func MetricNameNotIn(vs ...string) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldNotIn(FieldMetricName, vs...))
}

// MetricNameGT applies the GT predicate on the "metric_name" field.
func MetricNameGT(v string) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldGT(FieldMetricName, v))
}

// MetricNameGTE applies the GTE predicate on the "metric_name" field.
func MetricNameGTE(v string) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldGTE(FieldMetricName, v))
}

// MetricNameLT applies the LT predicate on the "metric_name" field.
func MetricNameLT(v string) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldLT(FieldMetricName, v))
}

// MetricNameLTE applies the LTE predicate on the "metric_name" field.
func MetricNameLTE(v string) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldLTE(FieldMetricName, v))
}

// MetricNameContains applies the Contains predicate on the "metric_name" field.
func MetricNameContains(v string) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldContains(FieldMetricName, v))
}

// MetricNameHasPrefix applies the HasPrefix predicate on the "metric_name" field.
func MetricNameHasPrefix(v string) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldHasPrefix(FieldMetricName, v))
}

// MetricNameHasSuffix applies the HasSuffix predicate on the "metric_name" field.
func MetricNameHasSuffix(v string) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldHasSuffix(FieldMetricName, v))
}

// MetricNameEqualFold applies the EqualFold predicate on the "metric_name" field.
func MetricNameEqualFold(v string) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldEqualFold(FieldMetricName, v))
}

// MetricNameContainsFold applies the ContainsFold predicate on the "metric_name" field.
func MetricNameContainsFold(v string) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldContainsFold(FieldMetricName, v))
}

// DateEQ applies the EQ predicate on the "date" field.
func DateEQ(v string) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldEQ(FieldDate, v))
}

// DateNEQ applies the NEQ predicate on the "date" field.
func DateNEQ(v string) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldNEQ(FieldDate, v))
}

// DateIn applies the In predicate on the "date" field.
func DateIn(vs ...string) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldIn(FieldDate, vs...))
}

// DateNotIn applies the NotIn predicate on the "date" field.
func DateNotIn(vs ...string) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldNotIn(FieldDate, vs...))
}

// DateGT applies the GT predicate on the "date" field.
func DateGT(v string) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldGT(FieldDate, v))
}

// DateGTE applies the GTE predicate on the "date" field.
func DateGTE(v string) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldGTE(FieldDate, v))
}

// DateLT applies the LT predicate on the "date" field.
func DateLT(v string) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldLT(FieldDate, v))
}

// DateLTE applies the LTE predicate on the "date" field.
func DateLTE(v string) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldLTE(FieldDate, v))
}

// DateContains applies the Contains predicate on the "date" field.
func DateContains(v string) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldContains(FieldDate, v))
}

// DateHasPrefix applies the HasPrefix predicate on the "date" field.
func DateHasPrefix(v string) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldHasPrefix(FieldDate, v))
}

// DateHasSuffix applies the HasSuffix predicate on the "date" field.
func DateHasSuffix(v string) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldHasSuffix(FieldDate, v))
}

// DateEqualFold applies the EqualFold predicate on the "date" field.
func DateEqualFold(v string) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldEqualFold(FieldDate, v))
}

// DateContainsFold applies the ContainsFold predicate on the "date" field.
func DateContainsFold(v string) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldContainsFold(FieldDate, v))
}

// ValueEQ applies the EQ predicate on the "value" field.
func ValueEQ(v float64) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldEQ(FieldValue, v))
}

// ValueNEQ applies the NEQ predicate on the "value" field.
func ValueNEQ(v float64) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldNEQ(FieldValue, v))
}

// ValueIn applies the In predicate on the "value" field.
func ValueIn(vs ...float64) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldIn(FieldValue, vs...))
}

// ValueNotIn applies the NotIn predicate on the "value" field.
func ValueNotIn(vs ...float64) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldNotIn(FieldValue, vs...))
}

// ValueGT applies the GT predicate on the "value" field.
func ValueGT(v float64) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldGT(FieldValue, v))
}

// ValueGTE applies the GTE predicate on the "value" field.
func ValueGTE(v float64) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldGTE(FieldValue, v))
}

// ValueLT applies the LT predicate on the "value" field.
func ValueLT(v float64) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldLT(FieldValue, v))
}

// ValueLTE applies the LTE predicate on the "value" field.
func ValueLTE(v float64) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldLTE(FieldValue, v))
}

// OwnerUserIDEQ applies the EQ predicate on the "owner_user_id" field.
func OwnerUserIDEQ(v int) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldEQ(FieldOwnerUserID, v))
}

// OwnerUserIDNEQ applies the NEQ predicate on the "owner_user_id" field.
func OwnerUserIDNEQ(v int) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldNEQ(FieldOwnerUserID, v))
}

// OwnerUserIDIn applies the In predicate on the "owner_user_id" field.
func OwnerUserIDIn(vs ...int) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldIn(FieldOwnerUserID, vs...))
}

// OwnerUserIDNotIn applies the NotIn predicate on the "owner_user_id" field.
func OwnerUserIDNotIn(vs ...int) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldNotIn(FieldOwnerUserID, vs...))
}

// OwnerUserIDGT applies the GT predicate on the "owner_user_id" field.
func OwnerUserIDGT(v int) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldGT(FieldOwnerUserID, v))
}

// OwnerUserIDGTE applies the GTE predicate on the "owner_user_id" field.
func OwnerUserIDGTE(v int) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldGTE(FieldOwnerUserID, v))
}

// OwnerUserIDLT applies the LT predicate on the "owner_user_id" field.
func OwnerUserIDLT(v int) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldLT(FieldOwnerUserID, v))
}

// OwnerUserIDLTE applies the LTE predicate on the "owner_user_id" field.
func OwnerUserIDLTE(v int) predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldLTE(FieldOwnerUserID, v))
}

// OwnerUserIDIsNil applies the IsNil predicate on the "owner_user_id" field.
func OwnerUserIDIsNil() predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldIsNull(FieldOwnerUserID))
}

// OwnerUserIDNotNil applies the NotNil predicate on the "owner_user_id" field.
func OwnerUserIDNotNil() predicate.MetricDryRun {
	return predicate.MetricDryRun(sql.FieldNotNull(FieldOwnerUserID))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MetricDryRun) predicate.MetricDryRun {
	return predicate.MetricDryRun(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MetricDryRun) predicate.MetricDryRun {
	return predicate.MetricDryRun(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MetricDryRun) predicate.MetricDryRun {
	return predicate.MetricDryRun(func(s *sql.Selector) {
		p(s.Not())
	})
}
