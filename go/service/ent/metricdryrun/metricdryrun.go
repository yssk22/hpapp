// Code generated by ent, DO NOT EDIT.

package metricdryrun

import (
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the metricdryrun type in the database.
	Label = "metric_dry_run"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldMetricName holds the string denoting the metric_name field in the database.
	FieldMetricName = "metric_name"
	// FieldDate holds the string denoting the date field in the database.
	FieldDate = "date"
	// FieldValue holds the string denoting the value field in the database.
	FieldValue = "value"
	// FieldOwnerUserID holds the string denoting the owner_user_id field in the database.
	FieldOwnerUserID = "owner_user_id"
	// Table holds the table name of the metricdryrun in the database.
	Table = "metric_dry_runs"
)

// Columns holds all SQL columns for metricdryrun fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldMetricName,
	FieldDate,
	FieldValue,
	FieldOwnerUserID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/yssk22/hpapp/go/service/ent/runtime"
var (
	Hooks  [2]ent.Hook
	Policy ent.Policy
)

// Order defines the ordering method for the MetricDryRun queries.
type Order func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByMetricName orders the results by the metric_name field.
func ByMetricName(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldMetricName, opts...).ToFunc()
}

// ByDate orders the results by the date field.
func ByDate(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldDate, opts...).ToFunc()
}

// ByValue orders the results by the value field.
func ByValue(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldValue, opts...).ToFunc()
}

// ByOwnerUserID orders the results by the owner_user_id field.
func ByOwnerUserID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldOwnerUserID, opts...).ToFunc()
}
