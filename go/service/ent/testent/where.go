// Code generated by ent, DO NOT EDIT.

package testent

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"hpapp.yssk22.dev/go/service/ent/predicate"
	"hpapp.yssk22.dev/go/service/schema/enums"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldLTE(FieldID, id))
}

// StringField applies equality check predicate on the "string_field" field. It's identical to StringFieldEQ.
func StringField(v string) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldEQ(FieldStringField, v))
}

// TextField applies equality check predicate on the "text_field" field. It's identical to TextFieldEQ.
func TextField(v string) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldEQ(FieldTextField, v))
}

// BytesField applies equality check predicate on the "bytes_field" field. It's identical to BytesFieldEQ.
func BytesField(v []byte) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldEQ(FieldBytesField, v))
}

// BoolField applies equality check predicate on the "bool_field" field. It's identical to BoolFieldEQ.
func BoolField(v bool) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldEQ(FieldBoolField, v))
}

// TimeField applies equality check predicate on the "time_field" field. It's identical to TimeFieldEQ.
func TimeField(v time.Time) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldEQ(FieldTimeField, v))
}

// IntField applies equality check predicate on the "int_field" field. It's identical to IntFieldEQ.
func IntField(v int) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldEQ(FieldIntField, v))
}

// Int64Field applies equality check predicate on the "int64_field" field. It's identical to Int64FieldEQ.
func Int64Field(v int64) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldEQ(FieldInt64Field, v))
}

// FloatField applies equality check predicate on the "float_field" field. It's identical to FloatFieldEQ.
func FloatField(v float64) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldEQ(FieldFloatField, v))
}

// StringFieldEQ applies the EQ predicate on the "string_field" field.
func StringFieldEQ(v string) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldEQ(FieldStringField, v))
}

// StringFieldNEQ applies the NEQ predicate on the "string_field" field.
func StringFieldNEQ(v string) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldNEQ(FieldStringField, v))
}

// StringFieldIn applies the In predicate on the "string_field" field.
func StringFieldIn(vs ...string) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldIn(FieldStringField, vs...))
}

// StringFieldNotIn applies the NotIn predicate on the "string_field" field.
func StringFieldNotIn(vs ...string) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldNotIn(FieldStringField, vs...))
}

// StringFieldGT applies the GT predicate on the "string_field" field.
func StringFieldGT(v string) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldGT(FieldStringField, v))
}

// StringFieldGTE applies the GTE predicate on the "string_field" field.
func StringFieldGTE(v string) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldGTE(FieldStringField, v))
}

// StringFieldLT applies the LT predicate on the "string_field" field.
func StringFieldLT(v string) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldLT(FieldStringField, v))
}

// StringFieldLTE applies the LTE predicate on the "string_field" field.
func StringFieldLTE(v string) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldLTE(FieldStringField, v))
}

// StringFieldContains applies the Contains predicate on the "string_field" field.
func StringFieldContains(v string) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldContains(FieldStringField, v))
}

// StringFieldHasPrefix applies the HasPrefix predicate on the "string_field" field.
func StringFieldHasPrefix(v string) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldHasPrefix(FieldStringField, v))
}

// StringFieldHasSuffix applies the HasSuffix predicate on the "string_field" field.
func StringFieldHasSuffix(v string) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldHasSuffix(FieldStringField, v))
}

// StringFieldIsNil applies the IsNil predicate on the "string_field" field.
func StringFieldIsNil() predicate.TestEnt {
	return predicate.TestEnt(sql.FieldIsNull(FieldStringField))
}

// StringFieldNotNil applies the NotNil predicate on the "string_field" field.
func StringFieldNotNil() predicate.TestEnt {
	return predicate.TestEnt(sql.FieldNotNull(FieldStringField))
}

// StringFieldEqualFold applies the EqualFold predicate on the "string_field" field.
func StringFieldEqualFold(v string) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldEqualFold(FieldStringField, v))
}

// StringFieldContainsFold applies the ContainsFold predicate on the "string_field" field.
func StringFieldContainsFold(v string) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldContainsFold(FieldStringField, v))
}

// TextFieldEQ applies the EQ predicate on the "text_field" field.
func TextFieldEQ(v string) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldEQ(FieldTextField, v))
}

// TextFieldNEQ applies the NEQ predicate on the "text_field" field.
func TextFieldNEQ(v string) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldNEQ(FieldTextField, v))
}

// TextFieldIn applies the In predicate on the "text_field" field.
func TextFieldIn(vs ...string) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldIn(FieldTextField, vs...))
}

// TextFieldNotIn applies the NotIn predicate on the "text_field" field.
func TextFieldNotIn(vs ...string) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldNotIn(FieldTextField, vs...))
}

// TextFieldGT applies the GT predicate on the "text_field" field.
func TextFieldGT(v string) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldGT(FieldTextField, v))
}

// TextFieldGTE applies the GTE predicate on the "text_field" field.
func TextFieldGTE(v string) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldGTE(FieldTextField, v))
}

// TextFieldLT applies the LT predicate on the "text_field" field.
func TextFieldLT(v string) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldLT(FieldTextField, v))
}

// TextFieldLTE applies the LTE predicate on the "text_field" field.
func TextFieldLTE(v string) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldLTE(FieldTextField, v))
}

// TextFieldContains applies the Contains predicate on the "text_field" field.
func TextFieldContains(v string) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldContains(FieldTextField, v))
}

// TextFieldHasPrefix applies the HasPrefix predicate on the "text_field" field.
func TextFieldHasPrefix(v string) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldHasPrefix(FieldTextField, v))
}

// TextFieldHasSuffix applies the HasSuffix predicate on the "text_field" field.
func TextFieldHasSuffix(v string) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldHasSuffix(FieldTextField, v))
}

// TextFieldIsNil applies the IsNil predicate on the "text_field" field.
func TextFieldIsNil() predicate.TestEnt {
	return predicate.TestEnt(sql.FieldIsNull(FieldTextField))
}

// TextFieldNotNil applies the NotNil predicate on the "text_field" field.
func TextFieldNotNil() predicate.TestEnt {
	return predicate.TestEnt(sql.FieldNotNull(FieldTextField))
}

// TextFieldEqualFold applies the EqualFold predicate on the "text_field" field.
func TextFieldEqualFold(v string) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldEqualFold(FieldTextField, v))
}

// TextFieldContainsFold applies the ContainsFold predicate on the "text_field" field.
func TextFieldContainsFold(v string) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldContainsFold(FieldTextField, v))
}

// BytesFieldEQ applies the EQ predicate on the "bytes_field" field.
func BytesFieldEQ(v []byte) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldEQ(FieldBytesField, v))
}

// BytesFieldNEQ applies the NEQ predicate on the "bytes_field" field.
func BytesFieldNEQ(v []byte) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldNEQ(FieldBytesField, v))
}

// BytesFieldIn applies the In predicate on the "bytes_field" field.
func BytesFieldIn(vs ...[]byte) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldIn(FieldBytesField, vs...))
}

// BytesFieldNotIn applies the NotIn predicate on the "bytes_field" field.
func BytesFieldNotIn(vs ...[]byte) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldNotIn(FieldBytesField, vs...))
}

// BytesFieldGT applies the GT predicate on the "bytes_field" field.
func BytesFieldGT(v []byte) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldGT(FieldBytesField, v))
}

// BytesFieldGTE applies the GTE predicate on the "bytes_field" field.
func BytesFieldGTE(v []byte) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldGTE(FieldBytesField, v))
}

// BytesFieldLT applies the LT predicate on the "bytes_field" field.
func BytesFieldLT(v []byte) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldLT(FieldBytesField, v))
}

// BytesFieldLTE applies the LTE predicate on the "bytes_field" field.
func BytesFieldLTE(v []byte) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldLTE(FieldBytesField, v))
}

// BytesFieldIsNil applies the IsNil predicate on the "bytes_field" field.
func BytesFieldIsNil() predicate.TestEnt {
	return predicate.TestEnt(sql.FieldIsNull(FieldBytesField))
}

// BytesFieldNotNil applies the NotNil predicate on the "bytes_field" field.
func BytesFieldNotNil() predicate.TestEnt {
	return predicate.TestEnt(sql.FieldNotNull(FieldBytesField))
}

// BoolFieldEQ applies the EQ predicate on the "bool_field" field.
func BoolFieldEQ(v bool) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldEQ(FieldBoolField, v))
}

// BoolFieldNEQ applies the NEQ predicate on the "bool_field" field.
func BoolFieldNEQ(v bool) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldNEQ(FieldBoolField, v))
}

// BoolFieldIsNil applies the IsNil predicate on the "bool_field" field.
func BoolFieldIsNil() predicate.TestEnt {
	return predicate.TestEnt(sql.FieldIsNull(FieldBoolField))
}

// BoolFieldNotNil applies the NotNil predicate on the "bool_field" field.
func BoolFieldNotNil() predicate.TestEnt {
	return predicate.TestEnt(sql.FieldNotNull(FieldBoolField))
}

// TimeFieldEQ applies the EQ predicate on the "time_field" field.
func TimeFieldEQ(v time.Time) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldEQ(FieldTimeField, v))
}

// TimeFieldNEQ applies the NEQ predicate on the "time_field" field.
func TimeFieldNEQ(v time.Time) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldNEQ(FieldTimeField, v))
}

// TimeFieldIn applies the In predicate on the "time_field" field.
func TimeFieldIn(vs ...time.Time) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldIn(FieldTimeField, vs...))
}

// TimeFieldNotIn applies the NotIn predicate on the "time_field" field.
func TimeFieldNotIn(vs ...time.Time) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldNotIn(FieldTimeField, vs...))
}

// TimeFieldGT applies the GT predicate on the "time_field" field.
func TimeFieldGT(v time.Time) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldGT(FieldTimeField, v))
}

// TimeFieldGTE applies the GTE predicate on the "time_field" field.
func TimeFieldGTE(v time.Time) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldGTE(FieldTimeField, v))
}

// TimeFieldLT applies the LT predicate on the "time_field" field.
func TimeFieldLT(v time.Time) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldLT(FieldTimeField, v))
}

// TimeFieldLTE applies the LTE predicate on the "time_field" field.
func TimeFieldLTE(v time.Time) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldLTE(FieldTimeField, v))
}

// TimeFieldIsNil applies the IsNil predicate on the "time_field" field.
func TimeFieldIsNil() predicate.TestEnt {
	return predicate.TestEnt(sql.FieldIsNull(FieldTimeField))
}

// TimeFieldNotNil applies the NotNil predicate on the "time_field" field.
func TimeFieldNotNil() predicate.TestEnt {
	return predicate.TestEnt(sql.FieldNotNull(FieldTimeField))
}

// IntFieldEQ applies the EQ predicate on the "int_field" field.
func IntFieldEQ(v int) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldEQ(FieldIntField, v))
}

// IntFieldNEQ applies the NEQ predicate on the "int_field" field.
func IntFieldNEQ(v int) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldNEQ(FieldIntField, v))
}

// IntFieldIn applies the In predicate on the "int_field" field.
func IntFieldIn(vs ...int) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldIn(FieldIntField, vs...))
}

// IntFieldNotIn applies the NotIn predicate on the "int_field" field.
func IntFieldNotIn(vs ...int) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldNotIn(FieldIntField, vs...))
}

// IntFieldGT applies the GT predicate on the "int_field" field.
func IntFieldGT(v int) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldGT(FieldIntField, v))
}

// IntFieldGTE applies the GTE predicate on the "int_field" field.
func IntFieldGTE(v int) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldGTE(FieldIntField, v))
}

// IntFieldLT applies the LT predicate on the "int_field" field.
func IntFieldLT(v int) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldLT(FieldIntField, v))
}

// IntFieldLTE applies the LTE predicate on the "int_field" field.
func IntFieldLTE(v int) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldLTE(FieldIntField, v))
}

// IntFieldIsNil applies the IsNil predicate on the "int_field" field.
func IntFieldIsNil() predicate.TestEnt {
	return predicate.TestEnt(sql.FieldIsNull(FieldIntField))
}

// IntFieldNotNil applies the NotNil predicate on the "int_field" field.
func IntFieldNotNil() predicate.TestEnt {
	return predicate.TestEnt(sql.FieldNotNull(FieldIntField))
}

// Int64FieldEQ applies the EQ predicate on the "int64_field" field.
func Int64FieldEQ(v int64) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldEQ(FieldInt64Field, v))
}

// Int64FieldNEQ applies the NEQ predicate on the "int64_field" field.
func Int64FieldNEQ(v int64) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldNEQ(FieldInt64Field, v))
}

// Int64FieldIn applies the In predicate on the "int64_field" field.
func Int64FieldIn(vs ...int64) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldIn(FieldInt64Field, vs...))
}

// Int64FieldNotIn applies the NotIn predicate on the "int64_field" field.
func Int64FieldNotIn(vs ...int64) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldNotIn(FieldInt64Field, vs...))
}

// Int64FieldGT applies the GT predicate on the "int64_field" field.
func Int64FieldGT(v int64) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldGT(FieldInt64Field, v))
}

// Int64FieldGTE applies the GTE predicate on the "int64_field" field.
func Int64FieldGTE(v int64) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldGTE(FieldInt64Field, v))
}

// Int64FieldLT applies the LT predicate on the "int64_field" field.
func Int64FieldLT(v int64) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldLT(FieldInt64Field, v))
}

// Int64FieldLTE applies the LTE predicate on the "int64_field" field.
func Int64FieldLTE(v int64) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldLTE(FieldInt64Field, v))
}

// Int64FieldIsNil applies the IsNil predicate on the "int64_field" field.
func Int64FieldIsNil() predicate.TestEnt {
	return predicate.TestEnt(sql.FieldIsNull(FieldInt64Field))
}

// Int64FieldNotNil applies the NotNil predicate on the "int64_field" field.
func Int64FieldNotNil() predicate.TestEnt {
	return predicate.TestEnt(sql.FieldNotNull(FieldInt64Field))
}

// FloatFieldEQ applies the EQ predicate on the "float_field" field.
func FloatFieldEQ(v float64) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldEQ(FieldFloatField, v))
}

// FloatFieldNEQ applies the NEQ predicate on the "float_field" field.
func FloatFieldNEQ(v float64) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldNEQ(FieldFloatField, v))
}

// FloatFieldIn applies the In predicate on the "float_field" field.
func FloatFieldIn(vs ...float64) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldIn(FieldFloatField, vs...))
}

// FloatFieldNotIn applies the NotIn predicate on the "float_field" field.
func FloatFieldNotIn(vs ...float64) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldNotIn(FieldFloatField, vs...))
}

// FloatFieldGT applies the GT predicate on the "float_field" field.
func FloatFieldGT(v float64) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldGT(FieldFloatField, v))
}

// FloatFieldGTE applies the GTE predicate on the "float_field" field.
func FloatFieldGTE(v float64) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldGTE(FieldFloatField, v))
}

// FloatFieldLT applies the LT predicate on the "float_field" field.
func FloatFieldLT(v float64) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldLT(FieldFloatField, v))
}

// FloatFieldLTE applies the LTE predicate on the "float_field" field.
func FloatFieldLTE(v float64) predicate.TestEnt {
	return predicate.TestEnt(sql.FieldLTE(FieldFloatField, v))
}

// FloatFieldIsNil applies the IsNil predicate on the "float_field" field.
func FloatFieldIsNil() predicate.TestEnt {
	return predicate.TestEnt(sql.FieldIsNull(FieldFloatField))
}

// FloatFieldNotNil applies the NotNil predicate on the "float_field" field.
func FloatFieldNotNil() predicate.TestEnt {
	return predicate.TestEnt(sql.FieldNotNull(FieldFloatField))
}

// JSONFieldIsNil applies the IsNil predicate on the "json_field" field.
func JSONFieldIsNil() predicate.TestEnt {
	return predicate.TestEnt(sql.FieldIsNull(FieldJSONField))
}

// JSONFieldNotNil applies the NotNil predicate on the "json_field" field.
func JSONFieldNotNil() predicate.TestEnt {
	return predicate.TestEnt(sql.FieldNotNull(FieldJSONField))
}

// EnumFieldEQ applies the EQ predicate on the "enum_field" field.
func EnumFieldEQ(v enums.TestEnum) predicate.TestEnt {
	vc := v
	return predicate.TestEnt(sql.FieldEQ(FieldEnumField, vc))
}

// EnumFieldNEQ applies the NEQ predicate on the "enum_field" field.
func EnumFieldNEQ(v enums.TestEnum) predicate.TestEnt {
	vc := v
	return predicate.TestEnt(sql.FieldNEQ(FieldEnumField, vc))
}

// EnumFieldIn applies the In predicate on the "enum_field" field.
func EnumFieldIn(vs ...enums.TestEnum) predicate.TestEnt {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TestEnt(sql.FieldIn(FieldEnumField, v...))
}

// EnumFieldNotIn applies the NotIn predicate on the "enum_field" field.
func EnumFieldNotIn(vs ...enums.TestEnum) predicate.TestEnt {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TestEnt(sql.FieldNotIn(FieldEnumField, v...))
}

// EnumFieldIsNil applies the IsNil predicate on the "enum_field" field.
func EnumFieldIsNil() predicate.TestEnt {
	return predicate.TestEnt(sql.FieldIsNull(FieldEnumField))
}

// EnumFieldNotNil applies the NotNil predicate on the "enum_field" field.
func EnumFieldNotNil() predicate.TestEnt {
	return predicate.TestEnt(sql.FieldNotNull(FieldEnumField))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TestEnt) predicate.TestEnt {
	return predicate.TestEnt(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TestEnt) predicate.TestEnt {
	return predicate.TestEnt(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TestEnt) predicate.TestEnt {
	return predicate.TestEnt(func(s *sql.Selector) {
		p(s.Not())
	})
}
