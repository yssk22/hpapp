// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"hpapp.yssk22.dev/go/service/ent/hpameblopost"
	"hpapp.yssk22.dev/go/service/ent/hpartist"
	"hpapp.yssk22.dev/go/service/ent/hpasset"
	"hpapp.yssk22.dev/go/service/ent/hpblob"
	"hpapp.yssk22.dev/go/service/ent/hpmember"
	"hpapp.yssk22.dev/go/service/ent/predicate"
	"hpapp.yssk22.dev/go/service/schema/jsonfields"
)

// HPAmebloPostUpdate is the builder for updating HPAmebloPost entities.
type HPAmebloPostUpdate struct {
	config
	hooks    []Hook
	mutation *HPAmebloPostMutation
}

// Where appends a list predicates to the HPAmebloPostUpdate builder.
func (hapu *HPAmebloPostUpdate) Where(ps ...predicate.HPAmebloPost) *HPAmebloPostUpdate {
	hapu.mutation.Where(ps...)
	return hapu
}

// SetCrawledAt sets the "crawled_at" field.
func (hapu *HPAmebloPostUpdate) SetCrawledAt(t time.Time) *HPAmebloPostUpdate {
	hapu.mutation.SetCrawledAt(t)
	return hapu
}

// SetNillableCrawledAt sets the "crawled_at" field if the given value is not nil.
func (hapu *HPAmebloPostUpdate) SetNillableCrawledAt(t *time.Time) *HPAmebloPostUpdate {
	if t != nil {
		hapu.SetCrawledAt(*t)
	}
	return hapu
}

// ClearCrawledAt clears the value of the "crawled_at" field.
func (hapu *HPAmebloPostUpdate) ClearCrawledAt() *HPAmebloPostUpdate {
	hapu.mutation.ClearCrawledAt()
	return hapu
}

// SetErrorCount sets the "error_count" field.
func (hapu *HPAmebloPostUpdate) SetErrorCount(i int) *HPAmebloPostUpdate {
	hapu.mutation.ResetErrorCount()
	hapu.mutation.SetErrorCount(i)
	return hapu
}

// SetNillableErrorCount sets the "error_count" field if the given value is not nil.
func (hapu *HPAmebloPostUpdate) SetNillableErrorCount(i *int) *HPAmebloPostUpdate {
	if i != nil {
		hapu.SetErrorCount(*i)
	}
	return hapu
}

// AddErrorCount adds i to the "error_count" field.
func (hapu *HPAmebloPostUpdate) AddErrorCount(i int) *HPAmebloPostUpdate {
	hapu.mutation.AddErrorCount(i)
	return hapu
}

// SetManuallyModified sets the "manually_modified" field.
func (hapu *HPAmebloPostUpdate) SetManuallyModified(jm *jsonfields.ManuallyModified) *HPAmebloPostUpdate {
	hapu.mutation.SetManuallyModified(jm)
	return hapu
}

// ClearManuallyModified clears the value of the "manually_modified" field.
func (hapu *HPAmebloPostUpdate) ClearManuallyModified() *HPAmebloPostUpdate {
	hapu.mutation.ClearManuallyModified()
	return hapu
}

// SetLastErrorMessage sets the "last_error_message" field.
func (hapu *HPAmebloPostUpdate) SetLastErrorMessage(s string) *HPAmebloPostUpdate {
	hapu.mutation.SetLastErrorMessage(s)
	return hapu
}

// SetNillableLastErrorMessage sets the "last_error_message" field if the given value is not nil.
func (hapu *HPAmebloPostUpdate) SetNillableLastErrorMessage(s *string) *HPAmebloPostUpdate {
	if s != nil {
		hapu.SetLastErrorMessage(*s)
	}
	return hapu
}

// ClearLastErrorMessage clears the value of the "last_error_message" field.
func (hapu *HPAmebloPostUpdate) ClearLastErrorMessage() *HPAmebloPostUpdate {
	hapu.mutation.ClearLastErrorMessage()
	return hapu
}

// SetRecrawlRequired sets the "recrawl_required" field.
func (hapu *HPAmebloPostUpdate) SetRecrawlRequired(b bool) *HPAmebloPostUpdate {
	hapu.mutation.SetRecrawlRequired(b)
	return hapu
}

// SetNillableRecrawlRequired sets the "recrawl_required" field if the given value is not nil.
func (hapu *HPAmebloPostUpdate) SetNillableRecrawlRequired(b *bool) *HPAmebloPostUpdate {
	if b != nil {
		hapu.SetRecrawlRequired(*b)
	}
	return hapu
}

// ClearRecrawlRequired clears the value of the "recrawl_required" field.
func (hapu *HPAmebloPostUpdate) ClearRecrawlRequired() *HPAmebloPostUpdate {
	hapu.mutation.ClearRecrawlRequired()
	return hapu
}

// SetUpdatedAt sets the "updated_at" field.
func (hapu *HPAmebloPostUpdate) SetUpdatedAt(t time.Time) *HPAmebloPostUpdate {
	hapu.mutation.SetUpdatedAt(t)
	return hapu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (hapu *HPAmebloPostUpdate) SetNillableUpdatedAt(t *time.Time) *HPAmebloPostUpdate {
	if t != nil {
		hapu.SetUpdatedAt(*t)
	}
	return hapu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (hapu *HPAmebloPostUpdate) ClearUpdatedAt() *HPAmebloPostUpdate {
	hapu.mutation.ClearUpdatedAt()
	return hapu
}

// SetPath sets the "path" field.
func (hapu *HPAmebloPostUpdate) SetPath(s string) *HPAmebloPostUpdate {
	hapu.mutation.SetPath(s)
	return hapu
}

// SetNextPath sets the "next_path" field.
func (hapu *HPAmebloPostUpdate) SetNextPath(s string) *HPAmebloPostUpdate {
	hapu.mutation.SetNextPath(s)
	return hapu
}

// SetNillableNextPath sets the "next_path" field if the given value is not nil.
func (hapu *HPAmebloPostUpdate) SetNillableNextPath(s *string) *HPAmebloPostUpdate {
	if s != nil {
		hapu.SetNextPath(*s)
	}
	return hapu
}

// ClearNextPath clears the value of the "next_path" field.
func (hapu *HPAmebloPostUpdate) ClearNextPath() *HPAmebloPostUpdate {
	hapu.mutation.ClearNextPath()
	return hapu
}

// SetPrevPath sets the "prev_path" field.
func (hapu *HPAmebloPostUpdate) SetPrevPath(s string) *HPAmebloPostUpdate {
	hapu.mutation.SetPrevPath(s)
	return hapu
}

// SetNillablePrevPath sets the "prev_path" field if the given value is not nil.
func (hapu *HPAmebloPostUpdate) SetNillablePrevPath(s *string) *HPAmebloPostUpdate {
	if s != nil {
		hapu.SetPrevPath(*s)
	}
	return hapu
}

// ClearPrevPath clears the value of the "prev_path" field.
func (hapu *HPAmebloPostUpdate) ClearPrevPath() *HPAmebloPostUpdate {
	hapu.mutation.ClearPrevPath()
	return hapu
}

// SetArtistKey sets the "artist_key" field.
func (hapu *HPAmebloPostUpdate) SetArtistKey(s string) *HPAmebloPostUpdate {
	hapu.mutation.SetArtistKey(s)
	return hapu
}

// SetMemberKey sets the "member_key" field.
func (hapu *HPAmebloPostUpdate) SetMemberKey(s string) *HPAmebloPostUpdate {
	hapu.mutation.SetMemberKey(s)
	return hapu
}

// SetNillableMemberKey sets the "member_key" field if the given value is not nil.
func (hapu *HPAmebloPostUpdate) SetNillableMemberKey(s *string) *HPAmebloPostUpdate {
	if s != nil {
		hapu.SetMemberKey(*s)
	}
	return hapu
}

// ClearMemberKey clears the value of the "member_key" field.
func (hapu *HPAmebloPostUpdate) ClearMemberKey() *HPAmebloPostUpdate {
	hapu.mutation.ClearMemberKey()
	return hapu
}

// SetTitle sets the "title" field.
func (hapu *HPAmebloPostUpdate) SetTitle(s string) *HPAmebloPostUpdate {
	hapu.mutation.SetTitle(s)
	return hapu
}

// SetDescription sets the "description" field.
func (hapu *HPAmebloPostUpdate) SetDescription(s string) *HPAmebloPostUpdate {
	hapu.mutation.SetDescription(s)
	return hapu
}

// SetTheme sets the "theme" field.
func (hapu *HPAmebloPostUpdate) SetTheme(s string) *HPAmebloPostUpdate {
	hapu.mutation.SetTheme(s)
	return hapu
}

// SetNillableTheme sets the "theme" field if the given value is not nil.
func (hapu *HPAmebloPostUpdate) SetNillableTheme(s *string) *HPAmebloPostUpdate {
	if s != nil {
		hapu.SetTheme(*s)
	}
	return hapu
}

// ClearTheme clears the value of the "theme" field.
func (hapu *HPAmebloPostUpdate) ClearTheme() *HPAmebloPostUpdate {
	hapu.mutation.ClearTheme()
	return hapu
}

// SetPostAt sets the "post_at" field.
func (hapu *HPAmebloPostUpdate) SetPostAt(t time.Time) *HPAmebloPostUpdate {
	hapu.mutation.SetPostAt(t)
	return hapu
}

// SetSource sets the "source" field.
func (hapu *HPAmebloPostUpdate) SetSource(h hpameblopost.Source) *HPAmebloPostUpdate {
	hapu.mutation.SetSource(h)
	return hapu
}

// SetImages sets the "images" field.
func (hapu *HPAmebloPostUpdate) SetImages(j []jsonfields.Media) *HPAmebloPostUpdate {
	hapu.mutation.SetImages(j)
	return hapu
}

// AppendImages appends j to the "images" field.
func (hapu *HPAmebloPostUpdate) AppendImages(j []jsonfields.Media) *HPAmebloPostUpdate {
	hapu.mutation.AppendImages(j)
	return hapu
}

// ClearImages clears the value of the "images" field.
func (hapu *HPAmebloPostUpdate) ClearImages() *HPAmebloPostUpdate {
	hapu.mutation.ClearImages()
	return hapu
}

// SetLikes sets the "likes" field.
func (hapu *HPAmebloPostUpdate) SetLikes(i int) *HPAmebloPostUpdate {
	hapu.mutation.ResetLikes()
	hapu.mutation.SetLikes(i)
	return hapu
}

// SetNillableLikes sets the "likes" field if the given value is not nil.
func (hapu *HPAmebloPostUpdate) SetNillableLikes(i *int) *HPAmebloPostUpdate {
	if i != nil {
		hapu.SetLikes(*i)
	}
	return hapu
}

// AddLikes adds i to the "likes" field.
func (hapu *HPAmebloPostUpdate) AddLikes(i int) *HPAmebloPostUpdate {
	hapu.mutation.AddLikes(i)
	return hapu
}

// ClearLikes clears the value of the "likes" field.
func (hapu *HPAmebloPostUpdate) ClearLikes() *HPAmebloPostUpdate {
	hapu.mutation.ClearLikes()
	return hapu
}

// SetComments sets the "comments" field.
func (hapu *HPAmebloPostUpdate) SetComments(i int) *HPAmebloPostUpdate {
	hapu.mutation.ResetComments()
	hapu.mutation.SetComments(i)
	return hapu
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (hapu *HPAmebloPostUpdate) SetNillableComments(i *int) *HPAmebloPostUpdate {
	if i != nil {
		hapu.SetComments(*i)
	}
	return hapu
}

// AddComments adds i to the "comments" field.
func (hapu *HPAmebloPostUpdate) AddComments(i int) *HPAmebloPostUpdate {
	hapu.mutation.AddComments(i)
	return hapu
}

// ClearComments clears the value of the "comments" field.
func (hapu *HPAmebloPostUpdate) ClearComments() *HPAmebloPostUpdate {
	hapu.mutation.ClearComments()
	return hapu
}

// SetReblogs sets the "reblogs" field.
func (hapu *HPAmebloPostUpdate) SetReblogs(i int) *HPAmebloPostUpdate {
	hapu.mutation.ResetReblogs()
	hapu.mutation.SetReblogs(i)
	return hapu
}

// SetNillableReblogs sets the "reblogs" field if the given value is not nil.
func (hapu *HPAmebloPostUpdate) SetNillableReblogs(i *int) *HPAmebloPostUpdate {
	if i != nil {
		hapu.SetReblogs(*i)
	}
	return hapu
}

// AddReblogs adds i to the "reblogs" field.
func (hapu *HPAmebloPostUpdate) AddReblogs(i int) *HPAmebloPostUpdate {
	hapu.mutation.AddReblogs(i)
	return hapu
}

// ClearReblogs clears the value of the "reblogs" field.
func (hapu *HPAmebloPostUpdate) ClearReblogs() *HPAmebloPostUpdate {
	hapu.mutation.ClearReblogs()
	return hapu
}

// SetOwnerArtistID sets the "owner_artist_id" field.
func (hapu *HPAmebloPostUpdate) SetOwnerArtistID(i int) *HPAmebloPostUpdate {
	hapu.mutation.SetOwnerArtistID(i)
	return hapu
}

// SetNillableOwnerArtistID sets the "owner_artist_id" field if the given value is not nil.
func (hapu *HPAmebloPostUpdate) SetNillableOwnerArtistID(i *int) *HPAmebloPostUpdate {
	if i != nil {
		hapu.SetOwnerArtistID(*i)
	}
	return hapu
}

// ClearOwnerArtistID clears the value of the "owner_artist_id" field.
func (hapu *HPAmebloPostUpdate) ClearOwnerArtistID() *HPAmebloPostUpdate {
	hapu.mutation.ClearOwnerArtistID()
	return hapu
}

// SetOwnerMemberID sets the "owner_member_id" field.
func (hapu *HPAmebloPostUpdate) SetOwnerMemberID(i int) *HPAmebloPostUpdate {
	hapu.mutation.SetOwnerMemberID(i)
	return hapu
}

// SetNillableOwnerMemberID sets the "owner_member_id" field if the given value is not nil.
func (hapu *HPAmebloPostUpdate) SetNillableOwnerMemberID(i *int) *HPAmebloPostUpdate {
	if i != nil {
		hapu.SetOwnerMemberID(*i)
	}
	return hapu
}

// ClearOwnerMemberID clears the value of the "owner_member_id" field.
func (hapu *HPAmebloPostUpdate) ClearOwnerMemberID() *HPAmebloPostUpdate {
	hapu.mutation.ClearOwnerMemberID()
	return hapu
}

// SetOwnerArtist sets the "owner_artist" edge to the HPArtist entity.
func (hapu *HPAmebloPostUpdate) SetOwnerArtist(h *HPArtist) *HPAmebloPostUpdate {
	return hapu.SetOwnerArtistID(h.ID)
}

// SetOwnerMember sets the "owner_member" edge to the HPMember entity.
func (hapu *HPAmebloPostUpdate) SetOwnerMember(h *HPMember) *HPAmebloPostUpdate {
	return hapu.SetOwnerMemberID(h.ID)
}

// AddTaggedArtistIDs adds the "tagged_artists" edge to the HPArtist entity by IDs.
func (hapu *HPAmebloPostUpdate) AddTaggedArtistIDs(ids ...int) *HPAmebloPostUpdate {
	hapu.mutation.AddTaggedArtistIDs(ids...)
	return hapu
}

// AddTaggedArtists adds the "tagged_artists" edges to the HPArtist entity.
func (hapu *HPAmebloPostUpdate) AddTaggedArtists(h ...*HPArtist) *HPAmebloPostUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hapu.AddTaggedArtistIDs(ids...)
}

// AddTaggedMemberIDs adds the "tagged_members" edge to the HPMember entity by IDs.
func (hapu *HPAmebloPostUpdate) AddTaggedMemberIDs(ids ...int) *HPAmebloPostUpdate {
	hapu.mutation.AddTaggedMemberIDs(ids...)
	return hapu
}

// AddTaggedMembers adds the "tagged_members" edges to the HPMember entity.
func (hapu *HPAmebloPostUpdate) AddTaggedMembers(h ...*HPMember) *HPAmebloPostUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hapu.AddTaggedMemberIDs(ids...)
}

// SetAssetID sets the "asset" edge to the HPAsset entity by ID.
func (hapu *HPAmebloPostUpdate) SetAssetID(id int) *HPAmebloPostUpdate {
	hapu.mutation.SetAssetID(id)
	return hapu
}

// SetNillableAssetID sets the "asset" edge to the HPAsset entity by ID if the given value is not nil.
func (hapu *HPAmebloPostUpdate) SetNillableAssetID(id *int) *HPAmebloPostUpdate {
	if id != nil {
		hapu = hapu.SetAssetID(*id)
	}
	return hapu
}

// SetAsset sets the "asset" edge to the HPAsset entity.
func (hapu *HPAmebloPostUpdate) SetAsset(h *HPAsset) *HPAmebloPostUpdate {
	return hapu.SetAssetID(h.ID)
}

// AddBlobIDs adds the "blobs" edge to the HPBlob entity by IDs.
func (hapu *HPAmebloPostUpdate) AddBlobIDs(ids ...int) *HPAmebloPostUpdate {
	hapu.mutation.AddBlobIDs(ids...)
	return hapu
}

// AddBlobs adds the "blobs" edges to the HPBlob entity.
func (hapu *HPAmebloPostUpdate) AddBlobs(h ...*HPBlob) *HPAmebloPostUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hapu.AddBlobIDs(ids...)
}

// Mutation returns the HPAmebloPostMutation object of the builder.
func (hapu *HPAmebloPostUpdate) Mutation() *HPAmebloPostMutation {
	return hapu.mutation
}

// ClearOwnerArtist clears the "owner_artist" edge to the HPArtist entity.
func (hapu *HPAmebloPostUpdate) ClearOwnerArtist() *HPAmebloPostUpdate {
	hapu.mutation.ClearOwnerArtist()
	return hapu
}

// ClearOwnerMember clears the "owner_member" edge to the HPMember entity.
func (hapu *HPAmebloPostUpdate) ClearOwnerMember() *HPAmebloPostUpdate {
	hapu.mutation.ClearOwnerMember()
	return hapu
}

// ClearTaggedArtists clears all "tagged_artists" edges to the HPArtist entity.
func (hapu *HPAmebloPostUpdate) ClearTaggedArtists() *HPAmebloPostUpdate {
	hapu.mutation.ClearTaggedArtists()
	return hapu
}

// RemoveTaggedArtistIDs removes the "tagged_artists" edge to HPArtist entities by IDs.
func (hapu *HPAmebloPostUpdate) RemoveTaggedArtistIDs(ids ...int) *HPAmebloPostUpdate {
	hapu.mutation.RemoveTaggedArtistIDs(ids...)
	return hapu
}

// RemoveTaggedArtists removes "tagged_artists" edges to HPArtist entities.
func (hapu *HPAmebloPostUpdate) RemoveTaggedArtists(h ...*HPArtist) *HPAmebloPostUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hapu.RemoveTaggedArtistIDs(ids...)
}

// ClearTaggedMembers clears all "tagged_members" edges to the HPMember entity.
func (hapu *HPAmebloPostUpdate) ClearTaggedMembers() *HPAmebloPostUpdate {
	hapu.mutation.ClearTaggedMembers()
	return hapu
}

// RemoveTaggedMemberIDs removes the "tagged_members" edge to HPMember entities by IDs.
func (hapu *HPAmebloPostUpdate) RemoveTaggedMemberIDs(ids ...int) *HPAmebloPostUpdate {
	hapu.mutation.RemoveTaggedMemberIDs(ids...)
	return hapu
}

// RemoveTaggedMembers removes "tagged_members" edges to HPMember entities.
func (hapu *HPAmebloPostUpdate) RemoveTaggedMembers(h ...*HPMember) *HPAmebloPostUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hapu.RemoveTaggedMemberIDs(ids...)
}

// ClearAsset clears the "asset" edge to the HPAsset entity.
func (hapu *HPAmebloPostUpdate) ClearAsset() *HPAmebloPostUpdate {
	hapu.mutation.ClearAsset()
	return hapu
}

// ClearBlobs clears all "blobs" edges to the HPBlob entity.
func (hapu *HPAmebloPostUpdate) ClearBlobs() *HPAmebloPostUpdate {
	hapu.mutation.ClearBlobs()
	return hapu
}

// RemoveBlobIDs removes the "blobs" edge to HPBlob entities by IDs.
func (hapu *HPAmebloPostUpdate) RemoveBlobIDs(ids ...int) *HPAmebloPostUpdate {
	hapu.mutation.RemoveBlobIDs(ids...)
	return hapu
}

// RemoveBlobs removes "blobs" edges to HPBlob entities.
func (hapu *HPAmebloPostUpdate) RemoveBlobs(h ...*HPBlob) *HPAmebloPostUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hapu.RemoveBlobIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hapu *HPAmebloPostUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, HPAmebloPostMutation](ctx, hapu.sqlSave, hapu.mutation, hapu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hapu *HPAmebloPostUpdate) SaveX(ctx context.Context) int {
	affected, err := hapu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hapu *HPAmebloPostUpdate) Exec(ctx context.Context) error {
	_, err := hapu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hapu *HPAmebloPostUpdate) ExecX(ctx context.Context) {
	if err := hapu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hapu *HPAmebloPostUpdate) check() error {
	if v, ok := hapu.mutation.Source(); ok {
		if err := hpameblopost.SourceValidator(v); err != nil {
			return &ValidationError{Name: "source", err: fmt.Errorf(`ent: validator failed for field "HPAmebloPost.source": %w`, err)}
		}
	}
	return nil
}

func (hapu *HPAmebloPostUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := hapu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(hpameblopost.Table, hpameblopost.Columns, sqlgraph.NewFieldSpec(hpameblopost.FieldID, field.TypeInt))
	if ps := hapu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hapu.mutation.CrawledAt(); ok {
		_spec.SetField(hpameblopost.FieldCrawledAt, field.TypeTime, value)
	}
	if hapu.mutation.CrawledAtCleared() {
		_spec.ClearField(hpameblopost.FieldCrawledAt, field.TypeTime)
	}
	if value, ok := hapu.mutation.ErrorCount(); ok {
		_spec.SetField(hpameblopost.FieldErrorCount, field.TypeInt, value)
	}
	if value, ok := hapu.mutation.AddedErrorCount(); ok {
		_spec.AddField(hpameblopost.FieldErrorCount, field.TypeInt, value)
	}
	if value, ok := hapu.mutation.ManuallyModified(); ok {
		_spec.SetField(hpameblopost.FieldManuallyModified, field.TypeJSON, value)
	}
	if hapu.mutation.ManuallyModifiedCleared() {
		_spec.ClearField(hpameblopost.FieldManuallyModified, field.TypeJSON)
	}
	if value, ok := hapu.mutation.LastErrorMessage(); ok {
		_spec.SetField(hpameblopost.FieldLastErrorMessage, field.TypeString, value)
	}
	if hapu.mutation.LastErrorMessageCleared() {
		_spec.ClearField(hpameblopost.FieldLastErrorMessage, field.TypeString)
	}
	if value, ok := hapu.mutation.RecrawlRequired(); ok {
		_spec.SetField(hpameblopost.FieldRecrawlRequired, field.TypeBool, value)
	}
	if hapu.mutation.RecrawlRequiredCleared() {
		_spec.ClearField(hpameblopost.FieldRecrawlRequired, field.TypeBool)
	}
	if hapu.mutation.CreatedAtCleared() {
		_spec.ClearField(hpameblopost.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := hapu.mutation.UpdatedAt(); ok {
		_spec.SetField(hpameblopost.FieldUpdatedAt, field.TypeTime, value)
	}
	if hapu.mutation.UpdatedAtCleared() {
		_spec.ClearField(hpameblopost.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := hapu.mutation.Path(); ok {
		_spec.SetField(hpameblopost.FieldPath, field.TypeString, value)
	}
	if value, ok := hapu.mutation.NextPath(); ok {
		_spec.SetField(hpameblopost.FieldNextPath, field.TypeString, value)
	}
	if hapu.mutation.NextPathCleared() {
		_spec.ClearField(hpameblopost.FieldNextPath, field.TypeString)
	}
	if value, ok := hapu.mutation.PrevPath(); ok {
		_spec.SetField(hpameblopost.FieldPrevPath, field.TypeString, value)
	}
	if hapu.mutation.PrevPathCleared() {
		_spec.ClearField(hpameblopost.FieldPrevPath, field.TypeString)
	}
	if value, ok := hapu.mutation.ArtistKey(); ok {
		_spec.SetField(hpameblopost.FieldArtistKey, field.TypeString, value)
	}
	if value, ok := hapu.mutation.MemberKey(); ok {
		_spec.SetField(hpameblopost.FieldMemberKey, field.TypeString, value)
	}
	if hapu.mutation.MemberKeyCleared() {
		_spec.ClearField(hpameblopost.FieldMemberKey, field.TypeString)
	}
	if value, ok := hapu.mutation.Title(); ok {
		_spec.SetField(hpameblopost.FieldTitle, field.TypeString, value)
	}
	if value, ok := hapu.mutation.Description(); ok {
		_spec.SetField(hpameblopost.FieldDescription, field.TypeString, value)
	}
	if value, ok := hapu.mutation.Theme(); ok {
		_spec.SetField(hpameblopost.FieldTheme, field.TypeString, value)
	}
	if hapu.mutation.ThemeCleared() {
		_spec.ClearField(hpameblopost.FieldTheme, field.TypeString)
	}
	if value, ok := hapu.mutation.PostAt(); ok {
		_spec.SetField(hpameblopost.FieldPostAt, field.TypeTime, value)
	}
	if value, ok := hapu.mutation.Source(); ok {
		_spec.SetField(hpameblopost.FieldSource, field.TypeEnum, value)
	}
	if value, ok := hapu.mutation.Images(); ok {
		_spec.SetField(hpameblopost.FieldImages, field.TypeJSON, value)
	}
	if value, ok := hapu.mutation.AppendedImages(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, hpameblopost.FieldImages, value)
		})
	}
	if hapu.mutation.ImagesCleared() {
		_spec.ClearField(hpameblopost.FieldImages, field.TypeJSON)
	}
	if value, ok := hapu.mutation.Likes(); ok {
		_spec.SetField(hpameblopost.FieldLikes, field.TypeInt, value)
	}
	if value, ok := hapu.mutation.AddedLikes(); ok {
		_spec.AddField(hpameblopost.FieldLikes, field.TypeInt, value)
	}
	if hapu.mutation.LikesCleared() {
		_spec.ClearField(hpameblopost.FieldLikes, field.TypeInt)
	}
	if value, ok := hapu.mutation.Comments(); ok {
		_spec.SetField(hpameblopost.FieldComments, field.TypeInt, value)
	}
	if value, ok := hapu.mutation.AddedComments(); ok {
		_spec.AddField(hpameblopost.FieldComments, field.TypeInt, value)
	}
	if hapu.mutation.CommentsCleared() {
		_spec.ClearField(hpameblopost.FieldComments, field.TypeInt)
	}
	if value, ok := hapu.mutation.Reblogs(); ok {
		_spec.SetField(hpameblopost.FieldReblogs, field.TypeInt, value)
	}
	if value, ok := hapu.mutation.AddedReblogs(); ok {
		_spec.AddField(hpameblopost.FieldReblogs, field.TypeInt, value)
	}
	if hapu.mutation.ReblogsCleared() {
		_spec.ClearField(hpameblopost.FieldReblogs, field.TypeInt)
	}
	if hapu.mutation.OwnerArtistCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpameblopost.OwnerArtistTable,
			Columns: []string{hpameblopost.OwnerArtistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpartist.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hapu.mutation.OwnerArtistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpameblopost.OwnerArtistTable,
			Columns: []string{hpameblopost.OwnerArtistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpartist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hapu.mutation.OwnerMemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpameblopost.OwnerMemberTable,
			Columns: []string{hpameblopost.OwnerMemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpmember.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hapu.mutation.OwnerMemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpameblopost.OwnerMemberTable,
			Columns: []string{hpameblopost.OwnerMemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hapu.mutation.TaggedArtistsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpameblopost.TaggedArtistsTable,
			Columns: hpameblopost.TaggedArtistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpartist.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hapu.mutation.RemovedTaggedArtistsIDs(); len(nodes) > 0 && !hapu.mutation.TaggedArtistsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpameblopost.TaggedArtistsTable,
			Columns: hpameblopost.TaggedArtistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpartist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hapu.mutation.TaggedArtistsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpameblopost.TaggedArtistsTable,
			Columns: hpameblopost.TaggedArtistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpartist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hapu.mutation.TaggedMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpameblopost.TaggedMembersTable,
			Columns: hpameblopost.TaggedMembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpmember.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hapu.mutation.RemovedTaggedMembersIDs(); len(nodes) > 0 && !hapu.mutation.TaggedMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpameblopost.TaggedMembersTable,
			Columns: hpameblopost.TaggedMembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hapu.mutation.TaggedMembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpameblopost.TaggedMembersTable,
			Columns: hpameblopost.TaggedMembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hapu.mutation.AssetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpameblopost.AssetTable,
			Columns: []string{hpameblopost.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpasset.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hapu.mutation.AssetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpameblopost.AssetTable,
			Columns: []string{hpameblopost.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpasset.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hapu.mutation.BlobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpameblopost.BlobsTable,
			Columns: hpameblopost.BlobsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpblob.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hapu.mutation.RemovedBlobsIDs(); len(nodes) > 0 && !hapu.mutation.BlobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpameblopost.BlobsTable,
			Columns: hpameblopost.BlobsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpblob.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hapu.mutation.BlobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpameblopost.BlobsTable,
			Columns: hpameblopost.BlobsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpblob.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hapu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hpameblopost.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	hapu.mutation.done = true
	return n, nil
}

// HPAmebloPostUpdateOne is the builder for updating a single HPAmebloPost entity.
type HPAmebloPostUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HPAmebloPostMutation
}

// SetCrawledAt sets the "crawled_at" field.
func (hapuo *HPAmebloPostUpdateOne) SetCrawledAt(t time.Time) *HPAmebloPostUpdateOne {
	hapuo.mutation.SetCrawledAt(t)
	return hapuo
}

// SetNillableCrawledAt sets the "crawled_at" field if the given value is not nil.
func (hapuo *HPAmebloPostUpdateOne) SetNillableCrawledAt(t *time.Time) *HPAmebloPostUpdateOne {
	if t != nil {
		hapuo.SetCrawledAt(*t)
	}
	return hapuo
}

// ClearCrawledAt clears the value of the "crawled_at" field.
func (hapuo *HPAmebloPostUpdateOne) ClearCrawledAt() *HPAmebloPostUpdateOne {
	hapuo.mutation.ClearCrawledAt()
	return hapuo
}

// SetErrorCount sets the "error_count" field.
func (hapuo *HPAmebloPostUpdateOne) SetErrorCount(i int) *HPAmebloPostUpdateOne {
	hapuo.mutation.ResetErrorCount()
	hapuo.mutation.SetErrorCount(i)
	return hapuo
}

// SetNillableErrorCount sets the "error_count" field if the given value is not nil.
func (hapuo *HPAmebloPostUpdateOne) SetNillableErrorCount(i *int) *HPAmebloPostUpdateOne {
	if i != nil {
		hapuo.SetErrorCount(*i)
	}
	return hapuo
}

// AddErrorCount adds i to the "error_count" field.
func (hapuo *HPAmebloPostUpdateOne) AddErrorCount(i int) *HPAmebloPostUpdateOne {
	hapuo.mutation.AddErrorCount(i)
	return hapuo
}

// SetManuallyModified sets the "manually_modified" field.
func (hapuo *HPAmebloPostUpdateOne) SetManuallyModified(jm *jsonfields.ManuallyModified) *HPAmebloPostUpdateOne {
	hapuo.mutation.SetManuallyModified(jm)
	return hapuo
}

// ClearManuallyModified clears the value of the "manually_modified" field.
func (hapuo *HPAmebloPostUpdateOne) ClearManuallyModified() *HPAmebloPostUpdateOne {
	hapuo.mutation.ClearManuallyModified()
	return hapuo
}

// SetLastErrorMessage sets the "last_error_message" field.
func (hapuo *HPAmebloPostUpdateOne) SetLastErrorMessage(s string) *HPAmebloPostUpdateOne {
	hapuo.mutation.SetLastErrorMessage(s)
	return hapuo
}

// SetNillableLastErrorMessage sets the "last_error_message" field if the given value is not nil.
func (hapuo *HPAmebloPostUpdateOne) SetNillableLastErrorMessage(s *string) *HPAmebloPostUpdateOne {
	if s != nil {
		hapuo.SetLastErrorMessage(*s)
	}
	return hapuo
}

// ClearLastErrorMessage clears the value of the "last_error_message" field.
func (hapuo *HPAmebloPostUpdateOne) ClearLastErrorMessage() *HPAmebloPostUpdateOne {
	hapuo.mutation.ClearLastErrorMessage()
	return hapuo
}

// SetRecrawlRequired sets the "recrawl_required" field.
func (hapuo *HPAmebloPostUpdateOne) SetRecrawlRequired(b bool) *HPAmebloPostUpdateOne {
	hapuo.mutation.SetRecrawlRequired(b)
	return hapuo
}

// SetNillableRecrawlRequired sets the "recrawl_required" field if the given value is not nil.
func (hapuo *HPAmebloPostUpdateOne) SetNillableRecrawlRequired(b *bool) *HPAmebloPostUpdateOne {
	if b != nil {
		hapuo.SetRecrawlRequired(*b)
	}
	return hapuo
}

// ClearRecrawlRequired clears the value of the "recrawl_required" field.
func (hapuo *HPAmebloPostUpdateOne) ClearRecrawlRequired() *HPAmebloPostUpdateOne {
	hapuo.mutation.ClearRecrawlRequired()
	return hapuo
}

// SetUpdatedAt sets the "updated_at" field.
func (hapuo *HPAmebloPostUpdateOne) SetUpdatedAt(t time.Time) *HPAmebloPostUpdateOne {
	hapuo.mutation.SetUpdatedAt(t)
	return hapuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (hapuo *HPAmebloPostUpdateOne) SetNillableUpdatedAt(t *time.Time) *HPAmebloPostUpdateOne {
	if t != nil {
		hapuo.SetUpdatedAt(*t)
	}
	return hapuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (hapuo *HPAmebloPostUpdateOne) ClearUpdatedAt() *HPAmebloPostUpdateOne {
	hapuo.mutation.ClearUpdatedAt()
	return hapuo
}

// SetPath sets the "path" field.
func (hapuo *HPAmebloPostUpdateOne) SetPath(s string) *HPAmebloPostUpdateOne {
	hapuo.mutation.SetPath(s)
	return hapuo
}

// SetNextPath sets the "next_path" field.
func (hapuo *HPAmebloPostUpdateOne) SetNextPath(s string) *HPAmebloPostUpdateOne {
	hapuo.mutation.SetNextPath(s)
	return hapuo
}

// SetNillableNextPath sets the "next_path" field if the given value is not nil.
func (hapuo *HPAmebloPostUpdateOne) SetNillableNextPath(s *string) *HPAmebloPostUpdateOne {
	if s != nil {
		hapuo.SetNextPath(*s)
	}
	return hapuo
}

// ClearNextPath clears the value of the "next_path" field.
func (hapuo *HPAmebloPostUpdateOne) ClearNextPath() *HPAmebloPostUpdateOne {
	hapuo.mutation.ClearNextPath()
	return hapuo
}

// SetPrevPath sets the "prev_path" field.
func (hapuo *HPAmebloPostUpdateOne) SetPrevPath(s string) *HPAmebloPostUpdateOne {
	hapuo.mutation.SetPrevPath(s)
	return hapuo
}

// SetNillablePrevPath sets the "prev_path" field if the given value is not nil.
func (hapuo *HPAmebloPostUpdateOne) SetNillablePrevPath(s *string) *HPAmebloPostUpdateOne {
	if s != nil {
		hapuo.SetPrevPath(*s)
	}
	return hapuo
}

// ClearPrevPath clears the value of the "prev_path" field.
func (hapuo *HPAmebloPostUpdateOne) ClearPrevPath() *HPAmebloPostUpdateOne {
	hapuo.mutation.ClearPrevPath()
	return hapuo
}

// SetArtistKey sets the "artist_key" field.
func (hapuo *HPAmebloPostUpdateOne) SetArtistKey(s string) *HPAmebloPostUpdateOne {
	hapuo.mutation.SetArtistKey(s)
	return hapuo
}

// SetMemberKey sets the "member_key" field.
func (hapuo *HPAmebloPostUpdateOne) SetMemberKey(s string) *HPAmebloPostUpdateOne {
	hapuo.mutation.SetMemberKey(s)
	return hapuo
}

// SetNillableMemberKey sets the "member_key" field if the given value is not nil.
func (hapuo *HPAmebloPostUpdateOne) SetNillableMemberKey(s *string) *HPAmebloPostUpdateOne {
	if s != nil {
		hapuo.SetMemberKey(*s)
	}
	return hapuo
}

// ClearMemberKey clears the value of the "member_key" field.
func (hapuo *HPAmebloPostUpdateOne) ClearMemberKey() *HPAmebloPostUpdateOne {
	hapuo.mutation.ClearMemberKey()
	return hapuo
}

// SetTitle sets the "title" field.
func (hapuo *HPAmebloPostUpdateOne) SetTitle(s string) *HPAmebloPostUpdateOne {
	hapuo.mutation.SetTitle(s)
	return hapuo
}

// SetDescription sets the "description" field.
func (hapuo *HPAmebloPostUpdateOne) SetDescription(s string) *HPAmebloPostUpdateOne {
	hapuo.mutation.SetDescription(s)
	return hapuo
}

// SetTheme sets the "theme" field.
func (hapuo *HPAmebloPostUpdateOne) SetTheme(s string) *HPAmebloPostUpdateOne {
	hapuo.mutation.SetTheme(s)
	return hapuo
}

// SetNillableTheme sets the "theme" field if the given value is not nil.
func (hapuo *HPAmebloPostUpdateOne) SetNillableTheme(s *string) *HPAmebloPostUpdateOne {
	if s != nil {
		hapuo.SetTheme(*s)
	}
	return hapuo
}

// ClearTheme clears the value of the "theme" field.
func (hapuo *HPAmebloPostUpdateOne) ClearTheme() *HPAmebloPostUpdateOne {
	hapuo.mutation.ClearTheme()
	return hapuo
}

// SetPostAt sets the "post_at" field.
func (hapuo *HPAmebloPostUpdateOne) SetPostAt(t time.Time) *HPAmebloPostUpdateOne {
	hapuo.mutation.SetPostAt(t)
	return hapuo
}

// SetSource sets the "source" field.
func (hapuo *HPAmebloPostUpdateOne) SetSource(h hpameblopost.Source) *HPAmebloPostUpdateOne {
	hapuo.mutation.SetSource(h)
	return hapuo
}

// SetImages sets the "images" field.
func (hapuo *HPAmebloPostUpdateOne) SetImages(j []jsonfields.Media) *HPAmebloPostUpdateOne {
	hapuo.mutation.SetImages(j)
	return hapuo
}

// AppendImages appends j to the "images" field.
func (hapuo *HPAmebloPostUpdateOne) AppendImages(j []jsonfields.Media) *HPAmebloPostUpdateOne {
	hapuo.mutation.AppendImages(j)
	return hapuo
}

// ClearImages clears the value of the "images" field.
func (hapuo *HPAmebloPostUpdateOne) ClearImages() *HPAmebloPostUpdateOne {
	hapuo.mutation.ClearImages()
	return hapuo
}

// SetLikes sets the "likes" field.
func (hapuo *HPAmebloPostUpdateOne) SetLikes(i int) *HPAmebloPostUpdateOne {
	hapuo.mutation.ResetLikes()
	hapuo.mutation.SetLikes(i)
	return hapuo
}

// SetNillableLikes sets the "likes" field if the given value is not nil.
func (hapuo *HPAmebloPostUpdateOne) SetNillableLikes(i *int) *HPAmebloPostUpdateOne {
	if i != nil {
		hapuo.SetLikes(*i)
	}
	return hapuo
}

// AddLikes adds i to the "likes" field.
func (hapuo *HPAmebloPostUpdateOne) AddLikes(i int) *HPAmebloPostUpdateOne {
	hapuo.mutation.AddLikes(i)
	return hapuo
}

// ClearLikes clears the value of the "likes" field.
func (hapuo *HPAmebloPostUpdateOne) ClearLikes() *HPAmebloPostUpdateOne {
	hapuo.mutation.ClearLikes()
	return hapuo
}

// SetComments sets the "comments" field.
func (hapuo *HPAmebloPostUpdateOne) SetComments(i int) *HPAmebloPostUpdateOne {
	hapuo.mutation.ResetComments()
	hapuo.mutation.SetComments(i)
	return hapuo
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (hapuo *HPAmebloPostUpdateOne) SetNillableComments(i *int) *HPAmebloPostUpdateOne {
	if i != nil {
		hapuo.SetComments(*i)
	}
	return hapuo
}

// AddComments adds i to the "comments" field.
func (hapuo *HPAmebloPostUpdateOne) AddComments(i int) *HPAmebloPostUpdateOne {
	hapuo.mutation.AddComments(i)
	return hapuo
}

// ClearComments clears the value of the "comments" field.
func (hapuo *HPAmebloPostUpdateOne) ClearComments() *HPAmebloPostUpdateOne {
	hapuo.mutation.ClearComments()
	return hapuo
}

// SetReblogs sets the "reblogs" field.
func (hapuo *HPAmebloPostUpdateOne) SetReblogs(i int) *HPAmebloPostUpdateOne {
	hapuo.mutation.ResetReblogs()
	hapuo.mutation.SetReblogs(i)
	return hapuo
}

// SetNillableReblogs sets the "reblogs" field if the given value is not nil.
func (hapuo *HPAmebloPostUpdateOne) SetNillableReblogs(i *int) *HPAmebloPostUpdateOne {
	if i != nil {
		hapuo.SetReblogs(*i)
	}
	return hapuo
}

// AddReblogs adds i to the "reblogs" field.
func (hapuo *HPAmebloPostUpdateOne) AddReblogs(i int) *HPAmebloPostUpdateOne {
	hapuo.mutation.AddReblogs(i)
	return hapuo
}

// ClearReblogs clears the value of the "reblogs" field.
func (hapuo *HPAmebloPostUpdateOne) ClearReblogs() *HPAmebloPostUpdateOne {
	hapuo.mutation.ClearReblogs()
	return hapuo
}

// SetOwnerArtistID sets the "owner_artist_id" field.
func (hapuo *HPAmebloPostUpdateOne) SetOwnerArtistID(i int) *HPAmebloPostUpdateOne {
	hapuo.mutation.SetOwnerArtistID(i)
	return hapuo
}

// SetNillableOwnerArtistID sets the "owner_artist_id" field if the given value is not nil.
func (hapuo *HPAmebloPostUpdateOne) SetNillableOwnerArtistID(i *int) *HPAmebloPostUpdateOne {
	if i != nil {
		hapuo.SetOwnerArtistID(*i)
	}
	return hapuo
}

// ClearOwnerArtistID clears the value of the "owner_artist_id" field.
func (hapuo *HPAmebloPostUpdateOne) ClearOwnerArtistID() *HPAmebloPostUpdateOne {
	hapuo.mutation.ClearOwnerArtistID()
	return hapuo
}

// SetOwnerMemberID sets the "owner_member_id" field.
func (hapuo *HPAmebloPostUpdateOne) SetOwnerMemberID(i int) *HPAmebloPostUpdateOne {
	hapuo.mutation.SetOwnerMemberID(i)
	return hapuo
}

// SetNillableOwnerMemberID sets the "owner_member_id" field if the given value is not nil.
func (hapuo *HPAmebloPostUpdateOne) SetNillableOwnerMemberID(i *int) *HPAmebloPostUpdateOne {
	if i != nil {
		hapuo.SetOwnerMemberID(*i)
	}
	return hapuo
}

// ClearOwnerMemberID clears the value of the "owner_member_id" field.
func (hapuo *HPAmebloPostUpdateOne) ClearOwnerMemberID() *HPAmebloPostUpdateOne {
	hapuo.mutation.ClearOwnerMemberID()
	return hapuo
}

// SetOwnerArtist sets the "owner_artist" edge to the HPArtist entity.
func (hapuo *HPAmebloPostUpdateOne) SetOwnerArtist(h *HPArtist) *HPAmebloPostUpdateOne {
	return hapuo.SetOwnerArtistID(h.ID)
}

// SetOwnerMember sets the "owner_member" edge to the HPMember entity.
func (hapuo *HPAmebloPostUpdateOne) SetOwnerMember(h *HPMember) *HPAmebloPostUpdateOne {
	return hapuo.SetOwnerMemberID(h.ID)
}

// AddTaggedArtistIDs adds the "tagged_artists" edge to the HPArtist entity by IDs.
func (hapuo *HPAmebloPostUpdateOne) AddTaggedArtistIDs(ids ...int) *HPAmebloPostUpdateOne {
	hapuo.mutation.AddTaggedArtistIDs(ids...)
	return hapuo
}

// AddTaggedArtists adds the "tagged_artists" edges to the HPArtist entity.
func (hapuo *HPAmebloPostUpdateOne) AddTaggedArtists(h ...*HPArtist) *HPAmebloPostUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hapuo.AddTaggedArtistIDs(ids...)
}

// AddTaggedMemberIDs adds the "tagged_members" edge to the HPMember entity by IDs.
func (hapuo *HPAmebloPostUpdateOne) AddTaggedMemberIDs(ids ...int) *HPAmebloPostUpdateOne {
	hapuo.mutation.AddTaggedMemberIDs(ids...)
	return hapuo
}

// AddTaggedMembers adds the "tagged_members" edges to the HPMember entity.
func (hapuo *HPAmebloPostUpdateOne) AddTaggedMembers(h ...*HPMember) *HPAmebloPostUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hapuo.AddTaggedMemberIDs(ids...)
}

// SetAssetID sets the "asset" edge to the HPAsset entity by ID.
func (hapuo *HPAmebloPostUpdateOne) SetAssetID(id int) *HPAmebloPostUpdateOne {
	hapuo.mutation.SetAssetID(id)
	return hapuo
}

// SetNillableAssetID sets the "asset" edge to the HPAsset entity by ID if the given value is not nil.
func (hapuo *HPAmebloPostUpdateOne) SetNillableAssetID(id *int) *HPAmebloPostUpdateOne {
	if id != nil {
		hapuo = hapuo.SetAssetID(*id)
	}
	return hapuo
}

// SetAsset sets the "asset" edge to the HPAsset entity.
func (hapuo *HPAmebloPostUpdateOne) SetAsset(h *HPAsset) *HPAmebloPostUpdateOne {
	return hapuo.SetAssetID(h.ID)
}

// AddBlobIDs adds the "blobs" edge to the HPBlob entity by IDs.
func (hapuo *HPAmebloPostUpdateOne) AddBlobIDs(ids ...int) *HPAmebloPostUpdateOne {
	hapuo.mutation.AddBlobIDs(ids...)
	return hapuo
}

// AddBlobs adds the "blobs" edges to the HPBlob entity.
func (hapuo *HPAmebloPostUpdateOne) AddBlobs(h ...*HPBlob) *HPAmebloPostUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hapuo.AddBlobIDs(ids...)
}

// Mutation returns the HPAmebloPostMutation object of the builder.
func (hapuo *HPAmebloPostUpdateOne) Mutation() *HPAmebloPostMutation {
	return hapuo.mutation
}

// ClearOwnerArtist clears the "owner_artist" edge to the HPArtist entity.
func (hapuo *HPAmebloPostUpdateOne) ClearOwnerArtist() *HPAmebloPostUpdateOne {
	hapuo.mutation.ClearOwnerArtist()
	return hapuo
}

// ClearOwnerMember clears the "owner_member" edge to the HPMember entity.
func (hapuo *HPAmebloPostUpdateOne) ClearOwnerMember() *HPAmebloPostUpdateOne {
	hapuo.mutation.ClearOwnerMember()
	return hapuo
}

// ClearTaggedArtists clears all "tagged_artists" edges to the HPArtist entity.
func (hapuo *HPAmebloPostUpdateOne) ClearTaggedArtists() *HPAmebloPostUpdateOne {
	hapuo.mutation.ClearTaggedArtists()
	return hapuo
}

// RemoveTaggedArtistIDs removes the "tagged_artists" edge to HPArtist entities by IDs.
func (hapuo *HPAmebloPostUpdateOne) RemoveTaggedArtistIDs(ids ...int) *HPAmebloPostUpdateOne {
	hapuo.mutation.RemoveTaggedArtistIDs(ids...)
	return hapuo
}

// RemoveTaggedArtists removes "tagged_artists" edges to HPArtist entities.
func (hapuo *HPAmebloPostUpdateOne) RemoveTaggedArtists(h ...*HPArtist) *HPAmebloPostUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hapuo.RemoveTaggedArtistIDs(ids...)
}

// ClearTaggedMembers clears all "tagged_members" edges to the HPMember entity.
func (hapuo *HPAmebloPostUpdateOne) ClearTaggedMembers() *HPAmebloPostUpdateOne {
	hapuo.mutation.ClearTaggedMembers()
	return hapuo
}

// RemoveTaggedMemberIDs removes the "tagged_members" edge to HPMember entities by IDs.
func (hapuo *HPAmebloPostUpdateOne) RemoveTaggedMemberIDs(ids ...int) *HPAmebloPostUpdateOne {
	hapuo.mutation.RemoveTaggedMemberIDs(ids...)
	return hapuo
}

// RemoveTaggedMembers removes "tagged_members" edges to HPMember entities.
func (hapuo *HPAmebloPostUpdateOne) RemoveTaggedMembers(h ...*HPMember) *HPAmebloPostUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hapuo.RemoveTaggedMemberIDs(ids...)
}

// ClearAsset clears the "asset" edge to the HPAsset entity.
func (hapuo *HPAmebloPostUpdateOne) ClearAsset() *HPAmebloPostUpdateOne {
	hapuo.mutation.ClearAsset()
	return hapuo
}

// ClearBlobs clears all "blobs" edges to the HPBlob entity.
func (hapuo *HPAmebloPostUpdateOne) ClearBlobs() *HPAmebloPostUpdateOne {
	hapuo.mutation.ClearBlobs()
	return hapuo
}

// RemoveBlobIDs removes the "blobs" edge to HPBlob entities by IDs.
func (hapuo *HPAmebloPostUpdateOne) RemoveBlobIDs(ids ...int) *HPAmebloPostUpdateOne {
	hapuo.mutation.RemoveBlobIDs(ids...)
	return hapuo
}

// RemoveBlobs removes "blobs" edges to HPBlob entities.
func (hapuo *HPAmebloPostUpdateOne) RemoveBlobs(h ...*HPBlob) *HPAmebloPostUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hapuo.RemoveBlobIDs(ids...)
}

// Where appends a list predicates to the HPAmebloPostUpdate builder.
func (hapuo *HPAmebloPostUpdateOne) Where(ps ...predicate.HPAmebloPost) *HPAmebloPostUpdateOne {
	hapuo.mutation.Where(ps...)
	return hapuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (hapuo *HPAmebloPostUpdateOne) Select(field string, fields ...string) *HPAmebloPostUpdateOne {
	hapuo.fields = append([]string{field}, fields...)
	return hapuo
}

// Save executes the query and returns the updated HPAmebloPost entity.
func (hapuo *HPAmebloPostUpdateOne) Save(ctx context.Context) (*HPAmebloPost, error) {
	return withHooks[*HPAmebloPost, HPAmebloPostMutation](ctx, hapuo.sqlSave, hapuo.mutation, hapuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hapuo *HPAmebloPostUpdateOne) SaveX(ctx context.Context) *HPAmebloPost {
	node, err := hapuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (hapuo *HPAmebloPostUpdateOne) Exec(ctx context.Context) error {
	_, err := hapuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hapuo *HPAmebloPostUpdateOne) ExecX(ctx context.Context) {
	if err := hapuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hapuo *HPAmebloPostUpdateOne) check() error {
	if v, ok := hapuo.mutation.Source(); ok {
		if err := hpameblopost.SourceValidator(v); err != nil {
			return &ValidationError{Name: "source", err: fmt.Errorf(`ent: validator failed for field "HPAmebloPost.source": %w`, err)}
		}
	}
	return nil
}

func (hapuo *HPAmebloPostUpdateOne) sqlSave(ctx context.Context) (_node *HPAmebloPost, err error) {
	if err := hapuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(hpameblopost.Table, hpameblopost.Columns, sqlgraph.NewFieldSpec(hpameblopost.FieldID, field.TypeInt))
	id, ok := hapuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "HPAmebloPost.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := hapuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hpameblopost.FieldID)
		for _, f := range fields {
			if !hpameblopost.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != hpameblopost.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := hapuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hapuo.mutation.CrawledAt(); ok {
		_spec.SetField(hpameblopost.FieldCrawledAt, field.TypeTime, value)
	}
	if hapuo.mutation.CrawledAtCleared() {
		_spec.ClearField(hpameblopost.FieldCrawledAt, field.TypeTime)
	}
	if value, ok := hapuo.mutation.ErrorCount(); ok {
		_spec.SetField(hpameblopost.FieldErrorCount, field.TypeInt, value)
	}
	if value, ok := hapuo.mutation.AddedErrorCount(); ok {
		_spec.AddField(hpameblopost.FieldErrorCount, field.TypeInt, value)
	}
	if value, ok := hapuo.mutation.ManuallyModified(); ok {
		_spec.SetField(hpameblopost.FieldManuallyModified, field.TypeJSON, value)
	}
	if hapuo.mutation.ManuallyModifiedCleared() {
		_spec.ClearField(hpameblopost.FieldManuallyModified, field.TypeJSON)
	}
	if value, ok := hapuo.mutation.LastErrorMessage(); ok {
		_spec.SetField(hpameblopost.FieldLastErrorMessage, field.TypeString, value)
	}
	if hapuo.mutation.LastErrorMessageCleared() {
		_spec.ClearField(hpameblopost.FieldLastErrorMessage, field.TypeString)
	}
	if value, ok := hapuo.mutation.RecrawlRequired(); ok {
		_spec.SetField(hpameblopost.FieldRecrawlRequired, field.TypeBool, value)
	}
	if hapuo.mutation.RecrawlRequiredCleared() {
		_spec.ClearField(hpameblopost.FieldRecrawlRequired, field.TypeBool)
	}
	if hapuo.mutation.CreatedAtCleared() {
		_spec.ClearField(hpameblopost.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := hapuo.mutation.UpdatedAt(); ok {
		_spec.SetField(hpameblopost.FieldUpdatedAt, field.TypeTime, value)
	}
	if hapuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(hpameblopost.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := hapuo.mutation.Path(); ok {
		_spec.SetField(hpameblopost.FieldPath, field.TypeString, value)
	}
	if value, ok := hapuo.mutation.NextPath(); ok {
		_spec.SetField(hpameblopost.FieldNextPath, field.TypeString, value)
	}
	if hapuo.mutation.NextPathCleared() {
		_spec.ClearField(hpameblopost.FieldNextPath, field.TypeString)
	}
	if value, ok := hapuo.mutation.PrevPath(); ok {
		_spec.SetField(hpameblopost.FieldPrevPath, field.TypeString, value)
	}
	if hapuo.mutation.PrevPathCleared() {
		_spec.ClearField(hpameblopost.FieldPrevPath, field.TypeString)
	}
	if value, ok := hapuo.mutation.ArtistKey(); ok {
		_spec.SetField(hpameblopost.FieldArtistKey, field.TypeString, value)
	}
	if value, ok := hapuo.mutation.MemberKey(); ok {
		_spec.SetField(hpameblopost.FieldMemberKey, field.TypeString, value)
	}
	if hapuo.mutation.MemberKeyCleared() {
		_spec.ClearField(hpameblopost.FieldMemberKey, field.TypeString)
	}
	if value, ok := hapuo.mutation.Title(); ok {
		_spec.SetField(hpameblopost.FieldTitle, field.TypeString, value)
	}
	if value, ok := hapuo.mutation.Description(); ok {
		_spec.SetField(hpameblopost.FieldDescription, field.TypeString, value)
	}
	if value, ok := hapuo.mutation.Theme(); ok {
		_spec.SetField(hpameblopost.FieldTheme, field.TypeString, value)
	}
	if hapuo.mutation.ThemeCleared() {
		_spec.ClearField(hpameblopost.FieldTheme, field.TypeString)
	}
	if value, ok := hapuo.mutation.PostAt(); ok {
		_spec.SetField(hpameblopost.FieldPostAt, field.TypeTime, value)
	}
	if value, ok := hapuo.mutation.Source(); ok {
		_spec.SetField(hpameblopost.FieldSource, field.TypeEnum, value)
	}
	if value, ok := hapuo.mutation.Images(); ok {
		_spec.SetField(hpameblopost.FieldImages, field.TypeJSON, value)
	}
	if value, ok := hapuo.mutation.AppendedImages(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, hpameblopost.FieldImages, value)
		})
	}
	if hapuo.mutation.ImagesCleared() {
		_spec.ClearField(hpameblopost.FieldImages, field.TypeJSON)
	}
	if value, ok := hapuo.mutation.Likes(); ok {
		_spec.SetField(hpameblopost.FieldLikes, field.TypeInt, value)
	}
	if value, ok := hapuo.mutation.AddedLikes(); ok {
		_spec.AddField(hpameblopost.FieldLikes, field.TypeInt, value)
	}
	if hapuo.mutation.LikesCleared() {
		_spec.ClearField(hpameblopost.FieldLikes, field.TypeInt)
	}
	if value, ok := hapuo.mutation.Comments(); ok {
		_spec.SetField(hpameblopost.FieldComments, field.TypeInt, value)
	}
	if value, ok := hapuo.mutation.AddedComments(); ok {
		_spec.AddField(hpameblopost.FieldComments, field.TypeInt, value)
	}
	if hapuo.mutation.CommentsCleared() {
		_spec.ClearField(hpameblopost.FieldComments, field.TypeInt)
	}
	if value, ok := hapuo.mutation.Reblogs(); ok {
		_spec.SetField(hpameblopost.FieldReblogs, field.TypeInt, value)
	}
	if value, ok := hapuo.mutation.AddedReblogs(); ok {
		_spec.AddField(hpameblopost.FieldReblogs, field.TypeInt, value)
	}
	if hapuo.mutation.ReblogsCleared() {
		_spec.ClearField(hpameblopost.FieldReblogs, field.TypeInt)
	}
	if hapuo.mutation.OwnerArtistCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpameblopost.OwnerArtistTable,
			Columns: []string{hpameblopost.OwnerArtistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpartist.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hapuo.mutation.OwnerArtistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpameblopost.OwnerArtistTable,
			Columns: []string{hpameblopost.OwnerArtistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpartist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hapuo.mutation.OwnerMemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpameblopost.OwnerMemberTable,
			Columns: []string{hpameblopost.OwnerMemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpmember.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hapuo.mutation.OwnerMemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpameblopost.OwnerMemberTable,
			Columns: []string{hpameblopost.OwnerMemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hapuo.mutation.TaggedArtistsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpameblopost.TaggedArtistsTable,
			Columns: hpameblopost.TaggedArtistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpartist.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hapuo.mutation.RemovedTaggedArtistsIDs(); len(nodes) > 0 && !hapuo.mutation.TaggedArtistsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpameblopost.TaggedArtistsTable,
			Columns: hpameblopost.TaggedArtistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpartist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hapuo.mutation.TaggedArtistsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpameblopost.TaggedArtistsTable,
			Columns: hpameblopost.TaggedArtistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpartist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hapuo.mutation.TaggedMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpameblopost.TaggedMembersTable,
			Columns: hpameblopost.TaggedMembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpmember.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hapuo.mutation.RemovedTaggedMembersIDs(); len(nodes) > 0 && !hapuo.mutation.TaggedMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpameblopost.TaggedMembersTable,
			Columns: hpameblopost.TaggedMembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hapuo.mutation.TaggedMembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpameblopost.TaggedMembersTable,
			Columns: hpameblopost.TaggedMembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hapuo.mutation.AssetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpameblopost.AssetTable,
			Columns: []string{hpameblopost.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpasset.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hapuo.mutation.AssetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpameblopost.AssetTable,
			Columns: []string{hpameblopost.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpasset.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hapuo.mutation.BlobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpameblopost.BlobsTable,
			Columns: hpameblopost.BlobsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpblob.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hapuo.mutation.RemovedBlobsIDs(); len(nodes) > 0 && !hapuo.mutation.BlobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpameblopost.BlobsTable,
			Columns: hpameblopost.BlobsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpblob.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hapuo.mutation.BlobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpameblopost.BlobsTable,
			Columns: hpameblopost.BlobsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpblob.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &HPAmebloPost{config: hapuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, hapuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hpameblopost.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	hapuo.mutation.done = true
	return _node, nil
}
