// Code generated by ent, DO NOT EDIT.

package privacy

import (
	"context"
	"fmt"

	"github.com/yssk22/hpapp/go/service/ent"

	"entgo.io/ent/entql"
	"entgo.io/ent/privacy"
)

var (
	// Allow may be returned by rules to indicate that the policy
	// evaluation should terminate with allow decision.
	Allow = privacy.Allow

	// Deny may be returned by rules to indicate that the policy
	// evaluation should terminate with deny decision.
	Deny = privacy.Deny

	// Skip may be returned by rules to indicate that the policy
	// evaluation should continue to the next rule.
	Skip = privacy.Skip
)

// Allowf returns an formatted wrapped Allow decision.
func Allowf(format string, a ...any) error {
	return fmt.Errorf(format+": %w", append(a, Allow)...)
}

// Denyf returns an formatted wrapped Deny decision.
func Denyf(format string, a ...any) error {
	return fmt.Errorf(format+": %w", append(a, Deny)...)
}

// Skipf returns an formatted wrapped Skip decision.
func Skipf(format string, a ...any) error {
	return fmt.Errorf(format+": %w", append(a, Skip)...)
}

// DecisionContext creates a new context from the given parent context with
// a policy decision attach to it.
func DecisionContext(parent context.Context, decision error) context.Context {
	return privacy.DecisionContext(parent, decision)
}

// DecisionFromContext retrieves the policy decision from the context.
func DecisionFromContext(ctx context.Context) (error, bool) {
	return privacy.DecisionFromContext(ctx)
}

type (
	// Policy groups query and mutation policies.
	Policy = privacy.Policy

	// QueryRule defines the interface deciding whether a
	// query is allowed and optionally modify it.
	QueryRule = privacy.QueryRule
	// QueryPolicy combines multiple query rules into a single policy.
	QueryPolicy = privacy.QueryPolicy

	// MutationRule defines the interface which decides whether a
	// mutation is allowed and optionally modifies it.
	MutationRule = privacy.MutationRule
	// MutationPolicy combines multiple mutation rules into a single policy.
	MutationPolicy = privacy.MutationPolicy
)

// QueryRuleFunc type is an adapter to allow the use of
// ordinary functions as query rules.
type QueryRuleFunc func(context.Context, ent.Query) error

// Eval returns f(ctx, q).
func (f QueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	return f(ctx, q)
}

// MutationRuleFunc type is an adapter which allows the use of
// ordinary functions as mutation rules.
type MutationRuleFunc func(context.Context, ent.Mutation) error

// EvalMutation returns f(ctx, m).
func (f MutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	return f(ctx, m)
}

// QueryMutationRule is an interface which groups query and mutation rules.
type QueryMutationRule interface {
	QueryRule
	MutationRule
}

// AlwaysAllowRule returns a rule that returns an allow decision.
func AlwaysAllowRule() QueryMutationRule {
	return fixedDecision{Allow}
}

// AlwaysDenyRule returns a rule that returns a deny decision.
func AlwaysDenyRule() QueryMutationRule {
	return fixedDecision{Deny}
}

type fixedDecision struct {
	decision error
}

func (f fixedDecision) EvalQuery(context.Context, ent.Query) error {
	return f.decision
}

func (f fixedDecision) EvalMutation(context.Context, ent.Mutation) error {
	return f.decision
}

type contextDecision struct {
	eval func(context.Context) error
}

// ContextQueryMutationRule creates a query/mutation rule from a context eval func.
func ContextQueryMutationRule(eval func(context.Context) error) QueryMutationRule {
	return contextDecision{eval}
}

func (c contextDecision) EvalQuery(ctx context.Context, _ ent.Query) error {
	return c.eval(ctx)
}

func (c contextDecision) EvalMutation(ctx context.Context, _ ent.Mutation) error {
	return c.eval(ctx)
}

// OnMutationOperation evaluates the given rule only on a given mutation operation.
func OnMutationOperation(rule MutationRule, op ent.Op) MutationRule {
	return MutationRuleFunc(func(ctx context.Context, m ent.Mutation) error {
		if m.Op().Is(op) {
			return rule.EvalMutation(ctx, m)
		}
		return Skip
	})
}

// DenyMutationOperationRule returns a rule denying specified mutation operation.
func DenyMutationOperationRule(op ent.Op) MutationRule {
	rule := MutationRuleFunc(func(_ context.Context, m ent.Mutation) error {
		return Denyf("ent/privacy: operation %s is not allowed", m.Op())
	})
	return OnMutationOperation(rule, op)
}

// The AuthQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AuthQueryRuleFunc func(context.Context, *ent.AuthQuery) error

// EvalQuery return f(ctx, q).
func (f AuthQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AuthQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.AuthQuery", q)
}

// The AuthMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AuthMutationRuleFunc func(context.Context, *ent.AuthMutation) error

// EvalMutation calls f(ctx, m).
func (f AuthMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.AuthMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.AuthMutation", m)
}

// The HPAmebloPostQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type HPAmebloPostQueryRuleFunc func(context.Context, *ent.HPAmebloPostQuery) error

// EvalQuery return f(ctx, q).
func (f HPAmebloPostQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.HPAmebloPostQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.HPAmebloPostQuery", q)
}

// The HPAmebloPostMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type HPAmebloPostMutationRuleFunc func(context.Context, *ent.HPAmebloPostMutation) error

// EvalMutation calls f(ctx, m).
func (f HPAmebloPostMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.HPAmebloPostMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.HPAmebloPostMutation", m)
}

// The HPArtistQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type HPArtistQueryRuleFunc func(context.Context, *ent.HPArtistQuery) error

// EvalQuery return f(ctx, q).
func (f HPArtistQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.HPArtistQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.HPArtistQuery", q)
}

// The HPArtistMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type HPArtistMutationRuleFunc func(context.Context, *ent.HPArtistMutation) error

// EvalMutation calls f(ctx, m).
func (f HPArtistMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.HPArtistMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.HPArtistMutation", m)
}

// The HPAssetQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type HPAssetQueryRuleFunc func(context.Context, *ent.HPAssetQuery) error

// EvalQuery return f(ctx, q).
func (f HPAssetQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.HPAssetQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.HPAssetQuery", q)
}

// The HPAssetMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type HPAssetMutationRuleFunc func(context.Context, *ent.HPAssetMutation) error

// EvalMutation calls f(ctx, m).
func (f HPAssetMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.HPAssetMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.HPAssetMutation", m)
}

// The HPBlobQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type HPBlobQueryRuleFunc func(context.Context, *ent.HPBlobQuery) error

// EvalQuery return f(ctx, q).
func (f HPBlobQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.HPBlobQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.HPBlobQuery", q)
}

// The HPBlobMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type HPBlobMutationRuleFunc func(context.Context, *ent.HPBlobMutation) error

// EvalMutation calls f(ctx, m).
func (f HPBlobMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.HPBlobMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.HPBlobMutation", m)
}

// The HPElineupMallItemQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type HPElineupMallItemQueryRuleFunc func(context.Context, *ent.HPElineupMallItemQuery) error

// EvalQuery return f(ctx, q).
func (f HPElineupMallItemQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.HPElineupMallItemQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.HPElineupMallItemQuery", q)
}

// The HPElineupMallItemMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type HPElineupMallItemMutationRuleFunc func(context.Context, *ent.HPElineupMallItemMutation) error

// EvalMutation calls f(ctx, m).
func (f HPElineupMallItemMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.HPElineupMallItemMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.HPElineupMallItemMutation", m)
}

// The HPElineupMallItemPurchaseHistoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type HPElineupMallItemPurchaseHistoryQueryRuleFunc func(context.Context, *ent.HPElineupMallItemPurchaseHistoryQuery) error

// EvalQuery return f(ctx, q).
func (f HPElineupMallItemPurchaseHistoryQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.HPElineupMallItemPurchaseHistoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.HPElineupMallItemPurchaseHistoryQuery", q)
}

// The HPElineupMallItemPurchaseHistoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type HPElineupMallItemPurchaseHistoryMutationRuleFunc func(context.Context, *ent.HPElineupMallItemPurchaseHistoryMutation) error

// EvalMutation calls f(ctx, m).
func (f HPElineupMallItemPurchaseHistoryMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.HPElineupMallItemPurchaseHistoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.HPElineupMallItemPurchaseHistoryMutation", m)
}

// The HPEventQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type HPEventQueryRuleFunc func(context.Context, *ent.HPEventQuery) error

// EvalQuery return f(ctx, q).
func (f HPEventQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.HPEventQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.HPEventQuery", q)
}

// The HPEventMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type HPEventMutationRuleFunc func(context.Context, *ent.HPEventMutation) error

// EvalMutation calls f(ctx, m).
func (f HPEventMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.HPEventMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.HPEventMutation", m)
}

// The HPFCEventTicketQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type HPFCEventTicketQueryRuleFunc func(context.Context, *ent.HPFCEventTicketQuery) error

// EvalQuery return f(ctx, q).
func (f HPFCEventTicketQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.HPFCEventTicketQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.HPFCEventTicketQuery", q)
}

// The HPFCEventTicketMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type HPFCEventTicketMutationRuleFunc func(context.Context, *ent.HPFCEventTicketMutation) error

// EvalMutation calls f(ctx, m).
func (f HPFCEventTicketMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.HPFCEventTicketMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.HPFCEventTicketMutation", m)
}

// The HPFeedItemQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type HPFeedItemQueryRuleFunc func(context.Context, *ent.HPFeedItemQuery) error

// EvalQuery return f(ctx, q).
func (f HPFeedItemQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.HPFeedItemQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.HPFeedItemQuery", q)
}

// The HPFeedItemMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type HPFeedItemMutationRuleFunc func(context.Context, *ent.HPFeedItemMutation) error

// EvalMutation calls f(ctx, m).
func (f HPFeedItemMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.HPFeedItemMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.HPFeedItemMutation", m)
}

// The HPFollowQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type HPFollowQueryRuleFunc func(context.Context, *ent.HPFollowQuery) error

// EvalQuery return f(ctx, q).
func (f HPFollowQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.HPFollowQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.HPFollowQuery", q)
}

// The HPFollowMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type HPFollowMutationRuleFunc func(context.Context, *ent.HPFollowMutation) error

// EvalMutation calls f(ctx, m).
func (f HPFollowMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.HPFollowMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.HPFollowMutation", m)
}

// The HPIgPostQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type HPIgPostQueryRuleFunc func(context.Context, *ent.HPIgPostQuery) error

// EvalQuery return f(ctx, q).
func (f HPIgPostQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.HPIgPostQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.HPIgPostQuery", q)
}

// The HPIgPostMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type HPIgPostMutationRuleFunc func(context.Context, *ent.HPIgPostMutation) error

// EvalMutation calls f(ctx, m).
func (f HPIgPostMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.HPIgPostMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.HPIgPostMutation", m)
}

// The HPMemberQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type HPMemberQueryRuleFunc func(context.Context, *ent.HPMemberQuery) error

// EvalQuery return f(ctx, q).
func (f HPMemberQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.HPMemberQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.HPMemberQuery", q)
}

// The HPMemberMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type HPMemberMutationRuleFunc func(context.Context, *ent.HPMemberMutation) error

// EvalMutation calls f(ctx, m).
func (f HPMemberMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.HPMemberMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.HPMemberMutation", m)
}

// The HPSortHistoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type HPSortHistoryQueryRuleFunc func(context.Context, *ent.HPSortHistoryQuery) error

// EvalQuery return f(ctx, q).
func (f HPSortHistoryQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.HPSortHistoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.HPSortHistoryQuery", q)
}

// The HPSortHistoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type HPSortHistoryMutationRuleFunc func(context.Context, *ent.HPSortHistoryMutation) error

// EvalMutation calls f(ctx, m).
func (f HPSortHistoryMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.HPSortHistoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.HPSortHistoryMutation", m)
}

// The HPViewHistoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type HPViewHistoryQueryRuleFunc func(context.Context, *ent.HPViewHistoryQuery) error

// EvalQuery return f(ctx, q).
func (f HPViewHistoryQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.HPViewHistoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.HPViewHistoryQuery", q)
}

// The HPViewHistoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type HPViewHistoryMutationRuleFunc func(context.Context, *ent.HPViewHistoryMutation) error

// EvalMutation calls f(ctx, m).
func (f HPViewHistoryMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.HPViewHistoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.HPViewHistoryMutation", m)
}

// The MetricQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type MetricQueryRuleFunc func(context.Context, *ent.MetricQuery) error

// EvalQuery return f(ctx, q).
func (f MetricQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.MetricQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.MetricQuery", q)
}

// The MetricMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type MetricMutationRuleFunc func(context.Context, *ent.MetricMutation) error

// EvalMutation calls f(ctx, m).
func (f MetricMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.MetricMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.MetricMutation", m)
}

// The MetricDryRunQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type MetricDryRunQueryRuleFunc func(context.Context, *ent.MetricDryRunQuery) error

// EvalQuery return f(ctx, q).
func (f MetricDryRunQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.MetricDryRunQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.MetricDryRunQuery", q)
}

// The MetricDryRunMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type MetricDryRunMutationRuleFunc func(context.Context, *ent.MetricDryRunMutation) error

// EvalMutation calls f(ctx, m).
func (f MetricDryRunMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.MetricDryRunMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.MetricDryRunMutation", m)
}

// The TestEntQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type TestEntQueryRuleFunc func(context.Context, *ent.TestEntQuery) error

// EvalQuery return f(ctx, q).
func (f TestEntQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.TestEntQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.TestEntQuery", q)
}

// The TestEntMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type TestEntMutationRuleFunc func(context.Context, *ent.TestEntMutation) error

// EvalMutation calls f(ctx, m).
func (f TestEntMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.TestEntMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.TestEntMutation", m)
}

// The UserQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type UserQueryRuleFunc func(context.Context, *ent.UserQuery) error

// EvalQuery return f(ctx, q).
func (f UserQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.UserQuery", q)
}

// The UserMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type UserMutationRuleFunc func(context.Context, *ent.UserMutation) error

// EvalMutation calls f(ctx, m).
func (f UserMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.UserMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.UserMutation", m)
}

// The UserNotificationLogQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type UserNotificationLogQueryRuleFunc func(context.Context, *ent.UserNotificationLogQuery) error

// EvalQuery return f(ctx, q).
func (f UserNotificationLogQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserNotificationLogQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.UserNotificationLogQuery", q)
}

// The UserNotificationLogMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type UserNotificationLogMutationRuleFunc func(context.Context, *ent.UserNotificationLogMutation) error

// EvalMutation calls f(ctx, m).
func (f UserNotificationLogMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.UserNotificationLogMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.UserNotificationLogMutation", m)
}

// The UserNotificationSettingQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type UserNotificationSettingQueryRuleFunc func(context.Context, *ent.UserNotificationSettingQuery) error

// EvalQuery return f(ctx, q).
func (f UserNotificationSettingQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserNotificationSettingQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.UserNotificationSettingQuery", q)
}

// The UserNotificationSettingMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type UserNotificationSettingMutationRuleFunc func(context.Context, *ent.UserNotificationSettingMutation) error

// EvalMutation calls f(ctx, m).
func (f UserNotificationSettingMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.UserNotificationSettingMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.UserNotificationSettingMutation", m)
}

type (
	// Filter is the interface that wraps the Where function
	// for filtering nodes in queries and mutations.
	Filter interface {
		// Where applies a filter on the executed query/mutation.
		Where(entql.P)
	}

	// The FilterFunc type is an adapter that allows the use of ordinary
	// functions as filters for query and mutation types.
	FilterFunc func(context.Context, Filter) error
)

// EvalQuery calls f(ctx, q) if the query implements the Filter interface, otherwise it is denied.
func (f FilterFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	fr, err := queryFilter(q)
	if err != nil {
		return err
	}
	return f(ctx, fr)
}

// EvalMutation calls f(ctx, q) if the mutation implements the Filter interface, otherwise it is denied.
func (f FilterFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	fr, err := mutationFilter(m)
	if err != nil {
		return err
	}
	return f(ctx, fr)
}

var _ QueryMutationRule = FilterFunc(nil)

func queryFilter(q ent.Query) (Filter, error) {
	switch q := q.(type) {
	case *ent.AuthQuery:
		return q.Filter(), nil
	case *ent.HPAmebloPostQuery:
		return q.Filter(), nil
	case *ent.HPArtistQuery:
		return q.Filter(), nil
	case *ent.HPAssetQuery:
		return q.Filter(), nil
	case *ent.HPBlobQuery:
		return q.Filter(), nil
	case *ent.HPElineupMallItemQuery:
		return q.Filter(), nil
	case *ent.HPElineupMallItemPurchaseHistoryQuery:
		return q.Filter(), nil
	case *ent.HPEventQuery:
		return q.Filter(), nil
	case *ent.HPFCEventTicketQuery:
		return q.Filter(), nil
	case *ent.HPFeedItemQuery:
		return q.Filter(), nil
	case *ent.HPFollowQuery:
		return q.Filter(), nil
	case *ent.HPIgPostQuery:
		return q.Filter(), nil
	case *ent.HPMemberQuery:
		return q.Filter(), nil
	case *ent.HPSortHistoryQuery:
		return q.Filter(), nil
	case *ent.HPViewHistoryQuery:
		return q.Filter(), nil
	case *ent.MetricQuery:
		return q.Filter(), nil
	case *ent.MetricDryRunQuery:
		return q.Filter(), nil
	case *ent.TestEntQuery:
		return q.Filter(), nil
	case *ent.UserQuery:
		return q.Filter(), nil
	case *ent.UserNotificationLogQuery:
		return q.Filter(), nil
	case *ent.UserNotificationSettingQuery:
		return q.Filter(), nil
	default:
		return nil, Denyf("ent/privacy: unexpected query type %T for query filter", q)
	}
}

func mutationFilter(m ent.Mutation) (Filter, error) {
	switch m := m.(type) {
	case *ent.AuthMutation:
		return m.Filter(), nil
	case *ent.HPAmebloPostMutation:
		return m.Filter(), nil
	case *ent.HPArtistMutation:
		return m.Filter(), nil
	case *ent.HPAssetMutation:
		return m.Filter(), nil
	case *ent.HPBlobMutation:
		return m.Filter(), nil
	case *ent.HPElineupMallItemMutation:
		return m.Filter(), nil
	case *ent.HPElineupMallItemPurchaseHistoryMutation:
		return m.Filter(), nil
	case *ent.HPEventMutation:
		return m.Filter(), nil
	case *ent.HPFCEventTicketMutation:
		return m.Filter(), nil
	case *ent.HPFeedItemMutation:
		return m.Filter(), nil
	case *ent.HPFollowMutation:
		return m.Filter(), nil
	case *ent.HPIgPostMutation:
		return m.Filter(), nil
	case *ent.HPMemberMutation:
		return m.Filter(), nil
	case *ent.HPSortHistoryMutation:
		return m.Filter(), nil
	case *ent.HPViewHistoryMutation:
		return m.Filter(), nil
	case *ent.MetricMutation:
		return m.Filter(), nil
	case *ent.MetricDryRunMutation:
		return m.Filter(), nil
	case *ent.TestEntMutation:
		return m.Filter(), nil
	case *ent.UserMutation:
		return m.Filter(), nil
	case *ent.UserNotificationLogMutation:
		return m.Filter(), nil
	case *ent.UserNotificationSettingMutation:
		return m.Filter(), nil
	default:
		return nil, Denyf("ent/privacy: unexpected mutation type %T for mutation filter", m)
	}
}
