// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/yssk22/hpapp/go/service/ent/hpartist"
	"github.com/yssk22/hpapp/go/service/ent/hpasset"
	"github.com/yssk22/hpapp/go/service/ent/hpigpost"
	"github.com/yssk22/hpapp/go/service/ent/hpmember"
	"github.com/yssk22/hpapp/go/service/schema/jsonfields"
)

// HPIgPost is the model entity for the HPIgPost schema.
type HPIgPost struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CrawledAt holds the value of the "crawled_at" field.
	CrawledAt *time.Time `json:"crawled_at,omitempty"`
	// ErrorCount holds the value of the "error_count" field.
	ErrorCount int `json:"error_count,omitempty"`
	// ManuallyModified holds the value of the "manually_modified" field.
	ManuallyModified *jsonfields.ManuallyModified `json:"manually_modified,omitempty"`
	// LastErrorMessage holds the value of the "last_error_message" field.
	LastErrorMessage *string `json:"last_error_message,omitempty"`
	// RecrawlRequired holds the value of the "recrawl_required" field.
	RecrawlRequired bool `json:"recrawl_required,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Shortcode holds the value of the "shortcode" field.
	Shortcode string `json:"shortcode,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// PostAt holds the value of the "post_at" field.
	PostAt time.Time `json:"post_at,omitempty"`
	// Media holds the value of the "media" field.
	Media []jsonfields.Media `json:"media,omitempty"`
	// Likes holds the value of the "likes" field.
	Likes int `json:"likes,omitempty"`
	// Comments holds the value of the "comments" field.
	Comments int `json:"comments,omitempty"`
	// RecrawlArgs holds the value of the "recrawl_args" field.
	RecrawlArgs *jsonfields.HPIgCrawlArgs `json:"recrawl_args,omitempty"`
	// OwnerArtistID holds the value of the "owner_artist_id" field.
	OwnerArtistID *int `json:"owner_artist_id,omitempty"`
	// OwnerMemberID holds the value of the "owner_member_id" field.
	OwnerMemberID *int `json:"owner_member_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HPIgPostQuery when eager-loading is set.
	Edges             HPIgPostEdges `json:"edges"`
	hp_asset_ig_posts *int
	selectValues      sql.SelectValues
}

// HPIgPostEdges holds the relations/edges for other nodes in the graph.
type HPIgPostEdges struct {
	// OwnerArtist holds the value of the owner_artist edge.
	OwnerArtist *HPArtist `json:"owner_artist,omitempty"`
	// OwnerMember holds the value of the owner_member edge.
	OwnerMember *HPMember `json:"owner_member,omitempty"`
	// Asset holds the value of the asset edge.
	Asset *HPAsset `json:"asset,omitempty"`
	// TaggedArtists holds the value of the tagged_artists edge.
	TaggedArtists []*HPArtist `json:"tagged_artists,omitempty"`
	// TaggedMembers holds the value of the tagged_members edge.
	TaggedMembers []*HPMember `json:"tagged_members,omitempty"`
	// Blobs holds the value of the blobs edge.
	Blobs []*HPBlob `json:"blobs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
	// totalCount holds the count of the edges above.
	totalCount [5]map[string]int

	namedTaggedArtists map[string][]*HPArtist
	namedTaggedMembers map[string][]*HPMember
	namedBlobs         map[string][]*HPBlob
}

// OwnerArtistOrErr returns the OwnerArtist value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HPIgPostEdges) OwnerArtistOrErr() (*HPArtist, error) {
	if e.loadedTypes[0] {
		if e.OwnerArtist == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: hpartist.Label}
		}
		return e.OwnerArtist, nil
	}
	return nil, &NotLoadedError{edge: "owner_artist"}
}

// OwnerMemberOrErr returns the OwnerMember value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HPIgPostEdges) OwnerMemberOrErr() (*HPMember, error) {
	if e.loadedTypes[1] {
		if e.OwnerMember == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: hpmember.Label}
		}
		return e.OwnerMember, nil
	}
	return nil, &NotLoadedError{edge: "owner_member"}
}

// AssetOrErr returns the Asset value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HPIgPostEdges) AssetOrErr() (*HPAsset, error) {
	if e.loadedTypes[2] {
		if e.Asset == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: hpasset.Label}
		}
		return e.Asset, nil
	}
	return nil, &NotLoadedError{edge: "asset"}
}

// TaggedArtistsOrErr returns the TaggedArtists value or an error if the edge
// was not loaded in eager-loading.
func (e HPIgPostEdges) TaggedArtistsOrErr() ([]*HPArtist, error) {
	if e.loadedTypes[3] {
		return e.TaggedArtists, nil
	}
	return nil, &NotLoadedError{edge: "tagged_artists"}
}

// TaggedMembersOrErr returns the TaggedMembers value or an error if the edge
// was not loaded in eager-loading.
func (e HPIgPostEdges) TaggedMembersOrErr() ([]*HPMember, error) {
	if e.loadedTypes[4] {
		return e.TaggedMembers, nil
	}
	return nil, &NotLoadedError{edge: "tagged_members"}
}

// BlobsOrErr returns the Blobs value or an error if the edge
// was not loaded in eager-loading.
func (e HPIgPostEdges) BlobsOrErr() ([]*HPBlob, error) {
	if e.loadedTypes[5] {
		return e.Blobs, nil
	}
	return nil, &NotLoadedError{edge: "blobs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*HPIgPost) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case hpigpost.FieldManuallyModified, hpigpost.FieldMedia, hpigpost.FieldRecrawlArgs:
			values[i] = new([]byte)
		case hpigpost.FieldRecrawlRequired:
			values[i] = new(sql.NullBool)
		case hpigpost.FieldID, hpigpost.FieldErrorCount, hpigpost.FieldLikes, hpigpost.FieldComments, hpigpost.FieldOwnerArtistID, hpigpost.FieldOwnerMemberID:
			values[i] = new(sql.NullInt64)
		case hpigpost.FieldLastErrorMessage, hpigpost.FieldShortcode, hpigpost.FieldDescription:
			values[i] = new(sql.NullString)
		case hpigpost.FieldCrawledAt, hpigpost.FieldCreatedAt, hpigpost.FieldUpdatedAt, hpigpost.FieldPostAt:
			values[i] = new(sql.NullTime)
		case hpigpost.ForeignKeys[0]: // hp_asset_ig_posts
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the HPIgPost fields.
func (hip *HPIgPost) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case hpigpost.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			hip.ID = int(value.Int64)
		case hpigpost.FieldCrawledAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field crawled_at", values[i])
			} else if value.Valid {
				hip.CrawledAt = new(time.Time)
				*hip.CrawledAt = value.Time
			}
		case hpigpost.FieldErrorCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field error_count", values[i])
			} else if value.Valid {
				hip.ErrorCount = int(value.Int64)
			}
		case hpigpost.FieldManuallyModified:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field manually_modified", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &hip.ManuallyModified); err != nil {
					return fmt.Errorf("unmarshal field manually_modified: %w", err)
				}
			}
		case hpigpost.FieldLastErrorMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_error_message", values[i])
			} else if value.Valid {
				hip.LastErrorMessage = new(string)
				*hip.LastErrorMessage = value.String
			}
		case hpigpost.FieldRecrawlRequired:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field recrawl_required", values[i])
			} else if value.Valid {
				hip.RecrawlRequired = value.Bool
			}
		case hpigpost.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				hip.CreatedAt = value.Time
			}
		case hpigpost.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				hip.UpdatedAt = value.Time
			}
		case hpigpost.FieldShortcode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shortcode", values[i])
			} else if value.Valid {
				hip.Shortcode = value.String
			}
		case hpigpost.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				hip.Description = value.String
			}
		case hpigpost.FieldPostAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field post_at", values[i])
			} else if value.Valid {
				hip.PostAt = value.Time
			}
		case hpigpost.FieldMedia:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field media", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &hip.Media); err != nil {
					return fmt.Errorf("unmarshal field media: %w", err)
				}
			}
		case hpigpost.FieldLikes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field likes", values[i])
			} else if value.Valid {
				hip.Likes = int(value.Int64)
			}
		case hpigpost.FieldComments:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field comments", values[i])
			} else if value.Valid {
				hip.Comments = int(value.Int64)
			}
		case hpigpost.FieldRecrawlArgs:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field recrawl_args", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &hip.RecrawlArgs); err != nil {
					return fmt.Errorf("unmarshal field recrawl_args: %w", err)
				}
			}
		case hpigpost.FieldOwnerArtistID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field owner_artist_id", values[i])
			} else if value.Valid {
				hip.OwnerArtistID = new(int)
				*hip.OwnerArtistID = int(value.Int64)
			}
		case hpigpost.FieldOwnerMemberID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field owner_member_id", values[i])
			} else if value.Valid {
				hip.OwnerMemberID = new(int)
				*hip.OwnerMemberID = int(value.Int64)
			}
		case hpigpost.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field hp_asset_ig_posts", value)
			} else if value.Valid {
				hip.hp_asset_ig_posts = new(int)
				*hip.hp_asset_ig_posts = int(value.Int64)
			}
		default:
			hip.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the HPIgPost.
// This includes values selected through modifiers, order, etc.
func (hip *HPIgPost) Value(name string) (ent.Value, error) {
	return hip.selectValues.Get(name)
}

// QueryOwnerArtist queries the "owner_artist" edge of the HPIgPost entity.
func (hip *HPIgPost) QueryOwnerArtist() *HPArtistQuery {
	return NewHPIgPostClient(hip.config).QueryOwnerArtist(hip)
}

// QueryOwnerMember queries the "owner_member" edge of the HPIgPost entity.
func (hip *HPIgPost) QueryOwnerMember() *HPMemberQuery {
	return NewHPIgPostClient(hip.config).QueryOwnerMember(hip)
}

// QueryAsset queries the "asset" edge of the HPIgPost entity.
func (hip *HPIgPost) QueryAsset() *HPAssetQuery {
	return NewHPIgPostClient(hip.config).QueryAsset(hip)
}

// QueryTaggedArtists queries the "tagged_artists" edge of the HPIgPost entity.
func (hip *HPIgPost) QueryTaggedArtists() *HPArtistQuery {
	return NewHPIgPostClient(hip.config).QueryTaggedArtists(hip)
}

// QueryTaggedMembers queries the "tagged_members" edge of the HPIgPost entity.
func (hip *HPIgPost) QueryTaggedMembers() *HPMemberQuery {
	return NewHPIgPostClient(hip.config).QueryTaggedMembers(hip)
}

// QueryBlobs queries the "blobs" edge of the HPIgPost entity.
func (hip *HPIgPost) QueryBlobs() *HPBlobQuery {
	return NewHPIgPostClient(hip.config).QueryBlobs(hip)
}

// Update returns a builder for updating this HPIgPost.
// Note that you need to call HPIgPost.Unwrap() before calling this method if this HPIgPost
// was returned from a transaction, and the transaction was committed or rolled back.
func (hip *HPIgPost) Update() *HPIgPostUpdateOne {
	return NewHPIgPostClient(hip.config).UpdateOne(hip)
}

// Unwrap unwraps the HPIgPost entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (hip *HPIgPost) Unwrap() *HPIgPost {
	_tx, ok := hip.config.driver.(*txDriver)
	if !ok {
		panic("ent: HPIgPost is not a transactional entity")
	}
	hip.config.driver = _tx.drv
	return hip
}

// String implements the fmt.Stringer.
func (hip *HPIgPost) String() string {
	var builder strings.Builder
	builder.WriteString("HPIgPost(")
	builder.WriteString(fmt.Sprintf("id=%v, ", hip.ID))
	if v := hip.CrawledAt; v != nil {
		builder.WriteString("crawled_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("error_count=")
	builder.WriteString(fmt.Sprintf("%v", hip.ErrorCount))
	builder.WriteString(", ")
	builder.WriteString("manually_modified=")
	builder.WriteString(fmt.Sprintf("%v", hip.ManuallyModified))
	builder.WriteString(", ")
	if v := hip.LastErrorMessage; v != nil {
		builder.WriteString("last_error_message=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("recrawl_required=")
	builder.WriteString(fmt.Sprintf("%v", hip.RecrawlRequired))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(hip.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(hip.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("shortcode=")
	builder.WriteString(hip.Shortcode)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(hip.Description)
	builder.WriteString(", ")
	builder.WriteString("post_at=")
	builder.WriteString(hip.PostAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("media=")
	builder.WriteString(fmt.Sprintf("%v", hip.Media))
	builder.WriteString(", ")
	builder.WriteString("likes=")
	builder.WriteString(fmt.Sprintf("%v", hip.Likes))
	builder.WriteString(", ")
	builder.WriteString("comments=")
	builder.WriteString(fmt.Sprintf("%v", hip.Comments))
	builder.WriteString(", ")
	builder.WriteString("recrawl_args=")
	builder.WriteString(fmt.Sprintf("%v", hip.RecrawlArgs))
	builder.WriteString(", ")
	if v := hip.OwnerArtistID; v != nil {
		builder.WriteString("owner_artist_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := hip.OwnerMemberID; v != nil {
		builder.WriteString("owner_member_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// NamedTaggedArtists returns the TaggedArtists named value or an error if the edge was not
// loaded in eager-loading with this name.
func (hip *HPIgPost) NamedTaggedArtists(name string) ([]*HPArtist, error) {
	if hip.Edges.namedTaggedArtists == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := hip.Edges.namedTaggedArtists[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (hip *HPIgPost) appendNamedTaggedArtists(name string, edges ...*HPArtist) {
	if hip.Edges.namedTaggedArtists == nil {
		hip.Edges.namedTaggedArtists = make(map[string][]*HPArtist)
	}
	if len(edges) == 0 {
		hip.Edges.namedTaggedArtists[name] = []*HPArtist{}
	} else {
		hip.Edges.namedTaggedArtists[name] = append(hip.Edges.namedTaggedArtists[name], edges...)
	}
}

// NamedTaggedMembers returns the TaggedMembers named value or an error if the edge was not
// loaded in eager-loading with this name.
func (hip *HPIgPost) NamedTaggedMembers(name string) ([]*HPMember, error) {
	if hip.Edges.namedTaggedMembers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := hip.Edges.namedTaggedMembers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (hip *HPIgPost) appendNamedTaggedMembers(name string, edges ...*HPMember) {
	if hip.Edges.namedTaggedMembers == nil {
		hip.Edges.namedTaggedMembers = make(map[string][]*HPMember)
	}
	if len(edges) == 0 {
		hip.Edges.namedTaggedMembers[name] = []*HPMember{}
	} else {
		hip.Edges.namedTaggedMembers[name] = append(hip.Edges.namedTaggedMembers[name], edges...)
	}
}

// NamedBlobs returns the Blobs named value or an error if the edge was not
// loaded in eager-loading with this name.
func (hip *HPIgPost) NamedBlobs(name string) ([]*HPBlob, error) {
	if hip.Edges.namedBlobs == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := hip.Edges.namedBlobs[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (hip *HPIgPost) appendNamedBlobs(name string, edges ...*HPBlob) {
	if hip.Edges.namedBlobs == nil {
		hip.Edges.namedBlobs = make(map[string][]*HPBlob)
	}
	if len(edges) == 0 {
		hip.Edges.namedBlobs[name] = []*HPBlob{}
	} else {
		hip.Edges.namedBlobs[name] = append(hip.Edges.namedBlobs[name], edges...)
	}
}

// HPIgPosts is a parsable slice of HPIgPost.
type HPIgPosts []*HPIgPost
