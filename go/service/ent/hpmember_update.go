// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yssk22/hpapp/go/service/ent/hpameblopost"
	"github.com/yssk22/hpapp/go/service/ent/hpartist"
	"github.com/yssk22/hpapp/go/service/ent/hpasset"
	"github.com/yssk22/hpapp/go/service/ent/hpelineupmallitem"
	"github.com/yssk22/hpapp/go/service/ent/hpfeeditem"
	"github.com/yssk22/hpapp/go/service/ent/hpfollow"
	"github.com/yssk22/hpapp/go/service/ent/hpigpost"
	"github.com/yssk22/hpapp/go/service/ent/hpmember"
	"github.com/yssk22/hpapp/go/service/ent/predicate"
	"github.com/yssk22/hpapp/go/service/schema/jsonfields"
)

// HPMemberUpdate is the builder for updating HPMember entities.
type HPMemberUpdate struct {
	config
	hooks    []Hook
	mutation *HPMemberMutation
}

// Where appends a list predicates to the HPMemberUpdate builder.
func (hmu *HPMemberUpdate) Where(ps ...predicate.HPMember) *HPMemberUpdate {
	hmu.mutation.Where(ps...)
	return hmu
}

// SetCrawledAt sets the "crawled_at" field.
func (hmu *HPMemberUpdate) SetCrawledAt(t time.Time) *HPMemberUpdate {
	hmu.mutation.SetCrawledAt(t)
	return hmu
}

// SetNillableCrawledAt sets the "crawled_at" field if the given value is not nil.
func (hmu *HPMemberUpdate) SetNillableCrawledAt(t *time.Time) *HPMemberUpdate {
	if t != nil {
		hmu.SetCrawledAt(*t)
	}
	return hmu
}

// ClearCrawledAt clears the value of the "crawled_at" field.
func (hmu *HPMemberUpdate) ClearCrawledAt() *HPMemberUpdate {
	hmu.mutation.ClearCrawledAt()
	return hmu
}

// SetErrorCount sets the "error_count" field.
func (hmu *HPMemberUpdate) SetErrorCount(i int) *HPMemberUpdate {
	hmu.mutation.ResetErrorCount()
	hmu.mutation.SetErrorCount(i)
	return hmu
}

// SetNillableErrorCount sets the "error_count" field if the given value is not nil.
func (hmu *HPMemberUpdate) SetNillableErrorCount(i *int) *HPMemberUpdate {
	if i != nil {
		hmu.SetErrorCount(*i)
	}
	return hmu
}

// AddErrorCount adds i to the "error_count" field.
func (hmu *HPMemberUpdate) AddErrorCount(i int) *HPMemberUpdate {
	hmu.mutation.AddErrorCount(i)
	return hmu
}

// SetManuallyModified sets the "manually_modified" field.
func (hmu *HPMemberUpdate) SetManuallyModified(jm *jsonfields.ManuallyModified) *HPMemberUpdate {
	hmu.mutation.SetManuallyModified(jm)
	return hmu
}

// ClearManuallyModified clears the value of the "manually_modified" field.
func (hmu *HPMemberUpdate) ClearManuallyModified() *HPMemberUpdate {
	hmu.mutation.ClearManuallyModified()
	return hmu
}

// SetLastErrorMessage sets the "last_error_message" field.
func (hmu *HPMemberUpdate) SetLastErrorMessage(s string) *HPMemberUpdate {
	hmu.mutation.SetLastErrorMessage(s)
	return hmu
}

// SetNillableLastErrorMessage sets the "last_error_message" field if the given value is not nil.
func (hmu *HPMemberUpdate) SetNillableLastErrorMessage(s *string) *HPMemberUpdate {
	if s != nil {
		hmu.SetLastErrorMessage(*s)
	}
	return hmu
}

// ClearLastErrorMessage clears the value of the "last_error_message" field.
func (hmu *HPMemberUpdate) ClearLastErrorMessage() *HPMemberUpdate {
	hmu.mutation.ClearLastErrorMessage()
	return hmu
}

// SetRecrawlRequired sets the "recrawl_required" field.
func (hmu *HPMemberUpdate) SetRecrawlRequired(b bool) *HPMemberUpdate {
	hmu.mutation.SetRecrawlRequired(b)
	return hmu
}

// SetNillableRecrawlRequired sets the "recrawl_required" field if the given value is not nil.
func (hmu *HPMemberUpdate) SetNillableRecrawlRequired(b *bool) *HPMemberUpdate {
	if b != nil {
		hmu.SetRecrawlRequired(*b)
	}
	return hmu
}

// ClearRecrawlRequired clears the value of the "recrawl_required" field.
func (hmu *HPMemberUpdate) ClearRecrawlRequired() *HPMemberUpdate {
	hmu.mutation.ClearRecrawlRequired()
	return hmu
}

// SetUpdatedAt sets the "updated_at" field.
func (hmu *HPMemberUpdate) SetUpdatedAt(t time.Time) *HPMemberUpdate {
	hmu.mutation.SetUpdatedAt(t)
	return hmu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (hmu *HPMemberUpdate) SetNillableUpdatedAt(t *time.Time) *HPMemberUpdate {
	if t != nil {
		hmu.SetUpdatedAt(*t)
	}
	return hmu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (hmu *HPMemberUpdate) ClearUpdatedAt() *HPMemberUpdate {
	hmu.mutation.ClearUpdatedAt()
	return hmu
}

// SetKey sets the "key" field.
func (hmu *HPMemberUpdate) SetKey(s string) *HPMemberUpdate {
	hmu.mutation.SetKey(s)
	return hmu
}

// SetArtistKey sets the "artist_key" field.
func (hmu *HPMemberUpdate) SetArtistKey(s string) *HPMemberUpdate {
	hmu.mutation.SetArtistKey(s)
	return hmu
}

// SetName sets the "name" field.
func (hmu *HPMemberUpdate) SetName(s string) *HPMemberUpdate {
	hmu.mutation.SetName(s)
	return hmu
}

// SetNameKana sets the "name_kana" field.
func (hmu *HPMemberUpdate) SetNameKana(s string) *HPMemberUpdate {
	hmu.mutation.SetNameKana(s)
	return hmu
}

// SetThumbnailURL sets the "thumbnail_url" field.
func (hmu *HPMemberUpdate) SetThumbnailURL(s string) *HPMemberUpdate {
	hmu.mutation.SetThumbnailURL(s)
	return hmu
}

// SetDateOfBirth sets the "date_of_birth" field.
func (hmu *HPMemberUpdate) SetDateOfBirth(t time.Time) *HPMemberUpdate {
	hmu.mutation.SetDateOfBirth(t)
	return hmu
}

// SetBloodType sets the "blood_type" field.
func (hmu *HPMemberUpdate) SetBloodType(s string) *HPMemberUpdate {
	hmu.mutation.SetBloodType(s)
	return hmu
}

// SetHometown sets the "hometown" field.
func (hmu *HPMemberUpdate) SetHometown(s string) *HPMemberUpdate {
	hmu.mutation.SetHometown(s)
	return hmu
}

// SetJoinAt sets the "join_at" field.
func (hmu *HPMemberUpdate) SetJoinAt(t time.Time) *HPMemberUpdate {
	hmu.mutation.SetJoinAt(t)
	return hmu
}

// SetNillableJoinAt sets the "join_at" field if the given value is not nil.
func (hmu *HPMemberUpdate) SetNillableJoinAt(t *time.Time) *HPMemberUpdate {
	if t != nil {
		hmu.SetJoinAt(*t)
	}
	return hmu
}

// ClearJoinAt clears the value of the "join_at" field.
func (hmu *HPMemberUpdate) ClearJoinAt() *HPMemberUpdate {
	hmu.mutation.ClearJoinAt()
	return hmu
}

// SetGraduateAt sets the "graduate_at" field.
func (hmu *HPMemberUpdate) SetGraduateAt(t time.Time) *HPMemberUpdate {
	hmu.mutation.SetGraduateAt(t)
	return hmu
}

// SetNillableGraduateAt sets the "graduate_at" field if the given value is not nil.
func (hmu *HPMemberUpdate) SetNillableGraduateAt(t *time.Time) *HPMemberUpdate {
	if t != nil {
		hmu.SetGraduateAt(*t)
	}
	return hmu
}

// ClearGraduateAt clears the value of the "graduate_at" field.
func (hmu *HPMemberUpdate) ClearGraduateAt() *HPMemberUpdate {
	hmu.mutation.ClearGraduateAt()
	return hmu
}

// SetArtistID sets the "artist_id" field.
func (hmu *HPMemberUpdate) SetArtistID(i int) *HPMemberUpdate {
	hmu.mutation.SetArtistID(i)
	return hmu
}

// SetNillableArtistID sets the "artist_id" field if the given value is not nil.
func (hmu *HPMemberUpdate) SetNillableArtistID(i *int) *HPMemberUpdate {
	if i != nil {
		hmu.SetArtistID(*i)
	}
	return hmu
}

// ClearArtistID clears the value of the "artist_id" field.
func (hmu *HPMemberUpdate) ClearArtistID() *HPMemberUpdate {
	hmu.mutation.ClearArtistID()
	return hmu
}

// AddAssetIDs adds the "assets" edge to the HPAsset entity by IDs.
func (hmu *HPMemberUpdate) AddAssetIDs(ids ...int) *HPMemberUpdate {
	hmu.mutation.AddAssetIDs(ids...)
	return hmu
}

// AddAssets adds the "assets" edges to the HPAsset entity.
func (hmu *HPMemberUpdate) AddAssets(h ...*HPAsset) *HPMemberUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hmu.AddAssetIDs(ids...)
}

// SetArtist sets the "artist" edge to the HPArtist entity.
func (hmu *HPMemberUpdate) SetArtist(h *HPArtist) *HPMemberUpdate {
	return hmu.SetArtistID(h.ID)
}

// AddOwningFeedIDs adds the "owning_feed" edge to the HPFeedItem entity by IDs.
func (hmu *HPMemberUpdate) AddOwningFeedIDs(ids ...int) *HPMemberUpdate {
	hmu.mutation.AddOwningFeedIDs(ids...)
	return hmu
}

// AddOwningFeed adds the "owning_feed" edges to the HPFeedItem entity.
func (hmu *HPMemberUpdate) AddOwningFeed(h ...*HPFeedItem) *HPMemberUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hmu.AddOwningFeedIDs(ids...)
}

// AddTaggedFeedIDs adds the "tagged_feed" edge to the HPFeedItem entity by IDs.
func (hmu *HPMemberUpdate) AddTaggedFeedIDs(ids ...int) *HPMemberUpdate {
	hmu.mutation.AddTaggedFeedIDs(ids...)
	return hmu
}

// AddTaggedFeed adds the "tagged_feed" edges to the HPFeedItem entity.
func (hmu *HPMemberUpdate) AddTaggedFeed(h ...*HPFeedItem) *HPMemberUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hmu.AddTaggedFeedIDs(ids...)
}

// AddOwningIgPostIDs adds the "owning_ig_posts" edge to the HPIgPost entity by IDs.
func (hmu *HPMemberUpdate) AddOwningIgPostIDs(ids ...int) *HPMemberUpdate {
	hmu.mutation.AddOwningIgPostIDs(ids...)
	return hmu
}

// AddOwningIgPosts adds the "owning_ig_posts" edges to the HPIgPost entity.
func (hmu *HPMemberUpdate) AddOwningIgPosts(h ...*HPIgPost) *HPMemberUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hmu.AddOwningIgPostIDs(ids...)
}

// AddTaggedIgPostIDs adds the "tagged_ig_posts" edge to the HPIgPost entity by IDs.
func (hmu *HPMemberUpdate) AddTaggedIgPostIDs(ids ...int) *HPMemberUpdate {
	hmu.mutation.AddTaggedIgPostIDs(ids...)
	return hmu
}

// AddTaggedIgPosts adds the "tagged_ig_posts" edges to the HPIgPost entity.
func (hmu *HPMemberUpdate) AddTaggedIgPosts(h ...*HPIgPost) *HPMemberUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hmu.AddTaggedIgPostIDs(ids...)
}

// AddOwningAmebloPostIDs adds the "owning_ameblo_posts" edge to the HPAmebloPost entity by IDs.
func (hmu *HPMemberUpdate) AddOwningAmebloPostIDs(ids ...int) *HPMemberUpdate {
	hmu.mutation.AddOwningAmebloPostIDs(ids...)
	return hmu
}

// AddOwningAmebloPosts adds the "owning_ameblo_posts" edges to the HPAmebloPost entity.
func (hmu *HPMemberUpdate) AddOwningAmebloPosts(h ...*HPAmebloPost) *HPMemberUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hmu.AddOwningAmebloPostIDs(ids...)
}

// AddTaggedAmebloPostIDs adds the "tagged_ameblo_posts" edge to the HPAmebloPost entity by IDs.
func (hmu *HPMemberUpdate) AddTaggedAmebloPostIDs(ids ...int) *HPMemberUpdate {
	hmu.mutation.AddTaggedAmebloPostIDs(ids...)
	return hmu
}

// AddTaggedAmebloPosts adds the "tagged_ameblo_posts" edges to the HPAmebloPost entity.
func (hmu *HPMemberUpdate) AddTaggedAmebloPosts(h ...*HPAmebloPost) *HPMemberUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hmu.AddTaggedAmebloPostIDs(ids...)
}

// AddTaggedElineupMallItemIDs adds the "tagged_elineup_mall_items" edge to the HPElineupMallItem entity by IDs.
func (hmu *HPMemberUpdate) AddTaggedElineupMallItemIDs(ids ...int) *HPMemberUpdate {
	hmu.mutation.AddTaggedElineupMallItemIDs(ids...)
	return hmu
}

// AddTaggedElineupMallItems adds the "tagged_elineup_mall_items" edges to the HPElineupMallItem entity.
func (hmu *HPMemberUpdate) AddTaggedElineupMallItems(h ...*HPElineupMallItem) *HPMemberUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hmu.AddTaggedElineupMallItemIDs(ids...)
}

// AddFollowedByIDs adds the "followed_by" edge to the HPFollow entity by IDs.
func (hmu *HPMemberUpdate) AddFollowedByIDs(ids ...int) *HPMemberUpdate {
	hmu.mutation.AddFollowedByIDs(ids...)
	return hmu
}

// AddFollowedBy adds the "followed_by" edges to the HPFollow entity.
func (hmu *HPMemberUpdate) AddFollowedBy(h ...*HPFollow) *HPMemberUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hmu.AddFollowedByIDs(ids...)
}

// Mutation returns the HPMemberMutation object of the builder.
func (hmu *HPMemberUpdate) Mutation() *HPMemberMutation {
	return hmu.mutation
}

// ClearAssets clears all "assets" edges to the HPAsset entity.
func (hmu *HPMemberUpdate) ClearAssets() *HPMemberUpdate {
	hmu.mutation.ClearAssets()
	return hmu
}

// RemoveAssetIDs removes the "assets" edge to HPAsset entities by IDs.
func (hmu *HPMemberUpdate) RemoveAssetIDs(ids ...int) *HPMemberUpdate {
	hmu.mutation.RemoveAssetIDs(ids...)
	return hmu
}

// RemoveAssets removes "assets" edges to HPAsset entities.
func (hmu *HPMemberUpdate) RemoveAssets(h ...*HPAsset) *HPMemberUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hmu.RemoveAssetIDs(ids...)
}

// ClearArtist clears the "artist" edge to the HPArtist entity.
func (hmu *HPMemberUpdate) ClearArtist() *HPMemberUpdate {
	hmu.mutation.ClearArtist()
	return hmu
}

// ClearOwningFeed clears all "owning_feed" edges to the HPFeedItem entity.
func (hmu *HPMemberUpdate) ClearOwningFeed() *HPMemberUpdate {
	hmu.mutation.ClearOwningFeed()
	return hmu
}

// RemoveOwningFeedIDs removes the "owning_feed" edge to HPFeedItem entities by IDs.
func (hmu *HPMemberUpdate) RemoveOwningFeedIDs(ids ...int) *HPMemberUpdate {
	hmu.mutation.RemoveOwningFeedIDs(ids...)
	return hmu
}

// RemoveOwningFeed removes "owning_feed" edges to HPFeedItem entities.
func (hmu *HPMemberUpdate) RemoveOwningFeed(h ...*HPFeedItem) *HPMemberUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hmu.RemoveOwningFeedIDs(ids...)
}

// ClearTaggedFeed clears all "tagged_feed" edges to the HPFeedItem entity.
func (hmu *HPMemberUpdate) ClearTaggedFeed() *HPMemberUpdate {
	hmu.mutation.ClearTaggedFeed()
	return hmu
}

// RemoveTaggedFeedIDs removes the "tagged_feed" edge to HPFeedItem entities by IDs.
func (hmu *HPMemberUpdate) RemoveTaggedFeedIDs(ids ...int) *HPMemberUpdate {
	hmu.mutation.RemoveTaggedFeedIDs(ids...)
	return hmu
}

// RemoveTaggedFeed removes "tagged_feed" edges to HPFeedItem entities.
func (hmu *HPMemberUpdate) RemoveTaggedFeed(h ...*HPFeedItem) *HPMemberUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hmu.RemoveTaggedFeedIDs(ids...)
}

// ClearOwningIgPosts clears all "owning_ig_posts" edges to the HPIgPost entity.
func (hmu *HPMemberUpdate) ClearOwningIgPosts() *HPMemberUpdate {
	hmu.mutation.ClearOwningIgPosts()
	return hmu
}

// RemoveOwningIgPostIDs removes the "owning_ig_posts" edge to HPIgPost entities by IDs.
func (hmu *HPMemberUpdate) RemoveOwningIgPostIDs(ids ...int) *HPMemberUpdate {
	hmu.mutation.RemoveOwningIgPostIDs(ids...)
	return hmu
}

// RemoveOwningIgPosts removes "owning_ig_posts" edges to HPIgPost entities.
func (hmu *HPMemberUpdate) RemoveOwningIgPosts(h ...*HPIgPost) *HPMemberUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hmu.RemoveOwningIgPostIDs(ids...)
}

// ClearTaggedIgPosts clears all "tagged_ig_posts" edges to the HPIgPost entity.
func (hmu *HPMemberUpdate) ClearTaggedIgPosts() *HPMemberUpdate {
	hmu.mutation.ClearTaggedIgPosts()
	return hmu
}

// RemoveTaggedIgPostIDs removes the "tagged_ig_posts" edge to HPIgPost entities by IDs.
func (hmu *HPMemberUpdate) RemoveTaggedIgPostIDs(ids ...int) *HPMemberUpdate {
	hmu.mutation.RemoveTaggedIgPostIDs(ids...)
	return hmu
}

// RemoveTaggedIgPosts removes "tagged_ig_posts" edges to HPIgPost entities.
func (hmu *HPMemberUpdate) RemoveTaggedIgPosts(h ...*HPIgPost) *HPMemberUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hmu.RemoveTaggedIgPostIDs(ids...)
}

// ClearOwningAmebloPosts clears all "owning_ameblo_posts" edges to the HPAmebloPost entity.
func (hmu *HPMemberUpdate) ClearOwningAmebloPosts() *HPMemberUpdate {
	hmu.mutation.ClearOwningAmebloPosts()
	return hmu
}

// RemoveOwningAmebloPostIDs removes the "owning_ameblo_posts" edge to HPAmebloPost entities by IDs.
func (hmu *HPMemberUpdate) RemoveOwningAmebloPostIDs(ids ...int) *HPMemberUpdate {
	hmu.mutation.RemoveOwningAmebloPostIDs(ids...)
	return hmu
}

// RemoveOwningAmebloPosts removes "owning_ameblo_posts" edges to HPAmebloPost entities.
func (hmu *HPMemberUpdate) RemoveOwningAmebloPosts(h ...*HPAmebloPost) *HPMemberUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hmu.RemoveOwningAmebloPostIDs(ids...)
}

// ClearTaggedAmebloPosts clears all "tagged_ameblo_posts" edges to the HPAmebloPost entity.
func (hmu *HPMemberUpdate) ClearTaggedAmebloPosts() *HPMemberUpdate {
	hmu.mutation.ClearTaggedAmebloPosts()
	return hmu
}

// RemoveTaggedAmebloPostIDs removes the "tagged_ameblo_posts" edge to HPAmebloPost entities by IDs.
func (hmu *HPMemberUpdate) RemoveTaggedAmebloPostIDs(ids ...int) *HPMemberUpdate {
	hmu.mutation.RemoveTaggedAmebloPostIDs(ids...)
	return hmu
}

// RemoveTaggedAmebloPosts removes "tagged_ameblo_posts" edges to HPAmebloPost entities.
func (hmu *HPMemberUpdate) RemoveTaggedAmebloPosts(h ...*HPAmebloPost) *HPMemberUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hmu.RemoveTaggedAmebloPostIDs(ids...)
}

// ClearTaggedElineupMallItems clears all "tagged_elineup_mall_items" edges to the HPElineupMallItem entity.
func (hmu *HPMemberUpdate) ClearTaggedElineupMallItems() *HPMemberUpdate {
	hmu.mutation.ClearTaggedElineupMallItems()
	return hmu
}

// RemoveTaggedElineupMallItemIDs removes the "tagged_elineup_mall_items" edge to HPElineupMallItem entities by IDs.
func (hmu *HPMemberUpdate) RemoveTaggedElineupMallItemIDs(ids ...int) *HPMemberUpdate {
	hmu.mutation.RemoveTaggedElineupMallItemIDs(ids...)
	return hmu
}

// RemoveTaggedElineupMallItems removes "tagged_elineup_mall_items" edges to HPElineupMallItem entities.
func (hmu *HPMemberUpdate) RemoveTaggedElineupMallItems(h ...*HPElineupMallItem) *HPMemberUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hmu.RemoveTaggedElineupMallItemIDs(ids...)
}

// ClearFollowedBy clears all "followed_by" edges to the HPFollow entity.
func (hmu *HPMemberUpdate) ClearFollowedBy() *HPMemberUpdate {
	hmu.mutation.ClearFollowedBy()
	return hmu
}

// RemoveFollowedByIDs removes the "followed_by" edge to HPFollow entities by IDs.
func (hmu *HPMemberUpdate) RemoveFollowedByIDs(ids ...int) *HPMemberUpdate {
	hmu.mutation.RemoveFollowedByIDs(ids...)
	return hmu
}

// RemoveFollowedBy removes "followed_by" edges to HPFollow entities.
func (hmu *HPMemberUpdate) RemoveFollowedBy(h ...*HPFollow) *HPMemberUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hmu.RemoveFollowedByIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hmu *HPMemberUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, HPMemberMutation](ctx, hmu.sqlSave, hmu.mutation, hmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hmu *HPMemberUpdate) SaveX(ctx context.Context) int {
	affected, err := hmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hmu *HPMemberUpdate) Exec(ctx context.Context) error {
	_, err := hmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hmu *HPMemberUpdate) ExecX(ctx context.Context) {
	if err := hmu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (hmu *HPMemberUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(hpmember.Table, hpmember.Columns, sqlgraph.NewFieldSpec(hpmember.FieldID, field.TypeInt))
	if ps := hmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hmu.mutation.CrawledAt(); ok {
		_spec.SetField(hpmember.FieldCrawledAt, field.TypeTime, value)
	}
	if hmu.mutation.CrawledAtCleared() {
		_spec.ClearField(hpmember.FieldCrawledAt, field.TypeTime)
	}
	if value, ok := hmu.mutation.ErrorCount(); ok {
		_spec.SetField(hpmember.FieldErrorCount, field.TypeInt, value)
	}
	if value, ok := hmu.mutation.AddedErrorCount(); ok {
		_spec.AddField(hpmember.FieldErrorCount, field.TypeInt, value)
	}
	if value, ok := hmu.mutation.ManuallyModified(); ok {
		_spec.SetField(hpmember.FieldManuallyModified, field.TypeJSON, value)
	}
	if hmu.mutation.ManuallyModifiedCleared() {
		_spec.ClearField(hpmember.FieldManuallyModified, field.TypeJSON)
	}
	if value, ok := hmu.mutation.LastErrorMessage(); ok {
		_spec.SetField(hpmember.FieldLastErrorMessage, field.TypeString, value)
	}
	if hmu.mutation.LastErrorMessageCleared() {
		_spec.ClearField(hpmember.FieldLastErrorMessage, field.TypeString)
	}
	if value, ok := hmu.mutation.RecrawlRequired(); ok {
		_spec.SetField(hpmember.FieldRecrawlRequired, field.TypeBool, value)
	}
	if hmu.mutation.RecrawlRequiredCleared() {
		_spec.ClearField(hpmember.FieldRecrawlRequired, field.TypeBool)
	}
	if hmu.mutation.CreatedAtCleared() {
		_spec.ClearField(hpmember.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := hmu.mutation.UpdatedAt(); ok {
		_spec.SetField(hpmember.FieldUpdatedAt, field.TypeTime, value)
	}
	if hmu.mutation.UpdatedAtCleared() {
		_spec.ClearField(hpmember.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := hmu.mutation.Key(); ok {
		_spec.SetField(hpmember.FieldKey, field.TypeString, value)
	}
	if value, ok := hmu.mutation.ArtistKey(); ok {
		_spec.SetField(hpmember.FieldArtistKey, field.TypeString, value)
	}
	if value, ok := hmu.mutation.Name(); ok {
		_spec.SetField(hpmember.FieldName, field.TypeString, value)
	}
	if value, ok := hmu.mutation.NameKana(); ok {
		_spec.SetField(hpmember.FieldNameKana, field.TypeString, value)
	}
	if value, ok := hmu.mutation.ThumbnailURL(); ok {
		_spec.SetField(hpmember.FieldThumbnailURL, field.TypeString, value)
	}
	if value, ok := hmu.mutation.DateOfBirth(); ok {
		_spec.SetField(hpmember.FieldDateOfBirth, field.TypeTime, value)
	}
	if value, ok := hmu.mutation.BloodType(); ok {
		_spec.SetField(hpmember.FieldBloodType, field.TypeString, value)
	}
	if value, ok := hmu.mutation.Hometown(); ok {
		_spec.SetField(hpmember.FieldHometown, field.TypeString, value)
	}
	if value, ok := hmu.mutation.JoinAt(); ok {
		_spec.SetField(hpmember.FieldJoinAt, field.TypeTime, value)
	}
	if hmu.mutation.JoinAtCleared() {
		_spec.ClearField(hpmember.FieldJoinAt, field.TypeTime)
	}
	if value, ok := hmu.mutation.GraduateAt(); ok {
		_spec.SetField(hpmember.FieldGraduateAt, field.TypeTime, value)
	}
	if hmu.mutation.GraduateAtCleared() {
		_spec.ClearField(hpmember.FieldGraduateAt, field.TypeTime)
	}
	if hmu.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpmember.AssetsTable,
			Columns: hpmember.AssetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpasset.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hmu.mutation.RemovedAssetsIDs(); len(nodes) > 0 && !hmu.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpmember.AssetsTable,
			Columns: hpmember.AssetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpasset.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hmu.mutation.AssetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpmember.AssetsTable,
			Columns: hpmember.AssetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpasset.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hmu.mutation.ArtistCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpmember.ArtistTable,
			Columns: []string{hpmember.ArtistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpartist.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hmu.mutation.ArtistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpmember.ArtistTable,
			Columns: []string{hpmember.ArtistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpartist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hmu.mutation.OwningFeedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpmember.OwningFeedTable,
			Columns: []string{hpmember.OwningFeedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpfeeditem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hmu.mutation.RemovedOwningFeedIDs(); len(nodes) > 0 && !hmu.mutation.OwningFeedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpmember.OwningFeedTable,
			Columns: []string{hpmember.OwningFeedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpfeeditem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hmu.mutation.OwningFeedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpmember.OwningFeedTable,
			Columns: []string{hpmember.OwningFeedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpfeeditem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hmu.mutation.TaggedFeedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpmember.TaggedFeedTable,
			Columns: hpmember.TaggedFeedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpfeeditem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hmu.mutation.RemovedTaggedFeedIDs(); len(nodes) > 0 && !hmu.mutation.TaggedFeedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpmember.TaggedFeedTable,
			Columns: hpmember.TaggedFeedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpfeeditem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hmu.mutation.TaggedFeedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpmember.TaggedFeedTable,
			Columns: hpmember.TaggedFeedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpfeeditem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hmu.mutation.OwningIgPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpmember.OwningIgPostsTable,
			Columns: []string{hpmember.OwningIgPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpigpost.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hmu.mutation.RemovedOwningIgPostsIDs(); len(nodes) > 0 && !hmu.mutation.OwningIgPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpmember.OwningIgPostsTable,
			Columns: []string{hpmember.OwningIgPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpigpost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hmu.mutation.OwningIgPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpmember.OwningIgPostsTable,
			Columns: []string{hpmember.OwningIgPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpigpost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hmu.mutation.TaggedIgPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpmember.TaggedIgPostsTable,
			Columns: hpmember.TaggedIgPostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpigpost.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hmu.mutation.RemovedTaggedIgPostsIDs(); len(nodes) > 0 && !hmu.mutation.TaggedIgPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpmember.TaggedIgPostsTable,
			Columns: hpmember.TaggedIgPostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpigpost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hmu.mutation.TaggedIgPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpmember.TaggedIgPostsTable,
			Columns: hpmember.TaggedIgPostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpigpost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hmu.mutation.OwningAmebloPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpmember.OwningAmebloPostsTable,
			Columns: []string{hpmember.OwningAmebloPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpameblopost.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hmu.mutation.RemovedOwningAmebloPostsIDs(); len(nodes) > 0 && !hmu.mutation.OwningAmebloPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpmember.OwningAmebloPostsTable,
			Columns: []string{hpmember.OwningAmebloPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpameblopost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hmu.mutation.OwningAmebloPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpmember.OwningAmebloPostsTable,
			Columns: []string{hpmember.OwningAmebloPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpameblopost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hmu.mutation.TaggedAmebloPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpmember.TaggedAmebloPostsTable,
			Columns: hpmember.TaggedAmebloPostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpameblopost.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hmu.mutation.RemovedTaggedAmebloPostsIDs(); len(nodes) > 0 && !hmu.mutation.TaggedAmebloPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpmember.TaggedAmebloPostsTable,
			Columns: hpmember.TaggedAmebloPostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpameblopost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hmu.mutation.TaggedAmebloPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpmember.TaggedAmebloPostsTable,
			Columns: hpmember.TaggedAmebloPostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpameblopost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hmu.mutation.TaggedElineupMallItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpmember.TaggedElineupMallItemsTable,
			Columns: hpmember.TaggedElineupMallItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpelineupmallitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hmu.mutation.RemovedTaggedElineupMallItemsIDs(); len(nodes) > 0 && !hmu.mutation.TaggedElineupMallItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpmember.TaggedElineupMallItemsTable,
			Columns: hpmember.TaggedElineupMallItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpelineupmallitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hmu.mutation.TaggedElineupMallItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpmember.TaggedElineupMallItemsTable,
			Columns: hpmember.TaggedElineupMallItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpelineupmallitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hmu.mutation.FollowedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpmember.FollowedByTable,
			Columns: []string{hpmember.FollowedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpfollow.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hmu.mutation.RemovedFollowedByIDs(); len(nodes) > 0 && !hmu.mutation.FollowedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpmember.FollowedByTable,
			Columns: []string{hpmember.FollowedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpfollow.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hmu.mutation.FollowedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpmember.FollowedByTable,
			Columns: []string{hpmember.FollowedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpfollow.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hpmember.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	hmu.mutation.done = true
	return n, nil
}

// HPMemberUpdateOne is the builder for updating a single HPMember entity.
type HPMemberUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HPMemberMutation
}

// SetCrawledAt sets the "crawled_at" field.
func (hmuo *HPMemberUpdateOne) SetCrawledAt(t time.Time) *HPMemberUpdateOne {
	hmuo.mutation.SetCrawledAt(t)
	return hmuo
}

// SetNillableCrawledAt sets the "crawled_at" field if the given value is not nil.
func (hmuo *HPMemberUpdateOne) SetNillableCrawledAt(t *time.Time) *HPMemberUpdateOne {
	if t != nil {
		hmuo.SetCrawledAt(*t)
	}
	return hmuo
}

// ClearCrawledAt clears the value of the "crawled_at" field.
func (hmuo *HPMemberUpdateOne) ClearCrawledAt() *HPMemberUpdateOne {
	hmuo.mutation.ClearCrawledAt()
	return hmuo
}

// SetErrorCount sets the "error_count" field.
func (hmuo *HPMemberUpdateOne) SetErrorCount(i int) *HPMemberUpdateOne {
	hmuo.mutation.ResetErrorCount()
	hmuo.mutation.SetErrorCount(i)
	return hmuo
}

// SetNillableErrorCount sets the "error_count" field if the given value is not nil.
func (hmuo *HPMemberUpdateOne) SetNillableErrorCount(i *int) *HPMemberUpdateOne {
	if i != nil {
		hmuo.SetErrorCount(*i)
	}
	return hmuo
}

// AddErrorCount adds i to the "error_count" field.
func (hmuo *HPMemberUpdateOne) AddErrorCount(i int) *HPMemberUpdateOne {
	hmuo.mutation.AddErrorCount(i)
	return hmuo
}

// SetManuallyModified sets the "manually_modified" field.
func (hmuo *HPMemberUpdateOne) SetManuallyModified(jm *jsonfields.ManuallyModified) *HPMemberUpdateOne {
	hmuo.mutation.SetManuallyModified(jm)
	return hmuo
}

// ClearManuallyModified clears the value of the "manually_modified" field.
func (hmuo *HPMemberUpdateOne) ClearManuallyModified() *HPMemberUpdateOne {
	hmuo.mutation.ClearManuallyModified()
	return hmuo
}

// SetLastErrorMessage sets the "last_error_message" field.
func (hmuo *HPMemberUpdateOne) SetLastErrorMessage(s string) *HPMemberUpdateOne {
	hmuo.mutation.SetLastErrorMessage(s)
	return hmuo
}

// SetNillableLastErrorMessage sets the "last_error_message" field if the given value is not nil.
func (hmuo *HPMemberUpdateOne) SetNillableLastErrorMessage(s *string) *HPMemberUpdateOne {
	if s != nil {
		hmuo.SetLastErrorMessage(*s)
	}
	return hmuo
}

// ClearLastErrorMessage clears the value of the "last_error_message" field.
func (hmuo *HPMemberUpdateOne) ClearLastErrorMessage() *HPMemberUpdateOne {
	hmuo.mutation.ClearLastErrorMessage()
	return hmuo
}

// SetRecrawlRequired sets the "recrawl_required" field.
func (hmuo *HPMemberUpdateOne) SetRecrawlRequired(b bool) *HPMemberUpdateOne {
	hmuo.mutation.SetRecrawlRequired(b)
	return hmuo
}

// SetNillableRecrawlRequired sets the "recrawl_required" field if the given value is not nil.
func (hmuo *HPMemberUpdateOne) SetNillableRecrawlRequired(b *bool) *HPMemberUpdateOne {
	if b != nil {
		hmuo.SetRecrawlRequired(*b)
	}
	return hmuo
}

// ClearRecrawlRequired clears the value of the "recrawl_required" field.
func (hmuo *HPMemberUpdateOne) ClearRecrawlRequired() *HPMemberUpdateOne {
	hmuo.mutation.ClearRecrawlRequired()
	return hmuo
}

// SetUpdatedAt sets the "updated_at" field.
func (hmuo *HPMemberUpdateOne) SetUpdatedAt(t time.Time) *HPMemberUpdateOne {
	hmuo.mutation.SetUpdatedAt(t)
	return hmuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (hmuo *HPMemberUpdateOne) SetNillableUpdatedAt(t *time.Time) *HPMemberUpdateOne {
	if t != nil {
		hmuo.SetUpdatedAt(*t)
	}
	return hmuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (hmuo *HPMemberUpdateOne) ClearUpdatedAt() *HPMemberUpdateOne {
	hmuo.mutation.ClearUpdatedAt()
	return hmuo
}

// SetKey sets the "key" field.
func (hmuo *HPMemberUpdateOne) SetKey(s string) *HPMemberUpdateOne {
	hmuo.mutation.SetKey(s)
	return hmuo
}

// SetArtistKey sets the "artist_key" field.
func (hmuo *HPMemberUpdateOne) SetArtistKey(s string) *HPMemberUpdateOne {
	hmuo.mutation.SetArtistKey(s)
	return hmuo
}

// SetName sets the "name" field.
func (hmuo *HPMemberUpdateOne) SetName(s string) *HPMemberUpdateOne {
	hmuo.mutation.SetName(s)
	return hmuo
}

// SetNameKana sets the "name_kana" field.
func (hmuo *HPMemberUpdateOne) SetNameKana(s string) *HPMemberUpdateOne {
	hmuo.mutation.SetNameKana(s)
	return hmuo
}

// SetThumbnailURL sets the "thumbnail_url" field.
func (hmuo *HPMemberUpdateOne) SetThumbnailURL(s string) *HPMemberUpdateOne {
	hmuo.mutation.SetThumbnailURL(s)
	return hmuo
}

// SetDateOfBirth sets the "date_of_birth" field.
func (hmuo *HPMemberUpdateOne) SetDateOfBirth(t time.Time) *HPMemberUpdateOne {
	hmuo.mutation.SetDateOfBirth(t)
	return hmuo
}

// SetBloodType sets the "blood_type" field.
func (hmuo *HPMemberUpdateOne) SetBloodType(s string) *HPMemberUpdateOne {
	hmuo.mutation.SetBloodType(s)
	return hmuo
}

// SetHometown sets the "hometown" field.
func (hmuo *HPMemberUpdateOne) SetHometown(s string) *HPMemberUpdateOne {
	hmuo.mutation.SetHometown(s)
	return hmuo
}

// SetJoinAt sets the "join_at" field.
func (hmuo *HPMemberUpdateOne) SetJoinAt(t time.Time) *HPMemberUpdateOne {
	hmuo.mutation.SetJoinAt(t)
	return hmuo
}

// SetNillableJoinAt sets the "join_at" field if the given value is not nil.
func (hmuo *HPMemberUpdateOne) SetNillableJoinAt(t *time.Time) *HPMemberUpdateOne {
	if t != nil {
		hmuo.SetJoinAt(*t)
	}
	return hmuo
}

// ClearJoinAt clears the value of the "join_at" field.
func (hmuo *HPMemberUpdateOne) ClearJoinAt() *HPMemberUpdateOne {
	hmuo.mutation.ClearJoinAt()
	return hmuo
}

// SetGraduateAt sets the "graduate_at" field.
func (hmuo *HPMemberUpdateOne) SetGraduateAt(t time.Time) *HPMemberUpdateOne {
	hmuo.mutation.SetGraduateAt(t)
	return hmuo
}

// SetNillableGraduateAt sets the "graduate_at" field if the given value is not nil.
func (hmuo *HPMemberUpdateOne) SetNillableGraduateAt(t *time.Time) *HPMemberUpdateOne {
	if t != nil {
		hmuo.SetGraduateAt(*t)
	}
	return hmuo
}

// ClearGraduateAt clears the value of the "graduate_at" field.
func (hmuo *HPMemberUpdateOne) ClearGraduateAt() *HPMemberUpdateOne {
	hmuo.mutation.ClearGraduateAt()
	return hmuo
}

// SetArtistID sets the "artist_id" field.
func (hmuo *HPMemberUpdateOne) SetArtistID(i int) *HPMemberUpdateOne {
	hmuo.mutation.SetArtistID(i)
	return hmuo
}

// SetNillableArtistID sets the "artist_id" field if the given value is not nil.
func (hmuo *HPMemberUpdateOne) SetNillableArtistID(i *int) *HPMemberUpdateOne {
	if i != nil {
		hmuo.SetArtistID(*i)
	}
	return hmuo
}

// ClearArtistID clears the value of the "artist_id" field.
func (hmuo *HPMemberUpdateOne) ClearArtistID() *HPMemberUpdateOne {
	hmuo.mutation.ClearArtistID()
	return hmuo
}

// AddAssetIDs adds the "assets" edge to the HPAsset entity by IDs.
func (hmuo *HPMemberUpdateOne) AddAssetIDs(ids ...int) *HPMemberUpdateOne {
	hmuo.mutation.AddAssetIDs(ids...)
	return hmuo
}

// AddAssets adds the "assets" edges to the HPAsset entity.
func (hmuo *HPMemberUpdateOne) AddAssets(h ...*HPAsset) *HPMemberUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hmuo.AddAssetIDs(ids...)
}

// SetArtist sets the "artist" edge to the HPArtist entity.
func (hmuo *HPMemberUpdateOne) SetArtist(h *HPArtist) *HPMemberUpdateOne {
	return hmuo.SetArtistID(h.ID)
}

// AddOwningFeedIDs adds the "owning_feed" edge to the HPFeedItem entity by IDs.
func (hmuo *HPMemberUpdateOne) AddOwningFeedIDs(ids ...int) *HPMemberUpdateOne {
	hmuo.mutation.AddOwningFeedIDs(ids...)
	return hmuo
}

// AddOwningFeed adds the "owning_feed" edges to the HPFeedItem entity.
func (hmuo *HPMemberUpdateOne) AddOwningFeed(h ...*HPFeedItem) *HPMemberUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hmuo.AddOwningFeedIDs(ids...)
}

// AddTaggedFeedIDs adds the "tagged_feed" edge to the HPFeedItem entity by IDs.
func (hmuo *HPMemberUpdateOne) AddTaggedFeedIDs(ids ...int) *HPMemberUpdateOne {
	hmuo.mutation.AddTaggedFeedIDs(ids...)
	return hmuo
}

// AddTaggedFeed adds the "tagged_feed" edges to the HPFeedItem entity.
func (hmuo *HPMemberUpdateOne) AddTaggedFeed(h ...*HPFeedItem) *HPMemberUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hmuo.AddTaggedFeedIDs(ids...)
}

// AddOwningIgPostIDs adds the "owning_ig_posts" edge to the HPIgPost entity by IDs.
func (hmuo *HPMemberUpdateOne) AddOwningIgPostIDs(ids ...int) *HPMemberUpdateOne {
	hmuo.mutation.AddOwningIgPostIDs(ids...)
	return hmuo
}

// AddOwningIgPosts adds the "owning_ig_posts" edges to the HPIgPost entity.
func (hmuo *HPMemberUpdateOne) AddOwningIgPosts(h ...*HPIgPost) *HPMemberUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hmuo.AddOwningIgPostIDs(ids...)
}

// AddTaggedIgPostIDs adds the "tagged_ig_posts" edge to the HPIgPost entity by IDs.
func (hmuo *HPMemberUpdateOne) AddTaggedIgPostIDs(ids ...int) *HPMemberUpdateOne {
	hmuo.mutation.AddTaggedIgPostIDs(ids...)
	return hmuo
}

// AddTaggedIgPosts adds the "tagged_ig_posts" edges to the HPIgPost entity.
func (hmuo *HPMemberUpdateOne) AddTaggedIgPosts(h ...*HPIgPost) *HPMemberUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hmuo.AddTaggedIgPostIDs(ids...)
}

// AddOwningAmebloPostIDs adds the "owning_ameblo_posts" edge to the HPAmebloPost entity by IDs.
func (hmuo *HPMemberUpdateOne) AddOwningAmebloPostIDs(ids ...int) *HPMemberUpdateOne {
	hmuo.mutation.AddOwningAmebloPostIDs(ids...)
	return hmuo
}

// AddOwningAmebloPosts adds the "owning_ameblo_posts" edges to the HPAmebloPost entity.
func (hmuo *HPMemberUpdateOne) AddOwningAmebloPosts(h ...*HPAmebloPost) *HPMemberUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hmuo.AddOwningAmebloPostIDs(ids...)
}

// AddTaggedAmebloPostIDs adds the "tagged_ameblo_posts" edge to the HPAmebloPost entity by IDs.
func (hmuo *HPMemberUpdateOne) AddTaggedAmebloPostIDs(ids ...int) *HPMemberUpdateOne {
	hmuo.mutation.AddTaggedAmebloPostIDs(ids...)
	return hmuo
}

// AddTaggedAmebloPosts adds the "tagged_ameblo_posts" edges to the HPAmebloPost entity.
func (hmuo *HPMemberUpdateOne) AddTaggedAmebloPosts(h ...*HPAmebloPost) *HPMemberUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hmuo.AddTaggedAmebloPostIDs(ids...)
}

// AddTaggedElineupMallItemIDs adds the "tagged_elineup_mall_items" edge to the HPElineupMallItem entity by IDs.
func (hmuo *HPMemberUpdateOne) AddTaggedElineupMallItemIDs(ids ...int) *HPMemberUpdateOne {
	hmuo.mutation.AddTaggedElineupMallItemIDs(ids...)
	return hmuo
}

// AddTaggedElineupMallItems adds the "tagged_elineup_mall_items" edges to the HPElineupMallItem entity.
func (hmuo *HPMemberUpdateOne) AddTaggedElineupMallItems(h ...*HPElineupMallItem) *HPMemberUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hmuo.AddTaggedElineupMallItemIDs(ids...)
}

// AddFollowedByIDs adds the "followed_by" edge to the HPFollow entity by IDs.
func (hmuo *HPMemberUpdateOne) AddFollowedByIDs(ids ...int) *HPMemberUpdateOne {
	hmuo.mutation.AddFollowedByIDs(ids...)
	return hmuo
}

// AddFollowedBy adds the "followed_by" edges to the HPFollow entity.
func (hmuo *HPMemberUpdateOne) AddFollowedBy(h ...*HPFollow) *HPMemberUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hmuo.AddFollowedByIDs(ids...)
}

// Mutation returns the HPMemberMutation object of the builder.
func (hmuo *HPMemberUpdateOne) Mutation() *HPMemberMutation {
	return hmuo.mutation
}

// ClearAssets clears all "assets" edges to the HPAsset entity.
func (hmuo *HPMemberUpdateOne) ClearAssets() *HPMemberUpdateOne {
	hmuo.mutation.ClearAssets()
	return hmuo
}

// RemoveAssetIDs removes the "assets" edge to HPAsset entities by IDs.
func (hmuo *HPMemberUpdateOne) RemoveAssetIDs(ids ...int) *HPMemberUpdateOne {
	hmuo.mutation.RemoveAssetIDs(ids...)
	return hmuo
}

// RemoveAssets removes "assets" edges to HPAsset entities.
func (hmuo *HPMemberUpdateOne) RemoveAssets(h ...*HPAsset) *HPMemberUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hmuo.RemoveAssetIDs(ids...)
}

// ClearArtist clears the "artist" edge to the HPArtist entity.
func (hmuo *HPMemberUpdateOne) ClearArtist() *HPMemberUpdateOne {
	hmuo.mutation.ClearArtist()
	return hmuo
}

// ClearOwningFeed clears all "owning_feed" edges to the HPFeedItem entity.
func (hmuo *HPMemberUpdateOne) ClearOwningFeed() *HPMemberUpdateOne {
	hmuo.mutation.ClearOwningFeed()
	return hmuo
}

// RemoveOwningFeedIDs removes the "owning_feed" edge to HPFeedItem entities by IDs.
func (hmuo *HPMemberUpdateOne) RemoveOwningFeedIDs(ids ...int) *HPMemberUpdateOne {
	hmuo.mutation.RemoveOwningFeedIDs(ids...)
	return hmuo
}

// RemoveOwningFeed removes "owning_feed" edges to HPFeedItem entities.
func (hmuo *HPMemberUpdateOne) RemoveOwningFeed(h ...*HPFeedItem) *HPMemberUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hmuo.RemoveOwningFeedIDs(ids...)
}

// ClearTaggedFeed clears all "tagged_feed" edges to the HPFeedItem entity.
func (hmuo *HPMemberUpdateOne) ClearTaggedFeed() *HPMemberUpdateOne {
	hmuo.mutation.ClearTaggedFeed()
	return hmuo
}

// RemoveTaggedFeedIDs removes the "tagged_feed" edge to HPFeedItem entities by IDs.
func (hmuo *HPMemberUpdateOne) RemoveTaggedFeedIDs(ids ...int) *HPMemberUpdateOne {
	hmuo.mutation.RemoveTaggedFeedIDs(ids...)
	return hmuo
}

// RemoveTaggedFeed removes "tagged_feed" edges to HPFeedItem entities.
func (hmuo *HPMemberUpdateOne) RemoveTaggedFeed(h ...*HPFeedItem) *HPMemberUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hmuo.RemoveTaggedFeedIDs(ids...)
}

// ClearOwningIgPosts clears all "owning_ig_posts" edges to the HPIgPost entity.
func (hmuo *HPMemberUpdateOne) ClearOwningIgPosts() *HPMemberUpdateOne {
	hmuo.mutation.ClearOwningIgPosts()
	return hmuo
}

// RemoveOwningIgPostIDs removes the "owning_ig_posts" edge to HPIgPost entities by IDs.
func (hmuo *HPMemberUpdateOne) RemoveOwningIgPostIDs(ids ...int) *HPMemberUpdateOne {
	hmuo.mutation.RemoveOwningIgPostIDs(ids...)
	return hmuo
}

// RemoveOwningIgPosts removes "owning_ig_posts" edges to HPIgPost entities.
func (hmuo *HPMemberUpdateOne) RemoveOwningIgPosts(h ...*HPIgPost) *HPMemberUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hmuo.RemoveOwningIgPostIDs(ids...)
}

// ClearTaggedIgPosts clears all "tagged_ig_posts" edges to the HPIgPost entity.
func (hmuo *HPMemberUpdateOne) ClearTaggedIgPosts() *HPMemberUpdateOne {
	hmuo.mutation.ClearTaggedIgPosts()
	return hmuo
}

// RemoveTaggedIgPostIDs removes the "tagged_ig_posts" edge to HPIgPost entities by IDs.
func (hmuo *HPMemberUpdateOne) RemoveTaggedIgPostIDs(ids ...int) *HPMemberUpdateOne {
	hmuo.mutation.RemoveTaggedIgPostIDs(ids...)
	return hmuo
}

// RemoveTaggedIgPosts removes "tagged_ig_posts" edges to HPIgPost entities.
func (hmuo *HPMemberUpdateOne) RemoveTaggedIgPosts(h ...*HPIgPost) *HPMemberUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hmuo.RemoveTaggedIgPostIDs(ids...)
}

// ClearOwningAmebloPosts clears all "owning_ameblo_posts" edges to the HPAmebloPost entity.
func (hmuo *HPMemberUpdateOne) ClearOwningAmebloPosts() *HPMemberUpdateOne {
	hmuo.mutation.ClearOwningAmebloPosts()
	return hmuo
}

// RemoveOwningAmebloPostIDs removes the "owning_ameblo_posts" edge to HPAmebloPost entities by IDs.
func (hmuo *HPMemberUpdateOne) RemoveOwningAmebloPostIDs(ids ...int) *HPMemberUpdateOne {
	hmuo.mutation.RemoveOwningAmebloPostIDs(ids...)
	return hmuo
}

// RemoveOwningAmebloPosts removes "owning_ameblo_posts" edges to HPAmebloPost entities.
func (hmuo *HPMemberUpdateOne) RemoveOwningAmebloPosts(h ...*HPAmebloPost) *HPMemberUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hmuo.RemoveOwningAmebloPostIDs(ids...)
}

// ClearTaggedAmebloPosts clears all "tagged_ameblo_posts" edges to the HPAmebloPost entity.
func (hmuo *HPMemberUpdateOne) ClearTaggedAmebloPosts() *HPMemberUpdateOne {
	hmuo.mutation.ClearTaggedAmebloPosts()
	return hmuo
}

// RemoveTaggedAmebloPostIDs removes the "tagged_ameblo_posts" edge to HPAmebloPost entities by IDs.
func (hmuo *HPMemberUpdateOne) RemoveTaggedAmebloPostIDs(ids ...int) *HPMemberUpdateOne {
	hmuo.mutation.RemoveTaggedAmebloPostIDs(ids...)
	return hmuo
}

// RemoveTaggedAmebloPosts removes "tagged_ameblo_posts" edges to HPAmebloPost entities.
func (hmuo *HPMemberUpdateOne) RemoveTaggedAmebloPosts(h ...*HPAmebloPost) *HPMemberUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hmuo.RemoveTaggedAmebloPostIDs(ids...)
}

// ClearTaggedElineupMallItems clears all "tagged_elineup_mall_items" edges to the HPElineupMallItem entity.
func (hmuo *HPMemberUpdateOne) ClearTaggedElineupMallItems() *HPMemberUpdateOne {
	hmuo.mutation.ClearTaggedElineupMallItems()
	return hmuo
}

// RemoveTaggedElineupMallItemIDs removes the "tagged_elineup_mall_items" edge to HPElineupMallItem entities by IDs.
func (hmuo *HPMemberUpdateOne) RemoveTaggedElineupMallItemIDs(ids ...int) *HPMemberUpdateOne {
	hmuo.mutation.RemoveTaggedElineupMallItemIDs(ids...)
	return hmuo
}

// RemoveTaggedElineupMallItems removes "tagged_elineup_mall_items" edges to HPElineupMallItem entities.
func (hmuo *HPMemberUpdateOne) RemoveTaggedElineupMallItems(h ...*HPElineupMallItem) *HPMemberUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hmuo.RemoveTaggedElineupMallItemIDs(ids...)
}

// ClearFollowedBy clears all "followed_by" edges to the HPFollow entity.
func (hmuo *HPMemberUpdateOne) ClearFollowedBy() *HPMemberUpdateOne {
	hmuo.mutation.ClearFollowedBy()
	return hmuo
}

// RemoveFollowedByIDs removes the "followed_by" edge to HPFollow entities by IDs.
func (hmuo *HPMemberUpdateOne) RemoveFollowedByIDs(ids ...int) *HPMemberUpdateOne {
	hmuo.mutation.RemoveFollowedByIDs(ids...)
	return hmuo
}

// RemoveFollowedBy removes "followed_by" edges to HPFollow entities.
func (hmuo *HPMemberUpdateOne) RemoveFollowedBy(h ...*HPFollow) *HPMemberUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hmuo.RemoveFollowedByIDs(ids...)
}

// Where appends a list predicates to the HPMemberUpdate builder.
func (hmuo *HPMemberUpdateOne) Where(ps ...predicate.HPMember) *HPMemberUpdateOne {
	hmuo.mutation.Where(ps...)
	return hmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (hmuo *HPMemberUpdateOne) Select(field string, fields ...string) *HPMemberUpdateOne {
	hmuo.fields = append([]string{field}, fields...)
	return hmuo
}

// Save executes the query and returns the updated HPMember entity.
func (hmuo *HPMemberUpdateOne) Save(ctx context.Context) (*HPMember, error) {
	return withHooks[*HPMember, HPMemberMutation](ctx, hmuo.sqlSave, hmuo.mutation, hmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hmuo *HPMemberUpdateOne) SaveX(ctx context.Context) *HPMember {
	node, err := hmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (hmuo *HPMemberUpdateOne) Exec(ctx context.Context) error {
	_, err := hmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hmuo *HPMemberUpdateOne) ExecX(ctx context.Context) {
	if err := hmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (hmuo *HPMemberUpdateOne) sqlSave(ctx context.Context) (_node *HPMember, err error) {
	_spec := sqlgraph.NewUpdateSpec(hpmember.Table, hpmember.Columns, sqlgraph.NewFieldSpec(hpmember.FieldID, field.TypeInt))
	id, ok := hmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "HPMember.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := hmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hpmember.FieldID)
		for _, f := range fields {
			if !hpmember.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != hpmember.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := hmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hmuo.mutation.CrawledAt(); ok {
		_spec.SetField(hpmember.FieldCrawledAt, field.TypeTime, value)
	}
	if hmuo.mutation.CrawledAtCleared() {
		_spec.ClearField(hpmember.FieldCrawledAt, field.TypeTime)
	}
	if value, ok := hmuo.mutation.ErrorCount(); ok {
		_spec.SetField(hpmember.FieldErrorCount, field.TypeInt, value)
	}
	if value, ok := hmuo.mutation.AddedErrorCount(); ok {
		_spec.AddField(hpmember.FieldErrorCount, field.TypeInt, value)
	}
	if value, ok := hmuo.mutation.ManuallyModified(); ok {
		_spec.SetField(hpmember.FieldManuallyModified, field.TypeJSON, value)
	}
	if hmuo.mutation.ManuallyModifiedCleared() {
		_spec.ClearField(hpmember.FieldManuallyModified, field.TypeJSON)
	}
	if value, ok := hmuo.mutation.LastErrorMessage(); ok {
		_spec.SetField(hpmember.FieldLastErrorMessage, field.TypeString, value)
	}
	if hmuo.mutation.LastErrorMessageCleared() {
		_spec.ClearField(hpmember.FieldLastErrorMessage, field.TypeString)
	}
	if value, ok := hmuo.mutation.RecrawlRequired(); ok {
		_spec.SetField(hpmember.FieldRecrawlRequired, field.TypeBool, value)
	}
	if hmuo.mutation.RecrawlRequiredCleared() {
		_spec.ClearField(hpmember.FieldRecrawlRequired, field.TypeBool)
	}
	if hmuo.mutation.CreatedAtCleared() {
		_spec.ClearField(hpmember.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := hmuo.mutation.UpdatedAt(); ok {
		_spec.SetField(hpmember.FieldUpdatedAt, field.TypeTime, value)
	}
	if hmuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(hpmember.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := hmuo.mutation.Key(); ok {
		_spec.SetField(hpmember.FieldKey, field.TypeString, value)
	}
	if value, ok := hmuo.mutation.ArtistKey(); ok {
		_spec.SetField(hpmember.FieldArtistKey, field.TypeString, value)
	}
	if value, ok := hmuo.mutation.Name(); ok {
		_spec.SetField(hpmember.FieldName, field.TypeString, value)
	}
	if value, ok := hmuo.mutation.NameKana(); ok {
		_spec.SetField(hpmember.FieldNameKana, field.TypeString, value)
	}
	if value, ok := hmuo.mutation.ThumbnailURL(); ok {
		_spec.SetField(hpmember.FieldThumbnailURL, field.TypeString, value)
	}
	if value, ok := hmuo.mutation.DateOfBirth(); ok {
		_spec.SetField(hpmember.FieldDateOfBirth, field.TypeTime, value)
	}
	if value, ok := hmuo.mutation.BloodType(); ok {
		_spec.SetField(hpmember.FieldBloodType, field.TypeString, value)
	}
	if value, ok := hmuo.mutation.Hometown(); ok {
		_spec.SetField(hpmember.FieldHometown, field.TypeString, value)
	}
	if value, ok := hmuo.mutation.JoinAt(); ok {
		_spec.SetField(hpmember.FieldJoinAt, field.TypeTime, value)
	}
	if hmuo.mutation.JoinAtCleared() {
		_spec.ClearField(hpmember.FieldJoinAt, field.TypeTime)
	}
	if value, ok := hmuo.mutation.GraduateAt(); ok {
		_spec.SetField(hpmember.FieldGraduateAt, field.TypeTime, value)
	}
	if hmuo.mutation.GraduateAtCleared() {
		_spec.ClearField(hpmember.FieldGraduateAt, field.TypeTime)
	}
	if hmuo.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpmember.AssetsTable,
			Columns: hpmember.AssetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpasset.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hmuo.mutation.RemovedAssetsIDs(); len(nodes) > 0 && !hmuo.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpmember.AssetsTable,
			Columns: hpmember.AssetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpasset.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hmuo.mutation.AssetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpmember.AssetsTable,
			Columns: hpmember.AssetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpasset.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hmuo.mutation.ArtistCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpmember.ArtistTable,
			Columns: []string{hpmember.ArtistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpartist.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hmuo.mutation.ArtistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpmember.ArtistTable,
			Columns: []string{hpmember.ArtistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpartist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hmuo.mutation.OwningFeedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpmember.OwningFeedTable,
			Columns: []string{hpmember.OwningFeedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpfeeditem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hmuo.mutation.RemovedOwningFeedIDs(); len(nodes) > 0 && !hmuo.mutation.OwningFeedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpmember.OwningFeedTable,
			Columns: []string{hpmember.OwningFeedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpfeeditem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hmuo.mutation.OwningFeedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpmember.OwningFeedTable,
			Columns: []string{hpmember.OwningFeedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpfeeditem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hmuo.mutation.TaggedFeedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpmember.TaggedFeedTable,
			Columns: hpmember.TaggedFeedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpfeeditem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hmuo.mutation.RemovedTaggedFeedIDs(); len(nodes) > 0 && !hmuo.mutation.TaggedFeedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpmember.TaggedFeedTable,
			Columns: hpmember.TaggedFeedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpfeeditem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hmuo.mutation.TaggedFeedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpmember.TaggedFeedTable,
			Columns: hpmember.TaggedFeedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpfeeditem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hmuo.mutation.OwningIgPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpmember.OwningIgPostsTable,
			Columns: []string{hpmember.OwningIgPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpigpost.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hmuo.mutation.RemovedOwningIgPostsIDs(); len(nodes) > 0 && !hmuo.mutation.OwningIgPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpmember.OwningIgPostsTable,
			Columns: []string{hpmember.OwningIgPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpigpost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hmuo.mutation.OwningIgPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpmember.OwningIgPostsTable,
			Columns: []string{hpmember.OwningIgPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpigpost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hmuo.mutation.TaggedIgPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpmember.TaggedIgPostsTable,
			Columns: hpmember.TaggedIgPostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpigpost.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hmuo.mutation.RemovedTaggedIgPostsIDs(); len(nodes) > 0 && !hmuo.mutation.TaggedIgPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpmember.TaggedIgPostsTable,
			Columns: hpmember.TaggedIgPostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpigpost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hmuo.mutation.TaggedIgPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpmember.TaggedIgPostsTable,
			Columns: hpmember.TaggedIgPostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpigpost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hmuo.mutation.OwningAmebloPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpmember.OwningAmebloPostsTable,
			Columns: []string{hpmember.OwningAmebloPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpameblopost.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hmuo.mutation.RemovedOwningAmebloPostsIDs(); len(nodes) > 0 && !hmuo.mutation.OwningAmebloPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpmember.OwningAmebloPostsTable,
			Columns: []string{hpmember.OwningAmebloPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpameblopost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hmuo.mutation.OwningAmebloPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpmember.OwningAmebloPostsTable,
			Columns: []string{hpmember.OwningAmebloPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpameblopost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hmuo.mutation.TaggedAmebloPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpmember.TaggedAmebloPostsTable,
			Columns: hpmember.TaggedAmebloPostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpameblopost.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hmuo.mutation.RemovedTaggedAmebloPostsIDs(); len(nodes) > 0 && !hmuo.mutation.TaggedAmebloPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpmember.TaggedAmebloPostsTable,
			Columns: hpmember.TaggedAmebloPostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpameblopost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hmuo.mutation.TaggedAmebloPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpmember.TaggedAmebloPostsTable,
			Columns: hpmember.TaggedAmebloPostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpameblopost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hmuo.mutation.TaggedElineupMallItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpmember.TaggedElineupMallItemsTable,
			Columns: hpmember.TaggedElineupMallItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpelineupmallitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hmuo.mutation.RemovedTaggedElineupMallItemsIDs(); len(nodes) > 0 && !hmuo.mutation.TaggedElineupMallItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpmember.TaggedElineupMallItemsTable,
			Columns: hpmember.TaggedElineupMallItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpelineupmallitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hmuo.mutation.TaggedElineupMallItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpmember.TaggedElineupMallItemsTable,
			Columns: hpmember.TaggedElineupMallItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpelineupmallitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hmuo.mutation.FollowedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpmember.FollowedByTable,
			Columns: []string{hpmember.FollowedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpfollow.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hmuo.mutation.RemovedFollowedByIDs(); len(nodes) > 0 && !hmuo.mutation.FollowedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpmember.FollowedByTable,
			Columns: []string{hpmember.FollowedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpfollow.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hmuo.mutation.FollowedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpmember.FollowedByTable,
			Columns: []string{hpmember.FollowedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpfollow.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &HPMember{config: hmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, hmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hpmember.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	hmuo.mutation.done = true
	return _node, nil
}
