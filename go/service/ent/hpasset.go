// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"hpapp.yssk22.dev/go/service/ent/hpartist"
	"hpapp.yssk22.dev/go/service/ent/hpasset"
	"hpapp.yssk22.dev/go/service/schema/enums"
)

// HPAsset is the model entity for the HPAsset schema.
type HPAsset struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Key holds the value of the "key" field.
	Key string `json:"key,omitempty"`
	// AssetType holds the value of the "asset_type" field.
	AssetType enums.HPAssetType `json:"asset_type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HPAssetQuery when eager-loading is set.
	Edges            HPAssetEdges `json:"edges"`
	hp_artist_assets *int
	selectValues     sql.SelectValues
}

// HPAssetEdges holds the relations/edges for other nodes in the graph.
type HPAssetEdges struct {
	// Artist holds the value of the artist edge.
	Artist *HPArtist `json:"artist,omitempty"`
	// Members holds the value of the members edge.
	Members []*HPMember `json:"members,omitempty"`
	// AmebloPosts holds the value of the ameblo_posts edge.
	AmebloPosts []*HPAmebloPost `json:"ameblo_posts,omitempty"`
	// IgPosts holds the value of the ig_posts edge.
	IgPosts []*HPIgPost `json:"ig_posts,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedMembers     map[string][]*HPMember
	namedAmebloPosts map[string][]*HPAmebloPost
	namedIgPosts     map[string][]*HPIgPost
}

// ArtistOrErr returns the Artist value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HPAssetEdges) ArtistOrErr() (*HPArtist, error) {
	if e.loadedTypes[0] {
		if e.Artist == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: hpartist.Label}
		}
		return e.Artist, nil
	}
	return nil, &NotLoadedError{edge: "artist"}
}

// MembersOrErr returns the Members value or an error if the edge
// was not loaded in eager-loading.
func (e HPAssetEdges) MembersOrErr() ([]*HPMember, error) {
	if e.loadedTypes[1] {
		return e.Members, nil
	}
	return nil, &NotLoadedError{edge: "members"}
}

// AmebloPostsOrErr returns the AmebloPosts value or an error if the edge
// was not loaded in eager-loading.
func (e HPAssetEdges) AmebloPostsOrErr() ([]*HPAmebloPost, error) {
	if e.loadedTypes[2] {
		return e.AmebloPosts, nil
	}
	return nil, &NotLoadedError{edge: "ameblo_posts"}
}

// IgPostsOrErr returns the IgPosts value or an error if the edge
// was not loaded in eager-loading.
func (e HPAssetEdges) IgPostsOrErr() ([]*HPIgPost, error) {
	if e.loadedTypes[3] {
		return e.IgPosts, nil
	}
	return nil, &NotLoadedError{edge: "ig_posts"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*HPAsset) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case hpasset.FieldID:
			values[i] = new(sql.NullInt64)
		case hpasset.FieldKey, hpasset.FieldAssetType:
			values[i] = new(sql.NullString)
		case hpasset.ForeignKeys[0]: // hp_artist_assets
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the HPAsset fields.
func (ha *HPAsset) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case hpasset.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ha.ID = int(value.Int64)
		case hpasset.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				ha.Key = value.String
			}
		case hpasset.FieldAssetType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field asset_type", values[i])
			} else if value.Valid {
				ha.AssetType = enums.HPAssetType(value.String)
			}
		case hpasset.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field hp_artist_assets", value)
			} else if value.Valid {
				ha.hp_artist_assets = new(int)
				*ha.hp_artist_assets = int(value.Int64)
			}
		default:
			ha.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the HPAsset.
// This includes values selected through modifiers, order, etc.
func (ha *HPAsset) Value(name string) (ent.Value, error) {
	return ha.selectValues.Get(name)
}

// QueryArtist queries the "artist" edge of the HPAsset entity.
func (ha *HPAsset) QueryArtist() *HPArtistQuery {
	return NewHPAssetClient(ha.config).QueryArtist(ha)
}

// QueryMembers queries the "members" edge of the HPAsset entity.
func (ha *HPAsset) QueryMembers() *HPMemberQuery {
	return NewHPAssetClient(ha.config).QueryMembers(ha)
}

// QueryAmebloPosts queries the "ameblo_posts" edge of the HPAsset entity.
func (ha *HPAsset) QueryAmebloPosts() *HPAmebloPostQuery {
	return NewHPAssetClient(ha.config).QueryAmebloPosts(ha)
}

// QueryIgPosts queries the "ig_posts" edge of the HPAsset entity.
func (ha *HPAsset) QueryIgPosts() *HPIgPostQuery {
	return NewHPAssetClient(ha.config).QueryIgPosts(ha)
}

// Update returns a builder for updating this HPAsset.
// Note that you need to call HPAsset.Unwrap() before calling this method if this HPAsset
// was returned from a transaction, and the transaction was committed or rolled back.
func (ha *HPAsset) Update() *HPAssetUpdateOne {
	return NewHPAssetClient(ha.config).UpdateOne(ha)
}

// Unwrap unwraps the HPAsset entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ha *HPAsset) Unwrap() *HPAsset {
	_tx, ok := ha.config.driver.(*txDriver)
	if !ok {
		panic("ent: HPAsset is not a transactional entity")
	}
	ha.config.driver = _tx.drv
	return ha
}

// String implements the fmt.Stringer.
func (ha *HPAsset) String() string {
	var builder strings.Builder
	builder.WriteString("HPAsset(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ha.ID))
	builder.WriteString("key=")
	builder.WriteString(ha.Key)
	builder.WriteString(", ")
	builder.WriteString("asset_type=")
	builder.WriteString(fmt.Sprintf("%v", ha.AssetType))
	builder.WriteByte(')')
	return builder.String()
}

// NamedMembers returns the Members named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ha *HPAsset) NamedMembers(name string) ([]*HPMember, error) {
	if ha.Edges.namedMembers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ha.Edges.namedMembers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ha *HPAsset) appendNamedMembers(name string, edges ...*HPMember) {
	if ha.Edges.namedMembers == nil {
		ha.Edges.namedMembers = make(map[string][]*HPMember)
	}
	if len(edges) == 0 {
		ha.Edges.namedMembers[name] = []*HPMember{}
	} else {
		ha.Edges.namedMembers[name] = append(ha.Edges.namedMembers[name], edges...)
	}
}

// NamedAmebloPosts returns the AmebloPosts named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ha *HPAsset) NamedAmebloPosts(name string) ([]*HPAmebloPost, error) {
	if ha.Edges.namedAmebloPosts == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ha.Edges.namedAmebloPosts[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ha *HPAsset) appendNamedAmebloPosts(name string, edges ...*HPAmebloPost) {
	if ha.Edges.namedAmebloPosts == nil {
		ha.Edges.namedAmebloPosts = make(map[string][]*HPAmebloPost)
	}
	if len(edges) == 0 {
		ha.Edges.namedAmebloPosts[name] = []*HPAmebloPost{}
	} else {
		ha.Edges.namedAmebloPosts[name] = append(ha.Edges.namedAmebloPosts[name], edges...)
	}
}

// NamedIgPosts returns the IgPosts named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ha *HPAsset) NamedIgPosts(name string) ([]*HPIgPost, error) {
	if ha.Edges.namedIgPosts == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ha.Edges.namedIgPosts[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ha *HPAsset) appendNamedIgPosts(name string, edges ...*HPIgPost) {
	if ha.Edges.namedIgPosts == nil {
		ha.Edges.namedIgPosts = make(map[string][]*HPIgPost)
	}
	if len(edges) == 0 {
		ha.Edges.namedIgPosts[name] = []*HPIgPost{}
	} else {
		ha.Edges.namedIgPosts[name] = append(ha.Edges.namedIgPosts[name], edges...)
	}
}

// HPAssets is a parsable slice of HPAsset.
type HPAssets []*HPAsset
