// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/yssk22/hpapp/go/service/ent/auth"
	"github.com/yssk22/hpapp/go/service/ent/hpameblopost"
	"github.com/yssk22/hpapp/go/service/ent/hpartist"
	"github.com/yssk22/hpapp/go/service/ent/hpasset"
	"github.com/yssk22/hpapp/go/service/ent/hpblob"
	"github.com/yssk22/hpapp/go/service/ent/hpelineupmallitem"
	"github.com/yssk22/hpapp/go/service/ent/hpevent"
	"github.com/yssk22/hpapp/go/service/ent/hpfceventticket"
	"github.com/yssk22/hpapp/go/service/ent/hpfeeditem"
	"github.com/yssk22/hpapp/go/service/ent/hpfollow"
	"github.com/yssk22/hpapp/go/service/ent/hpigpost"
	"github.com/yssk22/hpapp/go/service/ent/hpmember"
	"github.com/yssk22/hpapp/go/service/ent/hpsorthistory"
	"github.com/yssk22/hpapp/go/service/ent/hpviewhistory"
	"github.com/yssk22/hpapp/go/service/ent/predicate"
	"github.com/yssk22/hpapp/go/service/ent/testent"
	"github.com/yssk22/hpapp/go/service/ent/user"
	"github.com/yssk22/hpapp/go/service/ent/usernotificationlog"
	"github.com/yssk22/hpapp/go/service/ent/usernotificationsetting"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 18)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   auth.Table,
			Columns: auth.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: auth.FieldID,
			},
		},
		Type: "Auth",
		Fields: map[string]*sqlgraph.FieldSpec{
			auth.FieldCreatedAt:      {Type: field.TypeTime, Column: auth.FieldCreatedAt},
			auth.FieldUpdatedAt:      {Type: field.TypeTime, Column: auth.FieldUpdatedAt},
			auth.FieldProviderName:   {Type: field.TypeString, Column: auth.FieldProviderName},
			auth.FieldProviderUserID: {Type: field.TypeString, Column: auth.FieldProviderUserID},
			auth.FieldAccessToken:    {Type: field.TypeString, Column: auth.FieldAccessToken},
			auth.FieldRefreshToken:   {Type: field.TypeString, Column: auth.FieldRefreshToken},
			auth.FieldExpireAt:       {Type: field.TypeTime, Column: auth.FieldExpireAt},
			auth.FieldScope:          {Type: field.TypeJSON, Column: auth.FieldScope},
			auth.FieldOwnerUserID:    {Type: field.TypeInt, Column: auth.FieldOwnerUserID},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   hpameblopost.Table,
			Columns: hpameblopost.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: hpameblopost.FieldID,
			},
		},
		Type: "HPAmebloPost",
		Fields: map[string]*sqlgraph.FieldSpec{
			hpameblopost.FieldCrawledAt:        {Type: field.TypeTime, Column: hpameblopost.FieldCrawledAt},
			hpameblopost.FieldErrorCount:       {Type: field.TypeInt, Column: hpameblopost.FieldErrorCount},
			hpameblopost.FieldManuallyModified: {Type: field.TypeJSON, Column: hpameblopost.FieldManuallyModified},
			hpameblopost.FieldLastErrorMessage: {Type: field.TypeString, Column: hpameblopost.FieldLastErrorMessage},
			hpameblopost.FieldRecrawlRequired:  {Type: field.TypeBool, Column: hpameblopost.FieldRecrawlRequired},
			hpameblopost.FieldCreatedAt:        {Type: field.TypeTime, Column: hpameblopost.FieldCreatedAt},
			hpameblopost.FieldUpdatedAt:        {Type: field.TypeTime, Column: hpameblopost.FieldUpdatedAt},
			hpameblopost.FieldPath:             {Type: field.TypeString, Column: hpameblopost.FieldPath},
			hpameblopost.FieldNextPath:         {Type: field.TypeString, Column: hpameblopost.FieldNextPath},
			hpameblopost.FieldPrevPath:         {Type: field.TypeString, Column: hpameblopost.FieldPrevPath},
			hpameblopost.FieldArtistKey:        {Type: field.TypeString, Column: hpameblopost.FieldArtistKey},
			hpameblopost.FieldMemberKey:        {Type: field.TypeString, Column: hpameblopost.FieldMemberKey},
			hpameblopost.FieldTitle:            {Type: field.TypeString, Column: hpameblopost.FieldTitle},
			hpameblopost.FieldDescription:      {Type: field.TypeString, Column: hpameblopost.FieldDescription},
			hpameblopost.FieldTheme:            {Type: field.TypeString, Column: hpameblopost.FieldTheme},
			hpameblopost.FieldPostAt:           {Type: field.TypeTime, Column: hpameblopost.FieldPostAt},
			hpameblopost.FieldSource:           {Type: field.TypeEnum, Column: hpameblopost.FieldSource},
			hpameblopost.FieldImages:           {Type: field.TypeJSON, Column: hpameblopost.FieldImages},
			hpameblopost.FieldLikes:            {Type: field.TypeInt, Column: hpameblopost.FieldLikes},
			hpameblopost.FieldComments:         {Type: field.TypeInt, Column: hpameblopost.FieldComments},
			hpameblopost.FieldReblogs:          {Type: field.TypeInt, Column: hpameblopost.FieldReblogs},
			hpameblopost.FieldOwnerArtistID:    {Type: field.TypeInt, Column: hpameblopost.FieldOwnerArtistID},
			hpameblopost.FieldOwnerMemberID:    {Type: field.TypeInt, Column: hpameblopost.FieldOwnerMemberID},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   hpartist.Table,
			Columns: hpartist.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: hpartist.FieldID,
			},
		},
		Type: "HPArtist",
		Fields: map[string]*sqlgraph.FieldSpec{
			hpartist.FieldCrawledAt:        {Type: field.TypeTime, Column: hpartist.FieldCrawledAt},
			hpartist.FieldErrorCount:       {Type: field.TypeInt, Column: hpartist.FieldErrorCount},
			hpartist.FieldManuallyModified: {Type: field.TypeJSON, Column: hpartist.FieldManuallyModified},
			hpartist.FieldLastErrorMessage: {Type: field.TypeString, Column: hpartist.FieldLastErrorMessage},
			hpartist.FieldRecrawlRequired:  {Type: field.TypeBool, Column: hpartist.FieldRecrawlRequired},
			hpartist.FieldCreatedAt:        {Type: field.TypeTime, Column: hpartist.FieldCreatedAt},
			hpartist.FieldUpdatedAt:        {Type: field.TypeTime, Column: hpartist.FieldUpdatedAt},
			hpartist.FieldKey:              {Type: field.TypeString, Column: hpartist.FieldKey},
			hpartist.FieldName:             {Type: field.TypeString, Column: hpartist.FieldName},
			hpartist.FieldThumbnailURL:     {Type: field.TypeString, Column: hpartist.FieldThumbnailURL},
			hpartist.FieldIndex:            {Type: field.TypeInt, Column: hpartist.FieldIndex},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   hpasset.Table,
			Columns: hpasset.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: hpasset.FieldID,
			},
		},
		Type: "HPAsset",
		Fields: map[string]*sqlgraph.FieldSpec{
			hpasset.FieldKey:       {Type: field.TypeString, Column: hpasset.FieldKey},
			hpasset.FieldAssetType: {Type: field.TypeEnum, Column: hpasset.FieldAssetType},
		},
	}
	graph.Nodes[4] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   hpblob.Table,
			Columns: hpblob.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: hpblob.FieldID,
			},
		},
		Type: "HPBlob",
		Fields: map[string]*sqlgraph.FieldSpec{
			hpblob.FieldCreatedAt:             {Type: field.TypeTime, Column: hpblob.FieldCreatedAt},
			hpblob.FieldUpdatedAt:             {Type: field.TypeTime, Column: hpblob.FieldUpdatedAt},
			hpblob.FieldStoragePath:           {Type: field.TypeString, Column: hpblob.FieldStoragePath},
			hpblob.FieldSourceURL:             {Type: field.TypeString, Column: hpblob.FieldSourceURL},
			hpblob.FieldSourceHTMLURL:         {Type: field.TypeString, Column: hpblob.FieldSourceHTMLURL},
			hpblob.FieldStatus:                {Type: field.TypeEnum, Column: hpblob.FieldStatus},
			hpblob.FieldStatusMessage:         {Type: field.TypeString, Column: hpblob.FieldStatusMessage},
			hpblob.FieldStatusErrorCount:      {Type: field.TypeInt, Column: hpblob.FieldStatusErrorCount},
			hpblob.FieldType:                  {Type: field.TypeEnum, Column: hpblob.FieldType},
			hpblob.FieldSubType:               {Type: field.TypeEnum, Column: hpblob.FieldSubType},
			hpblob.FieldWidth:                 {Type: field.TypeInt, Column: hpblob.FieldWidth},
			hpblob.FieldHeight:                {Type: field.TypeInt, Column: hpblob.FieldHeight},
			hpblob.FieldSize:                  {Type: field.TypeInt64, Column: hpblob.FieldSize},
			hpblob.FieldOwnerArtistID:         {Type: field.TypeInt, Column: hpblob.FieldOwnerArtistID},
			hpblob.FieldOwnerMemberID:         {Type: field.TypeInt, Column: hpblob.FieldOwnerMemberID},
			hpblob.FieldNumFaces:              {Type: field.TypeInt, Column: hpblob.FieldNumFaces},
			hpblob.FieldFaces:                 {Type: field.TypeJSON, Column: hpblob.FieldFaces},
			hpblob.FieldFaceRecognitionStatus: {Type: field.TypeEnum, Column: hpblob.FieldFaceRecognitionStatus},
			hpblob.FieldThumbnail:             {Type: field.TypeJSON, Column: hpblob.FieldThumbnail},
			hpblob.FieldDurationSeconds:       {Type: field.TypeFloat64, Column: hpblob.FieldDurationSeconds},
		},
	}
	graph.Nodes[5] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   hpelineupmallitem.Table,
			Columns: hpelineupmallitem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: hpelineupmallitem.FieldID,
			},
		},
		Type: "HPElineupMallItem",
		Fields: map[string]*sqlgraph.FieldSpec{
			hpelineupmallitem.FieldCrawledAt:        {Type: field.TypeTime, Column: hpelineupmallitem.FieldCrawledAt},
			hpelineupmallitem.FieldErrorCount:       {Type: field.TypeInt, Column: hpelineupmallitem.FieldErrorCount},
			hpelineupmallitem.FieldManuallyModified: {Type: field.TypeJSON, Column: hpelineupmallitem.FieldManuallyModified},
			hpelineupmallitem.FieldLastErrorMessage: {Type: field.TypeString, Column: hpelineupmallitem.FieldLastErrorMessage},
			hpelineupmallitem.FieldRecrawlRequired:  {Type: field.TypeBool, Column: hpelineupmallitem.FieldRecrawlRequired},
			hpelineupmallitem.FieldCreatedAt:        {Type: field.TypeTime, Column: hpelineupmallitem.FieldCreatedAt},
			hpelineupmallitem.FieldUpdatedAt:        {Type: field.TypeTime, Column: hpelineupmallitem.FieldUpdatedAt},
			hpelineupmallitem.FieldPermalink:        {Type: field.TypeString, Column: hpelineupmallitem.FieldPermalink},
			hpelineupmallitem.FieldName:             {Type: field.TypeString, Column: hpelineupmallitem.FieldName},
			hpelineupmallitem.FieldDescription:      {Type: field.TypeString, Column: hpelineupmallitem.FieldDescription},
			hpelineupmallitem.FieldSupplier:         {Type: field.TypeString, Column: hpelineupmallitem.FieldSupplier},
			hpelineupmallitem.FieldPrice:            {Type: field.TypeInt, Column: hpelineupmallitem.FieldPrice},
			hpelineupmallitem.FieldIsLimitedToFc:    {Type: field.TypeBool, Column: hpelineupmallitem.FieldIsLimitedToFc},
			hpelineupmallitem.FieldIsOutOfStock:     {Type: field.TypeBool, Column: hpelineupmallitem.FieldIsOutOfStock},
			hpelineupmallitem.FieldImages:           {Type: field.TypeJSON, Column: hpelineupmallitem.FieldImages},
			hpelineupmallitem.FieldCategory:         {Type: field.TypeEnum, Column: hpelineupmallitem.FieldCategory},
			hpelineupmallitem.FieldOrderStartAt:     {Type: field.TypeTime, Column: hpelineupmallitem.FieldOrderStartAt},
			hpelineupmallitem.FieldOrderEndAt:       {Type: field.TypeTime, Column: hpelineupmallitem.FieldOrderEndAt},
		},
	}
	graph.Nodes[6] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   hpevent.Table,
			Columns: hpevent.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: hpevent.FieldID,
			},
		},
		Type: "HPEvent",
		Fields: map[string]*sqlgraph.FieldSpec{
			hpevent.FieldCreatedAt:     {Type: field.TypeTime, Column: hpevent.FieldCreatedAt},
			hpevent.FieldUpdatedAt:     {Type: field.TypeTime, Column: hpevent.FieldUpdatedAt},
			hpevent.FieldKey:           {Type: field.TypeString, Column: hpevent.FieldKey},
			hpevent.FieldDisplayTitles: {Type: field.TypeJSON, Column: hpevent.FieldDisplayTitles},
			hpevent.FieldOpenAt:        {Type: field.TypeTime, Column: hpevent.FieldOpenAt},
			hpevent.FieldStartAt:       {Type: field.TypeTime, Column: hpevent.FieldStartAt},
			hpevent.FieldVenue:         {Type: field.TypeString, Column: hpevent.FieldVenue},
			hpevent.FieldPrefecture:    {Type: field.TypeString, Column: hpevent.FieldPrefecture},
			hpevent.FieldSource:        {Type: field.TypeEnum, Column: hpevent.FieldSource},
		},
	}
	graph.Nodes[7] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   hpfceventticket.Table,
			Columns: hpfceventticket.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: hpfceventticket.FieldID,
			},
		},
		Type: "HPFCEventTicket",
		Fields: map[string]*sqlgraph.FieldSpec{
			hpfceventticket.FieldCreatedAt:            {Type: field.TypeTime, Column: hpfceventticket.FieldCreatedAt},
			hpfceventticket.FieldUpdatedAt:            {Type: field.TypeTime, Column: hpfceventticket.FieldUpdatedAt},
			hpfceventticket.FieldNum:                  {Type: field.TypeInt, Column: hpfceventticket.FieldNum},
			hpfceventticket.FieldStatus:               {Type: field.TypeEnum, Column: hpfceventticket.FieldStatus},
			hpfceventticket.FieldFcMemberSha256:       {Type: field.TypeString, Column: hpfceventticket.FieldFcMemberSha256},
			hpfceventticket.FieldApplicationTitle:     {Type: field.TypeString, Column: hpfceventticket.FieldApplicationTitle},
			hpfceventticket.FieldApplicationID:        {Type: field.TypeString, Column: hpfceventticket.FieldApplicationID},
			hpfceventticket.FieldApplicationStartDate: {Type: field.TypeTime, Column: hpfceventticket.FieldApplicationStartDate},
			hpfceventticket.FieldApplicationDueDate:   {Type: field.TypeTime, Column: hpfceventticket.FieldApplicationDueDate},
			hpfceventticket.FieldPaymentStartDate:     {Type: field.TypeTime, Column: hpfceventticket.FieldPaymentStartDate},
			hpfceventticket.FieldPaymentDueDate:       {Type: field.TypeTime, Column: hpfceventticket.FieldPaymentDueDate},
			hpfceventticket.FieldOwnerUserID:          {Type: field.TypeInt, Column: hpfceventticket.FieldOwnerUserID},
		},
	}
	graph.Nodes[8] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   hpfeeditem.Table,
			Columns: hpfeeditem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: hpfeeditem.FieldID,
			},
		},
		Type: "HPFeedItem",
		Fields: map[string]*sqlgraph.FieldSpec{
			hpfeeditem.FieldCreatedAt:     {Type: field.TypeTime, Column: hpfeeditem.FieldCreatedAt},
			hpfeeditem.FieldUpdatedAt:     {Type: field.TypeTime, Column: hpfeeditem.FieldUpdatedAt},
			hpfeeditem.FieldSourceID:      {Type: field.TypeInt, Column: hpfeeditem.FieldSourceID},
			hpfeeditem.FieldAssetType:     {Type: field.TypeEnum, Column: hpfeeditem.FieldAssetType},
			hpfeeditem.FieldTitle:         {Type: field.TypeString, Column: hpfeeditem.FieldTitle},
			hpfeeditem.FieldPostAt:        {Type: field.TypeTime, Column: hpfeeditem.FieldPostAt},
			hpfeeditem.FieldSourceURL:     {Type: field.TypeString, Column: hpfeeditem.FieldSourceURL},
			hpfeeditem.FieldImageURL:      {Type: field.TypeString, Column: hpfeeditem.FieldImageURL},
			hpfeeditem.FieldMedia:         {Type: field.TypeJSON, Column: hpfeeditem.FieldMedia},
			hpfeeditem.FieldOwnerArtistID: {Type: field.TypeInt, Column: hpfeeditem.FieldOwnerArtistID},
			hpfeeditem.FieldOwnerMemberID: {Type: field.TypeInt, Column: hpfeeditem.FieldOwnerMemberID},
		},
	}
	graph.Nodes[9] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   hpfollow.Table,
			Columns: hpfollow.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: hpfollow.FieldID,
			},
		},
		Type: "HPFollow",
		Fields: map[string]*sqlgraph.FieldSpec{
			hpfollow.FieldCreatedAt: {Type: field.TypeTime, Column: hpfollow.FieldCreatedAt},
			hpfollow.FieldUpdatedAt: {Type: field.TypeTime, Column: hpfollow.FieldUpdatedAt},
			hpfollow.FieldType:      {Type: field.TypeEnum, Column: hpfollow.FieldType},
		},
	}
	graph.Nodes[10] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   hpigpost.Table,
			Columns: hpigpost.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: hpigpost.FieldID,
			},
		},
		Type: "HPIgPost",
		Fields: map[string]*sqlgraph.FieldSpec{
			hpigpost.FieldCrawledAt:        {Type: field.TypeTime, Column: hpigpost.FieldCrawledAt},
			hpigpost.FieldErrorCount:       {Type: field.TypeInt, Column: hpigpost.FieldErrorCount},
			hpigpost.FieldManuallyModified: {Type: field.TypeJSON, Column: hpigpost.FieldManuallyModified},
			hpigpost.FieldLastErrorMessage: {Type: field.TypeString, Column: hpigpost.FieldLastErrorMessage},
			hpigpost.FieldRecrawlRequired:  {Type: field.TypeBool, Column: hpigpost.FieldRecrawlRequired},
			hpigpost.FieldCreatedAt:        {Type: field.TypeTime, Column: hpigpost.FieldCreatedAt},
			hpigpost.FieldUpdatedAt:        {Type: field.TypeTime, Column: hpigpost.FieldUpdatedAt},
			hpigpost.FieldShortcode:        {Type: field.TypeString, Column: hpigpost.FieldShortcode},
			hpigpost.FieldDescription:      {Type: field.TypeString, Column: hpigpost.FieldDescription},
			hpigpost.FieldPostAt:           {Type: field.TypeTime, Column: hpigpost.FieldPostAt},
			hpigpost.FieldMedia:            {Type: field.TypeJSON, Column: hpigpost.FieldMedia},
			hpigpost.FieldLikes:            {Type: field.TypeInt, Column: hpigpost.FieldLikes},
			hpigpost.FieldComments:         {Type: field.TypeInt, Column: hpigpost.FieldComments},
			hpigpost.FieldRecrawlArgs:      {Type: field.TypeJSON, Column: hpigpost.FieldRecrawlArgs},
			hpigpost.FieldOwnerArtistID:    {Type: field.TypeInt, Column: hpigpost.FieldOwnerArtistID},
			hpigpost.FieldOwnerMemberID:    {Type: field.TypeInt, Column: hpigpost.FieldOwnerMemberID},
		},
	}
	graph.Nodes[11] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   hpmember.Table,
			Columns: hpmember.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: hpmember.FieldID,
			},
		},
		Type: "HPMember",
		Fields: map[string]*sqlgraph.FieldSpec{
			hpmember.FieldCrawledAt:        {Type: field.TypeTime, Column: hpmember.FieldCrawledAt},
			hpmember.FieldErrorCount:       {Type: field.TypeInt, Column: hpmember.FieldErrorCount},
			hpmember.FieldManuallyModified: {Type: field.TypeJSON, Column: hpmember.FieldManuallyModified},
			hpmember.FieldLastErrorMessage: {Type: field.TypeString, Column: hpmember.FieldLastErrorMessage},
			hpmember.FieldRecrawlRequired:  {Type: field.TypeBool, Column: hpmember.FieldRecrawlRequired},
			hpmember.FieldCreatedAt:        {Type: field.TypeTime, Column: hpmember.FieldCreatedAt},
			hpmember.FieldUpdatedAt:        {Type: field.TypeTime, Column: hpmember.FieldUpdatedAt},
			hpmember.FieldKey:              {Type: field.TypeString, Column: hpmember.FieldKey},
			hpmember.FieldArtistKey:        {Type: field.TypeString, Column: hpmember.FieldArtistKey},
			hpmember.FieldName:             {Type: field.TypeString, Column: hpmember.FieldName},
			hpmember.FieldNameKana:         {Type: field.TypeString, Column: hpmember.FieldNameKana},
			hpmember.FieldThumbnailURL:     {Type: field.TypeString, Column: hpmember.FieldThumbnailURL},
			hpmember.FieldDateOfBirth:      {Type: field.TypeTime, Column: hpmember.FieldDateOfBirth},
			hpmember.FieldBloodType:        {Type: field.TypeString, Column: hpmember.FieldBloodType},
			hpmember.FieldHometown:         {Type: field.TypeString, Column: hpmember.FieldHometown},
			hpmember.FieldJoinAt:           {Type: field.TypeTime, Column: hpmember.FieldJoinAt},
			hpmember.FieldGraduateAt:       {Type: field.TypeTime, Column: hpmember.FieldGraduateAt},
			hpmember.FieldArtistID:         {Type: field.TypeInt, Column: hpmember.FieldArtistID},
		},
	}
	graph.Nodes[12] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   hpsorthistory.Table,
			Columns: hpsorthistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: hpsorthistory.FieldID,
			},
		},
		Type: "HPSortHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			hpsorthistory.FieldCreatedAt:   {Type: field.TypeTime, Column: hpsorthistory.FieldCreatedAt},
			hpsorthistory.FieldUpdatedAt:   {Type: field.TypeTime, Column: hpsorthistory.FieldUpdatedAt},
			hpsorthistory.FieldSortResult:  {Type: field.TypeJSON, Column: hpsorthistory.FieldSortResult},
			hpsorthistory.FieldOwnerUserID: {Type: field.TypeInt, Column: hpsorthistory.FieldOwnerUserID},
		},
	}
	graph.Nodes[13] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   hpviewhistory.Table,
			Columns: hpviewhistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: hpviewhistory.FieldID,
			},
		},
		Type: "HPViewHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			hpviewhistory.FieldCreatedAt:     {Type: field.TypeTime, Column: hpviewhistory.FieldCreatedAt},
			hpviewhistory.FieldUpdatedAt:     {Type: field.TypeTime, Column: hpviewhistory.FieldUpdatedAt},
			hpviewhistory.FieldContentID:     {Type: field.TypeInt, Column: hpviewhistory.FieldContentID},
			hpviewhistory.FieldContentPostAt: {Type: field.TypeTime, Column: hpviewhistory.FieldContentPostAt},
			hpviewhistory.FieldAssetType:     {Type: field.TypeEnum, Column: hpviewhistory.FieldAssetType},
			hpviewhistory.FieldIsFavorite:    {Type: field.TypeBool, Column: hpviewhistory.FieldIsFavorite},
			hpviewhistory.FieldOwnerUserID:   {Type: field.TypeInt, Column: hpviewhistory.FieldOwnerUserID},
		},
	}
	graph.Nodes[14] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   testent.Table,
			Columns: testent.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: testent.FieldID,
			},
		},
		Type: "TestEnt",
		Fields: map[string]*sqlgraph.FieldSpec{
			testent.FieldStringField: {Type: field.TypeString, Column: testent.FieldStringField},
			testent.FieldTextField:   {Type: field.TypeString, Column: testent.FieldTextField},
			testent.FieldBytesField:  {Type: field.TypeBytes, Column: testent.FieldBytesField},
			testent.FieldBoolField:   {Type: field.TypeBool, Column: testent.FieldBoolField},
			testent.FieldTimeField:   {Type: field.TypeTime, Column: testent.FieldTimeField},
			testent.FieldIntField:    {Type: field.TypeInt, Column: testent.FieldIntField},
			testent.FieldInt64Field:  {Type: field.TypeInt64, Column: testent.FieldInt64Field},
			testent.FieldFloatField:  {Type: field.TypeFloat64, Column: testent.FieldFloatField},
			testent.FieldJSONField:   {Type: field.TypeJSON, Column: testent.FieldJSONField},
			testent.FieldEnumField:   {Type: field.TypeEnum, Column: testent.FieldEnumField},
		},
	}
	graph.Nodes[15] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		},
		Type: "User",
		Fields: map[string]*sqlgraph.FieldSpec{
			user.FieldCreatedAt:   {Type: field.TypeTime, Column: user.FieldCreatedAt},
			user.FieldUpdatedAt:   {Type: field.TypeTime, Column: user.FieldUpdatedAt},
			user.FieldUsername:    {Type: field.TypeString, Column: user.FieldUsername},
			user.FieldAccessToken: {Type: field.TypeString, Column: user.FieldAccessToken},
		},
	}
	graph.Nodes[16] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   usernotificationlog.Table,
			Columns: usernotificationlog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: usernotificationlog.FieldID,
			},
		},
		Type: "UserNotificationLog",
		Fields: map[string]*sqlgraph.FieldSpec{
			usernotificationlog.FieldCreatedAt:              {Type: field.TypeTime, Column: usernotificationlog.FieldCreatedAt},
			usernotificationlog.FieldUpdatedAt:              {Type: field.TypeTime, Column: usernotificationlog.FieldUpdatedAt},
			usernotificationlog.FieldKey:                    {Type: field.TypeString, Column: usernotificationlog.FieldKey},
			usernotificationlog.FieldTrigger:                {Type: field.TypeString, Column: usernotificationlog.FieldTrigger},
			usernotificationlog.FieldIsTest:                 {Type: field.TypeBool, Column: usernotificationlog.FieldIsTest},
			usernotificationlog.FieldReactNavigationMessage: {Type: field.TypeJSON, Column: usernotificationlog.FieldReactNavigationMessage},
			usernotificationlog.FieldExpectedDeliveryTime:   {Type: field.TypeTime, Column: usernotificationlog.FieldExpectedDeliveryTime},
			usernotificationlog.FieldStatus:                 {Type: field.TypeEnum, Column: usernotificationlog.FieldStatus},
			usernotificationlog.FieldStatusMessage:          {Type: field.TypeString, Column: usernotificationlog.FieldStatusMessage},
		},
	}
	graph.Nodes[17] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   usernotificationsetting.Table,
			Columns: usernotificationsetting.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: usernotificationsetting.FieldID,
			},
		},
		Type: "UserNotificationSetting",
		Fields: map[string]*sqlgraph.FieldSpec{
			usernotificationsetting.FieldCreatedAt:          {Type: field.TypeTime, Column: usernotificationsetting.FieldCreatedAt},
			usernotificationsetting.FieldUpdatedAt:          {Type: field.TypeTime, Column: usernotificationsetting.FieldUpdatedAt},
			usernotificationsetting.FieldToken:              {Type: field.TypeString, Column: usernotificationsetting.FieldToken},
			usernotificationsetting.FieldSlug:               {Type: field.TypeString, Column: usernotificationsetting.FieldSlug},
			usernotificationsetting.FieldName:               {Type: field.TypeString, Column: usernotificationsetting.FieldName},
			usernotificationsetting.FieldEnableNewPosts:     {Type: field.TypeBool, Column: usernotificationsetting.FieldEnableNewPosts},
			usernotificationsetting.FieldEnablePaymentStart: {Type: field.TypeBool, Column: usernotificationsetting.FieldEnablePaymentStart},
			usernotificationsetting.FieldEnablePaymentDue:   {Type: field.TypeBool, Column: usernotificationsetting.FieldEnablePaymentDue},
			usernotificationsetting.FieldOwnerUserID:        {Type: field.TypeInt, Column: usernotificationsetting.FieldOwnerUserID},
		},
	}
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   auth.UserTable,
			Columns: []string{auth.UserColumn},
			Bidi:    false,
		},
		"Auth",
		"User",
	)
	graph.MustAddE(
		"owner_artist",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpameblopost.OwnerArtistTable,
			Columns: []string{hpameblopost.OwnerArtistColumn},
			Bidi:    false,
		},
		"HPAmebloPost",
		"HPArtist",
	)
	graph.MustAddE(
		"owner_member",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpameblopost.OwnerMemberTable,
			Columns: []string{hpameblopost.OwnerMemberColumn},
			Bidi:    false,
		},
		"HPAmebloPost",
		"HPMember",
	)
	graph.MustAddE(
		"tagged_artists",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpameblopost.TaggedArtistsTable,
			Columns: hpameblopost.TaggedArtistsPrimaryKey,
			Bidi:    false,
		},
		"HPAmebloPost",
		"HPArtist",
	)
	graph.MustAddE(
		"tagged_members",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpameblopost.TaggedMembersTable,
			Columns: hpameblopost.TaggedMembersPrimaryKey,
			Bidi:    false,
		},
		"HPAmebloPost",
		"HPMember",
	)
	graph.MustAddE(
		"asset",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpameblopost.AssetTable,
			Columns: []string{hpameblopost.AssetColumn},
			Bidi:    false,
		},
		"HPAmebloPost",
		"HPAsset",
	)
	graph.MustAddE(
		"blobs",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpameblopost.BlobsTable,
			Columns: hpameblopost.BlobsPrimaryKey,
			Bidi:    false,
		},
		"HPAmebloPost",
		"HPBlob",
	)
	graph.MustAddE(
		"members",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpartist.MembersTable,
			Columns: []string{hpartist.MembersColumn},
			Bidi:    false,
		},
		"HPArtist",
		"HPMember",
	)
	graph.MustAddE(
		"assets",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpartist.AssetsTable,
			Columns: []string{hpartist.AssetsColumn},
			Bidi:    false,
		},
		"HPArtist",
		"HPAsset",
	)
	graph.MustAddE(
		"owning_feed",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpartist.OwningFeedTable,
			Columns: []string{hpartist.OwningFeedColumn},
			Bidi:    false,
		},
		"HPArtist",
		"HPFeedItem",
	)
	graph.MustAddE(
		"tagged_feed",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpartist.TaggedFeedTable,
			Columns: hpartist.TaggedFeedPrimaryKey,
			Bidi:    false,
		},
		"HPArtist",
		"HPFeedItem",
	)
	graph.MustAddE(
		"owning_ig_posts",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpartist.OwningIgPostsTable,
			Columns: []string{hpartist.OwningIgPostsColumn},
			Bidi:    false,
		},
		"HPArtist",
		"HPIgPost",
	)
	graph.MustAddE(
		"tagged_ig_posts",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpartist.TaggedIgPostsTable,
			Columns: hpartist.TaggedIgPostsPrimaryKey,
			Bidi:    false,
		},
		"HPArtist",
		"HPIgPost",
	)
	graph.MustAddE(
		"owning_ameblo_posts",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpartist.OwningAmebloPostsTable,
			Columns: []string{hpartist.OwningAmebloPostsColumn},
			Bidi:    false,
		},
		"HPArtist",
		"HPAmebloPost",
	)
	graph.MustAddE(
		"tagged_ameblo_posts",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpartist.TaggedAmebloPostsTable,
			Columns: hpartist.TaggedAmebloPostsPrimaryKey,
			Bidi:    false,
		},
		"HPArtist",
		"HPAmebloPost",
	)
	graph.MustAddE(
		"tagged_elineup_mall_items",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpartist.TaggedElineupMallItemsTable,
			Columns: hpartist.TaggedElineupMallItemsPrimaryKey,
			Bidi:    false,
		},
		"HPArtist",
		"HPElineupMallItem",
	)
	graph.MustAddE(
		"artist",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpasset.ArtistTable,
			Columns: []string{hpasset.ArtistColumn},
			Bidi:    false,
		},
		"HPAsset",
		"HPArtist",
	)
	graph.MustAddE(
		"members",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpasset.MembersTable,
			Columns: hpasset.MembersPrimaryKey,
			Bidi:    false,
		},
		"HPAsset",
		"HPMember",
	)
	graph.MustAddE(
		"ameblo_posts",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpasset.AmebloPostsTable,
			Columns: []string{hpasset.AmebloPostsColumn},
			Bidi:    false,
		},
		"HPAsset",
		"HPAmebloPost",
	)
	graph.MustAddE(
		"ig_posts",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpasset.IgPostsTable,
			Columns: []string{hpasset.IgPostsColumn},
			Bidi:    false,
		},
		"HPAsset",
		"HPIgPost",
	)
	graph.MustAddE(
		"owner_artist",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hpblob.OwnerArtistTable,
			Columns: []string{hpblob.OwnerArtistColumn},
			Bidi:    false,
		},
		"HPBlob",
		"HPArtist",
	)
	graph.MustAddE(
		"owner_member",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hpblob.OwnerMemberTable,
			Columns: []string{hpblob.OwnerMemberColumn},
			Bidi:    false,
		},
		"HPBlob",
		"HPMember",
	)
	graph.MustAddE(
		"ameblo_posts",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpblob.AmebloPostsTable,
			Columns: hpblob.AmebloPostsPrimaryKey,
			Bidi:    false,
		},
		"HPBlob",
		"HPAmebloPost",
	)
	graph.MustAddE(
		"ig_posts",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpblob.IgPostsTable,
			Columns: hpblob.IgPostsPrimaryKey,
			Bidi:    false,
		},
		"HPBlob",
		"HPIgPost",
	)
	graph.MustAddE(
		"tagged_artists",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpelineupmallitem.TaggedArtistsTable,
			Columns: hpelineupmallitem.TaggedArtistsPrimaryKey,
			Bidi:    false,
		},
		"HPElineupMallItem",
		"HPArtist",
	)
	graph.MustAddE(
		"tagged_members",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpelineupmallitem.TaggedMembersTable,
			Columns: hpelineupmallitem.TaggedMembersPrimaryKey,
			Bidi:    false,
		},
		"HPElineupMallItem",
		"HPMember",
	)
	graph.MustAddE(
		"members",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpevent.MembersTable,
			Columns: []string{hpevent.MembersColumn},
			Bidi:    false,
		},
		"HPEvent",
		"HPMember",
	)
	graph.MustAddE(
		"artists",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpevent.ArtistsTable,
			Columns: []string{hpevent.ArtistsColumn},
			Bidi:    false,
		},
		"HPEvent",
		"HPArtist",
	)
	graph.MustAddE(
		"hpfc_event_tickets",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpevent.HpfcEventTicketsTable,
			Columns: []string{hpevent.HpfcEventTicketsColumn},
			Bidi:    false,
		},
		"HPEvent",
		"HPFCEventTicket",
	)
	graph.MustAddE(
		"event",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpfceventticket.EventTable,
			Columns: []string{hpfceventticket.EventColumn},
			Bidi:    false,
		},
		"HPFCEventTicket",
		"HPEvent",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpfceventticket.UserTable,
			Columns: []string{hpfceventticket.UserColumn},
			Bidi:    false,
		},
		"HPFCEventTicket",
		"User",
	)
	graph.MustAddE(
		"view_histories",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpfeeditem.ViewHistoriesTable,
			Columns: []string{hpfeeditem.ViewHistoriesColumn},
			Bidi:    false,
		},
		"HPFeedItem",
		"HPViewHistory",
	)
	graph.MustAddE(
		"owner_artist",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpfeeditem.OwnerArtistTable,
			Columns: []string{hpfeeditem.OwnerArtistColumn},
			Bidi:    false,
		},
		"HPFeedItem",
		"HPArtist",
	)
	graph.MustAddE(
		"owner_member",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpfeeditem.OwnerMemberTable,
			Columns: []string{hpfeeditem.OwnerMemberColumn},
			Bidi:    false,
		},
		"HPFeedItem",
		"HPMember",
	)
	graph.MustAddE(
		"tagged_artists",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpfeeditem.TaggedArtistsTable,
			Columns: hpfeeditem.TaggedArtistsPrimaryKey,
			Bidi:    false,
		},
		"HPFeedItem",
		"HPArtist",
	)
	graph.MustAddE(
		"tagged_members",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpfeeditem.TaggedMembersTable,
			Columns: hpfeeditem.TaggedMembersPrimaryKey,
			Bidi:    false,
		},
		"HPFeedItem",
		"HPMember",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpfollow.UserTable,
			Columns: []string{hpfollow.UserColumn},
			Bidi:    false,
		},
		"HPFollow",
		"User",
	)
	graph.MustAddE(
		"member",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hpfollow.MemberTable,
			Columns: []string{hpfollow.MemberColumn},
			Bidi:    false,
		},
		"HPFollow",
		"HPMember",
	)
	graph.MustAddE(
		"owner_artist",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpigpost.OwnerArtistTable,
			Columns: []string{hpigpost.OwnerArtistColumn},
			Bidi:    false,
		},
		"HPIgPost",
		"HPArtist",
	)
	graph.MustAddE(
		"owner_member",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpigpost.OwnerMemberTable,
			Columns: []string{hpigpost.OwnerMemberColumn},
			Bidi:    false,
		},
		"HPIgPost",
		"HPMember",
	)
	graph.MustAddE(
		"asset",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpigpost.AssetTable,
			Columns: []string{hpigpost.AssetColumn},
			Bidi:    false,
		},
		"HPIgPost",
		"HPAsset",
	)
	graph.MustAddE(
		"tagged_artists",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpigpost.TaggedArtistsTable,
			Columns: hpigpost.TaggedArtistsPrimaryKey,
			Bidi:    false,
		},
		"HPIgPost",
		"HPArtist",
	)
	graph.MustAddE(
		"tagged_members",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpigpost.TaggedMembersTable,
			Columns: hpigpost.TaggedMembersPrimaryKey,
			Bidi:    false,
		},
		"HPIgPost",
		"HPMember",
	)
	graph.MustAddE(
		"blobs",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpigpost.BlobsTable,
			Columns: hpigpost.BlobsPrimaryKey,
			Bidi:    false,
		},
		"HPIgPost",
		"HPBlob",
	)
	graph.MustAddE(
		"assets",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpmember.AssetsTable,
			Columns: hpmember.AssetsPrimaryKey,
			Bidi:    false,
		},
		"HPMember",
		"HPAsset",
	)
	graph.MustAddE(
		"artist",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpmember.ArtistTable,
			Columns: []string{hpmember.ArtistColumn},
			Bidi:    false,
		},
		"HPMember",
		"HPArtist",
	)
	graph.MustAddE(
		"owning_feed",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpmember.OwningFeedTable,
			Columns: []string{hpmember.OwningFeedColumn},
			Bidi:    false,
		},
		"HPMember",
		"HPFeedItem",
	)
	graph.MustAddE(
		"tagged_feed",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpmember.TaggedFeedTable,
			Columns: hpmember.TaggedFeedPrimaryKey,
			Bidi:    false,
		},
		"HPMember",
		"HPFeedItem",
	)
	graph.MustAddE(
		"owning_ig_posts",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpmember.OwningIgPostsTable,
			Columns: []string{hpmember.OwningIgPostsColumn},
			Bidi:    false,
		},
		"HPMember",
		"HPIgPost",
	)
	graph.MustAddE(
		"tagged_ig_posts",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpmember.TaggedIgPostsTable,
			Columns: hpmember.TaggedIgPostsPrimaryKey,
			Bidi:    false,
		},
		"HPMember",
		"HPIgPost",
	)
	graph.MustAddE(
		"owning_ameblo_posts",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpmember.OwningAmebloPostsTable,
			Columns: []string{hpmember.OwningAmebloPostsColumn},
			Bidi:    false,
		},
		"HPMember",
		"HPAmebloPost",
	)
	graph.MustAddE(
		"tagged_ameblo_posts",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpmember.TaggedAmebloPostsTable,
			Columns: hpmember.TaggedAmebloPostsPrimaryKey,
			Bidi:    false,
		},
		"HPMember",
		"HPAmebloPost",
	)
	graph.MustAddE(
		"tagged_elineup_mall_items",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpmember.TaggedElineupMallItemsTable,
			Columns: hpmember.TaggedElineupMallItemsPrimaryKey,
			Bidi:    false,
		},
		"HPMember",
		"HPElineupMallItem",
	)
	graph.MustAddE(
		"followed_by",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hpmember.FollowedByTable,
			Columns: []string{hpmember.FollowedByColumn},
			Bidi:    false,
		},
		"HPMember",
		"HPFollow",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpsorthistory.OwnerTable,
			Columns: []string{hpsorthistory.OwnerColumn},
			Bidi:    false,
		},
		"HPSortHistory",
		"User",
	)
	graph.MustAddE(
		"feed",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpviewhistory.FeedTable,
			Columns: []string{hpviewhistory.FeedColumn},
			Bidi:    false,
		},
		"HPViewHistory",
		"HPFeedItem",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpviewhistory.UserTable,
			Columns: []string{hpviewhistory.UserColumn},
			Bidi:    false,
		},
		"HPViewHistory",
		"User",
	)
	graph.MustAddE(
		"auth",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AuthTable,
			Columns: []string{user.AuthColumn},
			Bidi:    false,
		},
		"User",
		"Auth",
	)
	graph.MustAddE(
		"notification_settings",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotificationSettingsTable,
			Columns: []string{user.NotificationSettingsColumn},
			Bidi:    false,
		},
		"User",
		"UserNotificationSetting",
	)
	graph.MustAddE(
		"hpview_history",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.HpviewHistoryTable,
			Columns: []string{user.HpviewHistoryColumn},
			Bidi:    false,
		},
		"User",
		"HPViewHistory",
	)
	graph.MustAddE(
		"hpmember_following",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.HpmemberFollowingTable,
			Columns: []string{user.HpmemberFollowingColumn},
			Bidi:    false,
		},
		"User",
		"HPFollow",
	)
	graph.MustAddE(
		"hpsort_history",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.HpsortHistoryTable,
			Columns: []string{user.HpsortHistoryColumn},
			Bidi:    false,
		},
		"User",
		"HPSortHistory",
	)
	graph.MustAddE(
		"hpfc_event_tickets",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.HpfcEventTicketsTable,
			Columns: []string{user.HpfcEventTicketsColumn},
			Bidi:    false,
		},
		"User",
		"HPFCEventTicket",
	)
	graph.MustAddE(
		"receivers",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   usernotificationlog.ReceiversTable,
			Columns: usernotificationlog.ReceiversPrimaryKey,
			Bidi:    false,
		},
		"UserNotificationLog",
		"UserNotificationSetting",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usernotificationsetting.UserTable,
			Columns: []string{usernotificationsetting.UserColumn},
			Bidi:    false,
		},
		"UserNotificationSetting",
		"User",
	)
	graph.MustAddE(
		"notification_logs",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   usernotificationsetting.NotificationLogsTable,
			Columns: usernotificationsetting.NotificationLogsPrimaryKey,
			Bidi:    false,
		},
		"UserNotificationSetting",
		"UserNotificationLog",
	)
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (aq *AuthQuery) addPredicate(pred func(s *sql.Selector)) {
	aq.predicates = append(aq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AuthQuery builder.
func (aq *AuthQuery) Filter() *AuthFilter {
	return &AuthFilter{config: aq.config, predicateAdder: aq}
}

// addPredicate implements the predicateAdder interface.
func (m *AuthMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AuthMutation builder.
func (m *AuthMutation) Filter() *AuthFilter {
	return &AuthFilter{config: m.config, predicateAdder: m}
}

// AuthFilter provides a generic filtering capability at runtime for AuthQuery.
type AuthFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AuthFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *AuthFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(auth.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *AuthFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(auth.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *AuthFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(auth.FieldUpdatedAt))
}

// WhereProviderName applies the entql string predicate on the provider_name field.
func (f *AuthFilter) WhereProviderName(p entql.StringP) {
	f.Where(p.Field(auth.FieldProviderName))
}

// WhereProviderUserID applies the entql string predicate on the provider_user_id field.
func (f *AuthFilter) WhereProviderUserID(p entql.StringP) {
	f.Where(p.Field(auth.FieldProviderUserID))
}

// WhereAccessToken applies the entql string predicate on the access_token field.
func (f *AuthFilter) WhereAccessToken(p entql.StringP) {
	f.Where(p.Field(auth.FieldAccessToken))
}

// WhereRefreshToken applies the entql string predicate on the refresh_token field.
func (f *AuthFilter) WhereRefreshToken(p entql.StringP) {
	f.Where(p.Field(auth.FieldRefreshToken))
}

// WhereExpireAt applies the entql time.Time predicate on the expire_at field.
func (f *AuthFilter) WhereExpireAt(p entql.TimeP) {
	f.Where(p.Field(auth.FieldExpireAt))
}

// WhereScope applies the entql json.RawMessage predicate on the scope field.
func (f *AuthFilter) WhereScope(p entql.BytesP) {
	f.Where(p.Field(auth.FieldScope))
}

// WhereOwnerUserID applies the entql int predicate on the owner_user_id field.
func (f *AuthFilter) WhereOwnerUserID(p entql.IntP) {
	f.Where(p.Field(auth.FieldOwnerUserID))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *AuthFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *AuthFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (hapq *HPAmebloPostQuery) addPredicate(pred func(s *sql.Selector)) {
	hapq.predicates = append(hapq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the HPAmebloPostQuery builder.
func (hapq *HPAmebloPostQuery) Filter() *HPAmebloPostFilter {
	return &HPAmebloPostFilter{config: hapq.config, predicateAdder: hapq}
}

// addPredicate implements the predicateAdder interface.
func (m *HPAmebloPostMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the HPAmebloPostMutation builder.
func (m *HPAmebloPostMutation) Filter() *HPAmebloPostFilter {
	return &HPAmebloPostFilter{config: m.config, predicateAdder: m}
}

// HPAmebloPostFilter provides a generic filtering capability at runtime for HPAmebloPostQuery.
type HPAmebloPostFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *HPAmebloPostFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *HPAmebloPostFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(hpameblopost.FieldID))
}

// WhereCrawledAt applies the entql time.Time predicate on the crawled_at field.
func (f *HPAmebloPostFilter) WhereCrawledAt(p entql.TimeP) {
	f.Where(p.Field(hpameblopost.FieldCrawledAt))
}

// WhereErrorCount applies the entql int predicate on the error_count field.
func (f *HPAmebloPostFilter) WhereErrorCount(p entql.IntP) {
	f.Where(p.Field(hpameblopost.FieldErrorCount))
}

// WhereManuallyModified applies the entql json.RawMessage predicate on the manually_modified field.
func (f *HPAmebloPostFilter) WhereManuallyModified(p entql.BytesP) {
	f.Where(p.Field(hpameblopost.FieldManuallyModified))
}

// WhereLastErrorMessage applies the entql string predicate on the last_error_message field.
func (f *HPAmebloPostFilter) WhereLastErrorMessage(p entql.StringP) {
	f.Where(p.Field(hpameblopost.FieldLastErrorMessage))
}

// WhereRecrawlRequired applies the entql bool predicate on the recrawl_required field.
func (f *HPAmebloPostFilter) WhereRecrawlRequired(p entql.BoolP) {
	f.Where(p.Field(hpameblopost.FieldRecrawlRequired))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *HPAmebloPostFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(hpameblopost.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *HPAmebloPostFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(hpameblopost.FieldUpdatedAt))
}

// WherePath applies the entql string predicate on the path field.
func (f *HPAmebloPostFilter) WherePath(p entql.StringP) {
	f.Where(p.Field(hpameblopost.FieldPath))
}

// WhereNextPath applies the entql string predicate on the next_path field.
func (f *HPAmebloPostFilter) WhereNextPath(p entql.StringP) {
	f.Where(p.Field(hpameblopost.FieldNextPath))
}

// WherePrevPath applies the entql string predicate on the prev_path field.
func (f *HPAmebloPostFilter) WherePrevPath(p entql.StringP) {
	f.Where(p.Field(hpameblopost.FieldPrevPath))
}

// WhereArtistKey applies the entql string predicate on the artist_key field.
func (f *HPAmebloPostFilter) WhereArtistKey(p entql.StringP) {
	f.Where(p.Field(hpameblopost.FieldArtistKey))
}

// WhereMemberKey applies the entql string predicate on the member_key field.
func (f *HPAmebloPostFilter) WhereMemberKey(p entql.StringP) {
	f.Where(p.Field(hpameblopost.FieldMemberKey))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *HPAmebloPostFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(hpameblopost.FieldTitle))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *HPAmebloPostFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(hpameblopost.FieldDescription))
}

// WhereTheme applies the entql string predicate on the theme field.
func (f *HPAmebloPostFilter) WhereTheme(p entql.StringP) {
	f.Where(p.Field(hpameblopost.FieldTheme))
}

// WherePostAt applies the entql time.Time predicate on the post_at field.
func (f *HPAmebloPostFilter) WherePostAt(p entql.TimeP) {
	f.Where(p.Field(hpameblopost.FieldPostAt))
}

// WhereSource applies the entql string predicate on the source field.
func (f *HPAmebloPostFilter) WhereSource(p entql.StringP) {
	f.Where(p.Field(hpameblopost.FieldSource))
}

// WhereImages applies the entql json.RawMessage predicate on the images field.
func (f *HPAmebloPostFilter) WhereImages(p entql.BytesP) {
	f.Where(p.Field(hpameblopost.FieldImages))
}

// WhereLikes applies the entql int predicate on the likes field.
func (f *HPAmebloPostFilter) WhereLikes(p entql.IntP) {
	f.Where(p.Field(hpameblopost.FieldLikes))
}

// WhereComments applies the entql int predicate on the comments field.
func (f *HPAmebloPostFilter) WhereComments(p entql.IntP) {
	f.Where(p.Field(hpameblopost.FieldComments))
}

// WhereReblogs applies the entql int predicate on the reblogs field.
func (f *HPAmebloPostFilter) WhereReblogs(p entql.IntP) {
	f.Where(p.Field(hpameblopost.FieldReblogs))
}

// WhereOwnerArtistID applies the entql int predicate on the owner_artist_id field.
func (f *HPAmebloPostFilter) WhereOwnerArtistID(p entql.IntP) {
	f.Where(p.Field(hpameblopost.FieldOwnerArtistID))
}

// WhereOwnerMemberID applies the entql int predicate on the owner_member_id field.
func (f *HPAmebloPostFilter) WhereOwnerMemberID(p entql.IntP) {
	f.Where(p.Field(hpameblopost.FieldOwnerMemberID))
}

// WhereHasOwnerArtist applies a predicate to check if query has an edge owner_artist.
func (f *HPAmebloPostFilter) WhereHasOwnerArtist() {
	f.Where(entql.HasEdge("owner_artist"))
}

// WhereHasOwnerArtistWith applies a predicate to check if query has an edge owner_artist with a given conditions (other predicates).
func (f *HPAmebloPostFilter) WhereHasOwnerArtistWith(preds ...predicate.HPArtist) {
	f.Where(entql.HasEdgeWith("owner_artist", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOwnerMember applies a predicate to check if query has an edge owner_member.
func (f *HPAmebloPostFilter) WhereHasOwnerMember() {
	f.Where(entql.HasEdge("owner_member"))
}

// WhereHasOwnerMemberWith applies a predicate to check if query has an edge owner_member with a given conditions (other predicates).
func (f *HPAmebloPostFilter) WhereHasOwnerMemberWith(preds ...predicate.HPMember) {
	f.Where(entql.HasEdgeWith("owner_member", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTaggedArtists applies a predicate to check if query has an edge tagged_artists.
func (f *HPAmebloPostFilter) WhereHasTaggedArtists() {
	f.Where(entql.HasEdge("tagged_artists"))
}

// WhereHasTaggedArtistsWith applies a predicate to check if query has an edge tagged_artists with a given conditions (other predicates).
func (f *HPAmebloPostFilter) WhereHasTaggedArtistsWith(preds ...predicate.HPArtist) {
	f.Where(entql.HasEdgeWith("tagged_artists", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTaggedMembers applies a predicate to check if query has an edge tagged_members.
func (f *HPAmebloPostFilter) WhereHasTaggedMembers() {
	f.Where(entql.HasEdge("tagged_members"))
}

// WhereHasTaggedMembersWith applies a predicate to check if query has an edge tagged_members with a given conditions (other predicates).
func (f *HPAmebloPostFilter) WhereHasTaggedMembersWith(preds ...predicate.HPMember) {
	f.Where(entql.HasEdgeWith("tagged_members", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAsset applies a predicate to check if query has an edge asset.
func (f *HPAmebloPostFilter) WhereHasAsset() {
	f.Where(entql.HasEdge("asset"))
}

// WhereHasAssetWith applies a predicate to check if query has an edge asset with a given conditions (other predicates).
func (f *HPAmebloPostFilter) WhereHasAssetWith(preds ...predicate.HPAsset) {
	f.Where(entql.HasEdgeWith("asset", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBlobs applies a predicate to check if query has an edge blobs.
func (f *HPAmebloPostFilter) WhereHasBlobs() {
	f.Where(entql.HasEdge("blobs"))
}

// WhereHasBlobsWith applies a predicate to check if query has an edge blobs with a given conditions (other predicates).
func (f *HPAmebloPostFilter) WhereHasBlobsWith(preds ...predicate.HPBlob) {
	f.Where(entql.HasEdgeWith("blobs", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (haq *HPArtistQuery) addPredicate(pred func(s *sql.Selector)) {
	haq.predicates = append(haq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the HPArtistQuery builder.
func (haq *HPArtistQuery) Filter() *HPArtistFilter {
	return &HPArtistFilter{config: haq.config, predicateAdder: haq}
}

// addPredicate implements the predicateAdder interface.
func (m *HPArtistMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the HPArtistMutation builder.
func (m *HPArtistMutation) Filter() *HPArtistFilter {
	return &HPArtistFilter{config: m.config, predicateAdder: m}
}

// HPArtistFilter provides a generic filtering capability at runtime for HPArtistQuery.
type HPArtistFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *HPArtistFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *HPArtistFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(hpartist.FieldID))
}

// WhereCrawledAt applies the entql time.Time predicate on the crawled_at field.
func (f *HPArtistFilter) WhereCrawledAt(p entql.TimeP) {
	f.Where(p.Field(hpartist.FieldCrawledAt))
}

// WhereErrorCount applies the entql int predicate on the error_count field.
func (f *HPArtistFilter) WhereErrorCount(p entql.IntP) {
	f.Where(p.Field(hpartist.FieldErrorCount))
}

// WhereManuallyModified applies the entql json.RawMessage predicate on the manually_modified field.
func (f *HPArtistFilter) WhereManuallyModified(p entql.BytesP) {
	f.Where(p.Field(hpartist.FieldManuallyModified))
}

// WhereLastErrorMessage applies the entql string predicate on the last_error_message field.
func (f *HPArtistFilter) WhereLastErrorMessage(p entql.StringP) {
	f.Where(p.Field(hpartist.FieldLastErrorMessage))
}

// WhereRecrawlRequired applies the entql bool predicate on the recrawl_required field.
func (f *HPArtistFilter) WhereRecrawlRequired(p entql.BoolP) {
	f.Where(p.Field(hpartist.FieldRecrawlRequired))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *HPArtistFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(hpartist.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *HPArtistFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(hpartist.FieldUpdatedAt))
}

// WhereKey applies the entql string predicate on the key field.
func (f *HPArtistFilter) WhereKey(p entql.StringP) {
	f.Where(p.Field(hpartist.FieldKey))
}

// WhereName applies the entql string predicate on the name field.
func (f *HPArtistFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(hpartist.FieldName))
}

// WhereThumbnailURL applies the entql string predicate on the thumbnail_url field.
func (f *HPArtistFilter) WhereThumbnailURL(p entql.StringP) {
	f.Where(p.Field(hpartist.FieldThumbnailURL))
}

// WhereIndex applies the entql int predicate on the index field.
func (f *HPArtistFilter) WhereIndex(p entql.IntP) {
	f.Where(p.Field(hpartist.FieldIndex))
}

// WhereHasMembers applies a predicate to check if query has an edge members.
func (f *HPArtistFilter) WhereHasMembers() {
	f.Where(entql.HasEdge("members"))
}

// WhereHasMembersWith applies a predicate to check if query has an edge members with a given conditions (other predicates).
func (f *HPArtistFilter) WhereHasMembersWith(preds ...predicate.HPMember) {
	f.Where(entql.HasEdgeWith("members", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAssets applies a predicate to check if query has an edge assets.
func (f *HPArtistFilter) WhereHasAssets() {
	f.Where(entql.HasEdge("assets"))
}

// WhereHasAssetsWith applies a predicate to check if query has an edge assets with a given conditions (other predicates).
func (f *HPArtistFilter) WhereHasAssetsWith(preds ...predicate.HPAsset) {
	f.Where(entql.HasEdgeWith("assets", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOwningFeed applies a predicate to check if query has an edge owning_feed.
func (f *HPArtistFilter) WhereHasOwningFeed() {
	f.Where(entql.HasEdge("owning_feed"))
}

// WhereHasOwningFeedWith applies a predicate to check if query has an edge owning_feed with a given conditions (other predicates).
func (f *HPArtistFilter) WhereHasOwningFeedWith(preds ...predicate.HPFeedItem) {
	f.Where(entql.HasEdgeWith("owning_feed", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTaggedFeed applies a predicate to check if query has an edge tagged_feed.
func (f *HPArtistFilter) WhereHasTaggedFeed() {
	f.Where(entql.HasEdge("tagged_feed"))
}

// WhereHasTaggedFeedWith applies a predicate to check if query has an edge tagged_feed with a given conditions (other predicates).
func (f *HPArtistFilter) WhereHasTaggedFeedWith(preds ...predicate.HPFeedItem) {
	f.Where(entql.HasEdgeWith("tagged_feed", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOwningIgPosts applies a predicate to check if query has an edge owning_ig_posts.
func (f *HPArtistFilter) WhereHasOwningIgPosts() {
	f.Where(entql.HasEdge("owning_ig_posts"))
}

// WhereHasOwningIgPostsWith applies a predicate to check if query has an edge owning_ig_posts with a given conditions (other predicates).
func (f *HPArtistFilter) WhereHasOwningIgPostsWith(preds ...predicate.HPIgPost) {
	f.Where(entql.HasEdgeWith("owning_ig_posts", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTaggedIgPosts applies a predicate to check if query has an edge tagged_ig_posts.
func (f *HPArtistFilter) WhereHasTaggedIgPosts() {
	f.Where(entql.HasEdge("tagged_ig_posts"))
}

// WhereHasTaggedIgPostsWith applies a predicate to check if query has an edge tagged_ig_posts with a given conditions (other predicates).
func (f *HPArtistFilter) WhereHasTaggedIgPostsWith(preds ...predicate.HPIgPost) {
	f.Where(entql.HasEdgeWith("tagged_ig_posts", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOwningAmebloPosts applies a predicate to check if query has an edge owning_ameblo_posts.
func (f *HPArtistFilter) WhereHasOwningAmebloPosts() {
	f.Where(entql.HasEdge("owning_ameblo_posts"))
}

// WhereHasOwningAmebloPostsWith applies a predicate to check if query has an edge owning_ameblo_posts with a given conditions (other predicates).
func (f *HPArtistFilter) WhereHasOwningAmebloPostsWith(preds ...predicate.HPAmebloPost) {
	f.Where(entql.HasEdgeWith("owning_ameblo_posts", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTaggedAmebloPosts applies a predicate to check if query has an edge tagged_ameblo_posts.
func (f *HPArtistFilter) WhereHasTaggedAmebloPosts() {
	f.Where(entql.HasEdge("tagged_ameblo_posts"))
}

// WhereHasTaggedAmebloPostsWith applies a predicate to check if query has an edge tagged_ameblo_posts with a given conditions (other predicates).
func (f *HPArtistFilter) WhereHasTaggedAmebloPostsWith(preds ...predicate.HPAmebloPost) {
	f.Where(entql.HasEdgeWith("tagged_ameblo_posts", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTaggedElineupMallItems applies a predicate to check if query has an edge tagged_elineup_mall_items.
func (f *HPArtistFilter) WhereHasTaggedElineupMallItems() {
	f.Where(entql.HasEdge("tagged_elineup_mall_items"))
}

// WhereHasTaggedElineupMallItemsWith applies a predicate to check if query has an edge tagged_elineup_mall_items with a given conditions (other predicates).
func (f *HPArtistFilter) WhereHasTaggedElineupMallItemsWith(preds ...predicate.HPElineupMallItem) {
	f.Where(entql.HasEdgeWith("tagged_elineup_mall_items", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (haq *HPAssetQuery) addPredicate(pred func(s *sql.Selector)) {
	haq.predicates = append(haq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the HPAssetQuery builder.
func (haq *HPAssetQuery) Filter() *HPAssetFilter {
	return &HPAssetFilter{config: haq.config, predicateAdder: haq}
}

// addPredicate implements the predicateAdder interface.
func (m *HPAssetMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the HPAssetMutation builder.
func (m *HPAssetMutation) Filter() *HPAssetFilter {
	return &HPAssetFilter{config: m.config, predicateAdder: m}
}

// HPAssetFilter provides a generic filtering capability at runtime for HPAssetQuery.
type HPAssetFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *HPAssetFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *HPAssetFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(hpasset.FieldID))
}

// WhereKey applies the entql string predicate on the key field.
func (f *HPAssetFilter) WhereKey(p entql.StringP) {
	f.Where(p.Field(hpasset.FieldKey))
}

// WhereAssetType applies the entql string predicate on the asset_type field.
func (f *HPAssetFilter) WhereAssetType(p entql.StringP) {
	f.Where(p.Field(hpasset.FieldAssetType))
}

// WhereHasArtist applies a predicate to check if query has an edge artist.
func (f *HPAssetFilter) WhereHasArtist() {
	f.Where(entql.HasEdge("artist"))
}

// WhereHasArtistWith applies a predicate to check if query has an edge artist with a given conditions (other predicates).
func (f *HPAssetFilter) WhereHasArtistWith(preds ...predicate.HPArtist) {
	f.Where(entql.HasEdgeWith("artist", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasMembers applies a predicate to check if query has an edge members.
func (f *HPAssetFilter) WhereHasMembers() {
	f.Where(entql.HasEdge("members"))
}

// WhereHasMembersWith applies a predicate to check if query has an edge members with a given conditions (other predicates).
func (f *HPAssetFilter) WhereHasMembersWith(preds ...predicate.HPMember) {
	f.Where(entql.HasEdgeWith("members", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAmebloPosts applies a predicate to check if query has an edge ameblo_posts.
func (f *HPAssetFilter) WhereHasAmebloPosts() {
	f.Where(entql.HasEdge("ameblo_posts"))
}

// WhereHasAmebloPostsWith applies a predicate to check if query has an edge ameblo_posts with a given conditions (other predicates).
func (f *HPAssetFilter) WhereHasAmebloPostsWith(preds ...predicate.HPAmebloPost) {
	f.Where(entql.HasEdgeWith("ameblo_posts", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasIgPosts applies a predicate to check if query has an edge ig_posts.
func (f *HPAssetFilter) WhereHasIgPosts() {
	f.Where(entql.HasEdge("ig_posts"))
}

// WhereHasIgPostsWith applies a predicate to check if query has an edge ig_posts with a given conditions (other predicates).
func (f *HPAssetFilter) WhereHasIgPostsWith(preds ...predicate.HPIgPost) {
	f.Where(entql.HasEdgeWith("ig_posts", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (hbq *HPBlobQuery) addPredicate(pred func(s *sql.Selector)) {
	hbq.predicates = append(hbq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the HPBlobQuery builder.
func (hbq *HPBlobQuery) Filter() *HPBlobFilter {
	return &HPBlobFilter{config: hbq.config, predicateAdder: hbq}
}

// addPredicate implements the predicateAdder interface.
func (m *HPBlobMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the HPBlobMutation builder.
func (m *HPBlobMutation) Filter() *HPBlobFilter {
	return &HPBlobFilter{config: m.config, predicateAdder: m}
}

// HPBlobFilter provides a generic filtering capability at runtime for HPBlobQuery.
type HPBlobFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *HPBlobFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[4].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *HPBlobFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(hpblob.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *HPBlobFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(hpblob.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *HPBlobFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(hpblob.FieldUpdatedAt))
}

// WhereStoragePath applies the entql string predicate on the storage_path field.
func (f *HPBlobFilter) WhereStoragePath(p entql.StringP) {
	f.Where(p.Field(hpblob.FieldStoragePath))
}

// WhereSourceURL applies the entql string predicate on the source_url field.
func (f *HPBlobFilter) WhereSourceURL(p entql.StringP) {
	f.Where(p.Field(hpblob.FieldSourceURL))
}

// WhereSourceHTMLURL applies the entql string predicate on the source_html_url field.
func (f *HPBlobFilter) WhereSourceHTMLURL(p entql.StringP) {
	f.Where(p.Field(hpblob.FieldSourceHTMLURL))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *HPBlobFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(hpblob.FieldStatus))
}

// WhereStatusMessage applies the entql string predicate on the status_message field.
func (f *HPBlobFilter) WhereStatusMessage(p entql.StringP) {
	f.Where(p.Field(hpblob.FieldStatusMessage))
}

// WhereStatusErrorCount applies the entql int predicate on the status_error_count field.
func (f *HPBlobFilter) WhereStatusErrorCount(p entql.IntP) {
	f.Where(p.Field(hpblob.FieldStatusErrorCount))
}

// WhereType applies the entql string predicate on the type field.
func (f *HPBlobFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(hpblob.FieldType))
}

// WhereSubType applies the entql string predicate on the sub_type field.
func (f *HPBlobFilter) WhereSubType(p entql.StringP) {
	f.Where(p.Field(hpblob.FieldSubType))
}

// WhereWidth applies the entql int predicate on the width field.
func (f *HPBlobFilter) WhereWidth(p entql.IntP) {
	f.Where(p.Field(hpblob.FieldWidth))
}

// WhereHeight applies the entql int predicate on the height field.
func (f *HPBlobFilter) WhereHeight(p entql.IntP) {
	f.Where(p.Field(hpblob.FieldHeight))
}

// WhereSize applies the entql int64 predicate on the size field.
func (f *HPBlobFilter) WhereSize(p entql.Int64P) {
	f.Where(p.Field(hpblob.FieldSize))
}

// WhereOwnerArtistID applies the entql int predicate on the owner_artist_id field.
func (f *HPBlobFilter) WhereOwnerArtistID(p entql.IntP) {
	f.Where(p.Field(hpblob.FieldOwnerArtistID))
}

// WhereOwnerMemberID applies the entql int predicate on the owner_member_id field.
func (f *HPBlobFilter) WhereOwnerMemberID(p entql.IntP) {
	f.Where(p.Field(hpblob.FieldOwnerMemberID))
}

// WhereNumFaces applies the entql int predicate on the num_faces field.
func (f *HPBlobFilter) WhereNumFaces(p entql.IntP) {
	f.Where(p.Field(hpblob.FieldNumFaces))
}

// WhereFaces applies the entql json.RawMessage predicate on the faces field.
func (f *HPBlobFilter) WhereFaces(p entql.BytesP) {
	f.Where(p.Field(hpblob.FieldFaces))
}

// WhereFaceRecognitionStatus applies the entql string predicate on the face_recognition_status field.
func (f *HPBlobFilter) WhereFaceRecognitionStatus(p entql.StringP) {
	f.Where(p.Field(hpblob.FieldFaceRecognitionStatus))
}

// WhereThumbnail applies the entql json.RawMessage predicate on the thumbnail field.
func (f *HPBlobFilter) WhereThumbnail(p entql.BytesP) {
	f.Where(p.Field(hpblob.FieldThumbnail))
}

// WhereDurationSeconds applies the entql float64 predicate on the duration_seconds field.
func (f *HPBlobFilter) WhereDurationSeconds(p entql.Float64P) {
	f.Where(p.Field(hpblob.FieldDurationSeconds))
}

// WhereHasOwnerArtist applies a predicate to check if query has an edge owner_artist.
func (f *HPBlobFilter) WhereHasOwnerArtist() {
	f.Where(entql.HasEdge("owner_artist"))
}

// WhereHasOwnerArtistWith applies a predicate to check if query has an edge owner_artist with a given conditions (other predicates).
func (f *HPBlobFilter) WhereHasOwnerArtistWith(preds ...predicate.HPArtist) {
	f.Where(entql.HasEdgeWith("owner_artist", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOwnerMember applies a predicate to check if query has an edge owner_member.
func (f *HPBlobFilter) WhereHasOwnerMember() {
	f.Where(entql.HasEdge("owner_member"))
}

// WhereHasOwnerMemberWith applies a predicate to check if query has an edge owner_member with a given conditions (other predicates).
func (f *HPBlobFilter) WhereHasOwnerMemberWith(preds ...predicate.HPMember) {
	f.Where(entql.HasEdgeWith("owner_member", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAmebloPosts applies a predicate to check if query has an edge ameblo_posts.
func (f *HPBlobFilter) WhereHasAmebloPosts() {
	f.Where(entql.HasEdge("ameblo_posts"))
}

// WhereHasAmebloPostsWith applies a predicate to check if query has an edge ameblo_posts with a given conditions (other predicates).
func (f *HPBlobFilter) WhereHasAmebloPostsWith(preds ...predicate.HPAmebloPost) {
	f.Where(entql.HasEdgeWith("ameblo_posts", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasIgPosts applies a predicate to check if query has an edge ig_posts.
func (f *HPBlobFilter) WhereHasIgPosts() {
	f.Where(entql.HasEdge("ig_posts"))
}

// WhereHasIgPostsWith applies a predicate to check if query has an edge ig_posts with a given conditions (other predicates).
func (f *HPBlobFilter) WhereHasIgPostsWith(preds ...predicate.HPIgPost) {
	f.Where(entql.HasEdgeWith("ig_posts", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (hemiq *HPElineupMallItemQuery) addPredicate(pred func(s *sql.Selector)) {
	hemiq.predicates = append(hemiq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the HPElineupMallItemQuery builder.
func (hemiq *HPElineupMallItemQuery) Filter() *HPElineupMallItemFilter {
	return &HPElineupMallItemFilter{config: hemiq.config, predicateAdder: hemiq}
}

// addPredicate implements the predicateAdder interface.
func (m *HPElineupMallItemMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the HPElineupMallItemMutation builder.
func (m *HPElineupMallItemMutation) Filter() *HPElineupMallItemFilter {
	return &HPElineupMallItemFilter{config: m.config, predicateAdder: m}
}

// HPElineupMallItemFilter provides a generic filtering capability at runtime for HPElineupMallItemQuery.
type HPElineupMallItemFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *HPElineupMallItemFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[5].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *HPElineupMallItemFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(hpelineupmallitem.FieldID))
}

// WhereCrawledAt applies the entql time.Time predicate on the crawled_at field.
func (f *HPElineupMallItemFilter) WhereCrawledAt(p entql.TimeP) {
	f.Where(p.Field(hpelineupmallitem.FieldCrawledAt))
}

// WhereErrorCount applies the entql int predicate on the error_count field.
func (f *HPElineupMallItemFilter) WhereErrorCount(p entql.IntP) {
	f.Where(p.Field(hpelineupmallitem.FieldErrorCount))
}

// WhereManuallyModified applies the entql json.RawMessage predicate on the manually_modified field.
func (f *HPElineupMallItemFilter) WhereManuallyModified(p entql.BytesP) {
	f.Where(p.Field(hpelineupmallitem.FieldManuallyModified))
}

// WhereLastErrorMessage applies the entql string predicate on the last_error_message field.
func (f *HPElineupMallItemFilter) WhereLastErrorMessage(p entql.StringP) {
	f.Where(p.Field(hpelineupmallitem.FieldLastErrorMessage))
}

// WhereRecrawlRequired applies the entql bool predicate on the recrawl_required field.
func (f *HPElineupMallItemFilter) WhereRecrawlRequired(p entql.BoolP) {
	f.Where(p.Field(hpelineupmallitem.FieldRecrawlRequired))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *HPElineupMallItemFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(hpelineupmallitem.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *HPElineupMallItemFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(hpelineupmallitem.FieldUpdatedAt))
}

// WherePermalink applies the entql string predicate on the permalink field.
func (f *HPElineupMallItemFilter) WherePermalink(p entql.StringP) {
	f.Where(p.Field(hpelineupmallitem.FieldPermalink))
}

// WhereName applies the entql string predicate on the name field.
func (f *HPElineupMallItemFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(hpelineupmallitem.FieldName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *HPElineupMallItemFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(hpelineupmallitem.FieldDescription))
}

// WhereSupplier applies the entql string predicate on the supplier field.
func (f *HPElineupMallItemFilter) WhereSupplier(p entql.StringP) {
	f.Where(p.Field(hpelineupmallitem.FieldSupplier))
}

// WherePrice applies the entql int predicate on the price field.
func (f *HPElineupMallItemFilter) WherePrice(p entql.IntP) {
	f.Where(p.Field(hpelineupmallitem.FieldPrice))
}

// WhereIsLimitedToFc applies the entql bool predicate on the is_limited_to_fc field.
func (f *HPElineupMallItemFilter) WhereIsLimitedToFc(p entql.BoolP) {
	f.Where(p.Field(hpelineupmallitem.FieldIsLimitedToFc))
}

// WhereIsOutOfStock applies the entql bool predicate on the is_out_of_stock field.
func (f *HPElineupMallItemFilter) WhereIsOutOfStock(p entql.BoolP) {
	f.Where(p.Field(hpelineupmallitem.FieldIsOutOfStock))
}

// WhereImages applies the entql json.RawMessage predicate on the images field.
func (f *HPElineupMallItemFilter) WhereImages(p entql.BytesP) {
	f.Where(p.Field(hpelineupmallitem.FieldImages))
}

// WhereCategory applies the entql string predicate on the category field.
func (f *HPElineupMallItemFilter) WhereCategory(p entql.StringP) {
	f.Where(p.Field(hpelineupmallitem.FieldCategory))
}

// WhereOrderStartAt applies the entql time.Time predicate on the order_start_at field.
func (f *HPElineupMallItemFilter) WhereOrderStartAt(p entql.TimeP) {
	f.Where(p.Field(hpelineupmallitem.FieldOrderStartAt))
}

// WhereOrderEndAt applies the entql time.Time predicate on the order_end_at field.
func (f *HPElineupMallItemFilter) WhereOrderEndAt(p entql.TimeP) {
	f.Where(p.Field(hpelineupmallitem.FieldOrderEndAt))
}

// WhereHasTaggedArtists applies a predicate to check if query has an edge tagged_artists.
func (f *HPElineupMallItemFilter) WhereHasTaggedArtists() {
	f.Where(entql.HasEdge("tagged_artists"))
}

// WhereHasTaggedArtistsWith applies a predicate to check if query has an edge tagged_artists with a given conditions (other predicates).
func (f *HPElineupMallItemFilter) WhereHasTaggedArtistsWith(preds ...predicate.HPArtist) {
	f.Where(entql.HasEdgeWith("tagged_artists", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTaggedMembers applies a predicate to check if query has an edge tagged_members.
func (f *HPElineupMallItemFilter) WhereHasTaggedMembers() {
	f.Where(entql.HasEdge("tagged_members"))
}

// WhereHasTaggedMembersWith applies a predicate to check if query has an edge tagged_members with a given conditions (other predicates).
func (f *HPElineupMallItemFilter) WhereHasTaggedMembersWith(preds ...predicate.HPMember) {
	f.Where(entql.HasEdgeWith("tagged_members", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (heq *HPEventQuery) addPredicate(pred func(s *sql.Selector)) {
	heq.predicates = append(heq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the HPEventQuery builder.
func (heq *HPEventQuery) Filter() *HPEventFilter {
	return &HPEventFilter{config: heq.config, predicateAdder: heq}
}

// addPredicate implements the predicateAdder interface.
func (m *HPEventMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the HPEventMutation builder.
func (m *HPEventMutation) Filter() *HPEventFilter {
	return &HPEventFilter{config: m.config, predicateAdder: m}
}

// HPEventFilter provides a generic filtering capability at runtime for HPEventQuery.
type HPEventFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *HPEventFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[6].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *HPEventFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(hpevent.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *HPEventFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(hpevent.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *HPEventFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(hpevent.FieldUpdatedAt))
}

// WhereKey applies the entql string predicate on the key field.
func (f *HPEventFilter) WhereKey(p entql.StringP) {
	f.Where(p.Field(hpevent.FieldKey))
}

// WhereDisplayTitles applies the entql json.RawMessage predicate on the display_titles field.
func (f *HPEventFilter) WhereDisplayTitles(p entql.BytesP) {
	f.Where(p.Field(hpevent.FieldDisplayTitles))
}

// WhereOpenAt applies the entql time.Time predicate on the open_at field.
func (f *HPEventFilter) WhereOpenAt(p entql.TimeP) {
	f.Where(p.Field(hpevent.FieldOpenAt))
}

// WhereStartAt applies the entql time.Time predicate on the start_at field.
func (f *HPEventFilter) WhereStartAt(p entql.TimeP) {
	f.Where(p.Field(hpevent.FieldStartAt))
}

// WhereVenue applies the entql string predicate on the venue field.
func (f *HPEventFilter) WhereVenue(p entql.StringP) {
	f.Where(p.Field(hpevent.FieldVenue))
}

// WherePrefecture applies the entql string predicate on the prefecture field.
func (f *HPEventFilter) WherePrefecture(p entql.StringP) {
	f.Where(p.Field(hpevent.FieldPrefecture))
}

// WhereSource applies the entql string predicate on the source field.
func (f *HPEventFilter) WhereSource(p entql.StringP) {
	f.Where(p.Field(hpevent.FieldSource))
}

// WhereHasMembers applies a predicate to check if query has an edge members.
func (f *HPEventFilter) WhereHasMembers() {
	f.Where(entql.HasEdge("members"))
}

// WhereHasMembersWith applies a predicate to check if query has an edge members with a given conditions (other predicates).
func (f *HPEventFilter) WhereHasMembersWith(preds ...predicate.HPMember) {
	f.Where(entql.HasEdgeWith("members", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasArtists applies a predicate to check if query has an edge artists.
func (f *HPEventFilter) WhereHasArtists() {
	f.Where(entql.HasEdge("artists"))
}

// WhereHasArtistsWith applies a predicate to check if query has an edge artists with a given conditions (other predicates).
func (f *HPEventFilter) WhereHasArtistsWith(preds ...predicate.HPArtist) {
	f.Where(entql.HasEdgeWith("artists", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasHpfcEventTickets applies a predicate to check if query has an edge hpfc_event_tickets.
func (f *HPEventFilter) WhereHasHpfcEventTickets() {
	f.Where(entql.HasEdge("hpfc_event_tickets"))
}

// WhereHasHpfcEventTicketsWith applies a predicate to check if query has an edge hpfc_event_tickets with a given conditions (other predicates).
func (f *HPEventFilter) WhereHasHpfcEventTicketsWith(preds ...predicate.HPFCEventTicket) {
	f.Where(entql.HasEdgeWith("hpfc_event_tickets", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (hetq *HPFCEventTicketQuery) addPredicate(pred func(s *sql.Selector)) {
	hetq.predicates = append(hetq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the HPFCEventTicketQuery builder.
func (hetq *HPFCEventTicketQuery) Filter() *HPFCEventTicketFilter {
	return &HPFCEventTicketFilter{config: hetq.config, predicateAdder: hetq}
}

// addPredicate implements the predicateAdder interface.
func (m *HPFCEventTicketMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the HPFCEventTicketMutation builder.
func (m *HPFCEventTicketMutation) Filter() *HPFCEventTicketFilter {
	return &HPFCEventTicketFilter{config: m.config, predicateAdder: m}
}

// HPFCEventTicketFilter provides a generic filtering capability at runtime for HPFCEventTicketQuery.
type HPFCEventTicketFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *HPFCEventTicketFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[7].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *HPFCEventTicketFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(hpfceventticket.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *HPFCEventTicketFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(hpfceventticket.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *HPFCEventTicketFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(hpfceventticket.FieldUpdatedAt))
}

// WhereNum applies the entql int predicate on the num field.
func (f *HPFCEventTicketFilter) WhereNum(p entql.IntP) {
	f.Where(p.Field(hpfceventticket.FieldNum))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *HPFCEventTicketFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(hpfceventticket.FieldStatus))
}

// WhereFcMemberSha256 applies the entql string predicate on the fc_member_sha256 field.
func (f *HPFCEventTicketFilter) WhereFcMemberSha256(p entql.StringP) {
	f.Where(p.Field(hpfceventticket.FieldFcMemberSha256))
}

// WhereApplicationTitle applies the entql string predicate on the application_title field.
func (f *HPFCEventTicketFilter) WhereApplicationTitle(p entql.StringP) {
	f.Where(p.Field(hpfceventticket.FieldApplicationTitle))
}

// WhereApplicationID applies the entql string predicate on the application_id field.
func (f *HPFCEventTicketFilter) WhereApplicationID(p entql.StringP) {
	f.Where(p.Field(hpfceventticket.FieldApplicationID))
}

// WhereApplicationStartDate applies the entql time.Time predicate on the application_start_date field.
func (f *HPFCEventTicketFilter) WhereApplicationStartDate(p entql.TimeP) {
	f.Where(p.Field(hpfceventticket.FieldApplicationStartDate))
}

// WhereApplicationDueDate applies the entql time.Time predicate on the application_due_date field.
func (f *HPFCEventTicketFilter) WhereApplicationDueDate(p entql.TimeP) {
	f.Where(p.Field(hpfceventticket.FieldApplicationDueDate))
}

// WherePaymentStartDate applies the entql time.Time predicate on the payment_start_date field.
func (f *HPFCEventTicketFilter) WherePaymentStartDate(p entql.TimeP) {
	f.Where(p.Field(hpfceventticket.FieldPaymentStartDate))
}

// WherePaymentDueDate applies the entql time.Time predicate on the payment_due_date field.
func (f *HPFCEventTicketFilter) WherePaymentDueDate(p entql.TimeP) {
	f.Where(p.Field(hpfceventticket.FieldPaymentDueDate))
}

// WhereOwnerUserID applies the entql int predicate on the owner_user_id field.
func (f *HPFCEventTicketFilter) WhereOwnerUserID(p entql.IntP) {
	f.Where(p.Field(hpfceventticket.FieldOwnerUserID))
}

// WhereHasEvent applies a predicate to check if query has an edge event.
func (f *HPFCEventTicketFilter) WhereHasEvent() {
	f.Where(entql.HasEdge("event"))
}

// WhereHasEventWith applies a predicate to check if query has an edge event with a given conditions (other predicates).
func (f *HPFCEventTicketFilter) WhereHasEventWith(preds ...predicate.HPEvent) {
	f.Where(entql.HasEdgeWith("event", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *HPFCEventTicketFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *HPFCEventTicketFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (hfiq *HPFeedItemQuery) addPredicate(pred func(s *sql.Selector)) {
	hfiq.predicates = append(hfiq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the HPFeedItemQuery builder.
func (hfiq *HPFeedItemQuery) Filter() *HPFeedItemFilter {
	return &HPFeedItemFilter{config: hfiq.config, predicateAdder: hfiq}
}

// addPredicate implements the predicateAdder interface.
func (m *HPFeedItemMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the HPFeedItemMutation builder.
func (m *HPFeedItemMutation) Filter() *HPFeedItemFilter {
	return &HPFeedItemFilter{config: m.config, predicateAdder: m}
}

// HPFeedItemFilter provides a generic filtering capability at runtime for HPFeedItemQuery.
type HPFeedItemFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *HPFeedItemFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[8].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *HPFeedItemFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(hpfeeditem.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *HPFeedItemFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(hpfeeditem.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *HPFeedItemFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(hpfeeditem.FieldUpdatedAt))
}

// WhereSourceID applies the entql int predicate on the source_id field.
func (f *HPFeedItemFilter) WhereSourceID(p entql.IntP) {
	f.Where(p.Field(hpfeeditem.FieldSourceID))
}

// WhereAssetType applies the entql string predicate on the asset_type field.
func (f *HPFeedItemFilter) WhereAssetType(p entql.StringP) {
	f.Where(p.Field(hpfeeditem.FieldAssetType))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *HPFeedItemFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(hpfeeditem.FieldTitle))
}

// WherePostAt applies the entql time.Time predicate on the post_at field.
func (f *HPFeedItemFilter) WherePostAt(p entql.TimeP) {
	f.Where(p.Field(hpfeeditem.FieldPostAt))
}

// WhereSourceURL applies the entql string predicate on the source_url field.
func (f *HPFeedItemFilter) WhereSourceURL(p entql.StringP) {
	f.Where(p.Field(hpfeeditem.FieldSourceURL))
}

// WhereImageURL applies the entql string predicate on the image_url field.
func (f *HPFeedItemFilter) WhereImageURL(p entql.StringP) {
	f.Where(p.Field(hpfeeditem.FieldImageURL))
}

// WhereMedia applies the entql json.RawMessage predicate on the media field.
func (f *HPFeedItemFilter) WhereMedia(p entql.BytesP) {
	f.Where(p.Field(hpfeeditem.FieldMedia))
}

// WhereOwnerArtistID applies the entql int predicate on the owner_artist_id field.
func (f *HPFeedItemFilter) WhereOwnerArtistID(p entql.IntP) {
	f.Where(p.Field(hpfeeditem.FieldOwnerArtistID))
}

// WhereOwnerMemberID applies the entql int predicate on the owner_member_id field.
func (f *HPFeedItemFilter) WhereOwnerMemberID(p entql.IntP) {
	f.Where(p.Field(hpfeeditem.FieldOwnerMemberID))
}

// WhereHasViewHistories applies a predicate to check if query has an edge view_histories.
func (f *HPFeedItemFilter) WhereHasViewHistories() {
	f.Where(entql.HasEdge("view_histories"))
}

// WhereHasViewHistoriesWith applies a predicate to check if query has an edge view_histories with a given conditions (other predicates).
func (f *HPFeedItemFilter) WhereHasViewHistoriesWith(preds ...predicate.HPViewHistory) {
	f.Where(entql.HasEdgeWith("view_histories", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOwnerArtist applies a predicate to check if query has an edge owner_artist.
func (f *HPFeedItemFilter) WhereHasOwnerArtist() {
	f.Where(entql.HasEdge("owner_artist"))
}

// WhereHasOwnerArtistWith applies a predicate to check if query has an edge owner_artist with a given conditions (other predicates).
func (f *HPFeedItemFilter) WhereHasOwnerArtistWith(preds ...predicate.HPArtist) {
	f.Where(entql.HasEdgeWith("owner_artist", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOwnerMember applies a predicate to check if query has an edge owner_member.
func (f *HPFeedItemFilter) WhereHasOwnerMember() {
	f.Where(entql.HasEdge("owner_member"))
}

// WhereHasOwnerMemberWith applies a predicate to check if query has an edge owner_member with a given conditions (other predicates).
func (f *HPFeedItemFilter) WhereHasOwnerMemberWith(preds ...predicate.HPMember) {
	f.Where(entql.HasEdgeWith("owner_member", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTaggedArtists applies a predicate to check if query has an edge tagged_artists.
func (f *HPFeedItemFilter) WhereHasTaggedArtists() {
	f.Where(entql.HasEdge("tagged_artists"))
}

// WhereHasTaggedArtistsWith applies a predicate to check if query has an edge tagged_artists with a given conditions (other predicates).
func (f *HPFeedItemFilter) WhereHasTaggedArtistsWith(preds ...predicate.HPArtist) {
	f.Where(entql.HasEdgeWith("tagged_artists", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTaggedMembers applies a predicate to check if query has an edge tagged_members.
func (f *HPFeedItemFilter) WhereHasTaggedMembers() {
	f.Where(entql.HasEdge("tagged_members"))
}

// WhereHasTaggedMembersWith applies a predicate to check if query has an edge tagged_members with a given conditions (other predicates).
func (f *HPFeedItemFilter) WhereHasTaggedMembersWith(preds ...predicate.HPMember) {
	f.Where(entql.HasEdgeWith("tagged_members", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (hfq *HPFollowQuery) addPredicate(pred func(s *sql.Selector)) {
	hfq.predicates = append(hfq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the HPFollowQuery builder.
func (hfq *HPFollowQuery) Filter() *HPFollowFilter {
	return &HPFollowFilter{config: hfq.config, predicateAdder: hfq}
}

// addPredicate implements the predicateAdder interface.
func (m *HPFollowMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the HPFollowMutation builder.
func (m *HPFollowMutation) Filter() *HPFollowFilter {
	return &HPFollowFilter{config: m.config, predicateAdder: m}
}

// HPFollowFilter provides a generic filtering capability at runtime for HPFollowQuery.
type HPFollowFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *HPFollowFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[9].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *HPFollowFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(hpfollow.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *HPFollowFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(hpfollow.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *HPFollowFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(hpfollow.FieldUpdatedAt))
}

// WhereType applies the entql string predicate on the type field.
func (f *HPFollowFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(hpfollow.FieldType))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *HPFollowFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *HPFollowFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasMember applies a predicate to check if query has an edge member.
func (f *HPFollowFilter) WhereHasMember() {
	f.Where(entql.HasEdge("member"))
}

// WhereHasMemberWith applies a predicate to check if query has an edge member with a given conditions (other predicates).
func (f *HPFollowFilter) WhereHasMemberWith(preds ...predicate.HPMember) {
	f.Where(entql.HasEdgeWith("member", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (hipq *HPIgPostQuery) addPredicate(pred func(s *sql.Selector)) {
	hipq.predicates = append(hipq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the HPIgPostQuery builder.
func (hipq *HPIgPostQuery) Filter() *HPIgPostFilter {
	return &HPIgPostFilter{config: hipq.config, predicateAdder: hipq}
}

// addPredicate implements the predicateAdder interface.
func (m *HPIgPostMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the HPIgPostMutation builder.
func (m *HPIgPostMutation) Filter() *HPIgPostFilter {
	return &HPIgPostFilter{config: m.config, predicateAdder: m}
}

// HPIgPostFilter provides a generic filtering capability at runtime for HPIgPostQuery.
type HPIgPostFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *HPIgPostFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[10].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *HPIgPostFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(hpigpost.FieldID))
}

// WhereCrawledAt applies the entql time.Time predicate on the crawled_at field.
func (f *HPIgPostFilter) WhereCrawledAt(p entql.TimeP) {
	f.Where(p.Field(hpigpost.FieldCrawledAt))
}

// WhereErrorCount applies the entql int predicate on the error_count field.
func (f *HPIgPostFilter) WhereErrorCount(p entql.IntP) {
	f.Where(p.Field(hpigpost.FieldErrorCount))
}

// WhereManuallyModified applies the entql json.RawMessage predicate on the manually_modified field.
func (f *HPIgPostFilter) WhereManuallyModified(p entql.BytesP) {
	f.Where(p.Field(hpigpost.FieldManuallyModified))
}

// WhereLastErrorMessage applies the entql string predicate on the last_error_message field.
func (f *HPIgPostFilter) WhereLastErrorMessage(p entql.StringP) {
	f.Where(p.Field(hpigpost.FieldLastErrorMessage))
}

// WhereRecrawlRequired applies the entql bool predicate on the recrawl_required field.
func (f *HPIgPostFilter) WhereRecrawlRequired(p entql.BoolP) {
	f.Where(p.Field(hpigpost.FieldRecrawlRequired))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *HPIgPostFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(hpigpost.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *HPIgPostFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(hpigpost.FieldUpdatedAt))
}

// WhereShortcode applies the entql string predicate on the shortcode field.
func (f *HPIgPostFilter) WhereShortcode(p entql.StringP) {
	f.Where(p.Field(hpigpost.FieldShortcode))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *HPIgPostFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(hpigpost.FieldDescription))
}

// WherePostAt applies the entql time.Time predicate on the post_at field.
func (f *HPIgPostFilter) WherePostAt(p entql.TimeP) {
	f.Where(p.Field(hpigpost.FieldPostAt))
}

// WhereMedia applies the entql json.RawMessage predicate on the media field.
func (f *HPIgPostFilter) WhereMedia(p entql.BytesP) {
	f.Where(p.Field(hpigpost.FieldMedia))
}

// WhereLikes applies the entql int predicate on the likes field.
func (f *HPIgPostFilter) WhereLikes(p entql.IntP) {
	f.Where(p.Field(hpigpost.FieldLikes))
}

// WhereComments applies the entql int predicate on the comments field.
func (f *HPIgPostFilter) WhereComments(p entql.IntP) {
	f.Where(p.Field(hpigpost.FieldComments))
}

// WhereRecrawlArgs applies the entql json.RawMessage predicate on the recrawl_args field.
func (f *HPIgPostFilter) WhereRecrawlArgs(p entql.BytesP) {
	f.Where(p.Field(hpigpost.FieldRecrawlArgs))
}

// WhereOwnerArtistID applies the entql int predicate on the owner_artist_id field.
func (f *HPIgPostFilter) WhereOwnerArtistID(p entql.IntP) {
	f.Where(p.Field(hpigpost.FieldOwnerArtistID))
}

// WhereOwnerMemberID applies the entql int predicate on the owner_member_id field.
func (f *HPIgPostFilter) WhereOwnerMemberID(p entql.IntP) {
	f.Where(p.Field(hpigpost.FieldOwnerMemberID))
}

// WhereHasOwnerArtist applies a predicate to check if query has an edge owner_artist.
func (f *HPIgPostFilter) WhereHasOwnerArtist() {
	f.Where(entql.HasEdge("owner_artist"))
}

// WhereHasOwnerArtistWith applies a predicate to check if query has an edge owner_artist with a given conditions (other predicates).
func (f *HPIgPostFilter) WhereHasOwnerArtistWith(preds ...predicate.HPArtist) {
	f.Where(entql.HasEdgeWith("owner_artist", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOwnerMember applies a predicate to check if query has an edge owner_member.
func (f *HPIgPostFilter) WhereHasOwnerMember() {
	f.Where(entql.HasEdge("owner_member"))
}

// WhereHasOwnerMemberWith applies a predicate to check if query has an edge owner_member with a given conditions (other predicates).
func (f *HPIgPostFilter) WhereHasOwnerMemberWith(preds ...predicate.HPMember) {
	f.Where(entql.HasEdgeWith("owner_member", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAsset applies a predicate to check if query has an edge asset.
func (f *HPIgPostFilter) WhereHasAsset() {
	f.Where(entql.HasEdge("asset"))
}

// WhereHasAssetWith applies a predicate to check if query has an edge asset with a given conditions (other predicates).
func (f *HPIgPostFilter) WhereHasAssetWith(preds ...predicate.HPAsset) {
	f.Where(entql.HasEdgeWith("asset", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTaggedArtists applies a predicate to check if query has an edge tagged_artists.
func (f *HPIgPostFilter) WhereHasTaggedArtists() {
	f.Where(entql.HasEdge("tagged_artists"))
}

// WhereHasTaggedArtistsWith applies a predicate to check if query has an edge tagged_artists with a given conditions (other predicates).
func (f *HPIgPostFilter) WhereHasTaggedArtistsWith(preds ...predicate.HPArtist) {
	f.Where(entql.HasEdgeWith("tagged_artists", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTaggedMembers applies a predicate to check if query has an edge tagged_members.
func (f *HPIgPostFilter) WhereHasTaggedMembers() {
	f.Where(entql.HasEdge("tagged_members"))
}

// WhereHasTaggedMembersWith applies a predicate to check if query has an edge tagged_members with a given conditions (other predicates).
func (f *HPIgPostFilter) WhereHasTaggedMembersWith(preds ...predicate.HPMember) {
	f.Where(entql.HasEdgeWith("tagged_members", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBlobs applies a predicate to check if query has an edge blobs.
func (f *HPIgPostFilter) WhereHasBlobs() {
	f.Where(entql.HasEdge("blobs"))
}

// WhereHasBlobsWith applies a predicate to check if query has an edge blobs with a given conditions (other predicates).
func (f *HPIgPostFilter) WhereHasBlobsWith(preds ...predicate.HPBlob) {
	f.Where(entql.HasEdgeWith("blobs", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (hmq *HPMemberQuery) addPredicate(pred func(s *sql.Selector)) {
	hmq.predicates = append(hmq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the HPMemberQuery builder.
func (hmq *HPMemberQuery) Filter() *HPMemberFilter {
	return &HPMemberFilter{config: hmq.config, predicateAdder: hmq}
}

// addPredicate implements the predicateAdder interface.
func (m *HPMemberMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the HPMemberMutation builder.
func (m *HPMemberMutation) Filter() *HPMemberFilter {
	return &HPMemberFilter{config: m.config, predicateAdder: m}
}

// HPMemberFilter provides a generic filtering capability at runtime for HPMemberQuery.
type HPMemberFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *HPMemberFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[11].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *HPMemberFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(hpmember.FieldID))
}

// WhereCrawledAt applies the entql time.Time predicate on the crawled_at field.
func (f *HPMemberFilter) WhereCrawledAt(p entql.TimeP) {
	f.Where(p.Field(hpmember.FieldCrawledAt))
}

// WhereErrorCount applies the entql int predicate on the error_count field.
func (f *HPMemberFilter) WhereErrorCount(p entql.IntP) {
	f.Where(p.Field(hpmember.FieldErrorCount))
}

// WhereManuallyModified applies the entql json.RawMessage predicate on the manually_modified field.
func (f *HPMemberFilter) WhereManuallyModified(p entql.BytesP) {
	f.Where(p.Field(hpmember.FieldManuallyModified))
}

// WhereLastErrorMessage applies the entql string predicate on the last_error_message field.
func (f *HPMemberFilter) WhereLastErrorMessage(p entql.StringP) {
	f.Where(p.Field(hpmember.FieldLastErrorMessage))
}

// WhereRecrawlRequired applies the entql bool predicate on the recrawl_required field.
func (f *HPMemberFilter) WhereRecrawlRequired(p entql.BoolP) {
	f.Where(p.Field(hpmember.FieldRecrawlRequired))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *HPMemberFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(hpmember.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *HPMemberFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(hpmember.FieldUpdatedAt))
}

// WhereKey applies the entql string predicate on the key field.
func (f *HPMemberFilter) WhereKey(p entql.StringP) {
	f.Where(p.Field(hpmember.FieldKey))
}

// WhereArtistKey applies the entql string predicate on the artist_key field.
func (f *HPMemberFilter) WhereArtistKey(p entql.StringP) {
	f.Where(p.Field(hpmember.FieldArtistKey))
}

// WhereName applies the entql string predicate on the name field.
func (f *HPMemberFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(hpmember.FieldName))
}

// WhereNameKana applies the entql string predicate on the name_kana field.
func (f *HPMemberFilter) WhereNameKana(p entql.StringP) {
	f.Where(p.Field(hpmember.FieldNameKana))
}

// WhereThumbnailURL applies the entql string predicate on the thumbnail_url field.
func (f *HPMemberFilter) WhereThumbnailURL(p entql.StringP) {
	f.Where(p.Field(hpmember.FieldThumbnailURL))
}

// WhereDateOfBirth applies the entql time.Time predicate on the date_of_birth field.
func (f *HPMemberFilter) WhereDateOfBirth(p entql.TimeP) {
	f.Where(p.Field(hpmember.FieldDateOfBirth))
}

// WhereBloodType applies the entql string predicate on the blood_type field.
func (f *HPMemberFilter) WhereBloodType(p entql.StringP) {
	f.Where(p.Field(hpmember.FieldBloodType))
}

// WhereHometown applies the entql string predicate on the hometown field.
func (f *HPMemberFilter) WhereHometown(p entql.StringP) {
	f.Where(p.Field(hpmember.FieldHometown))
}

// WhereJoinAt applies the entql time.Time predicate on the join_at field.
func (f *HPMemberFilter) WhereJoinAt(p entql.TimeP) {
	f.Where(p.Field(hpmember.FieldJoinAt))
}

// WhereGraduateAt applies the entql time.Time predicate on the graduate_at field.
func (f *HPMemberFilter) WhereGraduateAt(p entql.TimeP) {
	f.Where(p.Field(hpmember.FieldGraduateAt))
}

// WhereArtistID applies the entql int predicate on the artist_id field.
func (f *HPMemberFilter) WhereArtistID(p entql.IntP) {
	f.Where(p.Field(hpmember.FieldArtistID))
}

// WhereHasAssets applies a predicate to check if query has an edge assets.
func (f *HPMemberFilter) WhereHasAssets() {
	f.Where(entql.HasEdge("assets"))
}

// WhereHasAssetsWith applies a predicate to check if query has an edge assets with a given conditions (other predicates).
func (f *HPMemberFilter) WhereHasAssetsWith(preds ...predicate.HPAsset) {
	f.Where(entql.HasEdgeWith("assets", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasArtist applies a predicate to check if query has an edge artist.
func (f *HPMemberFilter) WhereHasArtist() {
	f.Where(entql.HasEdge("artist"))
}

// WhereHasArtistWith applies a predicate to check if query has an edge artist with a given conditions (other predicates).
func (f *HPMemberFilter) WhereHasArtistWith(preds ...predicate.HPArtist) {
	f.Where(entql.HasEdgeWith("artist", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOwningFeed applies a predicate to check if query has an edge owning_feed.
func (f *HPMemberFilter) WhereHasOwningFeed() {
	f.Where(entql.HasEdge("owning_feed"))
}

// WhereHasOwningFeedWith applies a predicate to check if query has an edge owning_feed with a given conditions (other predicates).
func (f *HPMemberFilter) WhereHasOwningFeedWith(preds ...predicate.HPFeedItem) {
	f.Where(entql.HasEdgeWith("owning_feed", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTaggedFeed applies a predicate to check if query has an edge tagged_feed.
func (f *HPMemberFilter) WhereHasTaggedFeed() {
	f.Where(entql.HasEdge("tagged_feed"))
}

// WhereHasTaggedFeedWith applies a predicate to check if query has an edge tagged_feed with a given conditions (other predicates).
func (f *HPMemberFilter) WhereHasTaggedFeedWith(preds ...predicate.HPFeedItem) {
	f.Where(entql.HasEdgeWith("tagged_feed", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOwningIgPosts applies a predicate to check if query has an edge owning_ig_posts.
func (f *HPMemberFilter) WhereHasOwningIgPosts() {
	f.Where(entql.HasEdge("owning_ig_posts"))
}

// WhereHasOwningIgPostsWith applies a predicate to check if query has an edge owning_ig_posts with a given conditions (other predicates).
func (f *HPMemberFilter) WhereHasOwningIgPostsWith(preds ...predicate.HPIgPost) {
	f.Where(entql.HasEdgeWith("owning_ig_posts", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTaggedIgPosts applies a predicate to check if query has an edge tagged_ig_posts.
func (f *HPMemberFilter) WhereHasTaggedIgPosts() {
	f.Where(entql.HasEdge("tagged_ig_posts"))
}

// WhereHasTaggedIgPostsWith applies a predicate to check if query has an edge tagged_ig_posts with a given conditions (other predicates).
func (f *HPMemberFilter) WhereHasTaggedIgPostsWith(preds ...predicate.HPIgPost) {
	f.Where(entql.HasEdgeWith("tagged_ig_posts", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOwningAmebloPosts applies a predicate to check if query has an edge owning_ameblo_posts.
func (f *HPMemberFilter) WhereHasOwningAmebloPosts() {
	f.Where(entql.HasEdge("owning_ameblo_posts"))
}

// WhereHasOwningAmebloPostsWith applies a predicate to check if query has an edge owning_ameblo_posts with a given conditions (other predicates).
func (f *HPMemberFilter) WhereHasOwningAmebloPostsWith(preds ...predicate.HPAmebloPost) {
	f.Where(entql.HasEdgeWith("owning_ameblo_posts", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTaggedAmebloPosts applies a predicate to check if query has an edge tagged_ameblo_posts.
func (f *HPMemberFilter) WhereHasTaggedAmebloPosts() {
	f.Where(entql.HasEdge("tagged_ameblo_posts"))
}

// WhereHasTaggedAmebloPostsWith applies a predicate to check if query has an edge tagged_ameblo_posts with a given conditions (other predicates).
func (f *HPMemberFilter) WhereHasTaggedAmebloPostsWith(preds ...predicate.HPAmebloPost) {
	f.Where(entql.HasEdgeWith("tagged_ameblo_posts", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTaggedElineupMallItems applies a predicate to check if query has an edge tagged_elineup_mall_items.
func (f *HPMemberFilter) WhereHasTaggedElineupMallItems() {
	f.Where(entql.HasEdge("tagged_elineup_mall_items"))
}

// WhereHasTaggedElineupMallItemsWith applies a predicate to check if query has an edge tagged_elineup_mall_items with a given conditions (other predicates).
func (f *HPMemberFilter) WhereHasTaggedElineupMallItemsWith(preds ...predicate.HPElineupMallItem) {
	f.Where(entql.HasEdgeWith("tagged_elineup_mall_items", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFollowedBy applies a predicate to check if query has an edge followed_by.
func (f *HPMemberFilter) WhereHasFollowedBy() {
	f.Where(entql.HasEdge("followed_by"))
}

// WhereHasFollowedByWith applies a predicate to check if query has an edge followed_by with a given conditions (other predicates).
func (f *HPMemberFilter) WhereHasFollowedByWith(preds ...predicate.HPFollow) {
	f.Where(entql.HasEdgeWith("followed_by", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (hshq *HPSortHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	hshq.predicates = append(hshq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the HPSortHistoryQuery builder.
func (hshq *HPSortHistoryQuery) Filter() *HPSortHistoryFilter {
	return &HPSortHistoryFilter{config: hshq.config, predicateAdder: hshq}
}

// addPredicate implements the predicateAdder interface.
func (m *HPSortHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the HPSortHistoryMutation builder.
func (m *HPSortHistoryMutation) Filter() *HPSortHistoryFilter {
	return &HPSortHistoryFilter{config: m.config, predicateAdder: m}
}

// HPSortHistoryFilter provides a generic filtering capability at runtime for HPSortHistoryQuery.
type HPSortHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *HPSortHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[12].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *HPSortHistoryFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(hpsorthistory.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *HPSortHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(hpsorthistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *HPSortHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(hpsorthistory.FieldUpdatedAt))
}

// WhereSortResult applies the entql json.RawMessage predicate on the sort_result field.
func (f *HPSortHistoryFilter) WhereSortResult(p entql.BytesP) {
	f.Where(p.Field(hpsorthistory.FieldSortResult))
}

// WhereOwnerUserID applies the entql int predicate on the owner_user_id field.
func (f *HPSortHistoryFilter) WhereOwnerUserID(p entql.IntP) {
	f.Where(p.Field(hpsorthistory.FieldOwnerUserID))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *HPSortHistoryFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *HPSortHistoryFilter) WhereHasOwnerWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (hvhq *HPViewHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	hvhq.predicates = append(hvhq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the HPViewHistoryQuery builder.
func (hvhq *HPViewHistoryQuery) Filter() *HPViewHistoryFilter {
	return &HPViewHistoryFilter{config: hvhq.config, predicateAdder: hvhq}
}

// addPredicate implements the predicateAdder interface.
func (m *HPViewHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the HPViewHistoryMutation builder.
func (m *HPViewHistoryMutation) Filter() *HPViewHistoryFilter {
	return &HPViewHistoryFilter{config: m.config, predicateAdder: m}
}

// HPViewHistoryFilter provides a generic filtering capability at runtime for HPViewHistoryQuery.
type HPViewHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *HPViewHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[13].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *HPViewHistoryFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(hpviewhistory.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *HPViewHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(hpviewhistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *HPViewHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(hpviewhistory.FieldUpdatedAt))
}

// WhereContentID applies the entql int predicate on the content_id field.
func (f *HPViewHistoryFilter) WhereContentID(p entql.IntP) {
	f.Where(p.Field(hpviewhistory.FieldContentID))
}

// WhereContentPostAt applies the entql time.Time predicate on the content_post_at field.
func (f *HPViewHistoryFilter) WhereContentPostAt(p entql.TimeP) {
	f.Where(p.Field(hpviewhistory.FieldContentPostAt))
}

// WhereAssetType applies the entql string predicate on the asset_type field.
func (f *HPViewHistoryFilter) WhereAssetType(p entql.StringP) {
	f.Where(p.Field(hpviewhistory.FieldAssetType))
}

// WhereIsFavorite applies the entql bool predicate on the is_favorite field.
func (f *HPViewHistoryFilter) WhereIsFavorite(p entql.BoolP) {
	f.Where(p.Field(hpviewhistory.FieldIsFavorite))
}

// WhereOwnerUserID applies the entql int predicate on the owner_user_id field.
func (f *HPViewHistoryFilter) WhereOwnerUserID(p entql.IntP) {
	f.Where(p.Field(hpviewhistory.FieldOwnerUserID))
}

// WhereHasFeed applies a predicate to check if query has an edge feed.
func (f *HPViewHistoryFilter) WhereHasFeed() {
	f.Where(entql.HasEdge("feed"))
}

// WhereHasFeedWith applies a predicate to check if query has an edge feed with a given conditions (other predicates).
func (f *HPViewHistoryFilter) WhereHasFeedWith(preds ...predicate.HPFeedItem) {
	f.Where(entql.HasEdgeWith("feed", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *HPViewHistoryFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *HPViewHistoryFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (teq *TestEntQuery) addPredicate(pred func(s *sql.Selector)) {
	teq.predicates = append(teq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TestEntQuery builder.
func (teq *TestEntQuery) Filter() *TestEntFilter {
	return &TestEntFilter{config: teq.config, predicateAdder: teq}
}

// addPredicate implements the predicateAdder interface.
func (m *TestEntMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TestEntMutation builder.
func (m *TestEntMutation) Filter() *TestEntFilter {
	return &TestEntFilter{config: m.config, predicateAdder: m}
}

// TestEntFilter provides a generic filtering capability at runtime for TestEntQuery.
type TestEntFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TestEntFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[14].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *TestEntFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(testent.FieldID))
}

// WhereStringField applies the entql string predicate on the string_field field.
func (f *TestEntFilter) WhereStringField(p entql.StringP) {
	f.Where(p.Field(testent.FieldStringField))
}

// WhereTextField applies the entql string predicate on the text_field field.
func (f *TestEntFilter) WhereTextField(p entql.StringP) {
	f.Where(p.Field(testent.FieldTextField))
}

// WhereBytesField applies the entql []byte predicate on the bytes_field field.
func (f *TestEntFilter) WhereBytesField(p entql.BytesP) {
	f.Where(p.Field(testent.FieldBytesField))
}

// WhereBoolField applies the entql bool predicate on the bool_field field.
func (f *TestEntFilter) WhereBoolField(p entql.BoolP) {
	f.Where(p.Field(testent.FieldBoolField))
}

// WhereTimeField applies the entql time.Time predicate on the time_field field.
func (f *TestEntFilter) WhereTimeField(p entql.TimeP) {
	f.Where(p.Field(testent.FieldTimeField))
}

// WhereIntField applies the entql int predicate on the int_field field.
func (f *TestEntFilter) WhereIntField(p entql.IntP) {
	f.Where(p.Field(testent.FieldIntField))
}

// WhereInt64Field applies the entql int64 predicate on the int64_field field.
func (f *TestEntFilter) WhereInt64Field(p entql.Int64P) {
	f.Where(p.Field(testent.FieldInt64Field))
}

// WhereFloatField applies the entql float64 predicate on the float_field field.
func (f *TestEntFilter) WhereFloatField(p entql.Float64P) {
	f.Where(p.Field(testent.FieldFloatField))
}

// WhereJSONField applies the entql json.RawMessage predicate on the json_field field.
func (f *TestEntFilter) WhereJSONField(p entql.BytesP) {
	f.Where(p.Field(testent.FieldJSONField))
}

// WhereEnumField applies the entql string predicate on the enum_field field.
func (f *TestEntFilter) WhereEnumField(p entql.StringP) {
	f.Where(p.Field(testent.FieldEnumField))
}

// addPredicate implements the predicateAdder interface.
func (uq *UserQuery) addPredicate(pred func(s *sql.Selector)) {
	uq.predicates = append(uq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserQuery builder.
func (uq *UserQuery) Filter() *UserFilter {
	return &UserFilter{config: uq.config, predicateAdder: uq}
}

// addPredicate implements the predicateAdder interface.
func (m *UserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserMutation builder.
func (m *UserMutation) Filter() *UserFilter {
	return &UserFilter{config: m.config, predicateAdder: m}
}

// UserFilter provides a generic filtering capability at runtime for UserQuery.
type UserFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[15].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *UserFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(user.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *UserFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *UserFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldUpdatedAt))
}

// WhereUsername applies the entql string predicate on the username field.
func (f *UserFilter) WhereUsername(p entql.StringP) {
	f.Where(p.Field(user.FieldUsername))
}

// WhereAccessToken applies the entql string predicate on the access_token field.
func (f *UserFilter) WhereAccessToken(p entql.StringP) {
	f.Where(p.Field(user.FieldAccessToken))
}

// WhereHasAuth applies a predicate to check if query has an edge auth.
func (f *UserFilter) WhereHasAuth() {
	f.Where(entql.HasEdge("auth"))
}

// WhereHasAuthWith applies a predicate to check if query has an edge auth with a given conditions (other predicates).
func (f *UserFilter) WhereHasAuthWith(preds ...predicate.Auth) {
	f.Where(entql.HasEdgeWith("auth", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasNotificationSettings applies a predicate to check if query has an edge notification_settings.
func (f *UserFilter) WhereHasNotificationSettings() {
	f.Where(entql.HasEdge("notification_settings"))
}

// WhereHasNotificationSettingsWith applies a predicate to check if query has an edge notification_settings with a given conditions (other predicates).
func (f *UserFilter) WhereHasNotificationSettingsWith(preds ...predicate.UserNotificationSetting) {
	f.Where(entql.HasEdgeWith("notification_settings", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasHpviewHistory applies a predicate to check if query has an edge hpview_history.
func (f *UserFilter) WhereHasHpviewHistory() {
	f.Where(entql.HasEdge("hpview_history"))
}

// WhereHasHpviewHistoryWith applies a predicate to check if query has an edge hpview_history with a given conditions (other predicates).
func (f *UserFilter) WhereHasHpviewHistoryWith(preds ...predicate.HPViewHistory) {
	f.Where(entql.HasEdgeWith("hpview_history", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasHpmemberFollowing applies a predicate to check if query has an edge hpmember_following.
func (f *UserFilter) WhereHasHpmemberFollowing() {
	f.Where(entql.HasEdge("hpmember_following"))
}

// WhereHasHpmemberFollowingWith applies a predicate to check if query has an edge hpmember_following with a given conditions (other predicates).
func (f *UserFilter) WhereHasHpmemberFollowingWith(preds ...predicate.HPFollow) {
	f.Where(entql.HasEdgeWith("hpmember_following", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasHpsortHistory applies a predicate to check if query has an edge hpsort_history.
func (f *UserFilter) WhereHasHpsortHistory() {
	f.Where(entql.HasEdge("hpsort_history"))
}

// WhereHasHpsortHistoryWith applies a predicate to check if query has an edge hpsort_history with a given conditions (other predicates).
func (f *UserFilter) WhereHasHpsortHistoryWith(preds ...predicate.HPSortHistory) {
	f.Where(entql.HasEdgeWith("hpsort_history", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasHpfcEventTickets applies a predicate to check if query has an edge hpfc_event_tickets.
func (f *UserFilter) WhereHasHpfcEventTickets() {
	f.Where(entql.HasEdge("hpfc_event_tickets"))
}

// WhereHasHpfcEventTicketsWith applies a predicate to check if query has an edge hpfc_event_tickets with a given conditions (other predicates).
func (f *UserFilter) WhereHasHpfcEventTicketsWith(preds ...predicate.HPFCEventTicket) {
	f.Where(entql.HasEdgeWith("hpfc_event_tickets", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (unlq *UserNotificationLogQuery) addPredicate(pred func(s *sql.Selector)) {
	unlq.predicates = append(unlq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserNotificationLogQuery builder.
func (unlq *UserNotificationLogQuery) Filter() *UserNotificationLogFilter {
	return &UserNotificationLogFilter{config: unlq.config, predicateAdder: unlq}
}

// addPredicate implements the predicateAdder interface.
func (m *UserNotificationLogMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserNotificationLogMutation builder.
func (m *UserNotificationLogMutation) Filter() *UserNotificationLogFilter {
	return &UserNotificationLogFilter{config: m.config, predicateAdder: m}
}

// UserNotificationLogFilter provides a generic filtering capability at runtime for UserNotificationLogQuery.
type UserNotificationLogFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserNotificationLogFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[16].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *UserNotificationLogFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(usernotificationlog.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *UserNotificationLogFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(usernotificationlog.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *UserNotificationLogFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(usernotificationlog.FieldUpdatedAt))
}

// WhereKey applies the entql string predicate on the key field.
func (f *UserNotificationLogFilter) WhereKey(p entql.StringP) {
	f.Where(p.Field(usernotificationlog.FieldKey))
}

// WhereTrigger applies the entql string predicate on the trigger field.
func (f *UserNotificationLogFilter) WhereTrigger(p entql.StringP) {
	f.Where(p.Field(usernotificationlog.FieldTrigger))
}

// WhereIsTest applies the entql bool predicate on the is_test field.
func (f *UserNotificationLogFilter) WhereIsTest(p entql.BoolP) {
	f.Where(p.Field(usernotificationlog.FieldIsTest))
}

// WhereReactNavigationMessage applies the entql json.RawMessage predicate on the react_navigation_message field.
func (f *UserNotificationLogFilter) WhereReactNavigationMessage(p entql.BytesP) {
	f.Where(p.Field(usernotificationlog.FieldReactNavigationMessage))
}

// WhereExpectedDeliveryTime applies the entql time.Time predicate on the expected_delivery_time field.
func (f *UserNotificationLogFilter) WhereExpectedDeliveryTime(p entql.TimeP) {
	f.Where(p.Field(usernotificationlog.FieldExpectedDeliveryTime))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *UserNotificationLogFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(usernotificationlog.FieldStatus))
}

// WhereStatusMessage applies the entql string predicate on the status_message field.
func (f *UserNotificationLogFilter) WhereStatusMessage(p entql.StringP) {
	f.Where(p.Field(usernotificationlog.FieldStatusMessage))
}

// WhereHasReceivers applies a predicate to check if query has an edge receivers.
func (f *UserNotificationLogFilter) WhereHasReceivers() {
	f.Where(entql.HasEdge("receivers"))
}

// WhereHasReceiversWith applies a predicate to check if query has an edge receivers with a given conditions (other predicates).
func (f *UserNotificationLogFilter) WhereHasReceiversWith(preds ...predicate.UserNotificationSetting) {
	f.Where(entql.HasEdgeWith("receivers", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (unsq *UserNotificationSettingQuery) addPredicate(pred func(s *sql.Selector)) {
	unsq.predicates = append(unsq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserNotificationSettingQuery builder.
func (unsq *UserNotificationSettingQuery) Filter() *UserNotificationSettingFilter {
	return &UserNotificationSettingFilter{config: unsq.config, predicateAdder: unsq}
}

// addPredicate implements the predicateAdder interface.
func (m *UserNotificationSettingMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserNotificationSettingMutation builder.
func (m *UserNotificationSettingMutation) Filter() *UserNotificationSettingFilter {
	return &UserNotificationSettingFilter{config: m.config, predicateAdder: m}
}

// UserNotificationSettingFilter provides a generic filtering capability at runtime for UserNotificationSettingQuery.
type UserNotificationSettingFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserNotificationSettingFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[17].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *UserNotificationSettingFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(usernotificationsetting.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *UserNotificationSettingFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(usernotificationsetting.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *UserNotificationSettingFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(usernotificationsetting.FieldUpdatedAt))
}

// WhereToken applies the entql string predicate on the token field.
func (f *UserNotificationSettingFilter) WhereToken(p entql.StringP) {
	f.Where(p.Field(usernotificationsetting.FieldToken))
}

// WhereSlug applies the entql string predicate on the slug field.
func (f *UserNotificationSettingFilter) WhereSlug(p entql.StringP) {
	f.Where(p.Field(usernotificationsetting.FieldSlug))
}

// WhereName applies the entql string predicate on the name field.
func (f *UserNotificationSettingFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(usernotificationsetting.FieldName))
}

// WhereEnableNewPosts applies the entql bool predicate on the enable_new_posts field.
func (f *UserNotificationSettingFilter) WhereEnableNewPosts(p entql.BoolP) {
	f.Where(p.Field(usernotificationsetting.FieldEnableNewPosts))
}

// WhereEnablePaymentStart applies the entql bool predicate on the enable_payment_start field.
func (f *UserNotificationSettingFilter) WhereEnablePaymentStart(p entql.BoolP) {
	f.Where(p.Field(usernotificationsetting.FieldEnablePaymentStart))
}

// WhereEnablePaymentDue applies the entql bool predicate on the enable_payment_due field.
func (f *UserNotificationSettingFilter) WhereEnablePaymentDue(p entql.BoolP) {
	f.Where(p.Field(usernotificationsetting.FieldEnablePaymentDue))
}

// WhereOwnerUserID applies the entql int predicate on the owner_user_id field.
func (f *UserNotificationSettingFilter) WhereOwnerUserID(p entql.IntP) {
	f.Where(p.Field(usernotificationsetting.FieldOwnerUserID))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *UserNotificationSettingFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *UserNotificationSettingFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasNotificationLogs applies a predicate to check if query has an edge notification_logs.
func (f *UserNotificationSettingFilter) WhereHasNotificationLogs() {
	f.Where(entql.HasEdge("notification_logs"))
}

// WhereHasNotificationLogsWith applies a predicate to check if query has an edge notification_logs with a given conditions (other predicates).
func (f *UserNotificationSettingFilter) WhereHasNotificationLogsWith(preds ...predicate.UserNotificationLog) {
	f.Where(entql.HasEdgeWith("notification_logs", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}
