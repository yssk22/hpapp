// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AuthsColumns holds the columns for the "auths" table.
	AuthsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "provider_name", Type: field.TypeString},
		{Name: "provider_user_id", Type: field.TypeString, Unique: true},
		{Name: "access_token", Type: field.TypeString, Size: 2147483647},
		{Name: "refresh_token", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "expire_at", Type: field.TypeTime, Nullable: true},
		{Name: "scope", Type: field.TypeJSON, Nullable: true},
		{Name: "user_auth", Type: field.TypeInt, Nullable: true},
	}
	// AuthsTable holds the schema information for the "auths" table.
	AuthsTable = &schema.Table{
		Name:       "auths",
		Columns:    AuthsColumns,
		PrimaryKey: []*schema.Column{AuthsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "auths_users_auth",
				Columns:    []*schema.Column{AuthsColumns[9]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "auth_provider_name_provider_user_id",
				Unique:  true,
				Columns: []*schema.Column{AuthsColumns[3], AuthsColumns[4]},
			},
		},
	}
	// HpAmebloPostsColumns holds the columns for the "hp_ameblo_posts" table.
	HpAmebloPostsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "crawled_at", Type: field.TypeTime, Nullable: true},
		{Name: "error_count", Type: field.TypeInt, Default: 0},
		{Name: "manually_modified", Type: field.TypeJSON, Nullable: true},
		{Name: "last_error_message", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "recrawl_required", Type: field.TypeBool, Nullable: true, Default: false},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "path", Type: field.TypeString, Unique: true},
		{Name: "next_path", Type: field.TypeString, Nullable: true},
		{Name: "prev_path", Type: field.TypeString, Nullable: true},
		{Name: "artist_key", Type: field.TypeString},
		{Name: "member_key", Type: field.TypeString, Nullable: true},
		{Name: "title", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Size: 2147483647},
		{Name: "theme", Type: field.TypeString, Nullable: true},
		{Name: "post_at", Type: field.TypeTime},
		{Name: "source", Type: field.TypeEnum, Enums: []string{"rss", "list", "entry"}},
		{Name: "images", Type: field.TypeJSON, Nullable: true},
		{Name: "likes", Type: field.TypeInt, Nullable: true},
		{Name: "comments", Type: field.TypeInt, Nullable: true},
		{Name: "reblogs", Type: field.TypeInt, Nullable: true},
		{Name: "hp_artist_ameblo_posts", Type: field.TypeInt, Nullable: true},
		{Name: "hp_asset_ameblo_posts", Type: field.TypeInt, Nullable: true},
		{Name: "hp_member_ameblo_posts", Type: field.TypeInt, Nullable: true},
	}
	// HpAmebloPostsTable holds the schema information for the "hp_ameblo_posts" table.
	HpAmebloPostsTable = &schema.Table{
		Name:       "hp_ameblo_posts",
		Columns:    HpAmebloPostsColumns,
		PrimaryKey: []*schema.Column{HpAmebloPostsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "hp_ameblo_posts_hp_artists_owning_ameblo_posts",
				Columns:    []*schema.Column{HpAmebloPostsColumns[22]},
				RefColumns: []*schema.Column{HpArtistsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "hp_ameblo_posts_hp_assets_ameblo_posts",
				Columns:    []*schema.Column{HpAmebloPostsColumns[23]},
				RefColumns: []*schema.Column{HpAssetsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "hp_ameblo_posts_hp_members_owning_ameblo_posts",
				Columns:    []*schema.Column{HpAmebloPostsColumns[24]},
				RefColumns: []*schema.Column{HpMembersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// HpArtistsColumns holds the columns for the "hp_artists" table.
	HpArtistsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "crawled_at", Type: field.TypeTime, Nullable: true},
		{Name: "error_count", Type: field.TypeInt, Default: 0},
		{Name: "manually_modified", Type: field.TypeJSON, Nullable: true},
		{Name: "last_error_message", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "recrawl_required", Type: field.TypeBool, Nullable: true, Default: false},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "key", Type: field.TypeString, Unique: true},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "thumbnail_url", Type: field.TypeString},
		{Name: "index", Type: field.TypeInt},
		{Name: "hp_event_artists", Type: field.TypeInt, Nullable: true},
	}
	// HpArtistsTable holds the schema information for the "hp_artists" table.
	HpArtistsTable = &schema.Table{
		Name:       "hp_artists",
		Columns:    HpArtistsColumns,
		PrimaryKey: []*schema.Column{HpArtistsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "hp_artists_hp_events_artists",
				Columns:    []*schema.Column{HpArtistsColumns[12]},
				RefColumns: []*schema.Column{HpEventsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// HpAssetsColumns holds the columns for the "hp_assets" table.
	HpAssetsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "key", Type: field.TypeString},
		{Name: "asset_type", Type: field.TypeEnum, Enums: []string{"ameblo", "elineupmall", "instagram", "tiktok", "twitter", "youtube"}},
		{Name: "hp_artist_assets", Type: field.TypeInt, Nullable: true},
	}
	// HpAssetsTable holds the schema information for the "hp_assets" table.
	HpAssetsTable = &schema.Table{
		Name:       "hp_assets",
		Columns:    HpAssetsColumns,
		PrimaryKey: []*schema.Column{HpAssetsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "hp_assets_hp_artists_assets",
				Columns:    []*schema.Column{HpAssetsColumns[3]},
				RefColumns: []*schema.Column{HpArtistsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "hpasset_key_asset_type",
				Unique:  true,
				Columns: []*schema.Column{HpAssetsColumns[1], HpAssetsColumns[2]},
			},
		},
	}
	// HpBlobsColumns holds the columns for the "hp_blobs" table.
	HpBlobsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "storage_path", Type: field.TypeString, Unique: true, Size: 768},
		{Name: "source_url", Type: field.TypeString, Size: 2048},
		{Name: "source_html_url", Type: field.TypeString, Size: 2048},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"error", "need_download", "ready_to_host", "unknown"}},
		{Name: "status_message", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "status_error_count", Type: field.TypeInt, Nullable: true},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"image", "text", "unknown", "video"}},
		{Name: "sub_type", Type: field.TypeEnum, Enums: []string{"html", "jpeg", "mp4", "unknown"}},
		{Name: "width", Type: field.TypeInt, Nullable: true},
		{Name: "height", Type: field.TypeInt, Nullable: true},
		{Name: "size", Type: field.TypeInt64, Nullable: true},
		{Name: "num_faces", Type: field.TypeInt, Nullable: true},
		{Name: "faces", Type: field.TypeJSON, Nullable: true},
		{Name: "face_recognition_status", Type: field.TypeEnum, Nullable: true, Enums: []string{"error", "face_automatically_labeled", "face_detected", "face_manually_labeled", "unknown"}, Default: "unknown"},
		{Name: "thumbnail", Type: field.TypeJSON, Nullable: true},
		{Name: "duration_seconds", Type: field.TypeFloat64, Nullable: true},
		{Name: "owner_artist_id", Type: field.TypeInt, Nullable: true},
		{Name: "owner_member_id", Type: field.TypeInt, Nullable: true},
	}
	// HpBlobsTable holds the schema information for the "hp_blobs" table.
	HpBlobsTable = &schema.Table{
		Name:       "hp_blobs",
		Columns:    HpBlobsColumns,
		PrimaryKey: []*schema.Column{HpBlobsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "hp_blobs_hp_artists_owner_artist",
				Columns:    []*schema.Column{HpBlobsColumns[19]},
				RefColumns: []*schema.Column{HpArtistsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "hp_blobs_hp_members_owner_member",
				Columns:    []*schema.Column{HpBlobsColumns[20]},
				RefColumns: []*schema.Column{HpMembersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "hpblob_storage_path",
				Unique:  false,
				Columns: []*schema.Column{HpBlobsColumns[3]},
			},
		},
	}
	// HpElineupMallItemsColumns holds the columns for the "hp_elineup_mall_items" table.
	HpElineupMallItemsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "crawled_at", Type: field.TypeTime, Nullable: true},
		{Name: "error_count", Type: field.TypeInt, Default: 0},
		{Name: "manually_modified", Type: field.TypeJSON, Nullable: true},
		{Name: "last_error_message", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "recrawl_required", Type: field.TypeBool, Nullable: true, Default: false},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "permalink", Type: field.TypeString, Unique: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Size: 2147483647, Default: ""},
		{Name: "supplier", Type: field.TypeString},
		{Name: "price", Type: field.TypeInt},
		{Name: "is_limited_to_fc", Type: field.TypeBool},
		{Name: "is_out_of_stock", Type: field.TypeBool},
		{Name: "images", Type: field.TypeJSON},
		{Name: "category", Type: field.TypeEnum, Enums: []string{"Blueray", "ClearFile", "ColllectionOther", "ColllectionPhoto", "ColllectionPinnapPoster", "DVD", "DVDMagazine", "DVDMagazineOther", "FSK", "KeyringOther", "MicrofiberTowel", "MufflerTowel", "Other", "Penlight", "Photo2L", "PhotoA4", "PhotoA5", "PhotoAlbum", "PhotoAlbumOther", "PhotoBook", "PhotoBookOther", "PhotoDaily", "PhotoOther", "TShirt"}, Default: "Other"},
		{Name: "order_start_at", Type: field.TypeTime, Nullable: true},
		{Name: "order_end_at", Type: field.TypeTime, Nullable: true},
	}
	// HpElineupMallItemsTable holds the schema information for the "hp_elineup_mall_items" table.
	HpElineupMallItemsTable = &schema.Table{
		Name:       "hp_elineup_mall_items",
		Columns:    HpElineupMallItemsColumns,
		PrimaryKey: []*schema.Column{HpElineupMallItemsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "hpelineupmallitem_permalink",
				Unique:  true,
				Columns: []*schema.Column{HpElineupMallItemsColumns[8]},
			},
			{
				Name:    "hpelineupmallitem_order_end_at",
				Unique:  false,
				Columns: []*schema.Column{HpElineupMallItemsColumns[18]},
			},
		},
	}
	// HpEventsColumns holds the columns for the "hp_events" table.
	HpEventsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "key", Type: field.TypeString, Unique: true},
		{Name: "display_titles", Type: field.TypeJSON},
		{Name: "open_at", Type: field.TypeTime, Nullable: true},
		{Name: "start_at", Type: field.TypeTime},
		{Name: "venue", Type: field.TypeString},
		{Name: "prefecture", Type: field.TypeString},
		{Name: "source", Type: field.TypeEnum, Enums: []string{"fc_scrape"}, Default: "fc_scrape"},
	}
	// HpEventsTable holds the schema information for the "hp_events" table.
	HpEventsTable = &schema.Table{
		Name:       "hp_events",
		Columns:    HpEventsColumns,
		PrimaryKey: []*schema.Column{HpEventsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "hpevent_key",
				Unique:  true,
				Columns: []*schema.Column{HpEventsColumns[3]},
			},
		},
	}
	// HpfcEventTicketsColumns holds the columns for the "hpfc_event_tickets" table.
	HpfcEventTicketsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "num", Type: field.TypeInt},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"BeforeLottery", "Completed", "PaymentOverdue", "PendingPayment", "Rejected", "Submitted", "Unknown"}, Default: "Submitted"},
		{Name: "fc_member_sha256", Type: field.TypeString},
		{Name: "application_title", Type: field.TypeString},
		{Name: "application_id", Type: field.TypeString, Nullable: true},
		{Name: "application_site", Type: field.TypeEnum, Enums: []string{"helloproject", "mline"}, Default: "helloproject"},
		{Name: "application_start_date", Type: field.TypeTime, Nullable: true},
		{Name: "application_due_date", Type: field.TypeTime, Nullable: true},
		{Name: "payment_start_date", Type: field.TypeTime, Nullable: true},
		{Name: "payment_due_date", Type: field.TypeTime, Nullable: true},
		{Name: "hp_event_hpfc_event_tickets", Type: field.TypeInt, Nullable: true},
		{Name: "user_hpfc_event_tickets", Type: field.TypeInt},
	}
	// HpfcEventTicketsTable holds the schema information for the "hpfc_event_tickets" table.
	HpfcEventTicketsTable = &schema.Table{
		Name:       "hpfc_event_tickets",
		Columns:    HpfcEventTicketsColumns,
		PrimaryKey: []*schema.Column{HpfcEventTicketsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "hpfc_event_tickets_hp_events_hpfc_event_tickets",
				Columns:    []*schema.Column{HpfcEventTicketsColumns[13]},
				RefColumns: []*schema.Column{HpEventsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "hpfc_event_tickets_users_hpfc_event_tickets",
				Columns:    []*schema.Column{HpfcEventTicketsColumns[14]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "hpfceventticket_user_hpfc_event_tickets_hp_event_hpfc_event_tickets",
				Unique:  false,
				Columns: []*schema.Column{HpfcEventTicketsColumns[14], HpfcEventTicketsColumns[13]},
			},
		},
	}
	// HpFeedItemsColumns holds the columns for the "hp_feed_items" table.
	HpFeedItemsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "source_id", Type: field.TypeInt, Unique: true},
		{Name: "asset_type", Type: field.TypeEnum, Enums: []string{"ameblo", "elineupmall", "instagram", "tiktok", "twitter", "youtube"}, Default: "ameblo"},
		{Name: "title", Type: field.TypeString},
		{Name: "post_at", Type: field.TypeTime},
		{Name: "source_url", Type: field.TypeString},
		{Name: "image_url", Type: field.TypeString, Nullable: true},
		{Name: "media", Type: field.TypeJSON},
		{Name: "owner_artist_id", Type: field.TypeInt, Nullable: true},
		{Name: "owner_member_id", Type: field.TypeInt, Nullable: true},
	}
	// HpFeedItemsTable holds the schema information for the "hp_feed_items" table.
	HpFeedItemsTable = &schema.Table{
		Name:       "hp_feed_items",
		Columns:    HpFeedItemsColumns,
		PrimaryKey: []*schema.Column{HpFeedItemsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "hp_feed_items_hp_artists_owning_feed",
				Columns:    []*schema.Column{HpFeedItemsColumns[10]},
				RefColumns: []*schema.Column{HpArtistsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "hp_feed_items_hp_members_owning_feed",
				Columns:    []*schema.Column{HpFeedItemsColumns[11]},
				RefColumns: []*schema.Column{HpMembersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "hpfeeditem_post_at",
				Unique:  false,
				Columns: []*schema.Column{HpFeedItemsColumns[6]},
			},
			{
				Name:    "hpfeeditem_post_at_id",
				Unique:  false,
				Columns: []*schema.Column{HpFeedItemsColumns[6], HpFeedItemsColumns[0]},
			},
			{
				Name:    "hpfeeditem_owner_member_id_asset_type_post_at_id",
				Unique:  false,
				Columns: []*schema.Column{HpFeedItemsColumns[11], HpFeedItemsColumns[4], HpFeedItemsColumns[6], HpFeedItemsColumns[0]},
			},
		},
	}
	// HpFollowsColumns holds the columns for the "hp_follows" table.
	HpFollowsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"follow", "follow_with_notification", "unfollow"}, Default: "follow_with_notification"},
		{Name: "hp_follow_member", Type: field.TypeInt},
		{Name: "user_hpmember_following", Type: field.TypeInt},
	}
	// HpFollowsTable holds the schema information for the "hp_follows" table.
	HpFollowsTable = &schema.Table{
		Name:       "hp_follows",
		Columns:    HpFollowsColumns,
		PrimaryKey: []*schema.Column{HpFollowsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "hp_follows_hp_members_member",
				Columns:    []*schema.Column{HpFollowsColumns[4]},
				RefColumns: []*schema.Column{HpMembersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "hp_follows_users_hpmember_following",
				Columns:    []*schema.Column{HpFollowsColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "hpfollow_hp_follow_member",
				Unique:  false,
				Columns: []*schema.Column{HpFollowsColumns[4]},
			},
			{
				Name:    "hpfollow_user_hpmember_following_hp_follow_member",
				Unique:  true,
				Columns: []*schema.Column{HpFollowsColumns[5], HpFollowsColumns[4]},
			},
		},
	}
	// HpIgPostsColumns holds the columns for the "hp_ig_posts" table.
	HpIgPostsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "crawled_at", Type: field.TypeTime, Nullable: true},
		{Name: "error_count", Type: field.TypeInt, Default: 0},
		{Name: "manually_modified", Type: field.TypeJSON, Nullable: true},
		{Name: "last_error_message", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "recrawl_required", Type: field.TypeBool, Nullable: true, Default: false},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "shortcode", Type: field.TypeString, Unique: true},
		{Name: "description", Type: field.TypeString, Size: 2147483647},
		{Name: "post_at", Type: field.TypeTime},
		{Name: "media", Type: field.TypeJSON},
		{Name: "likes", Type: field.TypeInt},
		{Name: "comments", Type: field.TypeInt},
		{Name: "recrawl_args", Type: field.TypeJSON, Nullable: true},
		{Name: "hp_artist_ig_posts", Type: field.TypeInt, Nullable: true},
		{Name: "hp_asset_ig_posts", Type: field.TypeInt, Nullable: true},
		{Name: "hp_member_ig_posts", Type: field.TypeInt, Nullable: true},
	}
	// HpIgPostsTable holds the schema information for the "hp_ig_posts" table.
	HpIgPostsTable = &schema.Table{
		Name:       "hp_ig_posts",
		Columns:    HpIgPostsColumns,
		PrimaryKey: []*schema.Column{HpIgPostsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "hp_ig_posts_hp_artists_owning_ig_posts",
				Columns:    []*schema.Column{HpIgPostsColumns[15]},
				RefColumns: []*schema.Column{HpArtistsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "hp_ig_posts_hp_assets_ig_posts",
				Columns:    []*schema.Column{HpIgPostsColumns[16]},
				RefColumns: []*schema.Column{HpAssetsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "hp_ig_posts_hp_members_owning_ig_posts",
				Columns:    []*schema.Column{HpIgPostsColumns[17]},
				RefColumns: []*schema.Column{HpMembersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// HpMembersColumns holds the columns for the "hp_members" table.
	HpMembersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "crawled_at", Type: field.TypeTime, Nullable: true},
		{Name: "error_count", Type: field.TypeInt, Default: 0},
		{Name: "manually_modified", Type: field.TypeJSON, Nullable: true},
		{Name: "last_error_message", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "recrawl_required", Type: field.TypeBool, Nullable: true, Default: false},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "key", Type: field.TypeString, Unique: true},
		{Name: "artist_key", Type: field.TypeString},
		{Name: "name", Type: field.TypeString},
		{Name: "name_kana", Type: field.TypeString},
		{Name: "thumbnail_url", Type: field.TypeString},
		{Name: "date_of_birth", Type: field.TypeTime},
		{Name: "blood_type", Type: field.TypeString},
		{Name: "hometown", Type: field.TypeString},
		{Name: "join_at", Type: field.TypeTime, Nullable: true},
		{Name: "graduate_at", Type: field.TypeTime, Nullable: true},
		{Name: "hp_artist_members", Type: field.TypeInt, Nullable: true},
		{Name: "hp_event_members", Type: field.TypeInt, Nullable: true},
	}
	// HpMembersTable holds the schema information for the "hp_members" table.
	HpMembersTable = &schema.Table{
		Name:       "hp_members",
		Columns:    HpMembersColumns,
		PrimaryKey: []*schema.Column{HpMembersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "hp_members_hp_artists_members",
				Columns:    []*schema.Column{HpMembersColumns[18]},
				RefColumns: []*schema.Column{HpArtistsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "hp_members_hp_events_members",
				Columns:    []*schema.Column{HpMembersColumns[19]},
				RefColumns: []*schema.Column{HpEventsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// HpSortHistoriesColumns holds the columns for the "hp_sort_histories" table.
	HpSortHistoriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "sort_result", Type: field.TypeJSON},
		{Name: "user_hpsort_history", Type: field.TypeInt, Nullable: true},
	}
	// HpSortHistoriesTable holds the schema information for the "hp_sort_histories" table.
	HpSortHistoriesTable = &schema.Table{
		Name:       "hp_sort_histories",
		Columns:    HpSortHistoriesColumns,
		PrimaryKey: []*schema.Column{HpSortHistoriesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "hp_sort_histories_users_hpsort_history",
				Columns:    []*schema.Column{HpSortHistoriesColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// HpViewHistoriesColumns holds the columns for the "hp_view_histories" table.
	HpViewHistoriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "content_id", Type: field.TypeInt},
		{Name: "content_post_at", Type: field.TypeTime},
		{Name: "asset_type", Type: field.TypeEnum, Enums: []string{"ameblo", "elineupmall", "instagram", "tiktok", "twitter", "youtube"}},
		{Name: "is_favorite", Type: field.TypeBool, Default: false},
		{Name: "hp_feed_item_view_histories", Type: field.TypeInt, Nullable: true},
		{Name: "user_hpview_history", Type: field.TypeInt},
	}
	// HpViewHistoriesTable holds the schema information for the "hp_view_histories" table.
	HpViewHistoriesTable = &schema.Table{
		Name:       "hp_view_histories",
		Columns:    HpViewHistoriesColumns,
		PrimaryKey: []*schema.Column{HpViewHistoriesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "hp_view_histories_hp_feed_items_view_histories",
				Columns:    []*schema.Column{HpViewHistoriesColumns[7]},
				RefColumns: []*schema.Column{HpFeedItemsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "hp_view_histories_users_hpview_history",
				Columns:    []*schema.Column{HpViewHistoriesColumns[8]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "hpviewhistory_content_id_user_hpview_history",
				Unique:  true,
				Columns: []*schema.Column{HpViewHistoriesColumns[3], HpViewHistoriesColumns[8]},
			},
			{
				Name:    "hpviewhistory_content_post_at_user_hpview_history",
				Unique:  false,
				Columns: []*schema.Column{HpViewHistoriesColumns[4], HpViewHistoriesColumns[8]},
			},
		},
	}
	// TestEntsColumns holds the columns for the "test_ents" table.
	TestEntsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "string_field", Type: field.TypeString, Nullable: true, Default: "test_string"},
		{Name: "text_field", Type: field.TypeString, Nullable: true, Size: 2147483647, Default: "test_text"},
		{Name: "bytes_field", Type: field.TypeBytes, Nullable: true},
		{Name: "bool_field", Type: field.TypeBool, Nullable: true, Default: true},
		{Name: "time_field", Type: field.TypeTime, Nullable: true},
		{Name: "int_field", Type: field.TypeInt, Nullable: true, Default: 10},
		{Name: "int64_field", Type: field.TypeInt64, Nullable: true, Default: 30},
		{Name: "float_field", Type: field.TypeFloat64, Nullable: true, Default: 19.96},
		{Name: "json_field", Type: field.TypeJSON, Nullable: true},
		{Name: "enum_field", Type: field.TypeEnum, Nullable: true, Enums: []string{"a", "b", "c"}, Default: "b"},
	}
	// TestEntsTable holds the schema information for the "test_ents" table.
	TestEntsTable = &schema.Table{
		Name:       "test_ents",
		Columns:    TestEntsColumns,
		PrimaryKey: []*schema.Column{TestEntsColumns[0]},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "username", Type: field.TypeString, Unique: true},
		{Name: "access_token", Type: field.TypeString, Unique: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// UserNotificationLogsColumns holds the columns for the "user_notification_logs" table.
	UserNotificationLogsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "key", Type: field.TypeString},
		{Name: "trigger", Type: field.TypeString},
		{Name: "is_test", Type: field.TypeBool},
		{Name: "react_navigation_message", Type: field.TypeJSON},
		{Name: "expected_delivery_time", Type: field.TypeTime},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"error", "prepared", "sent"}, Default: "prepared"},
		{Name: "status_message", Type: field.TypeString, Default: ""},
	}
	// UserNotificationLogsTable holds the schema information for the "user_notification_logs" table.
	UserNotificationLogsTable = &schema.Table{
		Name:       "user_notification_logs",
		Columns:    UserNotificationLogsColumns,
		PrimaryKey: []*schema.Column{UserNotificationLogsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "usernotificationlog_key_trigger",
				Unique:  true,
				Columns: []*schema.Column{UserNotificationLogsColumns[3], UserNotificationLogsColumns[4]},
			},
		},
	}
	// UserNotificationSettingsColumns holds the columns for the "user_notification_settings" table.
	UserNotificationSettingsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "token", Type: field.TypeString, Unique: true},
		{Name: "slug", Type: field.TypeString},
		{Name: "name", Type: field.TypeString},
		{Name: "enable_new_posts", Type: field.TypeBool},
		{Name: "enable_payment_start", Type: field.TypeBool},
		{Name: "enable_payment_due", Type: field.TypeBool},
		{Name: "user_notification_settings", Type: field.TypeInt, Nullable: true},
	}
	// UserNotificationSettingsTable holds the schema information for the "user_notification_settings" table.
	UserNotificationSettingsTable = &schema.Table{
		Name:       "user_notification_settings",
		Columns:    UserNotificationSettingsColumns,
		PrimaryKey: []*schema.Column{UserNotificationSettingsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_notification_settings_users_notification_settings",
				Columns:    []*schema.Column{UserNotificationSettingsColumns[9]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "usernotificationsetting_token_user_notification_settings",
				Unique:  false,
				Columns: []*schema.Column{UserNotificationSettingsColumns[3], UserNotificationSettingsColumns[9]},
			},
		},
	}
	// HpAmebloPostBlobsColumns holds the columns for the "hp_ameblo_post_blobs" table.
	HpAmebloPostBlobsColumns = []*schema.Column{
		{Name: "hp_ameblo_post_id", Type: field.TypeInt},
		{Name: "hp_blob_id", Type: field.TypeInt},
	}
	// HpAmebloPostBlobsTable holds the schema information for the "hp_ameblo_post_blobs" table.
	HpAmebloPostBlobsTable = &schema.Table{
		Name:       "hp_ameblo_post_blobs",
		Columns:    HpAmebloPostBlobsColumns,
		PrimaryKey: []*schema.Column{HpAmebloPostBlobsColumns[0], HpAmebloPostBlobsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "hp_ameblo_post_blobs_hp_ameblo_post_id",
				Columns:    []*schema.Column{HpAmebloPostBlobsColumns[0]},
				RefColumns: []*schema.Column{HpAmebloPostsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "hp_ameblo_post_blobs_hp_blob_id",
				Columns:    []*schema.Column{HpAmebloPostBlobsColumns[1]},
				RefColumns: []*schema.Column{HpBlobsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// HpArtistFeedColumns holds the columns for the "hp_artist_feed" table.
	HpArtistFeedColumns = []*schema.Column{
		{Name: "hp_artist_id", Type: field.TypeInt},
		{Name: "hp_feed_item_id", Type: field.TypeInt},
	}
	// HpArtistFeedTable holds the schema information for the "hp_artist_feed" table.
	HpArtistFeedTable = &schema.Table{
		Name:       "hp_artist_feed",
		Columns:    HpArtistFeedColumns,
		PrimaryKey: []*schema.Column{HpArtistFeedColumns[0], HpArtistFeedColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "hp_artist_feed_hp_artist_id",
				Columns:    []*schema.Column{HpArtistFeedColumns[0]},
				RefColumns: []*schema.Column{HpArtistsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "hp_artist_feed_hp_feed_item_id",
				Columns:    []*schema.Column{HpArtistFeedColumns[1]},
				RefColumns: []*schema.Column{HpFeedItemsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// HpArtistTaggedIgPostsColumns holds the columns for the "hp_artist_tagged_ig_posts" table.
	HpArtistTaggedIgPostsColumns = []*schema.Column{
		{Name: "hp_artist_id", Type: field.TypeInt},
		{Name: "hp_ig_post_id", Type: field.TypeInt},
	}
	// HpArtistTaggedIgPostsTable holds the schema information for the "hp_artist_tagged_ig_posts" table.
	HpArtistTaggedIgPostsTable = &schema.Table{
		Name:       "hp_artist_tagged_ig_posts",
		Columns:    HpArtistTaggedIgPostsColumns,
		PrimaryKey: []*schema.Column{HpArtistTaggedIgPostsColumns[0], HpArtistTaggedIgPostsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "hp_artist_tagged_ig_posts_hp_artist_id",
				Columns:    []*schema.Column{HpArtistTaggedIgPostsColumns[0]},
				RefColumns: []*schema.Column{HpArtistsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "hp_artist_tagged_ig_posts_hp_ig_post_id",
				Columns:    []*schema.Column{HpArtistTaggedIgPostsColumns[1]},
				RefColumns: []*schema.Column{HpIgPostsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// HpArtistTaggedAmebloPostsColumns holds the columns for the "hp_artist_tagged_ameblo_posts" table.
	HpArtistTaggedAmebloPostsColumns = []*schema.Column{
		{Name: "hp_artist_id", Type: field.TypeInt},
		{Name: "hp_ameblo_post_id", Type: field.TypeInt},
	}
	// HpArtistTaggedAmebloPostsTable holds the schema information for the "hp_artist_tagged_ameblo_posts" table.
	HpArtistTaggedAmebloPostsTable = &schema.Table{
		Name:       "hp_artist_tagged_ameblo_posts",
		Columns:    HpArtistTaggedAmebloPostsColumns,
		PrimaryKey: []*schema.Column{HpArtistTaggedAmebloPostsColumns[0], HpArtistTaggedAmebloPostsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "hp_artist_tagged_ameblo_posts_hp_artist_id",
				Columns:    []*schema.Column{HpArtistTaggedAmebloPostsColumns[0]},
				RefColumns: []*schema.Column{HpArtistsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "hp_artist_tagged_ameblo_posts_hp_ameblo_post_id",
				Columns:    []*schema.Column{HpArtistTaggedAmebloPostsColumns[1]},
				RefColumns: []*schema.Column{HpAmebloPostsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// HpArtistElineupMallItemsColumns holds the columns for the "hp_artist_elineup_mall_items" table.
	HpArtistElineupMallItemsColumns = []*schema.Column{
		{Name: "hp_artist_id", Type: field.TypeInt},
		{Name: "hp_elineup_mall_item_id", Type: field.TypeInt},
	}
	// HpArtistElineupMallItemsTable holds the schema information for the "hp_artist_elineup_mall_items" table.
	HpArtistElineupMallItemsTable = &schema.Table{
		Name:       "hp_artist_elineup_mall_items",
		Columns:    HpArtistElineupMallItemsColumns,
		PrimaryKey: []*schema.Column{HpArtistElineupMallItemsColumns[0], HpArtistElineupMallItemsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "hp_artist_elineup_mall_items_hp_artist_id",
				Columns:    []*schema.Column{HpArtistElineupMallItemsColumns[0]},
				RefColumns: []*schema.Column{HpArtistsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "hp_artist_elineup_mall_items_hp_elineup_mall_item_id",
				Columns:    []*schema.Column{HpArtistElineupMallItemsColumns[1]},
				RefColumns: []*schema.Column{HpElineupMallItemsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// HpIgPostBlobsColumns holds the columns for the "hp_ig_post_blobs" table.
	HpIgPostBlobsColumns = []*schema.Column{
		{Name: "hp_ig_post_id", Type: field.TypeInt},
		{Name: "hp_blob_id", Type: field.TypeInt},
	}
	// HpIgPostBlobsTable holds the schema information for the "hp_ig_post_blobs" table.
	HpIgPostBlobsTable = &schema.Table{
		Name:       "hp_ig_post_blobs",
		Columns:    HpIgPostBlobsColumns,
		PrimaryKey: []*schema.Column{HpIgPostBlobsColumns[0], HpIgPostBlobsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "hp_ig_post_blobs_hp_ig_post_id",
				Columns:    []*schema.Column{HpIgPostBlobsColumns[0]},
				RefColumns: []*schema.Column{HpIgPostsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "hp_ig_post_blobs_hp_blob_id",
				Columns:    []*schema.Column{HpIgPostBlobsColumns[1]},
				RefColumns: []*schema.Column{HpBlobsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// HpMemberAssetsColumns holds the columns for the "hp_member_assets" table.
	HpMemberAssetsColumns = []*schema.Column{
		{Name: "hp_member_id", Type: field.TypeInt},
		{Name: "hp_asset_id", Type: field.TypeInt},
	}
	// HpMemberAssetsTable holds the schema information for the "hp_member_assets" table.
	HpMemberAssetsTable = &schema.Table{
		Name:       "hp_member_assets",
		Columns:    HpMemberAssetsColumns,
		PrimaryKey: []*schema.Column{HpMemberAssetsColumns[0], HpMemberAssetsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "hp_member_assets_hp_member_id",
				Columns:    []*schema.Column{HpMemberAssetsColumns[0]},
				RefColumns: []*schema.Column{HpMembersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "hp_member_assets_hp_asset_id",
				Columns:    []*schema.Column{HpMemberAssetsColumns[1]},
				RefColumns: []*schema.Column{HpAssetsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// HpMemberFeedColumns holds the columns for the "hp_member_feed" table.
	HpMemberFeedColumns = []*schema.Column{
		{Name: "hp_member_id", Type: field.TypeInt},
		{Name: "hp_feed_item_id", Type: field.TypeInt},
	}
	// HpMemberFeedTable holds the schema information for the "hp_member_feed" table.
	HpMemberFeedTable = &schema.Table{
		Name:       "hp_member_feed",
		Columns:    HpMemberFeedColumns,
		PrimaryKey: []*schema.Column{HpMemberFeedColumns[0], HpMemberFeedColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "hp_member_feed_hp_member_id",
				Columns:    []*schema.Column{HpMemberFeedColumns[0]},
				RefColumns: []*schema.Column{HpMembersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "hp_member_feed_hp_feed_item_id",
				Columns:    []*schema.Column{HpMemberFeedColumns[1]},
				RefColumns: []*schema.Column{HpFeedItemsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// HpMemberTaggedIgPostsColumns holds the columns for the "hp_member_tagged_ig_posts" table.
	HpMemberTaggedIgPostsColumns = []*schema.Column{
		{Name: "hp_member_id", Type: field.TypeInt},
		{Name: "hp_ig_post_id", Type: field.TypeInt},
	}
	// HpMemberTaggedIgPostsTable holds the schema information for the "hp_member_tagged_ig_posts" table.
	HpMemberTaggedIgPostsTable = &schema.Table{
		Name:       "hp_member_tagged_ig_posts",
		Columns:    HpMemberTaggedIgPostsColumns,
		PrimaryKey: []*schema.Column{HpMemberTaggedIgPostsColumns[0], HpMemberTaggedIgPostsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "hp_member_tagged_ig_posts_hp_member_id",
				Columns:    []*schema.Column{HpMemberTaggedIgPostsColumns[0]},
				RefColumns: []*schema.Column{HpMembersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "hp_member_tagged_ig_posts_hp_ig_post_id",
				Columns:    []*schema.Column{HpMemberTaggedIgPostsColumns[1]},
				RefColumns: []*schema.Column{HpIgPostsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// HpMemberTaggedAmebloPostsColumns holds the columns for the "hp_member_tagged_ameblo_posts" table.
	HpMemberTaggedAmebloPostsColumns = []*schema.Column{
		{Name: "hp_member_id", Type: field.TypeInt},
		{Name: "hp_ameblo_post_id", Type: field.TypeInt},
	}
	// HpMemberTaggedAmebloPostsTable holds the schema information for the "hp_member_tagged_ameblo_posts" table.
	HpMemberTaggedAmebloPostsTable = &schema.Table{
		Name:       "hp_member_tagged_ameblo_posts",
		Columns:    HpMemberTaggedAmebloPostsColumns,
		PrimaryKey: []*schema.Column{HpMemberTaggedAmebloPostsColumns[0], HpMemberTaggedAmebloPostsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "hp_member_tagged_ameblo_posts_hp_member_id",
				Columns:    []*schema.Column{HpMemberTaggedAmebloPostsColumns[0]},
				RefColumns: []*schema.Column{HpMembersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "hp_member_tagged_ameblo_posts_hp_ameblo_post_id",
				Columns:    []*schema.Column{HpMemberTaggedAmebloPostsColumns[1]},
				RefColumns: []*schema.Column{HpAmebloPostsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// HpMemberElineupMallItemsColumns holds the columns for the "hp_member_elineup_mall_items" table.
	HpMemberElineupMallItemsColumns = []*schema.Column{
		{Name: "hp_member_id", Type: field.TypeInt},
		{Name: "hp_elineup_mall_item_id", Type: field.TypeInt},
	}
	// HpMemberElineupMallItemsTable holds the schema information for the "hp_member_elineup_mall_items" table.
	HpMemberElineupMallItemsTable = &schema.Table{
		Name:       "hp_member_elineup_mall_items",
		Columns:    HpMemberElineupMallItemsColumns,
		PrimaryKey: []*schema.Column{HpMemberElineupMallItemsColumns[0], HpMemberElineupMallItemsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "hp_member_elineup_mall_items_hp_member_id",
				Columns:    []*schema.Column{HpMemberElineupMallItemsColumns[0]},
				RefColumns: []*schema.Column{HpMembersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "hp_member_elineup_mall_items_hp_elineup_mall_item_id",
				Columns:    []*schema.Column{HpMemberElineupMallItemsColumns[1]},
				RefColumns: []*schema.Column{HpElineupMallItemsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// UserNotificationLogReceiversColumns holds the columns for the "user_notification_log_receivers" table.
	UserNotificationLogReceiversColumns = []*schema.Column{
		{Name: "user_notification_log_id", Type: field.TypeInt},
		{Name: "user_notification_setting_id", Type: field.TypeInt},
	}
	// UserNotificationLogReceiversTable holds the schema information for the "user_notification_log_receivers" table.
	UserNotificationLogReceiversTable = &schema.Table{
		Name:       "user_notification_log_receivers",
		Columns:    UserNotificationLogReceiversColumns,
		PrimaryKey: []*schema.Column{UserNotificationLogReceiversColumns[0], UserNotificationLogReceiversColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_notification_log_receivers_user_notification_log_id",
				Columns:    []*schema.Column{UserNotificationLogReceiversColumns[0]},
				RefColumns: []*schema.Column{UserNotificationLogsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_notification_log_receivers_user_notification_setting_id",
				Columns:    []*schema.Column{UserNotificationLogReceiversColumns[1]},
				RefColumns: []*schema.Column{UserNotificationSettingsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AuthsTable,
		HpAmebloPostsTable,
		HpArtistsTable,
		HpAssetsTable,
		HpBlobsTable,
		HpElineupMallItemsTable,
		HpEventsTable,
		HpfcEventTicketsTable,
		HpFeedItemsTable,
		HpFollowsTable,
		HpIgPostsTable,
		HpMembersTable,
		HpSortHistoriesTable,
		HpViewHistoriesTable,
		TestEntsTable,
		UsersTable,
		UserNotificationLogsTable,
		UserNotificationSettingsTable,
		HpAmebloPostBlobsTable,
		HpArtistFeedTable,
		HpArtistTaggedIgPostsTable,
		HpArtistTaggedAmebloPostsTable,
		HpArtistElineupMallItemsTable,
		HpIgPostBlobsTable,
		HpMemberAssetsTable,
		HpMemberFeedTable,
		HpMemberTaggedIgPostsTable,
		HpMemberTaggedAmebloPostsTable,
		HpMemberElineupMallItemsTable,
		UserNotificationLogReceiversTable,
	}
)

func init() {
	AuthsTable.ForeignKeys[0].RefTable = UsersTable
	HpAmebloPostsTable.ForeignKeys[0].RefTable = HpArtistsTable
	HpAmebloPostsTable.ForeignKeys[1].RefTable = HpAssetsTable
	HpAmebloPostsTable.ForeignKeys[2].RefTable = HpMembersTable
	HpArtistsTable.ForeignKeys[0].RefTable = HpEventsTable
	HpAssetsTable.ForeignKeys[0].RefTable = HpArtistsTable
	HpBlobsTable.ForeignKeys[0].RefTable = HpArtistsTable
	HpBlobsTable.ForeignKeys[1].RefTable = HpMembersTable
	HpfcEventTicketsTable.ForeignKeys[0].RefTable = HpEventsTable
	HpfcEventTicketsTable.ForeignKeys[1].RefTable = UsersTable
	HpFeedItemsTable.ForeignKeys[0].RefTable = HpArtistsTable
	HpFeedItemsTable.ForeignKeys[1].RefTable = HpMembersTable
	HpFollowsTable.ForeignKeys[0].RefTable = HpMembersTable
	HpFollowsTable.ForeignKeys[1].RefTable = UsersTable
	HpIgPostsTable.ForeignKeys[0].RefTable = HpArtistsTable
	HpIgPostsTable.ForeignKeys[1].RefTable = HpAssetsTable
	HpIgPostsTable.ForeignKeys[2].RefTable = HpMembersTable
	HpMembersTable.ForeignKeys[0].RefTable = HpArtistsTable
	HpMembersTable.ForeignKeys[1].RefTable = HpEventsTable
	HpSortHistoriesTable.ForeignKeys[0].RefTable = UsersTable
	HpViewHistoriesTable.ForeignKeys[0].RefTable = HpFeedItemsTable
	HpViewHistoriesTable.ForeignKeys[1].RefTable = UsersTable
	UserNotificationSettingsTable.ForeignKeys[0].RefTable = UsersTable
	HpAmebloPostBlobsTable.ForeignKeys[0].RefTable = HpAmebloPostsTable
	HpAmebloPostBlobsTable.ForeignKeys[1].RefTable = HpBlobsTable
	HpArtistFeedTable.ForeignKeys[0].RefTable = HpArtistsTable
	HpArtistFeedTable.ForeignKeys[1].RefTable = HpFeedItemsTable
	HpArtistTaggedIgPostsTable.ForeignKeys[0].RefTable = HpArtistsTable
	HpArtistTaggedIgPostsTable.ForeignKeys[1].RefTable = HpIgPostsTable
	HpArtistTaggedAmebloPostsTable.ForeignKeys[0].RefTable = HpArtistsTable
	HpArtistTaggedAmebloPostsTable.ForeignKeys[1].RefTable = HpAmebloPostsTable
	HpArtistElineupMallItemsTable.ForeignKeys[0].RefTable = HpArtistsTable
	HpArtistElineupMallItemsTable.ForeignKeys[1].RefTable = HpElineupMallItemsTable
	HpIgPostBlobsTable.ForeignKeys[0].RefTable = HpIgPostsTable
	HpIgPostBlobsTable.ForeignKeys[1].RefTable = HpBlobsTable
	HpMemberAssetsTable.ForeignKeys[0].RefTable = HpMembersTable
	HpMemberAssetsTable.ForeignKeys[1].RefTable = HpAssetsTable
	HpMemberFeedTable.ForeignKeys[0].RefTable = HpMembersTable
	HpMemberFeedTable.ForeignKeys[1].RefTable = HpFeedItemsTable
	HpMemberTaggedIgPostsTable.ForeignKeys[0].RefTable = HpMembersTable
	HpMemberTaggedIgPostsTable.ForeignKeys[1].RefTable = HpIgPostsTable
	HpMemberTaggedAmebloPostsTable.ForeignKeys[0].RefTable = HpMembersTable
	HpMemberTaggedAmebloPostsTable.ForeignKeys[1].RefTable = HpAmebloPostsTable
	HpMemberElineupMallItemsTable.ForeignKeys[0].RefTable = HpMembersTable
	HpMemberElineupMallItemsTable.ForeignKeys[1].RefTable = HpElineupMallItemsTable
	UserNotificationLogReceiversTable.ForeignKeys[0].RefTable = UserNotificationLogsTable
	UserNotificationLogReceiversTable.ForeignKeys[1].RefTable = UserNotificationSettingsTable
}
