// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"hpapp.yssk22.dev/go/service/ent/hpartist"
	"hpapp.yssk22.dev/go/service/ent/hpasset"
	"hpapp.yssk22.dev/go/service/ent/hpblob"
	"hpapp.yssk22.dev/go/service/ent/hpigpost"
	"hpapp.yssk22.dev/go/service/ent/hpmember"
	"hpapp.yssk22.dev/go/service/ent/predicate"
	"hpapp.yssk22.dev/go/service/schema/jsonfields"
)

// HPIgPostUpdate is the builder for updating HPIgPost entities.
type HPIgPostUpdate struct {
	config
	hooks    []Hook
	mutation *HPIgPostMutation
}

// Where appends a list predicates to the HPIgPostUpdate builder.
func (hipu *HPIgPostUpdate) Where(ps ...predicate.HPIgPost) *HPIgPostUpdate {
	hipu.mutation.Where(ps...)
	return hipu
}

// SetCrawledAt sets the "crawled_at" field.
func (hipu *HPIgPostUpdate) SetCrawledAt(t time.Time) *HPIgPostUpdate {
	hipu.mutation.SetCrawledAt(t)
	return hipu
}

// SetNillableCrawledAt sets the "crawled_at" field if the given value is not nil.
func (hipu *HPIgPostUpdate) SetNillableCrawledAt(t *time.Time) *HPIgPostUpdate {
	if t != nil {
		hipu.SetCrawledAt(*t)
	}
	return hipu
}

// ClearCrawledAt clears the value of the "crawled_at" field.
func (hipu *HPIgPostUpdate) ClearCrawledAt() *HPIgPostUpdate {
	hipu.mutation.ClearCrawledAt()
	return hipu
}

// SetErrorCount sets the "error_count" field.
func (hipu *HPIgPostUpdate) SetErrorCount(i int) *HPIgPostUpdate {
	hipu.mutation.ResetErrorCount()
	hipu.mutation.SetErrorCount(i)
	return hipu
}

// SetNillableErrorCount sets the "error_count" field if the given value is not nil.
func (hipu *HPIgPostUpdate) SetNillableErrorCount(i *int) *HPIgPostUpdate {
	if i != nil {
		hipu.SetErrorCount(*i)
	}
	return hipu
}

// AddErrorCount adds i to the "error_count" field.
func (hipu *HPIgPostUpdate) AddErrorCount(i int) *HPIgPostUpdate {
	hipu.mutation.AddErrorCount(i)
	return hipu
}

// SetManuallyModified sets the "manually_modified" field.
func (hipu *HPIgPostUpdate) SetManuallyModified(jm *jsonfields.ManuallyModified) *HPIgPostUpdate {
	hipu.mutation.SetManuallyModified(jm)
	return hipu
}

// ClearManuallyModified clears the value of the "manually_modified" field.
func (hipu *HPIgPostUpdate) ClearManuallyModified() *HPIgPostUpdate {
	hipu.mutation.ClearManuallyModified()
	return hipu
}

// SetLastErrorMessage sets the "last_error_message" field.
func (hipu *HPIgPostUpdate) SetLastErrorMessage(s string) *HPIgPostUpdate {
	hipu.mutation.SetLastErrorMessage(s)
	return hipu
}

// SetNillableLastErrorMessage sets the "last_error_message" field if the given value is not nil.
func (hipu *HPIgPostUpdate) SetNillableLastErrorMessage(s *string) *HPIgPostUpdate {
	if s != nil {
		hipu.SetLastErrorMessage(*s)
	}
	return hipu
}

// ClearLastErrorMessage clears the value of the "last_error_message" field.
func (hipu *HPIgPostUpdate) ClearLastErrorMessage() *HPIgPostUpdate {
	hipu.mutation.ClearLastErrorMessage()
	return hipu
}

// SetRecrawlRequired sets the "recrawl_required" field.
func (hipu *HPIgPostUpdate) SetRecrawlRequired(b bool) *HPIgPostUpdate {
	hipu.mutation.SetRecrawlRequired(b)
	return hipu
}

// SetNillableRecrawlRequired sets the "recrawl_required" field if the given value is not nil.
func (hipu *HPIgPostUpdate) SetNillableRecrawlRequired(b *bool) *HPIgPostUpdate {
	if b != nil {
		hipu.SetRecrawlRequired(*b)
	}
	return hipu
}

// ClearRecrawlRequired clears the value of the "recrawl_required" field.
func (hipu *HPIgPostUpdate) ClearRecrawlRequired() *HPIgPostUpdate {
	hipu.mutation.ClearRecrawlRequired()
	return hipu
}

// SetUpdatedAt sets the "updated_at" field.
func (hipu *HPIgPostUpdate) SetUpdatedAt(t time.Time) *HPIgPostUpdate {
	hipu.mutation.SetUpdatedAt(t)
	return hipu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (hipu *HPIgPostUpdate) SetNillableUpdatedAt(t *time.Time) *HPIgPostUpdate {
	if t != nil {
		hipu.SetUpdatedAt(*t)
	}
	return hipu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (hipu *HPIgPostUpdate) ClearUpdatedAt() *HPIgPostUpdate {
	hipu.mutation.ClearUpdatedAt()
	return hipu
}

// SetShortcode sets the "shortcode" field.
func (hipu *HPIgPostUpdate) SetShortcode(s string) *HPIgPostUpdate {
	hipu.mutation.SetShortcode(s)
	return hipu
}

// SetDescription sets the "description" field.
func (hipu *HPIgPostUpdate) SetDescription(s string) *HPIgPostUpdate {
	hipu.mutation.SetDescription(s)
	return hipu
}

// SetPostAt sets the "post_at" field.
func (hipu *HPIgPostUpdate) SetPostAt(t time.Time) *HPIgPostUpdate {
	hipu.mutation.SetPostAt(t)
	return hipu
}

// SetMedia sets the "media" field.
func (hipu *HPIgPostUpdate) SetMedia(j []jsonfields.Media) *HPIgPostUpdate {
	hipu.mutation.SetMedia(j)
	return hipu
}

// AppendMedia appends j to the "media" field.
func (hipu *HPIgPostUpdate) AppendMedia(j []jsonfields.Media) *HPIgPostUpdate {
	hipu.mutation.AppendMedia(j)
	return hipu
}

// SetLikes sets the "likes" field.
func (hipu *HPIgPostUpdate) SetLikes(i int) *HPIgPostUpdate {
	hipu.mutation.ResetLikes()
	hipu.mutation.SetLikes(i)
	return hipu
}

// AddLikes adds i to the "likes" field.
func (hipu *HPIgPostUpdate) AddLikes(i int) *HPIgPostUpdate {
	hipu.mutation.AddLikes(i)
	return hipu
}

// SetComments sets the "comments" field.
func (hipu *HPIgPostUpdate) SetComments(i int) *HPIgPostUpdate {
	hipu.mutation.ResetComments()
	hipu.mutation.SetComments(i)
	return hipu
}

// AddComments adds i to the "comments" field.
func (hipu *HPIgPostUpdate) AddComments(i int) *HPIgPostUpdate {
	hipu.mutation.AddComments(i)
	return hipu
}

// SetRecrawlArgs sets the "recrawl_args" field.
func (hipu *HPIgPostUpdate) SetRecrawlArgs(jica *jsonfields.HPIgCrawlArgs) *HPIgPostUpdate {
	hipu.mutation.SetRecrawlArgs(jica)
	return hipu
}

// ClearRecrawlArgs clears the value of the "recrawl_args" field.
func (hipu *HPIgPostUpdate) ClearRecrawlArgs() *HPIgPostUpdate {
	hipu.mutation.ClearRecrawlArgs()
	return hipu
}

// SetOwnerArtistID sets the "owner_artist_id" field.
func (hipu *HPIgPostUpdate) SetOwnerArtistID(i int) *HPIgPostUpdate {
	hipu.mutation.SetOwnerArtistID(i)
	return hipu
}

// SetNillableOwnerArtistID sets the "owner_artist_id" field if the given value is not nil.
func (hipu *HPIgPostUpdate) SetNillableOwnerArtistID(i *int) *HPIgPostUpdate {
	if i != nil {
		hipu.SetOwnerArtistID(*i)
	}
	return hipu
}

// ClearOwnerArtistID clears the value of the "owner_artist_id" field.
func (hipu *HPIgPostUpdate) ClearOwnerArtistID() *HPIgPostUpdate {
	hipu.mutation.ClearOwnerArtistID()
	return hipu
}

// SetOwnerMemberID sets the "owner_member_id" field.
func (hipu *HPIgPostUpdate) SetOwnerMemberID(i int) *HPIgPostUpdate {
	hipu.mutation.SetOwnerMemberID(i)
	return hipu
}

// SetNillableOwnerMemberID sets the "owner_member_id" field if the given value is not nil.
func (hipu *HPIgPostUpdate) SetNillableOwnerMemberID(i *int) *HPIgPostUpdate {
	if i != nil {
		hipu.SetOwnerMemberID(*i)
	}
	return hipu
}

// ClearOwnerMemberID clears the value of the "owner_member_id" field.
func (hipu *HPIgPostUpdate) ClearOwnerMemberID() *HPIgPostUpdate {
	hipu.mutation.ClearOwnerMemberID()
	return hipu
}

// SetOwnerArtist sets the "owner_artist" edge to the HPArtist entity.
func (hipu *HPIgPostUpdate) SetOwnerArtist(h *HPArtist) *HPIgPostUpdate {
	return hipu.SetOwnerArtistID(h.ID)
}

// SetOwnerMember sets the "owner_member" edge to the HPMember entity.
func (hipu *HPIgPostUpdate) SetOwnerMember(h *HPMember) *HPIgPostUpdate {
	return hipu.SetOwnerMemberID(h.ID)
}

// SetAssetID sets the "asset" edge to the HPAsset entity by ID.
func (hipu *HPIgPostUpdate) SetAssetID(id int) *HPIgPostUpdate {
	hipu.mutation.SetAssetID(id)
	return hipu
}

// SetNillableAssetID sets the "asset" edge to the HPAsset entity by ID if the given value is not nil.
func (hipu *HPIgPostUpdate) SetNillableAssetID(id *int) *HPIgPostUpdate {
	if id != nil {
		hipu = hipu.SetAssetID(*id)
	}
	return hipu
}

// SetAsset sets the "asset" edge to the HPAsset entity.
func (hipu *HPIgPostUpdate) SetAsset(h *HPAsset) *HPIgPostUpdate {
	return hipu.SetAssetID(h.ID)
}

// AddTaggedArtistIDs adds the "tagged_artists" edge to the HPArtist entity by IDs.
func (hipu *HPIgPostUpdate) AddTaggedArtistIDs(ids ...int) *HPIgPostUpdate {
	hipu.mutation.AddTaggedArtistIDs(ids...)
	return hipu
}

// AddTaggedArtists adds the "tagged_artists" edges to the HPArtist entity.
func (hipu *HPIgPostUpdate) AddTaggedArtists(h ...*HPArtist) *HPIgPostUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hipu.AddTaggedArtistIDs(ids...)
}

// AddTaggedMemberIDs adds the "tagged_members" edge to the HPMember entity by IDs.
func (hipu *HPIgPostUpdate) AddTaggedMemberIDs(ids ...int) *HPIgPostUpdate {
	hipu.mutation.AddTaggedMemberIDs(ids...)
	return hipu
}

// AddTaggedMembers adds the "tagged_members" edges to the HPMember entity.
func (hipu *HPIgPostUpdate) AddTaggedMembers(h ...*HPMember) *HPIgPostUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hipu.AddTaggedMemberIDs(ids...)
}

// AddBlobIDs adds the "blobs" edge to the HPBlob entity by IDs.
func (hipu *HPIgPostUpdate) AddBlobIDs(ids ...int) *HPIgPostUpdate {
	hipu.mutation.AddBlobIDs(ids...)
	return hipu
}

// AddBlobs adds the "blobs" edges to the HPBlob entity.
func (hipu *HPIgPostUpdate) AddBlobs(h ...*HPBlob) *HPIgPostUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hipu.AddBlobIDs(ids...)
}

// Mutation returns the HPIgPostMutation object of the builder.
func (hipu *HPIgPostUpdate) Mutation() *HPIgPostMutation {
	return hipu.mutation
}

// ClearOwnerArtist clears the "owner_artist" edge to the HPArtist entity.
func (hipu *HPIgPostUpdate) ClearOwnerArtist() *HPIgPostUpdate {
	hipu.mutation.ClearOwnerArtist()
	return hipu
}

// ClearOwnerMember clears the "owner_member" edge to the HPMember entity.
func (hipu *HPIgPostUpdate) ClearOwnerMember() *HPIgPostUpdate {
	hipu.mutation.ClearOwnerMember()
	return hipu
}

// ClearAsset clears the "asset" edge to the HPAsset entity.
func (hipu *HPIgPostUpdate) ClearAsset() *HPIgPostUpdate {
	hipu.mutation.ClearAsset()
	return hipu
}

// ClearTaggedArtists clears all "tagged_artists" edges to the HPArtist entity.
func (hipu *HPIgPostUpdate) ClearTaggedArtists() *HPIgPostUpdate {
	hipu.mutation.ClearTaggedArtists()
	return hipu
}

// RemoveTaggedArtistIDs removes the "tagged_artists" edge to HPArtist entities by IDs.
func (hipu *HPIgPostUpdate) RemoveTaggedArtistIDs(ids ...int) *HPIgPostUpdate {
	hipu.mutation.RemoveTaggedArtistIDs(ids...)
	return hipu
}

// RemoveTaggedArtists removes "tagged_artists" edges to HPArtist entities.
func (hipu *HPIgPostUpdate) RemoveTaggedArtists(h ...*HPArtist) *HPIgPostUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hipu.RemoveTaggedArtistIDs(ids...)
}

// ClearTaggedMembers clears all "tagged_members" edges to the HPMember entity.
func (hipu *HPIgPostUpdate) ClearTaggedMembers() *HPIgPostUpdate {
	hipu.mutation.ClearTaggedMembers()
	return hipu
}

// RemoveTaggedMemberIDs removes the "tagged_members" edge to HPMember entities by IDs.
func (hipu *HPIgPostUpdate) RemoveTaggedMemberIDs(ids ...int) *HPIgPostUpdate {
	hipu.mutation.RemoveTaggedMemberIDs(ids...)
	return hipu
}

// RemoveTaggedMembers removes "tagged_members" edges to HPMember entities.
func (hipu *HPIgPostUpdate) RemoveTaggedMembers(h ...*HPMember) *HPIgPostUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hipu.RemoveTaggedMemberIDs(ids...)
}

// ClearBlobs clears all "blobs" edges to the HPBlob entity.
func (hipu *HPIgPostUpdate) ClearBlobs() *HPIgPostUpdate {
	hipu.mutation.ClearBlobs()
	return hipu
}

// RemoveBlobIDs removes the "blobs" edge to HPBlob entities by IDs.
func (hipu *HPIgPostUpdate) RemoveBlobIDs(ids ...int) *HPIgPostUpdate {
	hipu.mutation.RemoveBlobIDs(ids...)
	return hipu
}

// RemoveBlobs removes "blobs" edges to HPBlob entities.
func (hipu *HPIgPostUpdate) RemoveBlobs(h ...*HPBlob) *HPIgPostUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hipu.RemoveBlobIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hipu *HPIgPostUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, HPIgPostMutation](ctx, hipu.sqlSave, hipu.mutation, hipu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hipu *HPIgPostUpdate) SaveX(ctx context.Context) int {
	affected, err := hipu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hipu *HPIgPostUpdate) Exec(ctx context.Context) error {
	_, err := hipu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hipu *HPIgPostUpdate) ExecX(ctx context.Context) {
	if err := hipu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (hipu *HPIgPostUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(hpigpost.Table, hpigpost.Columns, sqlgraph.NewFieldSpec(hpigpost.FieldID, field.TypeInt))
	if ps := hipu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hipu.mutation.CrawledAt(); ok {
		_spec.SetField(hpigpost.FieldCrawledAt, field.TypeTime, value)
	}
	if hipu.mutation.CrawledAtCleared() {
		_spec.ClearField(hpigpost.FieldCrawledAt, field.TypeTime)
	}
	if value, ok := hipu.mutation.ErrorCount(); ok {
		_spec.SetField(hpigpost.FieldErrorCount, field.TypeInt, value)
	}
	if value, ok := hipu.mutation.AddedErrorCount(); ok {
		_spec.AddField(hpigpost.FieldErrorCount, field.TypeInt, value)
	}
	if value, ok := hipu.mutation.ManuallyModified(); ok {
		_spec.SetField(hpigpost.FieldManuallyModified, field.TypeJSON, value)
	}
	if hipu.mutation.ManuallyModifiedCleared() {
		_spec.ClearField(hpigpost.FieldManuallyModified, field.TypeJSON)
	}
	if value, ok := hipu.mutation.LastErrorMessage(); ok {
		_spec.SetField(hpigpost.FieldLastErrorMessage, field.TypeString, value)
	}
	if hipu.mutation.LastErrorMessageCleared() {
		_spec.ClearField(hpigpost.FieldLastErrorMessage, field.TypeString)
	}
	if value, ok := hipu.mutation.RecrawlRequired(); ok {
		_spec.SetField(hpigpost.FieldRecrawlRequired, field.TypeBool, value)
	}
	if hipu.mutation.RecrawlRequiredCleared() {
		_spec.ClearField(hpigpost.FieldRecrawlRequired, field.TypeBool)
	}
	if hipu.mutation.CreatedAtCleared() {
		_spec.ClearField(hpigpost.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := hipu.mutation.UpdatedAt(); ok {
		_spec.SetField(hpigpost.FieldUpdatedAt, field.TypeTime, value)
	}
	if hipu.mutation.UpdatedAtCleared() {
		_spec.ClearField(hpigpost.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := hipu.mutation.Shortcode(); ok {
		_spec.SetField(hpigpost.FieldShortcode, field.TypeString, value)
	}
	if value, ok := hipu.mutation.Description(); ok {
		_spec.SetField(hpigpost.FieldDescription, field.TypeString, value)
	}
	if value, ok := hipu.mutation.PostAt(); ok {
		_spec.SetField(hpigpost.FieldPostAt, field.TypeTime, value)
	}
	if value, ok := hipu.mutation.Media(); ok {
		_spec.SetField(hpigpost.FieldMedia, field.TypeJSON, value)
	}
	if value, ok := hipu.mutation.AppendedMedia(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, hpigpost.FieldMedia, value)
		})
	}
	if value, ok := hipu.mutation.Likes(); ok {
		_spec.SetField(hpigpost.FieldLikes, field.TypeInt, value)
	}
	if value, ok := hipu.mutation.AddedLikes(); ok {
		_spec.AddField(hpigpost.FieldLikes, field.TypeInt, value)
	}
	if value, ok := hipu.mutation.Comments(); ok {
		_spec.SetField(hpigpost.FieldComments, field.TypeInt, value)
	}
	if value, ok := hipu.mutation.AddedComments(); ok {
		_spec.AddField(hpigpost.FieldComments, field.TypeInt, value)
	}
	if value, ok := hipu.mutation.RecrawlArgs(); ok {
		_spec.SetField(hpigpost.FieldRecrawlArgs, field.TypeJSON, value)
	}
	if hipu.mutation.RecrawlArgsCleared() {
		_spec.ClearField(hpigpost.FieldRecrawlArgs, field.TypeJSON)
	}
	if hipu.mutation.OwnerArtistCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpigpost.OwnerArtistTable,
			Columns: []string{hpigpost.OwnerArtistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpartist.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hipu.mutation.OwnerArtistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpigpost.OwnerArtistTable,
			Columns: []string{hpigpost.OwnerArtistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpartist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hipu.mutation.OwnerMemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpigpost.OwnerMemberTable,
			Columns: []string{hpigpost.OwnerMemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpmember.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hipu.mutation.OwnerMemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpigpost.OwnerMemberTable,
			Columns: []string{hpigpost.OwnerMemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hipu.mutation.AssetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpigpost.AssetTable,
			Columns: []string{hpigpost.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpasset.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hipu.mutation.AssetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpigpost.AssetTable,
			Columns: []string{hpigpost.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpasset.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hipu.mutation.TaggedArtistsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpigpost.TaggedArtistsTable,
			Columns: hpigpost.TaggedArtistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpartist.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hipu.mutation.RemovedTaggedArtistsIDs(); len(nodes) > 0 && !hipu.mutation.TaggedArtistsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpigpost.TaggedArtistsTable,
			Columns: hpigpost.TaggedArtistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpartist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hipu.mutation.TaggedArtistsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpigpost.TaggedArtistsTable,
			Columns: hpigpost.TaggedArtistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpartist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hipu.mutation.TaggedMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpigpost.TaggedMembersTable,
			Columns: hpigpost.TaggedMembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpmember.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hipu.mutation.RemovedTaggedMembersIDs(); len(nodes) > 0 && !hipu.mutation.TaggedMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpigpost.TaggedMembersTable,
			Columns: hpigpost.TaggedMembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hipu.mutation.TaggedMembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpigpost.TaggedMembersTable,
			Columns: hpigpost.TaggedMembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hipu.mutation.BlobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpigpost.BlobsTable,
			Columns: hpigpost.BlobsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpblob.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hipu.mutation.RemovedBlobsIDs(); len(nodes) > 0 && !hipu.mutation.BlobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpigpost.BlobsTable,
			Columns: hpigpost.BlobsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpblob.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hipu.mutation.BlobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpigpost.BlobsTable,
			Columns: hpigpost.BlobsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpblob.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hipu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hpigpost.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	hipu.mutation.done = true
	return n, nil
}

// HPIgPostUpdateOne is the builder for updating a single HPIgPost entity.
type HPIgPostUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HPIgPostMutation
}

// SetCrawledAt sets the "crawled_at" field.
func (hipuo *HPIgPostUpdateOne) SetCrawledAt(t time.Time) *HPIgPostUpdateOne {
	hipuo.mutation.SetCrawledAt(t)
	return hipuo
}

// SetNillableCrawledAt sets the "crawled_at" field if the given value is not nil.
func (hipuo *HPIgPostUpdateOne) SetNillableCrawledAt(t *time.Time) *HPIgPostUpdateOne {
	if t != nil {
		hipuo.SetCrawledAt(*t)
	}
	return hipuo
}

// ClearCrawledAt clears the value of the "crawled_at" field.
func (hipuo *HPIgPostUpdateOne) ClearCrawledAt() *HPIgPostUpdateOne {
	hipuo.mutation.ClearCrawledAt()
	return hipuo
}

// SetErrorCount sets the "error_count" field.
func (hipuo *HPIgPostUpdateOne) SetErrorCount(i int) *HPIgPostUpdateOne {
	hipuo.mutation.ResetErrorCount()
	hipuo.mutation.SetErrorCount(i)
	return hipuo
}

// SetNillableErrorCount sets the "error_count" field if the given value is not nil.
func (hipuo *HPIgPostUpdateOne) SetNillableErrorCount(i *int) *HPIgPostUpdateOne {
	if i != nil {
		hipuo.SetErrorCount(*i)
	}
	return hipuo
}

// AddErrorCount adds i to the "error_count" field.
func (hipuo *HPIgPostUpdateOne) AddErrorCount(i int) *HPIgPostUpdateOne {
	hipuo.mutation.AddErrorCount(i)
	return hipuo
}

// SetManuallyModified sets the "manually_modified" field.
func (hipuo *HPIgPostUpdateOne) SetManuallyModified(jm *jsonfields.ManuallyModified) *HPIgPostUpdateOne {
	hipuo.mutation.SetManuallyModified(jm)
	return hipuo
}

// ClearManuallyModified clears the value of the "manually_modified" field.
func (hipuo *HPIgPostUpdateOne) ClearManuallyModified() *HPIgPostUpdateOne {
	hipuo.mutation.ClearManuallyModified()
	return hipuo
}

// SetLastErrorMessage sets the "last_error_message" field.
func (hipuo *HPIgPostUpdateOne) SetLastErrorMessage(s string) *HPIgPostUpdateOne {
	hipuo.mutation.SetLastErrorMessage(s)
	return hipuo
}

// SetNillableLastErrorMessage sets the "last_error_message" field if the given value is not nil.
func (hipuo *HPIgPostUpdateOne) SetNillableLastErrorMessage(s *string) *HPIgPostUpdateOne {
	if s != nil {
		hipuo.SetLastErrorMessage(*s)
	}
	return hipuo
}

// ClearLastErrorMessage clears the value of the "last_error_message" field.
func (hipuo *HPIgPostUpdateOne) ClearLastErrorMessage() *HPIgPostUpdateOne {
	hipuo.mutation.ClearLastErrorMessage()
	return hipuo
}

// SetRecrawlRequired sets the "recrawl_required" field.
func (hipuo *HPIgPostUpdateOne) SetRecrawlRequired(b bool) *HPIgPostUpdateOne {
	hipuo.mutation.SetRecrawlRequired(b)
	return hipuo
}

// SetNillableRecrawlRequired sets the "recrawl_required" field if the given value is not nil.
func (hipuo *HPIgPostUpdateOne) SetNillableRecrawlRequired(b *bool) *HPIgPostUpdateOne {
	if b != nil {
		hipuo.SetRecrawlRequired(*b)
	}
	return hipuo
}

// ClearRecrawlRequired clears the value of the "recrawl_required" field.
func (hipuo *HPIgPostUpdateOne) ClearRecrawlRequired() *HPIgPostUpdateOne {
	hipuo.mutation.ClearRecrawlRequired()
	return hipuo
}

// SetUpdatedAt sets the "updated_at" field.
func (hipuo *HPIgPostUpdateOne) SetUpdatedAt(t time.Time) *HPIgPostUpdateOne {
	hipuo.mutation.SetUpdatedAt(t)
	return hipuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (hipuo *HPIgPostUpdateOne) SetNillableUpdatedAt(t *time.Time) *HPIgPostUpdateOne {
	if t != nil {
		hipuo.SetUpdatedAt(*t)
	}
	return hipuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (hipuo *HPIgPostUpdateOne) ClearUpdatedAt() *HPIgPostUpdateOne {
	hipuo.mutation.ClearUpdatedAt()
	return hipuo
}

// SetShortcode sets the "shortcode" field.
func (hipuo *HPIgPostUpdateOne) SetShortcode(s string) *HPIgPostUpdateOne {
	hipuo.mutation.SetShortcode(s)
	return hipuo
}

// SetDescription sets the "description" field.
func (hipuo *HPIgPostUpdateOne) SetDescription(s string) *HPIgPostUpdateOne {
	hipuo.mutation.SetDescription(s)
	return hipuo
}

// SetPostAt sets the "post_at" field.
func (hipuo *HPIgPostUpdateOne) SetPostAt(t time.Time) *HPIgPostUpdateOne {
	hipuo.mutation.SetPostAt(t)
	return hipuo
}

// SetMedia sets the "media" field.
func (hipuo *HPIgPostUpdateOne) SetMedia(j []jsonfields.Media) *HPIgPostUpdateOne {
	hipuo.mutation.SetMedia(j)
	return hipuo
}

// AppendMedia appends j to the "media" field.
func (hipuo *HPIgPostUpdateOne) AppendMedia(j []jsonfields.Media) *HPIgPostUpdateOne {
	hipuo.mutation.AppendMedia(j)
	return hipuo
}

// SetLikes sets the "likes" field.
func (hipuo *HPIgPostUpdateOne) SetLikes(i int) *HPIgPostUpdateOne {
	hipuo.mutation.ResetLikes()
	hipuo.mutation.SetLikes(i)
	return hipuo
}

// AddLikes adds i to the "likes" field.
func (hipuo *HPIgPostUpdateOne) AddLikes(i int) *HPIgPostUpdateOne {
	hipuo.mutation.AddLikes(i)
	return hipuo
}

// SetComments sets the "comments" field.
func (hipuo *HPIgPostUpdateOne) SetComments(i int) *HPIgPostUpdateOne {
	hipuo.mutation.ResetComments()
	hipuo.mutation.SetComments(i)
	return hipuo
}

// AddComments adds i to the "comments" field.
func (hipuo *HPIgPostUpdateOne) AddComments(i int) *HPIgPostUpdateOne {
	hipuo.mutation.AddComments(i)
	return hipuo
}

// SetRecrawlArgs sets the "recrawl_args" field.
func (hipuo *HPIgPostUpdateOne) SetRecrawlArgs(jica *jsonfields.HPIgCrawlArgs) *HPIgPostUpdateOne {
	hipuo.mutation.SetRecrawlArgs(jica)
	return hipuo
}

// ClearRecrawlArgs clears the value of the "recrawl_args" field.
func (hipuo *HPIgPostUpdateOne) ClearRecrawlArgs() *HPIgPostUpdateOne {
	hipuo.mutation.ClearRecrawlArgs()
	return hipuo
}

// SetOwnerArtistID sets the "owner_artist_id" field.
func (hipuo *HPIgPostUpdateOne) SetOwnerArtistID(i int) *HPIgPostUpdateOne {
	hipuo.mutation.SetOwnerArtistID(i)
	return hipuo
}

// SetNillableOwnerArtistID sets the "owner_artist_id" field if the given value is not nil.
func (hipuo *HPIgPostUpdateOne) SetNillableOwnerArtistID(i *int) *HPIgPostUpdateOne {
	if i != nil {
		hipuo.SetOwnerArtistID(*i)
	}
	return hipuo
}

// ClearOwnerArtistID clears the value of the "owner_artist_id" field.
func (hipuo *HPIgPostUpdateOne) ClearOwnerArtistID() *HPIgPostUpdateOne {
	hipuo.mutation.ClearOwnerArtistID()
	return hipuo
}

// SetOwnerMemberID sets the "owner_member_id" field.
func (hipuo *HPIgPostUpdateOne) SetOwnerMemberID(i int) *HPIgPostUpdateOne {
	hipuo.mutation.SetOwnerMemberID(i)
	return hipuo
}

// SetNillableOwnerMemberID sets the "owner_member_id" field if the given value is not nil.
func (hipuo *HPIgPostUpdateOne) SetNillableOwnerMemberID(i *int) *HPIgPostUpdateOne {
	if i != nil {
		hipuo.SetOwnerMemberID(*i)
	}
	return hipuo
}

// ClearOwnerMemberID clears the value of the "owner_member_id" field.
func (hipuo *HPIgPostUpdateOne) ClearOwnerMemberID() *HPIgPostUpdateOne {
	hipuo.mutation.ClearOwnerMemberID()
	return hipuo
}

// SetOwnerArtist sets the "owner_artist" edge to the HPArtist entity.
func (hipuo *HPIgPostUpdateOne) SetOwnerArtist(h *HPArtist) *HPIgPostUpdateOne {
	return hipuo.SetOwnerArtistID(h.ID)
}

// SetOwnerMember sets the "owner_member" edge to the HPMember entity.
func (hipuo *HPIgPostUpdateOne) SetOwnerMember(h *HPMember) *HPIgPostUpdateOne {
	return hipuo.SetOwnerMemberID(h.ID)
}

// SetAssetID sets the "asset" edge to the HPAsset entity by ID.
func (hipuo *HPIgPostUpdateOne) SetAssetID(id int) *HPIgPostUpdateOne {
	hipuo.mutation.SetAssetID(id)
	return hipuo
}

// SetNillableAssetID sets the "asset" edge to the HPAsset entity by ID if the given value is not nil.
func (hipuo *HPIgPostUpdateOne) SetNillableAssetID(id *int) *HPIgPostUpdateOne {
	if id != nil {
		hipuo = hipuo.SetAssetID(*id)
	}
	return hipuo
}

// SetAsset sets the "asset" edge to the HPAsset entity.
func (hipuo *HPIgPostUpdateOne) SetAsset(h *HPAsset) *HPIgPostUpdateOne {
	return hipuo.SetAssetID(h.ID)
}

// AddTaggedArtistIDs adds the "tagged_artists" edge to the HPArtist entity by IDs.
func (hipuo *HPIgPostUpdateOne) AddTaggedArtistIDs(ids ...int) *HPIgPostUpdateOne {
	hipuo.mutation.AddTaggedArtistIDs(ids...)
	return hipuo
}

// AddTaggedArtists adds the "tagged_artists" edges to the HPArtist entity.
func (hipuo *HPIgPostUpdateOne) AddTaggedArtists(h ...*HPArtist) *HPIgPostUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hipuo.AddTaggedArtistIDs(ids...)
}

// AddTaggedMemberIDs adds the "tagged_members" edge to the HPMember entity by IDs.
func (hipuo *HPIgPostUpdateOne) AddTaggedMemberIDs(ids ...int) *HPIgPostUpdateOne {
	hipuo.mutation.AddTaggedMemberIDs(ids...)
	return hipuo
}

// AddTaggedMembers adds the "tagged_members" edges to the HPMember entity.
func (hipuo *HPIgPostUpdateOne) AddTaggedMembers(h ...*HPMember) *HPIgPostUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hipuo.AddTaggedMemberIDs(ids...)
}

// AddBlobIDs adds the "blobs" edge to the HPBlob entity by IDs.
func (hipuo *HPIgPostUpdateOne) AddBlobIDs(ids ...int) *HPIgPostUpdateOne {
	hipuo.mutation.AddBlobIDs(ids...)
	return hipuo
}

// AddBlobs adds the "blobs" edges to the HPBlob entity.
func (hipuo *HPIgPostUpdateOne) AddBlobs(h ...*HPBlob) *HPIgPostUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hipuo.AddBlobIDs(ids...)
}

// Mutation returns the HPIgPostMutation object of the builder.
func (hipuo *HPIgPostUpdateOne) Mutation() *HPIgPostMutation {
	return hipuo.mutation
}

// ClearOwnerArtist clears the "owner_artist" edge to the HPArtist entity.
func (hipuo *HPIgPostUpdateOne) ClearOwnerArtist() *HPIgPostUpdateOne {
	hipuo.mutation.ClearOwnerArtist()
	return hipuo
}

// ClearOwnerMember clears the "owner_member" edge to the HPMember entity.
func (hipuo *HPIgPostUpdateOne) ClearOwnerMember() *HPIgPostUpdateOne {
	hipuo.mutation.ClearOwnerMember()
	return hipuo
}

// ClearAsset clears the "asset" edge to the HPAsset entity.
func (hipuo *HPIgPostUpdateOne) ClearAsset() *HPIgPostUpdateOne {
	hipuo.mutation.ClearAsset()
	return hipuo
}

// ClearTaggedArtists clears all "tagged_artists" edges to the HPArtist entity.
func (hipuo *HPIgPostUpdateOne) ClearTaggedArtists() *HPIgPostUpdateOne {
	hipuo.mutation.ClearTaggedArtists()
	return hipuo
}

// RemoveTaggedArtistIDs removes the "tagged_artists" edge to HPArtist entities by IDs.
func (hipuo *HPIgPostUpdateOne) RemoveTaggedArtistIDs(ids ...int) *HPIgPostUpdateOne {
	hipuo.mutation.RemoveTaggedArtistIDs(ids...)
	return hipuo
}

// RemoveTaggedArtists removes "tagged_artists" edges to HPArtist entities.
func (hipuo *HPIgPostUpdateOne) RemoveTaggedArtists(h ...*HPArtist) *HPIgPostUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hipuo.RemoveTaggedArtistIDs(ids...)
}

// ClearTaggedMembers clears all "tagged_members" edges to the HPMember entity.
func (hipuo *HPIgPostUpdateOne) ClearTaggedMembers() *HPIgPostUpdateOne {
	hipuo.mutation.ClearTaggedMembers()
	return hipuo
}

// RemoveTaggedMemberIDs removes the "tagged_members" edge to HPMember entities by IDs.
func (hipuo *HPIgPostUpdateOne) RemoveTaggedMemberIDs(ids ...int) *HPIgPostUpdateOne {
	hipuo.mutation.RemoveTaggedMemberIDs(ids...)
	return hipuo
}

// RemoveTaggedMembers removes "tagged_members" edges to HPMember entities.
func (hipuo *HPIgPostUpdateOne) RemoveTaggedMembers(h ...*HPMember) *HPIgPostUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hipuo.RemoveTaggedMemberIDs(ids...)
}

// ClearBlobs clears all "blobs" edges to the HPBlob entity.
func (hipuo *HPIgPostUpdateOne) ClearBlobs() *HPIgPostUpdateOne {
	hipuo.mutation.ClearBlobs()
	return hipuo
}

// RemoveBlobIDs removes the "blobs" edge to HPBlob entities by IDs.
func (hipuo *HPIgPostUpdateOne) RemoveBlobIDs(ids ...int) *HPIgPostUpdateOne {
	hipuo.mutation.RemoveBlobIDs(ids...)
	return hipuo
}

// RemoveBlobs removes "blobs" edges to HPBlob entities.
func (hipuo *HPIgPostUpdateOne) RemoveBlobs(h ...*HPBlob) *HPIgPostUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hipuo.RemoveBlobIDs(ids...)
}

// Where appends a list predicates to the HPIgPostUpdate builder.
func (hipuo *HPIgPostUpdateOne) Where(ps ...predicate.HPIgPost) *HPIgPostUpdateOne {
	hipuo.mutation.Where(ps...)
	return hipuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (hipuo *HPIgPostUpdateOne) Select(field string, fields ...string) *HPIgPostUpdateOne {
	hipuo.fields = append([]string{field}, fields...)
	return hipuo
}

// Save executes the query and returns the updated HPIgPost entity.
func (hipuo *HPIgPostUpdateOne) Save(ctx context.Context) (*HPIgPost, error) {
	return withHooks[*HPIgPost, HPIgPostMutation](ctx, hipuo.sqlSave, hipuo.mutation, hipuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hipuo *HPIgPostUpdateOne) SaveX(ctx context.Context) *HPIgPost {
	node, err := hipuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (hipuo *HPIgPostUpdateOne) Exec(ctx context.Context) error {
	_, err := hipuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hipuo *HPIgPostUpdateOne) ExecX(ctx context.Context) {
	if err := hipuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (hipuo *HPIgPostUpdateOne) sqlSave(ctx context.Context) (_node *HPIgPost, err error) {
	_spec := sqlgraph.NewUpdateSpec(hpigpost.Table, hpigpost.Columns, sqlgraph.NewFieldSpec(hpigpost.FieldID, field.TypeInt))
	id, ok := hipuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "HPIgPost.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := hipuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hpigpost.FieldID)
		for _, f := range fields {
			if !hpigpost.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != hpigpost.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := hipuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hipuo.mutation.CrawledAt(); ok {
		_spec.SetField(hpigpost.FieldCrawledAt, field.TypeTime, value)
	}
	if hipuo.mutation.CrawledAtCleared() {
		_spec.ClearField(hpigpost.FieldCrawledAt, field.TypeTime)
	}
	if value, ok := hipuo.mutation.ErrorCount(); ok {
		_spec.SetField(hpigpost.FieldErrorCount, field.TypeInt, value)
	}
	if value, ok := hipuo.mutation.AddedErrorCount(); ok {
		_spec.AddField(hpigpost.FieldErrorCount, field.TypeInt, value)
	}
	if value, ok := hipuo.mutation.ManuallyModified(); ok {
		_spec.SetField(hpigpost.FieldManuallyModified, field.TypeJSON, value)
	}
	if hipuo.mutation.ManuallyModifiedCleared() {
		_spec.ClearField(hpigpost.FieldManuallyModified, field.TypeJSON)
	}
	if value, ok := hipuo.mutation.LastErrorMessage(); ok {
		_spec.SetField(hpigpost.FieldLastErrorMessage, field.TypeString, value)
	}
	if hipuo.mutation.LastErrorMessageCleared() {
		_spec.ClearField(hpigpost.FieldLastErrorMessage, field.TypeString)
	}
	if value, ok := hipuo.mutation.RecrawlRequired(); ok {
		_spec.SetField(hpigpost.FieldRecrawlRequired, field.TypeBool, value)
	}
	if hipuo.mutation.RecrawlRequiredCleared() {
		_spec.ClearField(hpigpost.FieldRecrawlRequired, field.TypeBool)
	}
	if hipuo.mutation.CreatedAtCleared() {
		_spec.ClearField(hpigpost.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := hipuo.mutation.UpdatedAt(); ok {
		_spec.SetField(hpigpost.FieldUpdatedAt, field.TypeTime, value)
	}
	if hipuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(hpigpost.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := hipuo.mutation.Shortcode(); ok {
		_spec.SetField(hpigpost.FieldShortcode, field.TypeString, value)
	}
	if value, ok := hipuo.mutation.Description(); ok {
		_spec.SetField(hpigpost.FieldDescription, field.TypeString, value)
	}
	if value, ok := hipuo.mutation.PostAt(); ok {
		_spec.SetField(hpigpost.FieldPostAt, field.TypeTime, value)
	}
	if value, ok := hipuo.mutation.Media(); ok {
		_spec.SetField(hpigpost.FieldMedia, field.TypeJSON, value)
	}
	if value, ok := hipuo.mutation.AppendedMedia(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, hpigpost.FieldMedia, value)
		})
	}
	if value, ok := hipuo.mutation.Likes(); ok {
		_spec.SetField(hpigpost.FieldLikes, field.TypeInt, value)
	}
	if value, ok := hipuo.mutation.AddedLikes(); ok {
		_spec.AddField(hpigpost.FieldLikes, field.TypeInt, value)
	}
	if value, ok := hipuo.mutation.Comments(); ok {
		_spec.SetField(hpigpost.FieldComments, field.TypeInt, value)
	}
	if value, ok := hipuo.mutation.AddedComments(); ok {
		_spec.AddField(hpigpost.FieldComments, field.TypeInt, value)
	}
	if value, ok := hipuo.mutation.RecrawlArgs(); ok {
		_spec.SetField(hpigpost.FieldRecrawlArgs, field.TypeJSON, value)
	}
	if hipuo.mutation.RecrawlArgsCleared() {
		_spec.ClearField(hpigpost.FieldRecrawlArgs, field.TypeJSON)
	}
	if hipuo.mutation.OwnerArtistCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpigpost.OwnerArtistTable,
			Columns: []string{hpigpost.OwnerArtistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpartist.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hipuo.mutation.OwnerArtistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpigpost.OwnerArtistTable,
			Columns: []string{hpigpost.OwnerArtistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpartist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hipuo.mutation.OwnerMemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpigpost.OwnerMemberTable,
			Columns: []string{hpigpost.OwnerMemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpmember.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hipuo.mutation.OwnerMemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpigpost.OwnerMemberTable,
			Columns: []string{hpigpost.OwnerMemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hipuo.mutation.AssetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpigpost.AssetTable,
			Columns: []string{hpigpost.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpasset.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hipuo.mutation.AssetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpigpost.AssetTable,
			Columns: []string{hpigpost.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpasset.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hipuo.mutation.TaggedArtistsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpigpost.TaggedArtistsTable,
			Columns: hpigpost.TaggedArtistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpartist.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hipuo.mutation.RemovedTaggedArtistsIDs(); len(nodes) > 0 && !hipuo.mutation.TaggedArtistsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpigpost.TaggedArtistsTable,
			Columns: hpigpost.TaggedArtistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpartist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hipuo.mutation.TaggedArtistsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpigpost.TaggedArtistsTable,
			Columns: hpigpost.TaggedArtistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpartist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hipuo.mutation.TaggedMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpigpost.TaggedMembersTable,
			Columns: hpigpost.TaggedMembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpmember.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hipuo.mutation.RemovedTaggedMembersIDs(); len(nodes) > 0 && !hipuo.mutation.TaggedMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpigpost.TaggedMembersTable,
			Columns: hpigpost.TaggedMembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hipuo.mutation.TaggedMembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpigpost.TaggedMembersTable,
			Columns: hpigpost.TaggedMembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hipuo.mutation.BlobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpigpost.BlobsTable,
			Columns: hpigpost.BlobsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpblob.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hipuo.mutation.RemovedBlobsIDs(); len(nodes) > 0 && !hipuo.mutation.BlobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpigpost.BlobsTable,
			Columns: hpigpost.BlobsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpblob.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hipuo.mutation.BlobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpigpost.BlobsTable,
			Columns: hpigpost.BlobsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpblob.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &HPIgPost{config: hipuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, hipuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hpigpost.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	hipuo.mutation.done = true
	return _node, nil
}
