// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yssk22/hpapp/go/service/ent/hpameblopost"
	"github.com/yssk22/hpapp/go/service/ent/hpartist"
	"github.com/yssk22/hpapp/go/service/ent/hpasset"
	"github.com/yssk22/hpapp/go/service/ent/hpelineupmallitem"
	"github.com/yssk22/hpapp/go/service/ent/hpfeeditem"
	"github.com/yssk22/hpapp/go/service/ent/hpfollow"
	"github.com/yssk22/hpapp/go/service/ent/hpigpost"
	"github.com/yssk22/hpapp/go/service/ent/hpmember"
	"github.com/yssk22/hpapp/go/service/schema/jsonfields"
)

// HPArtistCreate is the builder for creating a HPArtist entity.
type HPArtistCreate struct {
	config
	mutation *HPArtistMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCrawledAt sets the "crawled_at" field.
func (hac *HPArtistCreate) SetCrawledAt(t time.Time) *HPArtistCreate {
	hac.mutation.SetCrawledAt(t)
	return hac
}

// SetNillableCrawledAt sets the "crawled_at" field if the given value is not nil.
func (hac *HPArtistCreate) SetNillableCrawledAt(t *time.Time) *HPArtistCreate {
	if t != nil {
		hac.SetCrawledAt(*t)
	}
	return hac
}

// SetErrorCount sets the "error_count" field.
func (hac *HPArtistCreate) SetErrorCount(i int) *HPArtistCreate {
	hac.mutation.SetErrorCount(i)
	return hac
}

// SetNillableErrorCount sets the "error_count" field if the given value is not nil.
func (hac *HPArtistCreate) SetNillableErrorCount(i *int) *HPArtistCreate {
	if i != nil {
		hac.SetErrorCount(*i)
	}
	return hac
}

// SetManuallyModified sets the "manually_modified" field.
func (hac *HPArtistCreate) SetManuallyModified(jm *jsonfields.ManuallyModified) *HPArtistCreate {
	hac.mutation.SetManuallyModified(jm)
	return hac
}

// SetLastErrorMessage sets the "last_error_message" field.
func (hac *HPArtistCreate) SetLastErrorMessage(s string) *HPArtistCreate {
	hac.mutation.SetLastErrorMessage(s)
	return hac
}

// SetNillableLastErrorMessage sets the "last_error_message" field if the given value is not nil.
func (hac *HPArtistCreate) SetNillableLastErrorMessage(s *string) *HPArtistCreate {
	if s != nil {
		hac.SetLastErrorMessage(*s)
	}
	return hac
}

// SetRecrawlRequired sets the "recrawl_required" field.
func (hac *HPArtistCreate) SetRecrawlRequired(b bool) *HPArtistCreate {
	hac.mutation.SetRecrawlRequired(b)
	return hac
}

// SetNillableRecrawlRequired sets the "recrawl_required" field if the given value is not nil.
func (hac *HPArtistCreate) SetNillableRecrawlRequired(b *bool) *HPArtistCreate {
	if b != nil {
		hac.SetRecrawlRequired(*b)
	}
	return hac
}

// SetCreatedAt sets the "created_at" field.
func (hac *HPArtistCreate) SetCreatedAt(t time.Time) *HPArtistCreate {
	hac.mutation.SetCreatedAt(t)
	return hac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (hac *HPArtistCreate) SetNillableCreatedAt(t *time.Time) *HPArtistCreate {
	if t != nil {
		hac.SetCreatedAt(*t)
	}
	return hac
}

// SetUpdatedAt sets the "updated_at" field.
func (hac *HPArtistCreate) SetUpdatedAt(t time.Time) *HPArtistCreate {
	hac.mutation.SetUpdatedAt(t)
	return hac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (hac *HPArtistCreate) SetNillableUpdatedAt(t *time.Time) *HPArtistCreate {
	if t != nil {
		hac.SetUpdatedAt(*t)
	}
	return hac
}

// SetKey sets the "key" field.
func (hac *HPArtistCreate) SetKey(s string) *HPArtistCreate {
	hac.mutation.SetKey(s)
	return hac
}

// SetName sets the "name" field.
func (hac *HPArtistCreate) SetName(s string) *HPArtistCreate {
	hac.mutation.SetName(s)
	return hac
}

// SetThumbnailURL sets the "thumbnail_url" field.
func (hac *HPArtistCreate) SetThumbnailURL(s string) *HPArtistCreate {
	hac.mutation.SetThumbnailURL(s)
	return hac
}

// SetIndex sets the "index" field.
func (hac *HPArtistCreate) SetIndex(i int) *HPArtistCreate {
	hac.mutation.SetIndex(i)
	return hac
}

// AddMemberIDs adds the "members" edge to the HPMember entity by IDs.
func (hac *HPArtistCreate) AddMemberIDs(ids ...int) *HPArtistCreate {
	hac.mutation.AddMemberIDs(ids...)
	return hac
}

// AddMembers adds the "members" edges to the HPMember entity.
func (hac *HPArtistCreate) AddMembers(h ...*HPMember) *HPArtistCreate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hac.AddMemberIDs(ids...)
}

// AddAssetIDs adds the "assets" edge to the HPAsset entity by IDs.
func (hac *HPArtistCreate) AddAssetIDs(ids ...int) *HPArtistCreate {
	hac.mutation.AddAssetIDs(ids...)
	return hac
}

// AddAssets adds the "assets" edges to the HPAsset entity.
func (hac *HPArtistCreate) AddAssets(h ...*HPAsset) *HPArtistCreate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hac.AddAssetIDs(ids...)
}

// AddOwningFeedIDs adds the "owning_feed" edge to the HPFeedItem entity by IDs.
func (hac *HPArtistCreate) AddOwningFeedIDs(ids ...int) *HPArtistCreate {
	hac.mutation.AddOwningFeedIDs(ids...)
	return hac
}

// AddOwningFeed adds the "owning_feed" edges to the HPFeedItem entity.
func (hac *HPArtistCreate) AddOwningFeed(h ...*HPFeedItem) *HPArtistCreate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hac.AddOwningFeedIDs(ids...)
}

// AddTaggedFeedIDs adds the "tagged_feed" edge to the HPFeedItem entity by IDs.
func (hac *HPArtistCreate) AddTaggedFeedIDs(ids ...int) *HPArtistCreate {
	hac.mutation.AddTaggedFeedIDs(ids...)
	return hac
}

// AddTaggedFeed adds the "tagged_feed" edges to the HPFeedItem entity.
func (hac *HPArtistCreate) AddTaggedFeed(h ...*HPFeedItem) *HPArtistCreate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hac.AddTaggedFeedIDs(ids...)
}

// AddOwningIgPostIDs adds the "owning_ig_posts" edge to the HPIgPost entity by IDs.
func (hac *HPArtistCreate) AddOwningIgPostIDs(ids ...int) *HPArtistCreate {
	hac.mutation.AddOwningIgPostIDs(ids...)
	return hac
}

// AddOwningIgPosts adds the "owning_ig_posts" edges to the HPIgPost entity.
func (hac *HPArtistCreate) AddOwningIgPosts(h ...*HPIgPost) *HPArtistCreate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hac.AddOwningIgPostIDs(ids...)
}

// AddTaggedIgPostIDs adds the "tagged_ig_posts" edge to the HPIgPost entity by IDs.
func (hac *HPArtistCreate) AddTaggedIgPostIDs(ids ...int) *HPArtistCreate {
	hac.mutation.AddTaggedIgPostIDs(ids...)
	return hac
}

// AddTaggedIgPosts adds the "tagged_ig_posts" edges to the HPIgPost entity.
func (hac *HPArtistCreate) AddTaggedIgPosts(h ...*HPIgPost) *HPArtistCreate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hac.AddTaggedIgPostIDs(ids...)
}

// AddOwningAmebloPostIDs adds the "owning_ameblo_posts" edge to the HPAmebloPost entity by IDs.
func (hac *HPArtistCreate) AddOwningAmebloPostIDs(ids ...int) *HPArtistCreate {
	hac.mutation.AddOwningAmebloPostIDs(ids...)
	return hac
}

// AddOwningAmebloPosts adds the "owning_ameblo_posts" edges to the HPAmebloPost entity.
func (hac *HPArtistCreate) AddOwningAmebloPosts(h ...*HPAmebloPost) *HPArtistCreate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hac.AddOwningAmebloPostIDs(ids...)
}

// AddTaggedAmebloPostIDs adds the "tagged_ameblo_posts" edge to the HPAmebloPost entity by IDs.
func (hac *HPArtistCreate) AddTaggedAmebloPostIDs(ids ...int) *HPArtistCreate {
	hac.mutation.AddTaggedAmebloPostIDs(ids...)
	return hac
}

// AddTaggedAmebloPosts adds the "tagged_ameblo_posts" edges to the HPAmebloPost entity.
func (hac *HPArtistCreate) AddTaggedAmebloPosts(h ...*HPAmebloPost) *HPArtistCreate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hac.AddTaggedAmebloPostIDs(ids...)
}

// AddTaggedElineupMallItemIDs adds the "tagged_elineup_mall_items" edge to the HPElineupMallItem entity by IDs.
func (hac *HPArtistCreate) AddTaggedElineupMallItemIDs(ids ...int) *HPArtistCreate {
	hac.mutation.AddTaggedElineupMallItemIDs(ids...)
	return hac
}

// AddTaggedElineupMallItems adds the "tagged_elineup_mall_items" edges to the HPElineupMallItem entity.
func (hac *HPArtistCreate) AddTaggedElineupMallItems(h ...*HPElineupMallItem) *HPArtistCreate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hac.AddTaggedElineupMallItemIDs(ids...)
}

// AddFollowedByIDs adds the "followed_by" edge to the HPFollow entity by IDs.
func (hac *HPArtistCreate) AddFollowedByIDs(ids ...int) *HPArtistCreate {
	hac.mutation.AddFollowedByIDs(ids...)
	return hac
}

// AddFollowedBy adds the "followed_by" edges to the HPFollow entity.
func (hac *HPArtistCreate) AddFollowedBy(h ...*HPFollow) *HPArtistCreate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hac.AddFollowedByIDs(ids...)
}

// Mutation returns the HPArtistMutation object of the builder.
func (hac *HPArtistCreate) Mutation() *HPArtistMutation {
	return hac.mutation
}

// Save creates the HPArtist in the database.
func (hac *HPArtistCreate) Save(ctx context.Context) (*HPArtist, error) {
	if err := hac.defaults(); err != nil {
		return nil, err
	}
	return withHooks[*HPArtist, HPArtistMutation](ctx, hac.sqlSave, hac.mutation, hac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (hac *HPArtistCreate) SaveX(ctx context.Context) *HPArtist {
	v, err := hac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hac *HPArtistCreate) Exec(ctx context.Context) error {
	_, err := hac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hac *HPArtistCreate) ExecX(ctx context.Context) {
	if err := hac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hac *HPArtistCreate) defaults() error {
	if _, ok := hac.mutation.ErrorCount(); !ok {
		v := hpartist.DefaultErrorCount
		hac.mutation.SetErrorCount(v)
	}
	if _, ok := hac.mutation.RecrawlRequired(); !ok {
		v := hpartist.DefaultRecrawlRequired
		hac.mutation.SetRecrawlRequired(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (hac *HPArtistCreate) check() error {
	if _, ok := hac.mutation.ErrorCount(); !ok {
		return &ValidationError{Name: "error_count", err: errors.New(`ent: missing required field "HPArtist.error_count"`)}
	}
	if _, ok := hac.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "HPArtist.key"`)}
	}
	if _, ok := hac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "HPArtist.name"`)}
	}
	if _, ok := hac.mutation.ThumbnailURL(); !ok {
		return &ValidationError{Name: "thumbnail_url", err: errors.New(`ent: missing required field "HPArtist.thumbnail_url"`)}
	}
	if _, ok := hac.mutation.Index(); !ok {
		return &ValidationError{Name: "index", err: errors.New(`ent: missing required field "HPArtist.index"`)}
	}
	return nil
}

func (hac *HPArtistCreate) sqlSave(ctx context.Context) (*HPArtist, error) {
	if err := hac.check(); err != nil {
		return nil, err
	}
	_node, _spec := hac.createSpec()
	if err := sqlgraph.CreateNode(ctx, hac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	hac.mutation.id = &_node.ID
	hac.mutation.done = true
	return _node, nil
}

func (hac *HPArtistCreate) createSpec() (*HPArtist, *sqlgraph.CreateSpec) {
	var (
		_node = &HPArtist{config: hac.config}
		_spec = sqlgraph.NewCreateSpec(hpartist.Table, sqlgraph.NewFieldSpec(hpartist.FieldID, field.TypeInt))
	)
	_spec.OnConflict = hac.conflict
	if value, ok := hac.mutation.CrawledAt(); ok {
		_spec.SetField(hpartist.FieldCrawledAt, field.TypeTime, value)
		_node.CrawledAt = &value
	}
	if value, ok := hac.mutation.ErrorCount(); ok {
		_spec.SetField(hpartist.FieldErrorCount, field.TypeInt, value)
		_node.ErrorCount = value
	}
	if value, ok := hac.mutation.ManuallyModified(); ok {
		_spec.SetField(hpartist.FieldManuallyModified, field.TypeJSON, value)
		_node.ManuallyModified = value
	}
	if value, ok := hac.mutation.LastErrorMessage(); ok {
		_spec.SetField(hpartist.FieldLastErrorMessage, field.TypeString, value)
		_node.LastErrorMessage = &value
	}
	if value, ok := hac.mutation.RecrawlRequired(); ok {
		_spec.SetField(hpartist.FieldRecrawlRequired, field.TypeBool, value)
		_node.RecrawlRequired = value
	}
	if value, ok := hac.mutation.CreatedAt(); ok {
		_spec.SetField(hpartist.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := hac.mutation.UpdatedAt(); ok {
		_spec.SetField(hpartist.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := hac.mutation.Key(); ok {
		_spec.SetField(hpartist.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := hac.mutation.Name(); ok {
		_spec.SetField(hpartist.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := hac.mutation.ThumbnailURL(); ok {
		_spec.SetField(hpartist.FieldThumbnailURL, field.TypeString, value)
		_node.ThumbnailURL = value
	}
	if value, ok := hac.mutation.Index(); ok {
		_spec.SetField(hpartist.FieldIndex, field.TypeInt, value)
		_node.Index = value
	}
	if nodes := hac.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpartist.MembersTable,
			Columns: []string{hpartist.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hac.mutation.AssetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpartist.AssetsTable,
			Columns: []string{hpartist.AssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpasset.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hac.mutation.OwningFeedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpartist.OwningFeedTable,
			Columns: []string{hpartist.OwningFeedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpfeeditem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hac.mutation.TaggedFeedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpartist.TaggedFeedTable,
			Columns: hpartist.TaggedFeedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpfeeditem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hac.mutation.OwningIgPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpartist.OwningIgPostsTable,
			Columns: []string{hpartist.OwningIgPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpigpost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hac.mutation.TaggedIgPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpartist.TaggedIgPostsTable,
			Columns: hpartist.TaggedIgPostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpigpost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hac.mutation.OwningAmebloPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpartist.OwningAmebloPostsTable,
			Columns: []string{hpartist.OwningAmebloPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpameblopost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hac.mutation.TaggedAmebloPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpartist.TaggedAmebloPostsTable,
			Columns: hpartist.TaggedAmebloPostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpameblopost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hac.mutation.TaggedElineupMallItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpartist.TaggedElineupMallItemsTable,
			Columns: hpartist.TaggedElineupMallItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpelineupmallitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hac.mutation.FollowedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpartist.FollowedByTable,
			Columns: []string{hpartist.FollowedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpfollow.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.HPArtist.Create().
//		SetCrawledAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.HPArtistUpsert) {
//			SetCrawledAt(v+v).
//		}).
//		Exec(ctx)
func (hac *HPArtistCreate) OnConflict(opts ...sql.ConflictOption) *HPArtistUpsertOne {
	hac.conflict = opts
	return &HPArtistUpsertOne{
		create: hac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.HPArtist.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (hac *HPArtistCreate) OnConflictColumns(columns ...string) *HPArtistUpsertOne {
	hac.conflict = append(hac.conflict, sql.ConflictColumns(columns...))
	return &HPArtistUpsertOne{
		create: hac,
	}
}

type (
	// HPArtistUpsertOne is the builder for "upsert"-ing
	//  one HPArtist node.
	HPArtistUpsertOne struct {
		create *HPArtistCreate
	}

	// HPArtistUpsert is the "OnConflict" setter.
	HPArtistUpsert struct {
		*sql.UpdateSet
	}
)

// SetCrawledAt sets the "crawled_at" field.
func (u *HPArtistUpsert) SetCrawledAt(v time.Time) *HPArtistUpsert {
	u.Set(hpartist.FieldCrawledAt, v)
	return u
}

// UpdateCrawledAt sets the "crawled_at" field to the value that was provided on create.
func (u *HPArtistUpsert) UpdateCrawledAt() *HPArtistUpsert {
	u.SetExcluded(hpartist.FieldCrawledAt)
	return u
}

// ClearCrawledAt clears the value of the "crawled_at" field.
func (u *HPArtistUpsert) ClearCrawledAt() *HPArtistUpsert {
	u.SetNull(hpartist.FieldCrawledAt)
	return u
}

// SetErrorCount sets the "error_count" field.
func (u *HPArtistUpsert) SetErrorCount(v int) *HPArtistUpsert {
	u.Set(hpartist.FieldErrorCount, v)
	return u
}

// UpdateErrorCount sets the "error_count" field to the value that was provided on create.
func (u *HPArtistUpsert) UpdateErrorCount() *HPArtistUpsert {
	u.SetExcluded(hpartist.FieldErrorCount)
	return u
}

// AddErrorCount adds v to the "error_count" field.
func (u *HPArtistUpsert) AddErrorCount(v int) *HPArtistUpsert {
	u.Add(hpartist.FieldErrorCount, v)
	return u
}

// SetManuallyModified sets the "manually_modified" field.
func (u *HPArtistUpsert) SetManuallyModified(v *jsonfields.ManuallyModified) *HPArtistUpsert {
	u.Set(hpartist.FieldManuallyModified, v)
	return u
}

// UpdateManuallyModified sets the "manually_modified" field to the value that was provided on create.
func (u *HPArtistUpsert) UpdateManuallyModified() *HPArtistUpsert {
	u.SetExcluded(hpartist.FieldManuallyModified)
	return u
}

// ClearManuallyModified clears the value of the "manually_modified" field.
func (u *HPArtistUpsert) ClearManuallyModified() *HPArtistUpsert {
	u.SetNull(hpartist.FieldManuallyModified)
	return u
}

// SetLastErrorMessage sets the "last_error_message" field.
func (u *HPArtistUpsert) SetLastErrorMessage(v string) *HPArtistUpsert {
	u.Set(hpartist.FieldLastErrorMessage, v)
	return u
}

// UpdateLastErrorMessage sets the "last_error_message" field to the value that was provided on create.
func (u *HPArtistUpsert) UpdateLastErrorMessage() *HPArtistUpsert {
	u.SetExcluded(hpartist.FieldLastErrorMessage)
	return u
}

// ClearLastErrorMessage clears the value of the "last_error_message" field.
func (u *HPArtistUpsert) ClearLastErrorMessage() *HPArtistUpsert {
	u.SetNull(hpartist.FieldLastErrorMessage)
	return u
}

// SetRecrawlRequired sets the "recrawl_required" field.
func (u *HPArtistUpsert) SetRecrawlRequired(v bool) *HPArtistUpsert {
	u.Set(hpartist.FieldRecrawlRequired, v)
	return u
}

// UpdateRecrawlRequired sets the "recrawl_required" field to the value that was provided on create.
func (u *HPArtistUpsert) UpdateRecrawlRequired() *HPArtistUpsert {
	u.SetExcluded(hpartist.FieldRecrawlRequired)
	return u
}

// ClearRecrawlRequired clears the value of the "recrawl_required" field.
func (u *HPArtistUpsert) ClearRecrawlRequired() *HPArtistUpsert {
	u.SetNull(hpartist.FieldRecrawlRequired)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *HPArtistUpsert) SetUpdatedAt(v time.Time) *HPArtistUpsert {
	u.Set(hpartist.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *HPArtistUpsert) UpdateUpdatedAt() *HPArtistUpsert {
	u.SetExcluded(hpartist.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *HPArtistUpsert) ClearUpdatedAt() *HPArtistUpsert {
	u.SetNull(hpartist.FieldUpdatedAt)
	return u
}

// SetKey sets the "key" field.
func (u *HPArtistUpsert) SetKey(v string) *HPArtistUpsert {
	u.Set(hpartist.FieldKey, v)
	return u
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *HPArtistUpsert) UpdateKey() *HPArtistUpsert {
	u.SetExcluded(hpartist.FieldKey)
	return u
}

// SetName sets the "name" field.
func (u *HPArtistUpsert) SetName(v string) *HPArtistUpsert {
	u.Set(hpartist.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *HPArtistUpsert) UpdateName() *HPArtistUpsert {
	u.SetExcluded(hpartist.FieldName)
	return u
}

// SetThumbnailURL sets the "thumbnail_url" field.
func (u *HPArtistUpsert) SetThumbnailURL(v string) *HPArtistUpsert {
	u.Set(hpartist.FieldThumbnailURL, v)
	return u
}

// UpdateThumbnailURL sets the "thumbnail_url" field to the value that was provided on create.
func (u *HPArtistUpsert) UpdateThumbnailURL() *HPArtistUpsert {
	u.SetExcluded(hpartist.FieldThumbnailURL)
	return u
}

// SetIndex sets the "index" field.
func (u *HPArtistUpsert) SetIndex(v int) *HPArtistUpsert {
	u.Set(hpartist.FieldIndex, v)
	return u
}

// UpdateIndex sets the "index" field to the value that was provided on create.
func (u *HPArtistUpsert) UpdateIndex() *HPArtistUpsert {
	u.SetExcluded(hpartist.FieldIndex)
	return u
}

// AddIndex adds v to the "index" field.
func (u *HPArtistUpsert) AddIndex(v int) *HPArtistUpsert {
	u.Add(hpartist.FieldIndex, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.HPArtist.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *HPArtistUpsertOne) UpdateNewValues() *HPArtistUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(hpartist.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.HPArtist.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *HPArtistUpsertOne) Ignore() *HPArtistUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *HPArtistUpsertOne) DoNothing() *HPArtistUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the HPArtistCreate.OnConflict
// documentation for more info.
func (u *HPArtistUpsertOne) Update(set func(*HPArtistUpsert)) *HPArtistUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&HPArtistUpsert{UpdateSet: update})
	}))
	return u
}

// SetCrawledAt sets the "crawled_at" field.
func (u *HPArtistUpsertOne) SetCrawledAt(v time.Time) *HPArtistUpsertOne {
	return u.Update(func(s *HPArtistUpsert) {
		s.SetCrawledAt(v)
	})
}

// UpdateCrawledAt sets the "crawled_at" field to the value that was provided on create.
func (u *HPArtistUpsertOne) UpdateCrawledAt() *HPArtistUpsertOne {
	return u.Update(func(s *HPArtistUpsert) {
		s.UpdateCrawledAt()
	})
}

// ClearCrawledAt clears the value of the "crawled_at" field.
func (u *HPArtistUpsertOne) ClearCrawledAt() *HPArtistUpsertOne {
	return u.Update(func(s *HPArtistUpsert) {
		s.ClearCrawledAt()
	})
}

// SetErrorCount sets the "error_count" field.
func (u *HPArtistUpsertOne) SetErrorCount(v int) *HPArtistUpsertOne {
	return u.Update(func(s *HPArtistUpsert) {
		s.SetErrorCount(v)
	})
}

// AddErrorCount adds v to the "error_count" field.
func (u *HPArtistUpsertOne) AddErrorCount(v int) *HPArtistUpsertOne {
	return u.Update(func(s *HPArtistUpsert) {
		s.AddErrorCount(v)
	})
}

// UpdateErrorCount sets the "error_count" field to the value that was provided on create.
func (u *HPArtistUpsertOne) UpdateErrorCount() *HPArtistUpsertOne {
	return u.Update(func(s *HPArtistUpsert) {
		s.UpdateErrorCount()
	})
}

// SetManuallyModified sets the "manually_modified" field.
func (u *HPArtistUpsertOne) SetManuallyModified(v *jsonfields.ManuallyModified) *HPArtistUpsertOne {
	return u.Update(func(s *HPArtistUpsert) {
		s.SetManuallyModified(v)
	})
}

// UpdateManuallyModified sets the "manually_modified" field to the value that was provided on create.
func (u *HPArtistUpsertOne) UpdateManuallyModified() *HPArtistUpsertOne {
	return u.Update(func(s *HPArtistUpsert) {
		s.UpdateManuallyModified()
	})
}

// ClearManuallyModified clears the value of the "manually_modified" field.
func (u *HPArtistUpsertOne) ClearManuallyModified() *HPArtistUpsertOne {
	return u.Update(func(s *HPArtistUpsert) {
		s.ClearManuallyModified()
	})
}

// SetLastErrorMessage sets the "last_error_message" field.
func (u *HPArtistUpsertOne) SetLastErrorMessage(v string) *HPArtistUpsertOne {
	return u.Update(func(s *HPArtistUpsert) {
		s.SetLastErrorMessage(v)
	})
}

// UpdateLastErrorMessage sets the "last_error_message" field to the value that was provided on create.
func (u *HPArtistUpsertOne) UpdateLastErrorMessage() *HPArtistUpsertOne {
	return u.Update(func(s *HPArtistUpsert) {
		s.UpdateLastErrorMessage()
	})
}

// ClearLastErrorMessage clears the value of the "last_error_message" field.
func (u *HPArtistUpsertOne) ClearLastErrorMessage() *HPArtistUpsertOne {
	return u.Update(func(s *HPArtistUpsert) {
		s.ClearLastErrorMessage()
	})
}

// SetRecrawlRequired sets the "recrawl_required" field.
func (u *HPArtistUpsertOne) SetRecrawlRequired(v bool) *HPArtistUpsertOne {
	return u.Update(func(s *HPArtistUpsert) {
		s.SetRecrawlRequired(v)
	})
}

// UpdateRecrawlRequired sets the "recrawl_required" field to the value that was provided on create.
func (u *HPArtistUpsertOne) UpdateRecrawlRequired() *HPArtistUpsertOne {
	return u.Update(func(s *HPArtistUpsert) {
		s.UpdateRecrawlRequired()
	})
}

// ClearRecrawlRequired clears the value of the "recrawl_required" field.
func (u *HPArtistUpsertOne) ClearRecrawlRequired() *HPArtistUpsertOne {
	return u.Update(func(s *HPArtistUpsert) {
		s.ClearRecrawlRequired()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *HPArtistUpsertOne) SetUpdatedAt(v time.Time) *HPArtistUpsertOne {
	return u.Update(func(s *HPArtistUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *HPArtistUpsertOne) UpdateUpdatedAt() *HPArtistUpsertOne {
	return u.Update(func(s *HPArtistUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *HPArtistUpsertOne) ClearUpdatedAt() *HPArtistUpsertOne {
	return u.Update(func(s *HPArtistUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetKey sets the "key" field.
func (u *HPArtistUpsertOne) SetKey(v string) *HPArtistUpsertOne {
	return u.Update(func(s *HPArtistUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *HPArtistUpsertOne) UpdateKey() *HPArtistUpsertOne {
	return u.Update(func(s *HPArtistUpsert) {
		s.UpdateKey()
	})
}

// SetName sets the "name" field.
func (u *HPArtistUpsertOne) SetName(v string) *HPArtistUpsertOne {
	return u.Update(func(s *HPArtistUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *HPArtistUpsertOne) UpdateName() *HPArtistUpsertOne {
	return u.Update(func(s *HPArtistUpsert) {
		s.UpdateName()
	})
}

// SetThumbnailURL sets the "thumbnail_url" field.
func (u *HPArtistUpsertOne) SetThumbnailURL(v string) *HPArtistUpsertOne {
	return u.Update(func(s *HPArtistUpsert) {
		s.SetThumbnailURL(v)
	})
}

// UpdateThumbnailURL sets the "thumbnail_url" field to the value that was provided on create.
func (u *HPArtistUpsertOne) UpdateThumbnailURL() *HPArtistUpsertOne {
	return u.Update(func(s *HPArtistUpsert) {
		s.UpdateThumbnailURL()
	})
}

// SetIndex sets the "index" field.
func (u *HPArtistUpsertOne) SetIndex(v int) *HPArtistUpsertOne {
	return u.Update(func(s *HPArtistUpsert) {
		s.SetIndex(v)
	})
}

// AddIndex adds v to the "index" field.
func (u *HPArtistUpsertOne) AddIndex(v int) *HPArtistUpsertOne {
	return u.Update(func(s *HPArtistUpsert) {
		s.AddIndex(v)
	})
}

// UpdateIndex sets the "index" field to the value that was provided on create.
func (u *HPArtistUpsertOne) UpdateIndex() *HPArtistUpsertOne {
	return u.Update(func(s *HPArtistUpsert) {
		s.UpdateIndex()
	})
}

// Exec executes the query.
func (u *HPArtistUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for HPArtistCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *HPArtistUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *HPArtistUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *HPArtistUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// HPArtistCreateBulk is the builder for creating many HPArtist entities in bulk.
type HPArtistCreateBulk struct {
	config
	builders []*HPArtistCreate
	conflict []sql.ConflictOption
}

// Save creates the HPArtist entities in the database.
func (hacb *HPArtistCreateBulk) Save(ctx context.Context) ([]*HPArtist, error) {
	specs := make([]*sqlgraph.CreateSpec, len(hacb.builders))
	nodes := make([]*HPArtist, len(hacb.builders))
	mutators := make([]Mutator, len(hacb.builders))
	for i := range hacb.builders {
		func(i int, root context.Context) {
			builder := hacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HPArtistMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = hacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hacb *HPArtistCreateBulk) SaveX(ctx context.Context) []*HPArtist {
	v, err := hacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hacb *HPArtistCreateBulk) Exec(ctx context.Context) error {
	_, err := hacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hacb *HPArtistCreateBulk) ExecX(ctx context.Context) {
	if err := hacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.HPArtist.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.HPArtistUpsert) {
//			SetCrawledAt(v+v).
//		}).
//		Exec(ctx)
func (hacb *HPArtistCreateBulk) OnConflict(opts ...sql.ConflictOption) *HPArtistUpsertBulk {
	hacb.conflict = opts
	return &HPArtistUpsertBulk{
		create: hacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.HPArtist.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (hacb *HPArtistCreateBulk) OnConflictColumns(columns ...string) *HPArtistUpsertBulk {
	hacb.conflict = append(hacb.conflict, sql.ConflictColumns(columns...))
	return &HPArtistUpsertBulk{
		create: hacb,
	}
}

// HPArtistUpsertBulk is the builder for "upsert"-ing
// a bulk of HPArtist nodes.
type HPArtistUpsertBulk struct {
	create *HPArtistCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.HPArtist.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *HPArtistUpsertBulk) UpdateNewValues() *HPArtistUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(hpartist.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.HPArtist.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *HPArtistUpsertBulk) Ignore() *HPArtistUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *HPArtistUpsertBulk) DoNothing() *HPArtistUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the HPArtistCreateBulk.OnConflict
// documentation for more info.
func (u *HPArtistUpsertBulk) Update(set func(*HPArtistUpsert)) *HPArtistUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&HPArtistUpsert{UpdateSet: update})
	}))
	return u
}

// SetCrawledAt sets the "crawled_at" field.
func (u *HPArtistUpsertBulk) SetCrawledAt(v time.Time) *HPArtistUpsertBulk {
	return u.Update(func(s *HPArtistUpsert) {
		s.SetCrawledAt(v)
	})
}

// UpdateCrawledAt sets the "crawled_at" field to the value that was provided on create.
func (u *HPArtistUpsertBulk) UpdateCrawledAt() *HPArtistUpsertBulk {
	return u.Update(func(s *HPArtistUpsert) {
		s.UpdateCrawledAt()
	})
}

// ClearCrawledAt clears the value of the "crawled_at" field.
func (u *HPArtistUpsertBulk) ClearCrawledAt() *HPArtistUpsertBulk {
	return u.Update(func(s *HPArtistUpsert) {
		s.ClearCrawledAt()
	})
}

// SetErrorCount sets the "error_count" field.
func (u *HPArtistUpsertBulk) SetErrorCount(v int) *HPArtistUpsertBulk {
	return u.Update(func(s *HPArtistUpsert) {
		s.SetErrorCount(v)
	})
}

// AddErrorCount adds v to the "error_count" field.
func (u *HPArtistUpsertBulk) AddErrorCount(v int) *HPArtistUpsertBulk {
	return u.Update(func(s *HPArtistUpsert) {
		s.AddErrorCount(v)
	})
}

// UpdateErrorCount sets the "error_count" field to the value that was provided on create.
func (u *HPArtistUpsertBulk) UpdateErrorCount() *HPArtistUpsertBulk {
	return u.Update(func(s *HPArtistUpsert) {
		s.UpdateErrorCount()
	})
}

// SetManuallyModified sets the "manually_modified" field.
func (u *HPArtistUpsertBulk) SetManuallyModified(v *jsonfields.ManuallyModified) *HPArtistUpsertBulk {
	return u.Update(func(s *HPArtistUpsert) {
		s.SetManuallyModified(v)
	})
}

// UpdateManuallyModified sets the "manually_modified" field to the value that was provided on create.
func (u *HPArtistUpsertBulk) UpdateManuallyModified() *HPArtistUpsertBulk {
	return u.Update(func(s *HPArtistUpsert) {
		s.UpdateManuallyModified()
	})
}

// ClearManuallyModified clears the value of the "manually_modified" field.
func (u *HPArtistUpsertBulk) ClearManuallyModified() *HPArtistUpsertBulk {
	return u.Update(func(s *HPArtistUpsert) {
		s.ClearManuallyModified()
	})
}

// SetLastErrorMessage sets the "last_error_message" field.
func (u *HPArtistUpsertBulk) SetLastErrorMessage(v string) *HPArtistUpsertBulk {
	return u.Update(func(s *HPArtistUpsert) {
		s.SetLastErrorMessage(v)
	})
}

// UpdateLastErrorMessage sets the "last_error_message" field to the value that was provided on create.
func (u *HPArtistUpsertBulk) UpdateLastErrorMessage() *HPArtistUpsertBulk {
	return u.Update(func(s *HPArtistUpsert) {
		s.UpdateLastErrorMessage()
	})
}

// ClearLastErrorMessage clears the value of the "last_error_message" field.
func (u *HPArtistUpsertBulk) ClearLastErrorMessage() *HPArtistUpsertBulk {
	return u.Update(func(s *HPArtistUpsert) {
		s.ClearLastErrorMessage()
	})
}

// SetRecrawlRequired sets the "recrawl_required" field.
func (u *HPArtistUpsertBulk) SetRecrawlRequired(v bool) *HPArtistUpsertBulk {
	return u.Update(func(s *HPArtistUpsert) {
		s.SetRecrawlRequired(v)
	})
}

// UpdateRecrawlRequired sets the "recrawl_required" field to the value that was provided on create.
func (u *HPArtistUpsertBulk) UpdateRecrawlRequired() *HPArtistUpsertBulk {
	return u.Update(func(s *HPArtistUpsert) {
		s.UpdateRecrawlRequired()
	})
}

// ClearRecrawlRequired clears the value of the "recrawl_required" field.
func (u *HPArtistUpsertBulk) ClearRecrawlRequired() *HPArtistUpsertBulk {
	return u.Update(func(s *HPArtistUpsert) {
		s.ClearRecrawlRequired()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *HPArtistUpsertBulk) SetUpdatedAt(v time.Time) *HPArtistUpsertBulk {
	return u.Update(func(s *HPArtistUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *HPArtistUpsertBulk) UpdateUpdatedAt() *HPArtistUpsertBulk {
	return u.Update(func(s *HPArtistUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *HPArtistUpsertBulk) ClearUpdatedAt() *HPArtistUpsertBulk {
	return u.Update(func(s *HPArtistUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetKey sets the "key" field.
func (u *HPArtistUpsertBulk) SetKey(v string) *HPArtistUpsertBulk {
	return u.Update(func(s *HPArtistUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *HPArtistUpsertBulk) UpdateKey() *HPArtistUpsertBulk {
	return u.Update(func(s *HPArtistUpsert) {
		s.UpdateKey()
	})
}

// SetName sets the "name" field.
func (u *HPArtistUpsertBulk) SetName(v string) *HPArtistUpsertBulk {
	return u.Update(func(s *HPArtistUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *HPArtistUpsertBulk) UpdateName() *HPArtistUpsertBulk {
	return u.Update(func(s *HPArtistUpsert) {
		s.UpdateName()
	})
}

// SetThumbnailURL sets the "thumbnail_url" field.
func (u *HPArtistUpsertBulk) SetThumbnailURL(v string) *HPArtistUpsertBulk {
	return u.Update(func(s *HPArtistUpsert) {
		s.SetThumbnailURL(v)
	})
}

// UpdateThumbnailURL sets the "thumbnail_url" field to the value that was provided on create.
func (u *HPArtistUpsertBulk) UpdateThumbnailURL() *HPArtistUpsertBulk {
	return u.Update(func(s *HPArtistUpsert) {
		s.UpdateThumbnailURL()
	})
}

// SetIndex sets the "index" field.
func (u *HPArtistUpsertBulk) SetIndex(v int) *HPArtistUpsertBulk {
	return u.Update(func(s *HPArtistUpsert) {
		s.SetIndex(v)
	})
}

// AddIndex adds v to the "index" field.
func (u *HPArtistUpsertBulk) AddIndex(v int) *HPArtistUpsertBulk {
	return u.Update(func(s *HPArtistUpsert) {
		s.AddIndex(v)
	})
}

// UpdateIndex sets the "index" field to the value that was provided on create.
func (u *HPArtistUpsertBulk) UpdateIndex() *HPArtistUpsertBulk {
	return u.Update(func(s *HPArtistUpsert) {
		s.UpdateIndex()
	})
}

// Exec executes the query.
func (u *HPArtistUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the HPArtistCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for HPArtistCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *HPArtistUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
