// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"hpapp.yssk22.dev/go/service/ent/hpevent"
	"hpapp.yssk22.dev/go/service/schema/enums"
)

// HPEvent is the model entity for the HPEvent schema.
type HPEvent struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Key holds the value of the "key" field.
	Key string `json:"key,omitempty"`
	// DisplayTitles holds the value of the "display_titles" field.
	DisplayTitles []string `json:"display_titles,omitempty"`
	// OpenAt holds the value of the "open_at" field.
	OpenAt time.Time `json:"open_at,omitempty"`
	// StartAt holds the value of the "start_at" field.
	StartAt time.Time `json:"start_at,omitempty"`
	// Venue holds the value of the "venue" field.
	Venue string `json:"venue,omitempty"`
	// Prefecture holds the value of the "prefecture" field.
	Prefecture string `json:"prefecture,omitempty"`
	// Source holds the value of the "source" field.
	Source enums.HPEventSource `json:"source,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HPEventQuery when eager-loading is set.
	Edges        HPEventEdges `json:"edges"`
	selectValues sql.SelectValues
}

// HPEventEdges holds the relations/edges for other nodes in the graph.
type HPEventEdges struct {
	// Members holds the value of the members edge.
	Members []*HPMember `json:"members,omitempty"`
	// Artists holds the value of the artists edge.
	Artists []*HPArtist `json:"artists,omitempty"`
	// HpfcEventTickets holds the value of the hpfc_event_tickets edge.
	HpfcEventTickets []*HPFCEventTicket `json:"hpfc_event_tickets,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool

	namedMembers          map[string][]*HPMember
	namedArtists          map[string][]*HPArtist
	namedHpfcEventTickets map[string][]*HPFCEventTicket
}

// MembersOrErr returns the Members value or an error if the edge
// was not loaded in eager-loading.
func (e HPEventEdges) MembersOrErr() ([]*HPMember, error) {
	if e.loadedTypes[0] {
		return e.Members, nil
	}
	return nil, &NotLoadedError{edge: "members"}
}

// ArtistsOrErr returns the Artists value or an error if the edge
// was not loaded in eager-loading.
func (e HPEventEdges) ArtistsOrErr() ([]*HPArtist, error) {
	if e.loadedTypes[1] {
		return e.Artists, nil
	}
	return nil, &NotLoadedError{edge: "artists"}
}

// HpfcEventTicketsOrErr returns the HpfcEventTickets value or an error if the edge
// was not loaded in eager-loading.
func (e HPEventEdges) HpfcEventTicketsOrErr() ([]*HPFCEventTicket, error) {
	if e.loadedTypes[2] {
		return e.HpfcEventTickets, nil
	}
	return nil, &NotLoadedError{edge: "hpfc_event_tickets"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*HPEvent) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case hpevent.FieldDisplayTitles:
			values[i] = new([]byte)
		case hpevent.FieldID:
			values[i] = new(sql.NullInt64)
		case hpevent.FieldKey, hpevent.FieldVenue, hpevent.FieldPrefecture, hpevent.FieldSource:
			values[i] = new(sql.NullString)
		case hpevent.FieldCreatedAt, hpevent.FieldUpdatedAt, hpevent.FieldOpenAt, hpevent.FieldStartAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the HPEvent fields.
func (he *HPEvent) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case hpevent.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			he.ID = int(value.Int64)
		case hpevent.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				he.CreatedAt = value.Time
			}
		case hpevent.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				he.UpdatedAt = value.Time
			}
		case hpevent.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				he.Key = value.String
			}
		case hpevent.FieldDisplayTitles:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field display_titles", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &he.DisplayTitles); err != nil {
					return fmt.Errorf("unmarshal field display_titles: %w", err)
				}
			}
		case hpevent.FieldOpenAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field open_at", values[i])
			} else if value.Valid {
				he.OpenAt = value.Time
			}
		case hpevent.FieldStartAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_at", values[i])
			} else if value.Valid {
				he.StartAt = value.Time
			}
		case hpevent.FieldVenue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field venue", values[i])
			} else if value.Valid {
				he.Venue = value.String
			}
		case hpevent.FieldPrefecture:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field prefecture", values[i])
			} else if value.Valid {
				he.Prefecture = value.String
			}
		case hpevent.FieldSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source", values[i])
			} else if value.Valid {
				he.Source = enums.HPEventSource(value.String)
			}
		default:
			he.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the HPEvent.
// This includes values selected through modifiers, order, etc.
func (he *HPEvent) Value(name string) (ent.Value, error) {
	return he.selectValues.Get(name)
}

// QueryMembers queries the "members" edge of the HPEvent entity.
func (he *HPEvent) QueryMembers() *HPMemberQuery {
	return NewHPEventClient(he.config).QueryMembers(he)
}

// QueryArtists queries the "artists" edge of the HPEvent entity.
func (he *HPEvent) QueryArtists() *HPArtistQuery {
	return NewHPEventClient(he.config).QueryArtists(he)
}

// QueryHpfcEventTickets queries the "hpfc_event_tickets" edge of the HPEvent entity.
func (he *HPEvent) QueryHpfcEventTickets() *HPFCEventTicketQuery {
	return NewHPEventClient(he.config).QueryHpfcEventTickets(he)
}

// Update returns a builder for updating this HPEvent.
// Note that you need to call HPEvent.Unwrap() before calling this method if this HPEvent
// was returned from a transaction, and the transaction was committed or rolled back.
func (he *HPEvent) Update() *HPEventUpdateOne {
	return NewHPEventClient(he.config).UpdateOne(he)
}

// Unwrap unwraps the HPEvent entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (he *HPEvent) Unwrap() *HPEvent {
	_tx, ok := he.config.driver.(*txDriver)
	if !ok {
		panic("ent: HPEvent is not a transactional entity")
	}
	he.config.driver = _tx.drv
	return he
}

// String implements the fmt.Stringer.
func (he *HPEvent) String() string {
	var builder strings.Builder
	builder.WriteString("HPEvent(")
	builder.WriteString(fmt.Sprintf("id=%v, ", he.ID))
	builder.WriteString("created_at=")
	builder.WriteString(he.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(he.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("key=")
	builder.WriteString(he.Key)
	builder.WriteString(", ")
	builder.WriteString("display_titles=")
	builder.WriteString(fmt.Sprintf("%v", he.DisplayTitles))
	builder.WriteString(", ")
	builder.WriteString("open_at=")
	builder.WriteString(he.OpenAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("start_at=")
	builder.WriteString(he.StartAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("venue=")
	builder.WriteString(he.Venue)
	builder.WriteString(", ")
	builder.WriteString("prefecture=")
	builder.WriteString(he.Prefecture)
	builder.WriteString(", ")
	builder.WriteString("source=")
	builder.WriteString(fmt.Sprintf("%v", he.Source))
	builder.WriteByte(')')
	return builder.String()
}

// NamedMembers returns the Members named value or an error if the edge was not
// loaded in eager-loading with this name.
func (he *HPEvent) NamedMembers(name string) ([]*HPMember, error) {
	if he.Edges.namedMembers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := he.Edges.namedMembers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (he *HPEvent) appendNamedMembers(name string, edges ...*HPMember) {
	if he.Edges.namedMembers == nil {
		he.Edges.namedMembers = make(map[string][]*HPMember)
	}
	if len(edges) == 0 {
		he.Edges.namedMembers[name] = []*HPMember{}
	} else {
		he.Edges.namedMembers[name] = append(he.Edges.namedMembers[name], edges...)
	}
}

// NamedArtists returns the Artists named value or an error if the edge was not
// loaded in eager-loading with this name.
func (he *HPEvent) NamedArtists(name string) ([]*HPArtist, error) {
	if he.Edges.namedArtists == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := he.Edges.namedArtists[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (he *HPEvent) appendNamedArtists(name string, edges ...*HPArtist) {
	if he.Edges.namedArtists == nil {
		he.Edges.namedArtists = make(map[string][]*HPArtist)
	}
	if len(edges) == 0 {
		he.Edges.namedArtists[name] = []*HPArtist{}
	} else {
		he.Edges.namedArtists[name] = append(he.Edges.namedArtists[name], edges...)
	}
}

// NamedHpfcEventTickets returns the HpfcEventTickets named value or an error if the edge was not
// loaded in eager-loading with this name.
func (he *HPEvent) NamedHpfcEventTickets(name string) ([]*HPFCEventTicket, error) {
	if he.Edges.namedHpfcEventTickets == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := he.Edges.namedHpfcEventTickets[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (he *HPEvent) appendNamedHpfcEventTickets(name string, edges ...*HPFCEventTicket) {
	if he.Edges.namedHpfcEventTickets == nil {
		he.Edges.namedHpfcEventTickets = make(map[string][]*HPFCEventTicket)
	}
	if len(edges) == 0 {
		he.Edges.namedHpfcEventTickets[name] = []*HPFCEventTicket{}
	} else {
		he.Edges.namedHpfcEventTickets[name] = append(he.Edges.namedHpfcEventTickets[name], edges...)
	}
}

// HPEvents is a parsable slice of HPEvent.
type HPEvents []*HPEvent
