// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yssk22/hpapp/go/service/ent/hpsorthistory"
	"github.com/yssk22/hpapp/go/service/ent/predicate"
	"github.com/yssk22/hpapp/go/service/ent/user"
)

// HPSortHistoryUpdate is the builder for updating HPSortHistory entities.
type HPSortHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *HPSortHistoryMutation
}

// Where appends a list predicates to the HPSortHistoryUpdate builder.
func (hshu *HPSortHistoryUpdate) Where(ps ...predicate.HPSortHistory) *HPSortHistoryUpdate {
	hshu.mutation.Where(ps...)
	return hshu
}

// SetUpdatedAt sets the "updated_at" field.
func (hshu *HPSortHistoryUpdate) SetUpdatedAt(t time.Time) *HPSortHistoryUpdate {
	hshu.mutation.SetUpdatedAt(t)
	return hshu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (hshu *HPSortHistoryUpdate) SetNillableUpdatedAt(t *time.Time) *HPSortHistoryUpdate {
	if t != nil {
		hshu.SetUpdatedAt(*t)
	}
	return hshu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (hshu *HPSortHistoryUpdate) ClearUpdatedAt() *HPSortHistoryUpdate {
	hshu.mutation.ClearUpdatedAt()
	return hshu
}

// SetOwnerUserID sets the "owner_user_id" field.
func (hshu *HPSortHistoryUpdate) SetOwnerUserID(i int) *HPSortHistoryUpdate {
	hshu.mutation.SetOwnerUserID(i)
	return hshu
}

// SetNillableOwnerUserID sets the "owner_user_id" field if the given value is not nil.
func (hshu *HPSortHistoryUpdate) SetNillableOwnerUserID(i *int) *HPSortHistoryUpdate {
	if i != nil {
		hshu.SetOwnerUserID(*i)
	}
	return hshu
}

// ClearOwnerUserID clears the value of the "owner_user_id" field.
func (hshu *HPSortHistoryUpdate) ClearOwnerUserID() *HPSortHistoryUpdate {
	hshu.mutation.ClearOwnerUserID()
	return hshu
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (hshu *HPSortHistoryUpdate) SetOwnerID(id int) *HPSortHistoryUpdate {
	hshu.mutation.SetOwnerID(id)
	return hshu
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (hshu *HPSortHistoryUpdate) SetNillableOwnerID(id *int) *HPSortHistoryUpdate {
	if id != nil {
		hshu = hshu.SetOwnerID(*id)
	}
	return hshu
}

// SetOwner sets the "owner" edge to the User entity.
func (hshu *HPSortHistoryUpdate) SetOwner(u *User) *HPSortHistoryUpdate {
	return hshu.SetOwnerID(u.ID)
}

// Mutation returns the HPSortHistoryMutation object of the builder.
func (hshu *HPSortHistoryUpdate) Mutation() *HPSortHistoryMutation {
	return hshu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (hshu *HPSortHistoryUpdate) ClearOwner() *HPSortHistoryUpdate {
	hshu.mutation.ClearOwner()
	return hshu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hshu *HPSortHistoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, HPSortHistoryMutation](ctx, hshu.sqlSave, hshu.mutation, hshu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hshu *HPSortHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := hshu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hshu *HPSortHistoryUpdate) Exec(ctx context.Context) error {
	_, err := hshu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hshu *HPSortHistoryUpdate) ExecX(ctx context.Context) {
	if err := hshu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (hshu *HPSortHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(hpsorthistory.Table, hpsorthistory.Columns, sqlgraph.NewFieldSpec(hpsorthistory.FieldID, field.TypeInt))
	if ps := hshu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if hshu.mutation.CreatedAtCleared() {
		_spec.ClearField(hpsorthistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := hshu.mutation.UpdatedAt(); ok {
		_spec.SetField(hpsorthistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if hshu.mutation.UpdatedAtCleared() {
		_spec.ClearField(hpsorthistory.FieldUpdatedAt, field.TypeTime)
	}
	if hshu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpsorthistory.OwnerTable,
			Columns: []string{hpsorthistory.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hshu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpsorthistory.OwnerTable,
			Columns: []string{hpsorthistory.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hshu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hpsorthistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	hshu.mutation.done = true
	return n, nil
}

// HPSortHistoryUpdateOne is the builder for updating a single HPSortHistory entity.
type HPSortHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HPSortHistoryMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (hshuo *HPSortHistoryUpdateOne) SetUpdatedAt(t time.Time) *HPSortHistoryUpdateOne {
	hshuo.mutation.SetUpdatedAt(t)
	return hshuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (hshuo *HPSortHistoryUpdateOne) SetNillableUpdatedAt(t *time.Time) *HPSortHistoryUpdateOne {
	if t != nil {
		hshuo.SetUpdatedAt(*t)
	}
	return hshuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (hshuo *HPSortHistoryUpdateOne) ClearUpdatedAt() *HPSortHistoryUpdateOne {
	hshuo.mutation.ClearUpdatedAt()
	return hshuo
}

// SetOwnerUserID sets the "owner_user_id" field.
func (hshuo *HPSortHistoryUpdateOne) SetOwnerUserID(i int) *HPSortHistoryUpdateOne {
	hshuo.mutation.SetOwnerUserID(i)
	return hshuo
}

// SetNillableOwnerUserID sets the "owner_user_id" field if the given value is not nil.
func (hshuo *HPSortHistoryUpdateOne) SetNillableOwnerUserID(i *int) *HPSortHistoryUpdateOne {
	if i != nil {
		hshuo.SetOwnerUserID(*i)
	}
	return hshuo
}

// ClearOwnerUserID clears the value of the "owner_user_id" field.
func (hshuo *HPSortHistoryUpdateOne) ClearOwnerUserID() *HPSortHistoryUpdateOne {
	hshuo.mutation.ClearOwnerUserID()
	return hshuo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (hshuo *HPSortHistoryUpdateOne) SetOwnerID(id int) *HPSortHistoryUpdateOne {
	hshuo.mutation.SetOwnerID(id)
	return hshuo
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (hshuo *HPSortHistoryUpdateOne) SetNillableOwnerID(id *int) *HPSortHistoryUpdateOne {
	if id != nil {
		hshuo = hshuo.SetOwnerID(*id)
	}
	return hshuo
}

// SetOwner sets the "owner" edge to the User entity.
func (hshuo *HPSortHistoryUpdateOne) SetOwner(u *User) *HPSortHistoryUpdateOne {
	return hshuo.SetOwnerID(u.ID)
}

// Mutation returns the HPSortHistoryMutation object of the builder.
func (hshuo *HPSortHistoryUpdateOne) Mutation() *HPSortHistoryMutation {
	return hshuo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (hshuo *HPSortHistoryUpdateOne) ClearOwner() *HPSortHistoryUpdateOne {
	hshuo.mutation.ClearOwner()
	return hshuo
}

// Where appends a list predicates to the HPSortHistoryUpdate builder.
func (hshuo *HPSortHistoryUpdateOne) Where(ps ...predicate.HPSortHistory) *HPSortHistoryUpdateOne {
	hshuo.mutation.Where(ps...)
	return hshuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (hshuo *HPSortHistoryUpdateOne) Select(field string, fields ...string) *HPSortHistoryUpdateOne {
	hshuo.fields = append([]string{field}, fields...)
	return hshuo
}

// Save executes the query and returns the updated HPSortHistory entity.
func (hshuo *HPSortHistoryUpdateOne) Save(ctx context.Context) (*HPSortHistory, error) {
	return withHooks[*HPSortHistory, HPSortHistoryMutation](ctx, hshuo.sqlSave, hshuo.mutation, hshuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hshuo *HPSortHistoryUpdateOne) SaveX(ctx context.Context) *HPSortHistory {
	node, err := hshuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (hshuo *HPSortHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := hshuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hshuo *HPSortHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := hshuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (hshuo *HPSortHistoryUpdateOne) sqlSave(ctx context.Context) (_node *HPSortHistory, err error) {
	_spec := sqlgraph.NewUpdateSpec(hpsorthistory.Table, hpsorthistory.Columns, sqlgraph.NewFieldSpec(hpsorthistory.FieldID, field.TypeInt))
	id, ok := hshuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "HPSortHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := hshuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hpsorthistory.FieldID)
		for _, f := range fields {
			if !hpsorthistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != hpsorthistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := hshuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if hshuo.mutation.CreatedAtCleared() {
		_spec.ClearField(hpsorthistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := hshuo.mutation.UpdatedAt(); ok {
		_spec.SetField(hpsorthistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if hshuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(hpsorthistory.FieldUpdatedAt, field.TypeTime)
	}
	if hshuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpsorthistory.OwnerTable,
			Columns: []string{hpsorthistory.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hshuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpsorthistory.OwnerTable,
			Columns: []string{hpsorthistory.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &HPSortHistory{config: hshuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, hshuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hpsorthistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	hshuo.mutation.done = true
	return _node, nil
}
