// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yssk22/hpapp/go/service/ent/hpameblopost"
	"github.com/yssk22/hpapp/go/service/ent/hpartist"
	"github.com/yssk22/hpapp/go/service/ent/hpasset"
	"github.com/yssk22/hpapp/go/service/ent/hpigpost"
	"github.com/yssk22/hpapp/go/service/ent/hpmember"
	"github.com/yssk22/hpapp/go/service/schema/enums"
)

// HPAssetCreate is the builder for creating a HPAsset entity.
type HPAssetCreate struct {
	config
	mutation *HPAssetMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetKey sets the "key" field.
func (hac *HPAssetCreate) SetKey(s string) *HPAssetCreate {
	hac.mutation.SetKey(s)
	return hac
}

// SetAssetType sets the "asset_type" field.
func (hac *HPAssetCreate) SetAssetType(eat enums.HPAssetType) *HPAssetCreate {
	hac.mutation.SetAssetType(eat)
	return hac
}

// SetArtistID sets the "artist" edge to the HPArtist entity by ID.
func (hac *HPAssetCreate) SetArtistID(id int) *HPAssetCreate {
	hac.mutation.SetArtistID(id)
	return hac
}

// SetNillableArtistID sets the "artist" edge to the HPArtist entity by ID if the given value is not nil.
func (hac *HPAssetCreate) SetNillableArtistID(id *int) *HPAssetCreate {
	if id != nil {
		hac = hac.SetArtistID(*id)
	}
	return hac
}

// SetArtist sets the "artist" edge to the HPArtist entity.
func (hac *HPAssetCreate) SetArtist(h *HPArtist) *HPAssetCreate {
	return hac.SetArtistID(h.ID)
}

// AddMemberIDs adds the "members" edge to the HPMember entity by IDs.
func (hac *HPAssetCreate) AddMemberIDs(ids ...int) *HPAssetCreate {
	hac.mutation.AddMemberIDs(ids...)
	return hac
}

// AddMembers adds the "members" edges to the HPMember entity.
func (hac *HPAssetCreate) AddMembers(h ...*HPMember) *HPAssetCreate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hac.AddMemberIDs(ids...)
}

// AddAmebloPostIDs adds the "ameblo_posts" edge to the HPAmebloPost entity by IDs.
func (hac *HPAssetCreate) AddAmebloPostIDs(ids ...int) *HPAssetCreate {
	hac.mutation.AddAmebloPostIDs(ids...)
	return hac
}

// AddAmebloPosts adds the "ameblo_posts" edges to the HPAmebloPost entity.
func (hac *HPAssetCreate) AddAmebloPosts(h ...*HPAmebloPost) *HPAssetCreate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hac.AddAmebloPostIDs(ids...)
}

// AddIgPostIDs adds the "ig_posts" edge to the HPIgPost entity by IDs.
func (hac *HPAssetCreate) AddIgPostIDs(ids ...int) *HPAssetCreate {
	hac.mutation.AddIgPostIDs(ids...)
	return hac
}

// AddIgPosts adds the "ig_posts" edges to the HPIgPost entity.
func (hac *HPAssetCreate) AddIgPosts(h ...*HPIgPost) *HPAssetCreate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hac.AddIgPostIDs(ids...)
}

// Mutation returns the HPAssetMutation object of the builder.
func (hac *HPAssetCreate) Mutation() *HPAssetMutation {
	return hac.mutation
}

// Save creates the HPAsset in the database.
func (hac *HPAssetCreate) Save(ctx context.Context) (*HPAsset, error) {
	return withHooks[*HPAsset, HPAssetMutation](ctx, hac.sqlSave, hac.mutation, hac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (hac *HPAssetCreate) SaveX(ctx context.Context) *HPAsset {
	v, err := hac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hac *HPAssetCreate) Exec(ctx context.Context) error {
	_, err := hac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hac *HPAssetCreate) ExecX(ctx context.Context) {
	if err := hac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hac *HPAssetCreate) check() error {
	if _, ok := hac.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "HPAsset.key"`)}
	}
	if _, ok := hac.mutation.AssetType(); !ok {
		return &ValidationError{Name: "asset_type", err: errors.New(`ent: missing required field "HPAsset.asset_type"`)}
	}
	if v, ok := hac.mutation.AssetType(); ok {
		if err := hpasset.AssetTypeValidator(v); err != nil {
			return &ValidationError{Name: "asset_type", err: fmt.Errorf(`ent: validator failed for field "HPAsset.asset_type": %w`, err)}
		}
	}
	return nil
}

func (hac *HPAssetCreate) sqlSave(ctx context.Context) (*HPAsset, error) {
	if err := hac.check(); err != nil {
		return nil, err
	}
	_node, _spec := hac.createSpec()
	if err := sqlgraph.CreateNode(ctx, hac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	hac.mutation.id = &_node.ID
	hac.mutation.done = true
	return _node, nil
}

func (hac *HPAssetCreate) createSpec() (*HPAsset, *sqlgraph.CreateSpec) {
	var (
		_node = &HPAsset{config: hac.config}
		_spec = sqlgraph.NewCreateSpec(hpasset.Table, sqlgraph.NewFieldSpec(hpasset.FieldID, field.TypeInt))
	)
	_spec.OnConflict = hac.conflict
	if value, ok := hac.mutation.Key(); ok {
		_spec.SetField(hpasset.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := hac.mutation.AssetType(); ok {
		_spec.SetField(hpasset.FieldAssetType, field.TypeEnum, value)
		_node.AssetType = value
	}
	if nodes := hac.mutation.ArtistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpasset.ArtistTable,
			Columns: []string{hpasset.ArtistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpartist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.hp_artist_assets = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hac.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpasset.MembersTable,
			Columns: hpasset.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hac.mutation.AmebloPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpasset.AmebloPostsTable,
			Columns: []string{hpasset.AmebloPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpameblopost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hac.mutation.IgPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpasset.IgPostsTable,
			Columns: []string{hpasset.IgPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpigpost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.HPAsset.Create().
//		SetKey(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.HPAssetUpsert) {
//			SetKey(v+v).
//		}).
//		Exec(ctx)
func (hac *HPAssetCreate) OnConflict(opts ...sql.ConflictOption) *HPAssetUpsertOne {
	hac.conflict = opts
	return &HPAssetUpsertOne{
		create: hac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.HPAsset.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (hac *HPAssetCreate) OnConflictColumns(columns ...string) *HPAssetUpsertOne {
	hac.conflict = append(hac.conflict, sql.ConflictColumns(columns...))
	return &HPAssetUpsertOne{
		create: hac,
	}
}

type (
	// HPAssetUpsertOne is the builder for "upsert"-ing
	//  one HPAsset node.
	HPAssetUpsertOne struct {
		create *HPAssetCreate
	}

	// HPAssetUpsert is the "OnConflict" setter.
	HPAssetUpsert struct {
		*sql.UpdateSet
	}
)

// SetKey sets the "key" field.
func (u *HPAssetUpsert) SetKey(v string) *HPAssetUpsert {
	u.Set(hpasset.FieldKey, v)
	return u
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *HPAssetUpsert) UpdateKey() *HPAssetUpsert {
	u.SetExcluded(hpasset.FieldKey)
	return u
}

// SetAssetType sets the "asset_type" field.
func (u *HPAssetUpsert) SetAssetType(v enums.HPAssetType) *HPAssetUpsert {
	u.Set(hpasset.FieldAssetType, v)
	return u
}

// UpdateAssetType sets the "asset_type" field to the value that was provided on create.
func (u *HPAssetUpsert) UpdateAssetType() *HPAssetUpsert {
	u.SetExcluded(hpasset.FieldAssetType)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.HPAsset.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *HPAssetUpsertOne) UpdateNewValues() *HPAssetUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.HPAsset.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *HPAssetUpsertOne) Ignore() *HPAssetUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *HPAssetUpsertOne) DoNothing() *HPAssetUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the HPAssetCreate.OnConflict
// documentation for more info.
func (u *HPAssetUpsertOne) Update(set func(*HPAssetUpsert)) *HPAssetUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&HPAssetUpsert{UpdateSet: update})
	}))
	return u
}

// SetKey sets the "key" field.
func (u *HPAssetUpsertOne) SetKey(v string) *HPAssetUpsertOne {
	return u.Update(func(s *HPAssetUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *HPAssetUpsertOne) UpdateKey() *HPAssetUpsertOne {
	return u.Update(func(s *HPAssetUpsert) {
		s.UpdateKey()
	})
}

// SetAssetType sets the "asset_type" field.
func (u *HPAssetUpsertOne) SetAssetType(v enums.HPAssetType) *HPAssetUpsertOne {
	return u.Update(func(s *HPAssetUpsert) {
		s.SetAssetType(v)
	})
}

// UpdateAssetType sets the "asset_type" field to the value that was provided on create.
func (u *HPAssetUpsertOne) UpdateAssetType() *HPAssetUpsertOne {
	return u.Update(func(s *HPAssetUpsert) {
		s.UpdateAssetType()
	})
}

// Exec executes the query.
func (u *HPAssetUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for HPAssetCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *HPAssetUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *HPAssetUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *HPAssetUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// HPAssetCreateBulk is the builder for creating many HPAsset entities in bulk.
type HPAssetCreateBulk struct {
	config
	builders []*HPAssetCreate
	conflict []sql.ConflictOption
}

// Save creates the HPAsset entities in the database.
func (hacb *HPAssetCreateBulk) Save(ctx context.Context) ([]*HPAsset, error) {
	specs := make([]*sqlgraph.CreateSpec, len(hacb.builders))
	nodes := make([]*HPAsset, len(hacb.builders))
	mutators := make([]Mutator, len(hacb.builders))
	for i := range hacb.builders {
		func(i int, root context.Context) {
			builder := hacb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HPAssetMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = hacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hacb *HPAssetCreateBulk) SaveX(ctx context.Context) []*HPAsset {
	v, err := hacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hacb *HPAssetCreateBulk) Exec(ctx context.Context) error {
	_, err := hacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hacb *HPAssetCreateBulk) ExecX(ctx context.Context) {
	if err := hacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.HPAsset.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.HPAssetUpsert) {
//			SetKey(v+v).
//		}).
//		Exec(ctx)
func (hacb *HPAssetCreateBulk) OnConflict(opts ...sql.ConflictOption) *HPAssetUpsertBulk {
	hacb.conflict = opts
	return &HPAssetUpsertBulk{
		create: hacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.HPAsset.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (hacb *HPAssetCreateBulk) OnConflictColumns(columns ...string) *HPAssetUpsertBulk {
	hacb.conflict = append(hacb.conflict, sql.ConflictColumns(columns...))
	return &HPAssetUpsertBulk{
		create: hacb,
	}
}

// HPAssetUpsertBulk is the builder for "upsert"-ing
// a bulk of HPAsset nodes.
type HPAssetUpsertBulk struct {
	create *HPAssetCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.HPAsset.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *HPAssetUpsertBulk) UpdateNewValues() *HPAssetUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.HPAsset.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *HPAssetUpsertBulk) Ignore() *HPAssetUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *HPAssetUpsertBulk) DoNothing() *HPAssetUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the HPAssetCreateBulk.OnConflict
// documentation for more info.
func (u *HPAssetUpsertBulk) Update(set func(*HPAssetUpsert)) *HPAssetUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&HPAssetUpsert{UpdateSet: update})
	}))
	return u
}

// SetKey sets the "key" field.
func (u *HPAssetUpsertBulk) SetKey(v string) *HPAssetUpsertBulk {
	return u.Update(func(s *HPAssetUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *HPAssetUpsertBulk) UpdateKey() *HPAssetUpsertBulk {
	return u.Update(func(s *HPAssetUpsert) {
		s.UpdateKey()
	})
}

// SetAssetType sets the "asset_type" field.
func (u *HPAssetUpsertBulk) SetAssetType(v enums.HPAssetType) *HPAssetUpsertBulk {
	return u.Update(func(s *HPAssetUpsert) {
		s.SetAssetType(v)
	})
}

// UpdateAssetType sets the "asset_type" field to the value that was provided on create.
func (u *HPAssetUpsertBulk) UpdateAssetType() *HPAssetUpsertBulk {
	return u.Update(func(s *HPAssetUpsert) {
		s.UpdateAssetType()
	})
}

// Exec executes the query.
func (u *HPAssetUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the HPAssetCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for HPAssetCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *HPAssetUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
