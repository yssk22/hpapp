// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yssk22/hpapp/go/service/ent/hpfeeditem"
	"github.com/yssk22/hpapp/go/service/ent/predicate"
)

// HPFeedItemDelete is the builder for deleting a HPFeedItem entity.
type HPFeedItemDelete struct {
	config
	hooks    []Hook
	mutation *HPFeedItemMutation
}

// Where appends a list predicates to the HPFeedItemDelete builder.
func (hfid *HPFeedItemDelete) Where(ps ...predicate.HPFeedItem) *HPFeedItemDelete {
	hfid.mutation.Where(ps...)
	return hfid
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (hfid *HPFeedItemDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, HPFeedItemMutation](ctx, hfid.sqlExec, hfid.mutation, hfid.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (hfid *HPFeedItemDelete) ExecX(ctx context.Context) int {
	n, err := hfid.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (hfid *HPFeedItemDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(hpfeeditem.Table, sqlgraph.NewFieldSpec(hpfeeditem.FieldID, field.TypeInt))
	if ps := hfid.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, hfid.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	hfid.mutation.done = true
	return affected, err
}

// HPFeedItemDeleteOne is the builder for deleting a single HPFeedItem entity.
type HPFeedItemDeleteOne struct {
	hfid *HPFeedItemDelete
}

// Where appends a list predicates to the HPFeedItemDelete builder.
func (hfido *HPFeedItemDeleteOne) Where(ps ...predicate.HPFeedItem) *HPFeedItemDeleteOne {
	hfido.hfid.mutation.Where(ps...)
	return hfido
}

// Exec executes the deletion query.
func (hfido *HPFeedItemDeleteOne) Exec(ctx context.Context) error {
	n, err := hfido.hfid.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{hpfeeditem.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (hfido *HPFeedItemDeleteOne) ExecX(ctx context.Context) {
	if err := hfido.Exec(ctx); err != nil {
		panic(err)
	}
}
