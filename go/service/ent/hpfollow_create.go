// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yssk22/hpapp/go/service/ent/hpfollow"
	"github.com/yssk22/hpapp/go/service/ent/hpmember"
	"github.com/yssk22/hpapp/go/service/ent/user"
	"github.com/yssk22/hpapp/go/service/schema/enums"
)

// HPFollowCreate is the builder for creating a HPFollow entity.
type HPFollowCreate struct {
	config
	mutation *HPFollowMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (hfc *HPFollowCreate) SetCreatedAt(t time.Time) *HPFollowCreate {
	hfc.mutation.SetCreatedAt(t)
	return hfc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (hfc *HPFollowCreate) SetNillableCreatedAt(t *time.Time) *HPFollowCreate {
	if t != nil {
		hfc.SetCreatedAt(*t)
	}
	return hfc
}

// SetUpdatedAt sets the "updated_at" field.
func (hfc *HPFollowCreate) SetUpdatedAt(t time.Time) *HPFollowCreate {
	hfc.mutation.SetUpdatedAt(t)
	return hfc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (hfc *HPFollowCreate) SetNillableUpdatedAt(t *time.Time) *HPFollowCreate {
	if t != nil {
		hfc.SetUpdatedAt(*t)
	}
	return hfc
}

// SetType sets the "type" field.
func (hfc *HPFollowCreate) SetType(eft enums.HPFollowType) *HPFollowCreate {
	hfc.mutation.SetType(eft)
	return hfc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (hfc *HPFollowCreate) SetNillableType(eft *enums.HPFollowType) *HPFollowCreate {
	if eft != nil {
		hfc.SetType(*eft)
	}
	return hfc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (hfc *HPFollowCreate) SetUserID(id int) *HPFollowCreate {
	hfc.mutation.SetUserID(id)
	return hfc
}

// SetUser sets the "user" edge to the User entity.
func (hfc *HPFollowCreate) SetUser(u *User) *HPFollowCreate {
	return hfc.SetUserID(u.ID)
}

// SetMemberID sets the "member" edge to the HPMember entity by ID.
func (hfc *HPFollowCreate) SetMemberID(id int) *HPFollowCreate {
	hfc.mutation.SetMemberID(id)
	return hfc
}

// SetMember sets the "member" edge to the HPMember entity.
func (hfc *HPFollowCreate) SetMember(h *HPMember) *HPFollowCreate {
	return hfc.SetMemberID(h.ID)
}

// Mutation returns the HPFollowMutation object of the builder.
func (hfc *HPFollowCreate) Mutation() *HPFollowMutation {
	return hfc.mutation
}

// Save creates the HPFollow in the database.
func (hfc *HPFollowCreate) Save(ctx context.Context) (*HPFollow, error) {
	if err := hfc.defaults(); err != nil {
		return nil, err
	}
	return withHooks[*HPFollow, HPFollowMutation](ctx, hfc.sqlSave, hfc.mutation, hfc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (hfc *HPFollowCreate) SaveX(ctx context.Context) *HPFollow {
	v, err := hfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hfc *HPFollowCreate) Exec(ctx context.Context) error {
	_, err := hfc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hfc *HPFollowCreate) ExecX(ctx context.Context) {
	if err := hfc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hfc *HPFollowCreate) defaults() error {
	if _, ok := hfc.mutation.GetType(); !ok {
		v := hpfollow.DefaultType
		hfc.mutation.SetType(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (hfc *HPFollowCreate) check() error {
	if _, ok := hfc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "HPFollow.type"`)}
	}
	if v, ok := hfc.mutation.GetType(); ok {
		if err := hpfollow.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "HPFollow.type": %w`, err)}
		}
	}
	if _, ok := hfc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "HPFollow.user"`)}
	}
	if _, ok := hfc.mutation.MemberID(); !ok {
		return &ValidationError{Name: "member", err: errors.New(`ent: missing required edge "HPFollow.member"`)}
	}
	return nil
}

func (hfc *HPFollowCreate) sqlSave(ctx context.Context) (*HPFollow, error) {
	if err := hfc.check(); err != nil {
		return nil, err
	}
	_node, _spec := hfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, hfc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	hfc.mutation.id = &_node.ID
	hfc.mutation.done = true
	return _node, nil
}

func (hfc *HPFollowCreate) createSpec() (*HPFollow, *sqlgraph.CreateSpec) {
	var (
		_node = &HPFollow{config: hfc.config}
		_spec = sqlgraph.NewCreateSpec(hpfollow.Table, sqlgraph.NewFieldSpec(hpfollow.FieldID, field.TypeInt))
	)
	_spec.OnConflict = hfc.conflict
	if value, ok := hfc.mutation.CreatedAt(); ok {
		_spec.SetField(hpfollow.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := hfc.mutation.UpdatedAt(); ok {
		_spec.SetField(hpfollow.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := hfc.mutation.GetType(); ok {
		_spec.SetField(hpfollow.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if nodes := hfc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpfollow.UserTable,
			Columns: []string{hpfollow.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_hpmember_following = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hfc.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hpfollow.MemberTable,
			Columns: []string{hpfollow.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.hp_follow_member = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.HPFollow.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.HPFollowUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (hfc *HPFollowCreate) OnConflict(opts ...sql.ConflictOption) *HPFollowUpsertOne {
	hfc.conflict = opts
	return &HPFollowUpsertOne{
		create: hfc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.HPFollow.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (hfc *HPFollowCreate) OnConflictColumns(columns ...string) *HPFollowUpsertOne {
	hfc.conflict = append(hfc.conflict, sql.ConflictColumns(columns...))
	return &HPFollowUpsertOne{
		create: hfc,
	}
}

type (
	// HPFollowUpsertOne is the builder for "upsert"-ing
	//  one HPFollow node.
	HPFollowUpsertOne struct {
		create *HPFollowCreate
	}

	// HPFollowUpsert is the "OnConflict" setter.
	HPFollowUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *HPFollowUpsert) SetUpdatedAt(v time.Time) *HPFollowUpsert {
	u.Set(hpfollow.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *HPFollowUpsert) UpdateUpdatedAt() *HPFollowUpsert {
	u.SetExcluded(hpfollow.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *HPFollowUpsert) ClearUpdatedAt() *HPFollowUpsert {
	u.SetNull(hpfollow.FieldUpdatedAt)
	return u
}

// SetType sets the "type" field.
func (u *HPFollowUpsert) SetType(v enums.HPFollowType) *HPFollowUpsert {
	u.Set(hpfollow.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *HPFollowUpsert) UpdateType() *HPFollowUpsert {
	u.SetExcluded(hpfollow.FieldType)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.HPFollow.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *HPFollowUpsertOne) UpdateNewValues() *HPFollowUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(hpfollow.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.HPFollow.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *HPFollowUpsertOne) Ignore() *HPFollowUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *HPFollowUpsertOne) DoNothing() *HPFollowUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the HPFollowCreate.OnConflict
// documentation for more info.
func (u *HPFollowUpsertOne) Update(set func(*HPFollowUpsert)) *HPFollowUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&HPFollowUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *HPFollowUpsertOne) SetUpdatedAt(v time.Time) *HPFollowUpsertOne {
	return u.Update(func(s *HPFollowUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *HPFollowUpsertOne) UpdateUpdatedAt() *HPFollowUpsertOne {
	return u.Update(func(s *HPFollowUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *HPFollowUpsertOne) ClearUpdatedAt() *HPFollowUpsertOne {
	return u.Update(func(s *HPFollowUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetType sets the "type" field.
func (u *HPFollowUpsertOne) SetType(v enums.HPFollowType) *HPFollowUpsertOne {
	return u.Update(func(s *HPFollowUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *HPFollowUpsertOne) UpdateType() *HPFollowUpsertOne {
	return u.Update(func(s *HPFollowUpsert) {
		s.UpdateType()
	})
}

// Exec executes the query.
func (u *HPFollowUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for HPFollowCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *HPFollowUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *HPFollowUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *HPFollowUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// HPFollowCreateBulk is the builder for creating many HPFollow entities in bulk.
type HPFollowCreateBulk struct {
	config
	builders []*HPFollowCreate
	conflict []sql.ConflictOption
}

// Save creates the HPFollow entities in the database.
func (hfcb *HPFollowCreateBulk) Save(ctx context.Context) ([]*HPFollow, error) {
	specs := make([]*sqlgraph.CreateSpec, len(hfcb.builders))
	nodes := make([]*HPFollow, len(hfcb.builders))
	mutators := make([]Mutator, len(hfcb.builders))
	for i := range hfcb.builders {
		func(i int, root context.Context) {
			builder := hfcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HPFollowMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hfcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = hfcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hfcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hfcb *HPFollowCreateBulk) SaveX(ctx context.Context) []*HPFollow {
	v, err := hfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hfcb *HPFollowCreateBulk) Exec(ctx context.Context) error {
	_, err := hfcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hfcb *HPFollowCreateBulk) ExecX(ctx context.Context) {
	if err := hfcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.HPFollow.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.HPFollowUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (hfcb *HPFollowCreateBulk) OnConflict(opts ...sql.ConflictOption) *HPFollowUpsertBulk {
	hfcb.conflict = opts
	return &HPFollowUpsertBulk{
		create: hfcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.HPFollow.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (hfcb *HPFollowCreateBulk) OnConflictColumns(columns ...string) *HPFollowUpsertBulk {
	hfcb.conflict = append(hfcb.conflict, sql.ConflictColumns(columns...))
	return &HPFollowUpsertBulk{
		create: hfcb,
	}
}

// HPFollowUpsertBulk is the builder for "upsert"-ing
// a bulk of HPFollow nodes.
type HPFollowUpsertBulk struct {
	create *HPFollowCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.HPFollow.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *HPFollowUpsertBulk) UpdateNewValues() *HPFollowUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(hpfollow.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.HPFollow.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *HPFollowUpsertBulk) Ignore() *HPFollowUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *HPFollowUpsertBulk) DoNothing() *HPFollowUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the HPFollowCreateBulk.OnConflict
// documentation for more info.
func (u *HPFollowUpsertBulk) Update(set func(*HPFollowUpsert)) *HPFollowUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&HPFollowUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *HPFollowUpsertBulk) SetUpdatedAt(v time.Time) *HPFollowUpsertBulk {
	return u.Update(func(s *HPFollowUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *HPFollowUpsertBulk) UpdateUpdatedAt() *HPFollowUpsertBulk {
	return u.Update(func(s *HPFollowUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *HPFollowUpsertBulk) ClearUpdatedAt() *HPFollowUpsertBulk {
	return u.Update(func(s *HPFollowUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetType sets the "type" field.
func (u *HPFollowUpsertBulk) SetType(v enums.HPFollowType) *HPFollowUpsertBulk {
	return u.Update(func(s *HPFollowUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *HPFollowUpsertBulk) UpdateType() *HPFollowUpsertBulk {
	return u.Update(func(s *HPFollowUpsert) {
		s.UpdateType()
	})
}

// Exec executes the query.
func (u *HPFollowUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the HPFollowCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for HPFollowCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *HPFollowUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
