// Code generated by ent, DO NOT EDIT.

package hpelineupmallitem

import (
	"fmt"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/99designs/gqlgen/graphql"
	"github.com/yssk22/hpapp/go/service/schema/enums"
)

const (
	// Label holds the string label denoting the hpelineupmallitem type in the database.
	Label = "hp_elineup_mall_item"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCrawledAt holds the string denoting the crawled_at field in the database.
	FieldCrawledAt = "crawled_at"
	// FieldErrorCount holds the string denoting the error_count field in the database.
	FieldErrorCount = "error_count"
	// FieldManuallyModified holds the string denoting the manually_modified field in the database.
	FieldManuallyModified = "manually_modified"
	// FieldLastErrorMessage holds the string denoting the last_error_message field in the database.
	FieldLastErrorMessage = "last_error_message"
	// FieldRecrawlRequired holds the string denoting the recrawl_required field in the database.
	FieldRecrawlRequired = "recrawl_required"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldPermalink holds the string denoting the permalink field in the database.
	FieldPermalink = "permalink"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldSupplier holds the string denoting the supplier field in the database.
	FieldSupplier = "supplier"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// FieldIsLimitedToFc holds the string denoting the is_limited_to_fc field in the database.
	FieldIsLimitedToFc = "is_limited_to_fc"
	// FieldIsOutOfStock holds the string denoting the is_out_of_stock field in the database.
	FieldIsOutOfStock = "is_out_of_stock"
	// FieldImages holds the string denoting the images field in the database.
	FieldImages = "images"
	// FieldCategory holds the string denoting the category field in the database.
	FieldCategory = "category"
	// FieldOrderStartAt holds the string denoting the order_start_at field in the database.
	FieldOrderStartAt = "order_start_at"
	// FieldOrderEndAt holds the string denoting the order_end_at field in the database.
	FieldOrderEndAt = "order_end_at"
	// EdgeTaggedArtists holds the string denoting the tagged_artists edge name in mutations.
	EdgeTaggedArtists = "tagged_artists"
	// EdgeTaggedMembers holds the string denoting the tagged_members edge name in mutations.
	EdgeTaggedMembers = "tagged_members"
	// Table holds the table name of the hpelineupmallitem in the database.
	Table = "hp_elineup_mall_items"
	// TaggedArtistsTable is the table that holds the tagged_artists relation/edge. The primary key declared below.
	TaggedArtistsTable = "hp_artist_elineup_mall_items"
	// TaggedArtistsInverseTable is the table name for the HPArtist entity.
	// It exists in this package in order to avoid circular dependency with the "hpartist" package.
	TaggedArtistsInverseTable = "hp_artists"
	// TaggedMembersTable is the table that holds the tagged_members relation/edge. The primary key declared below.
	TaggedMembersTable = "hp_member_elineup_mall_items"
	// TaggedMembersInverseTable is the table name for the HPMember entity.
	// It exists in this package in order to avoid circular dependency with the "hpmember" package.
	TaggedMembersInverseTable = "hp_members"
)

// Columns holds all SQL columns for hpelineupmallitem fields.
var Columns = []string{
	FieldID,
	FieldCrawledAt,
	FieldErrorCount,
	FieldManuallyModified,
	FieldLastErrorMessage,
	FieldRecrawlRequired,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldPermalink,
	FieldName,
	FieldDescription,
	FieldSupplier,
	FieldPrice,
	FieldIsLimitedToFc,
	FieldIsOutOfStock,
	FieldImages,
	FieldCategory,
	FieldOrderStartAt,
	FieldOrderEndAt,
}

var (
	// TaggedArtistsPrimaryKey and TaggedArtistsColumn2 are the table columns denoting the
	// primary key for the tagged_artists relation (M2M).
	TaggedArtistsPrimaryKey = []string{"hp_artist_id", "hp_elineup_mall_item_id"}
	// TaggedMembersPrimaryKey and TaggedMembersColumn2 are the table columns denoting the
	// primary key for the tagged_members relation (M2M).
	TaggedMembersPrimaryKey = []string{"hp_member_id", "hp_elineup_mall_item_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/yssk22/hpapp/go/service/ent/runtime"
//
var (
	Hooks [1]ent.Hook
	// DefaultErrorCount holds the default value on creation for the "error_count" field.
	DefaultErrorCount int
	// DefaultRecrawlRequired holds the default value on creation for the "recrawl_required" field.
	DefaultRecrawlRequired bool
	// DefaultDescription holds the default value on creation for the "description" field.
	DefaultDescription string
)

const DefaultCategory enums.HPElineupMallItemCategory = "Other"

// CategoryValidator is a validator for the "category" field enum values. It is called by the builders before save.
func CategoryValidator(c enums.HPElineupMallItemCategory) error {
	switch c {
	case "Blueray", "ClearFile", "ColllectionOther", "ColllectionPhoto", "ColllectionPinnapPoster", "DVD", "DVDMagazine", "DVDMagazineOther", "FSK", "KeyringOther", "MicrofiberTowel", "MufflerTowel", "Other", "Penlight", "Photo2L", "PhotoA4", "PhotoA5", "PhotoAlbum", "PhotoAlbumOther", "PhotoBook", "PhotoBookOther", "PhotoDaily", "PhotoOther", "TShirt":
		return nil
	default:
		return fmt.Errorf("hpelineupmallitem: invalid enum value for category field: %q", c)
	}
}

// Order defines the ordering method for the HPElineupMallItem queries.
type Order func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCrawledAt orders the results by the crawled_at field.
func ByCrawledAt(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldCrawledAt, opts...).ToFunc()
}

// ByErrorCount orders the results by the error_count field.
func ByErrorCount(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldErrorCount, opts...).ToFunc()
}

// ByLastErrorMessage orders the results by the last_error_message field.
func ByLastErrorMessage(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldLastErrorMessage, opts...).ToFunc()
}

// ByRecrawlRequired orders the results by the recrawl_required field.
func ByRecrawlRequired(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldRecrawlRequired, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByPermalink orders the results by the permalink field.
func ByPermalink(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldPermalink, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// BySupplier orders the results by the supplier field.
func BySupplier(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldSupplier, opts...).ToFunc()
}

// ByPrice orders the results by the price field.
func ByPrice(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldPrice, opts...).ToFunc()
}

// ByIsLimitedToFc orders the results by the is_limited_to_fc field.
func ByIsLimitedToFc(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldIsLimitedToFc, opts...).ToFunc()
}

// ByIsOutOfStock orders the results by the is_out_of_stock field.
func ByIsOutOfStock(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldIsOutOfStock, opts...).ToFunc()
}

// ByCategory orders the results by the category field.
func ByCategory(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldCategory, opts...).ToFunc()
}

// ByOrderStartAt orders the results by the order_start_at field.
func ByOrderStartAt(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldOrderStartAt, opts...).ToFunc()
}

// ByOrderEndAt orders the results by the order_end_at field.
func ByOrderEndAt(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldOrderEndAt, opts...).ToFunc()
}

// ByTaggedArtistsCount orders the results by tagged_artists count.
func ByTaggedArtistsCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTaggedArtistsStep(), opts...)
	}
}

// ByTaggedArtists orders the results by tagged_artists terms.
func ByTaggedArtists(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTaggedArtistsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTaggedMembersCount orders the results by tagged_members count.
func ByTaggedMembersCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTaggedMembersStep(), opts...)
	}
}

// ByTaggedMembers orders the results by tagged_members terms.
func ByTaggedMembers(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTaggedMembersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTaggedArtistsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TaggedArtistsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, TaggedArtistsTable, TaggedArtistsPrimaryKey...),
	)
}
func newTaggedMembersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TaggedMembersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, TaggedMembersTable, TaggedMembersPrimaryKey...),
	)
}

var (
	// enums.HPElineupMallItemCategory must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enums.HPElineupMallItemCategory)(nil)
	// enums.HPElineupMallItemCategory must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enums.HPElineupMallItemCategory)(nil)
)
