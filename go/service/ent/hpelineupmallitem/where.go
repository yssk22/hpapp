// Code generated by ent, DO NOT EDIT.

package hpelineupmallitem

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/yssk22/hpapp/go/service/ent/predicate"
	"github.com/yssk22/hpapp/go/service/schema/enums"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldLTE(FieldID, id))
}

// CrawledAt applies equality check predicate on the "crawled_at" field. It's identical to CrawledAtEQ.
func CrawledAt(v time.Time) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldEQ(FieldCrawledAt, v))
}

// ErrorCount applies equality check predicate on the "error_count" field. It's identical to ErrorCountEQ.
func ErrorCount(v int) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldEQ(FieldErrorCount, v))
}

// LastErrorMessage applies equality check predicate on the "last_error_message" field. It's identical to LastErrorMessageEQ.
func LastErrorMessage(v string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldEQ(FieldLastErrorMessage, v))
}

// RecrawlRequired applies equality check predicate on the "recrawl_required" field. It's identical to RecrawlRequiredEQ.
func RecrawlRequired(v bool) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldEQ(FieldRecrawlRequired, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldEQ(FieldUpdatedAt, v))
}

// Permalink applies equality check predicate on the "permalink" field. It's identical to PermalinkEQ.
func Permalink(v string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldEQ(FieldPermalink, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldEQ(FieldDescription, v))
}

// Supplier applies equality check predicate on the "supplier" field. It's identical to SupplierEQ.
func Supplier(v string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldEQ(FieldSupplier, v))
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v int) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldEQ(FieldPrice, v))
}

// IsLimitedToFc applies equality check predicate on the "is_limited_to_fc" field. It's identical to IsLimitedToFcEQ.
func IsLimitedToFc(v bool) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldEQ(FieldIsLimitedToFc, v))
}

// IsOutOfStock applies equality check predicate on the "is_out_of_stock" field. It's identical to IsOutOfStockEQ.
func IsOutOfStock(v bool) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldEQ(FieldIsOutOfStock, v))
}

// OrderStartAt applies equality check predicate on the "order_start_at" field. It's identical to OrderStartAtEQ.
func OrderStartAt(v time.Time) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldEQ(FieldOrderStartAt, v))
}

// OrderEndAt applies equality check predicate on the "order_end_at" field. It's identical to OrderEndAtEQ.
func OrderEndAt(v time.Time) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldEQ(FieldOrderEndAt, v))
}

// CrawledAtEQ applies the EQ predicate on the "crawled_at" field.
func CrawledAtEQ(v time.Time) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldEQ(FieldCrawledAt, v))
}

// CrawledAtNEQ applies the NEQ predicate on the "crawled_at" field.
func CrawledAtNEQ(v time.Time) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldNEQ(FieldCrawledAt, v))
}

// CrawledAtIn applies the In predicate on the "crawled_at" field.
func CrawledAtIn(vs ...time.Time) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldIn(FieldCrawledAt, vs...))
}

// CrawledAtNotIn applies the NotIn predicate on the "crawled_at" field.
func CrawledAtNotIn(vs ...time.Time) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldNotIn(FieldCrawledAt, vs...))
}

// CrawledAtGT applies the GT predicate on the "crawled_at" field.
func CrawledAtGT(v time.Time) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldGT(FieldCrawledAt, v))
}

// CrawledAtGTE applies the GTE predicate on the "crawled_at" field.
func CrawledAtGTE(v time.Time) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldGTE(FieldCrawledAt, v))
}

// CrawledAtLT applies the LT predicate on the "crawled_at" field.
func CrawledAtLT(v time.Time) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldLT(FieldCrawledAt, v))
}

// CrawledAtLTE applies the LTE predicate on the "crawled_at" field.
func CrawledAtLTE(v time.Time) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldLTE(FieldCrawledAt, v))
}

// CrawledAtIsNil applies the IsNil predicate on the "crawled_at" field.
func CrawledAtIsNil() predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldIsNull(FieldCrawledAt))
}

// CrawledAtNotNil applies the NotNil predicate on the "crawled_at" field.
func CrawledAtNotNil() predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldNotNull(FieldCrawledAt))
}

// ErrorCountEQ applies the EQ predicate on the "error_count" field.
func ErrorCountEQ(v int) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldEQ(FieldErrorCount, v))
}

// ErrorCountNEQ applies the NEQ predicate on the "error_count" field.
func ErrorCountNEQ(v int) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldNEQ(FieldErrorCount, v))
}

// ErrorCountIn applies the In predicate on the "error_count" field.
func ErrorCountIn(vs ...int) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldIn(FieldErrorCount, vs...))
}

// ErrorCountNotIn applies the NotIn predicate on the "error_count" field.
func ErrorCountNotIn(vs ...int) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldNotIn(FieldErrorCount, vs...))
}

// ErrorCountGT applies the GT predicate on the "error_count" field.
func ErrorCountGT(v int) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldGT(FieldErrorCount, v))
}

// ErrorCountGTE applies the GTE predicate on the "error_count" field.
func ErrorCountGTE(v int) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldGTE(FieldErrorCount, v))
}

// ErrorCountLT applies the LT predicate on the "error_count" field.
func ErrorCountLT(v int) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldLT(FieldErrorCount, v))
}

// ErrorCountLTE applies the LTE predicate on the "error_count" field.
func ErrorCountLTE(v int) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldLTE(FieldErrorCount, v))
}

// ManuallyModifiedIsNil applies the IsNil predicate on the "manually_modified" field.
func ManuallyModifiedIsNil() predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldIsNull(FieldManuallyModified))
}

// ManuallyModifiedNotNil applies the NotNil predicate on the "manually_modified" field.
func ManuallyModifiedNotNil() predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldNotNull(FieldManuallyModified))
}

// LastErrorMessageEQ applies the EQ predicate on the "last_error_message" field.
func LastErrorMessageEQ(v string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldEQ(FieldLastErrorMessage, v))
}

// LastErrorMessageNEQ applies the NEQ predicate on the "last_error_message" field.
func LastErrorMessageNEQ(v string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldNEQ(FieldLastErrorMessage, v))
}

// LastErrorMessageIn applies the In predicate on the "last_error_message" field.
func LastErrorMessageIn(vs ...string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldIn(FieldLastErrorMessage, vs...))
}

// LastErrorMessageNotIn applies the NotIn predicate on the "last_error_message" field.
func LastErrorMessageNotIn(vs ...string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldNotIn(FieldLastErrorMessage, vs...))
}

// LastErrorMessageGT applies the GT predicate on the "last_error_message" field.
func LastErrorMessageGT(v string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldGT(FieldLastErrorMessage, v))
}

// LastErrorMessageGTE applies the GTE predicate on the "last_error_message" field.
func LastErrorMessageGTE(v string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldGTE(FieldLastErrorMessage, v))
}

// LastErrorMessageLT applies the LT predicate on the "last_error_message" field.
func LastErrorMessageLT(v string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldLT(FieldLastErrorMessage, v))
}

// LastErrorMessageLTE applies the LTE predicate on the "last_error_message" field.
func LastErrorMessageLTE(v string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldLTE(FieldLastErrorMessage, v))
}

// LastErrorMessageContains applies the Contains predicate on the "last_error_message" field.
func LastErrorMessageContains(v string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldContains(FieldLastErrorMessage, v))
}

// LastErrorMessageHasPrefix applies the HasPrefix predicate on the "last_error_message" field.
func LastErrorMessageHasPrefix(v string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldHasPrefix(FieldLastErrorMessage, v))
}

// LastErrorMessageHasSuffix applies the HasSuffix predicate on the "last_error_message" field.
func LastErrorMessageHasSuffix(v string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldHasSuffix(FieldLastErrorMessage, v))
}

// LastErrorMessageIsNil applies the IsNil predicate on the "last_error_message" field.
func LastErrorMessageIsNil() predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldIsNull(FieldLastErrorMessage))
}

// LastErrorMessageNotNil applies the NotNil predicate on the "last_error_message" field.
func LastErrorMessageNotNil() predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldNotNull(FieldLastErrorMessage))
}

// LastErrorMessageEqualFold applies the EqualFold predicate on the "last_error_message" field.
func LastErrorMessageEqualFold(v string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldEqualFold(FieldLastErrorMessage, v))
}

// LastErrorMessageContainsFold applies the ContainsFold predicate on the "last_error_message" field.
func LastErrorMessageContainsFold(v string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldContainsFold(FieldLastErrorMessage, v))
}

// RecrawlRequiredEQ applies the EQ predicate on the "recrawl_required" field.
func RecrawlRequiredEQ(v bool) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldEQ(FieldRecrawlRequired, v))
}

// RecrawlRequiredNEQ applies the NEQ predicate on the "recrawl_required" field.
func RecrawlRequiredNEQ(v bool) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldNEQ(FieldRecrawlRequired, v))
}

// RecrawlRequiredIsNil applies the IsNil predicate on the "recrawl_required" field.
func RecrawlRequiredIsNil() predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldIsNull(FieldRecrawlRequired))
}

// RecrawlRequiredNotNil applies the NotNil predicate on the "recrawl_required" field.
func RecrawlRequiredNotNil() predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldNotNull(FieldRecrawlRequired))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldNotNull(FieldUpdatedAt))
}

// PermalinkEQ applies the EQ predicate on the "permalink" field.
func PermalinkEQ(v string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldEQ(FieldPermalink, v))
}

// PermalinkNEQ applies the NEQ predicate on the "permalink" field.
func PermalinkNEQ(v string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldNEQ(FieldPermalink, v))
}

// PermalinkIn applies the In predicate on the "permalink" field.
func PermalinkIn(vs ...string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldIn(FieldPermalink, vs...))
}

// PermalinkNotIn applies the NotIn predicate on the "permalink" field.
func PermalinkNotIn(vs ...string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldNotIn(FieldPermalink, vs...))
}

// PermalinkGT applies the GT predicate on the "permalink" field.
func PermalinkGT(v string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldGT(FieldPermalink, v))
}

// PermalinkGTE applies the GTE predicate on the "permalink" field.
func PermalinkGTE(v string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldGTE(FieldPermalink, v))
}

// PermalinkLT applies the LT predicate on the "permalink" field.
func PermalinkLT(v string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldLT(FieldPermalink, v))
}

// PermalinkLTE applies the LTE predicate on the "permalink" field.
func PermalinkLTE(v string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldLTE(FieldPermalink, v))
}

// PermalinkContains applies the Contains predicate on the "permalink" field.
func PermalinkContains(v string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldContains(FieldPermalink, v))
}

// PermalinkHasPrefix applies the HasPrefix predicate on the "permalink" field.
func PermalinkHasPrefix(v string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldHasPrefix(FieldPermalink, v))
}

// PermalinkHasSuffix applies the HasSuffix predicate on the "permalink" field.
func PermalinkHasSuffix(v string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldHasSuffix(FieldPermalink, v))
}

// PermalinkEqualFold applies the EqualFold predicate on the "permalink" field.
func PermalinkEqualFold(v string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldEqualFold(FieldPermalink, v))
}

// PermalinkContainsFold applies the ContainsFold predicate on the "permalink" field.
func PermalinkContainsFold(v string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldContainsFold(FieldPermalink, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldContainsFold(FieldDescription, v))
}

// SupplierEQ applies the EQ predicate on the "supplier" field.
func SupplierEQ(v string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldEQ(FieldSupplier, v))
}

// SupplierNEQ applies the NEQ predicate on the "supplier" field.
func SupplierNEQ(v string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldNEQ(FieldSupplier, v))
}

// SupplierIn applies the In predicate on the "supplier" field.
func SupplierIn(vs ...string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldIn(FieldSupplier, vs...))
}

// SupplierNotIn applies the NotIn predicate on the "supplier" field.
func SupplierNotIn(vs ...string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldNotIn(FieldSupplier, vs...))
}

// SupplierGT applies the GT predicate on the "supplier" field.
func SupplierGT(v string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldGT(FieldSupplier, v))
}

// SupplierGTE applies the GTE predicate on the "supplier" field.
func SupplierGTE(v string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldGTE(FieldSupplier, v))
}

// SupplierLT applies the LT predicate on the "supplier" field.
func SupplierLT(v string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldLT(FieldSupplier, v))
}

// SupplierLTE applies the LTE predicate on the "supplier" field.
func SupplierLTE(v string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldLTE(FieldSupplier, v))
}

// SupplierContains applies the Contains predicate on the "supplier" field.
func SupplierContains(v string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldContains(FieldSupplier, v))
}

// SupplierHasPrefix applies the HasPrefix predicate on the "supplier" field.
func SupplierHasPrefix(v string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldHasPrefix(FieldSupplier, v))
}

// SupplierHasSuffix applies the HasSuffix predicate on the "supplier" field.
func SupplierHasSuffix(v string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldHasSuffix(FieldSupplier, v))
}

// SupplierEqualFold applies the EqualFold predicate on the "supplier" field.
func SupplierEqualFold(v string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldEqualFold(FieldSupplier, v))
}

// SupplierContainsFold applies the ContainsFold predicate on the "supplier" field.
func SupplierContainsFold(v string) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldContainsFold(FieldSupplier, v))
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v int) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldEQ(FieldPrice, v))
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v int) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldNEQ(FieldPrice, v))
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...int) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldIn(FieldPrice, vs...))
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...int) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldNotIn(FieldPrice, vs...))
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v int) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldGT(FieldPrice, v))
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v int) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldGTE(FieldPrice, v))
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v int) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldLT(FieldPrice, v))
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v int) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldLTE(FieldPrice, v))
}

// IsLimitedToFcEQ applies the EQ predicate on the "is_limited_to_fc" field.
func IsLimitedToFcEQ(v bool) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldEQ(FieldIsLimitedToFc, v))
}

// IsLimitedToFcNEQ applies the NEQ predicate on the "is_limited_to_fc" field.
func IsLimitedToFcNEQ(v bool) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldNEQ(FieldIsLimitedToFc, v))
}

// IsOutOfStockEQ applies the EQ predicate on the "is_out_of_stock" field.
func IsOutOfStockEQ(v bool) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldEQ(FieldIsOutOfStock, v))
}

// IsOutOfStockNEQ applies the NEQ predicate on the "is_out_of_stock" field.
func IsOutOfStockNEQ(v bool) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldNEQ(FieldIsOutOfStock, v))
}

// CategoryEQ applies the EQ predicate on the "category" field.
func CategoryEQ(v enums.HPElineupMallItemCategory) predicate.HPElineupMallItem {
	vc := v
	return predicate.HPElineupMallItem(sql.FieldEQ(FieldCategory, vc))
}

// CategoryNEQ applies the NEQ predicate on the "category" field.
func CategoryNEQ(v enums.HPElineupMallItemCategory) predicate.HPElineupMallItem {
	vc := v
	return predicate.HPElineupMallItem(sql.FieldNEQ(FieldCategory, vc))
}

// CategoryIn applies the In predicate on the "category" field.
func CategoryIn(vs ...enums.HPElineupMallItemCategory) predicate.HPElineupMallItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HPElineupMallItem(sql.FieldIn(FieldCategory, v...))
}

// CategoryNotIn applies the NotIn predicate on the "category" field.
func CategoryNotIn(vs ...enums.HPElineupMallItemCategory) predicate.HPElineupMallItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HPElineupMallItem(sql.FieldNotIn(FieldCategory, v...))
}

// OrderStartAtEQ applies the EQ predicate on the "order_start_at" field.
func OrderStartAtEQ(v time.Time) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldEQ(FieldOrderStartAt, v))
}

// OrderStartAtNEQ applies the NEQ predicate on the "order_start_at" field.
func OrderStartAtNEQ(v time.Time) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldNEQ(FieldOrderStartAt, v))
}

// OrderStartAtIn applies the In predicate on the "order_start_at" field.
func OrderStartAtIn(vs ...time.Time) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldIn(FieldOrderStartAt, vs...))
}

// OrderStartAtNotIn applies the NotIn predicate on the "order_start_at" field.
func OrderStartAtNotIn(vs ...time.Time) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldNotIn(FieldOrderStartAt, vs...))
}

// OrderStartAtGT applies the GT predicate on the "order_start_at" field.
func OrderStartAtGT(v time.Time) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldGT(FieldOrderStartAt, v))
}

// OrderStartAtGTE applies the GTE predicate on the "order_start_at" field.
func OrderStartAtGTE(v time.Time) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldGTE(FieldOrderStartAt, v))
}

// OrderStartAtLT applies the LT predicate on the "order_start_at" field.
func OrderStartAtLT(v time.Time) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldLT(FieldOrderStartAt, v))
}

// OrderStartAtLTE applies the LTE predicate on the "order_start_at" field.
func OrderStartAtLTE(v time.Time) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldLTE(FieldOrderStartAt, v))
}

// OrderStartAtIsNil applies the IsNil predicate on the "order_start_at" field.
func OrderStartAtIsNil() predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldIsNull(FieldOrderStartAt))
}

// OrderStartAtNotNil applies the NotNil predicate on the "order_start_at" field.
func OrderStartAtNotNil() predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldNotNull(FieldOrderStartAt))
}

// OrderEndAtEQ applies the EQ predicate on the "order_end_at" field.
func OrderEndAtEQ(v time.Time) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldEQ(FieldOrderEndAt, v))
}

// OrderEndAtNEQ applies the NEQ predicate on the "order_end_at" field.
func OrderEndAtNEQ(v time.Time) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldNEQ(FieldOrderEndAt, v))
}

// OrderEndAtIn applies the In predicate on the "order_end_at" field.
func OrderEndAtIn(vs ...time.Time) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldIn(FieldOrderEndAt, vs...))
}

// OrderEndAtNotIn applies the NotIn predicate on the "order_end_at" field.
func OrderEndAtNotIn(vs ...time.Time) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldNotIn(FieldOrderEndAt, vs...))
}

// OrderEndAtGT applies the GT predicate on the "order_end_at" field.
func OrderEndAtGT(v time.Time) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldGT(FieldOrderEndAt, v))
}

// OrderEndAtGTE applies the GTE predicate on the "order_end_at" field.
func OrderEndAtGTE(v time.Time) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldGTE(FieldOrderEndAt, v))
}

// OrderEndAtLT applies the LT predicate on the "order_end_at" field.
func OrderEndAtLT(v time.Time) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldLT(FieldOrderEndAt, v))
}

// OrderEndAtLTE applies the LTE predicate on the "order_end_at" field.
func OrderEndAtLTE(v time.Time) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldLTE(FieldOrderEndAt, v))
}

// OrderEndAtIsNil applies the IsNil predicate on the "order_end_at" field.
func OrderEndAtIsNil() predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldIsNull(FieldOrderEndAt))
}

// OrderEndAtNotNil applies the NotNil predicate on the "order_end_at" field.
func OrderEndAtNotNil() predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(sql.FieldNotNull(FieldOrderEndAt))
}

// HasTaggedArtists applies the HasEdge predicate on the "tagged_artists" edge.
func HasTaggedArtists() predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, TaggedArtistsTable, TaggedArtistsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTaggedArtistsWith applies the HasEdge predicate on the "tagged_artists" edge with a given conditions (other predicates).
func HasTaggedArtistsWith(preds ...predicate.HPArtist) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(func(s *sql.Selector) {
		step := newTaggedArtistsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTaggedMembers applies the HasEdge predicate on the "tagged_members" edge.
func HasTaggedMembers() predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, TaggedMembersTable, TaggedMembersPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTaggedMembersWith applies the HasEdge predicate on the "tagged_members" edge with a given conditions (other predicates).
func HasTaggedMembersWith(preds ...predicate.HPMember) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(func(s *sql.Selector) {
		step := newTaggedMembersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPurchaseHistories applies the HasEdge predicate on the "purchase_histories" edge.
func HasPurchaseHistories() predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PurchaseHistoriesTable, PurchaseHistoriesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPurchaseHistoriesWith applies the HasEdge predicate on the "purchase_histories" edge with a given conditions (other predicates).
func HasPurchaseHistoriesWith(preds ...predicate.HPElineupMallItemPurchaseHistory) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(func(s *sql.Selector) {
		step := newPurchaseHistoriesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.HPElineupMallItem) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.HPElineupMallItem) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.HPElineupMallItem) predicate.HPElineupMallItem {
	return predicate.HPElineupMallItem(func(s *sql.Selector) {
		p(s.Not())
	})
}
