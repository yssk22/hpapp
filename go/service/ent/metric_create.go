// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yssk22/hpapp/go/service/ent/metric"
	"github.com/yssk22/hpapp/go/service/ent/user"
)

// MetricCreate is the builder for creating a Metric entity.
type MetricCreate struct {
	config
	mutation *MetricMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (mc *MetricCreate) SetCreatedAt(t time.Time) *MetricCreate {
	mc.mutation.SetCreatedAt(t)
	return mc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mc *MetricCreate) SetNillableCreatedAt(t *time.Time) *MetricCreate {
	if t != nil {
		mc.SetCreatedAt(*t)
	}
	return mc
}

// SetUpdatedAt sets the "updated_at" field.
func (mc *MetricCreate) SetUpdatedAt(t time.Time) *MetricCreate {
	mc.mutation.SetUpdatedAt(t)
	return mc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mc *MetricCreate) SetNillableUpdatedAt(t *time.Time) *MetricCreate {
	if t != nil {
		mc.SetUpdatedAt(*t)
	}
	return mc
}

// SetMetricName sets the "metric_name" field.
func (mc *MetricCreate) SetMetricName(s string) *MetricCreate {
	mc.mutation.SetMetricName(s)
	return mc
}

// SetDate sets the "date" field.
func (mc *MetricCreate) SetDate(s string) *MetricCreate {
	mc.mutation.SetDate(s)
	return mc
}

// SetValue sets the "value" field.
func (mc *MetricCreate) SetValue(f float64) *MetricCreate {
	mc.mutation.SetValue(f)
	return mc
}

// SetOwnerUserID sets the "owner_user_id" field.
func (mc *MetricCreate) SetOwnerUserID(i int) *MetricCreate {
	mc.mutation.SetOwnerUserID(i)
	return mc
}

// SetNillableOwnerUserID sets the "owner_user_id" field if the given value is not nil.
func (mc *MetricCreate) SetNillableOwnerUserID(i *int) *MetricCreate {
	if i != nil {
		mc.SetOwnerUserID(*i)
	}
	return mc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (mc *MetricCreate) SetUserID(id int) *MetricCreate {
	mc.mutation.SetUserID(id)
	return mc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (mc *MetricCreate) SetNillableUserID(id *int) *MetricCreate {
	if id != nil {
		mc = mc.SetUserID(*id)
	}
	return mc
}

// SetUser sets the "user" edge to the User entity.
func (mc *MetricCreate) SetUser(u *User) *MetricCreate {
	return mc.SetUserID(u.ID)
}

// Mutation returns the MetricMutation object of the builder.
func (mc *MetricCreate) Mutation() *MetricMutation {
	return mc.mutation
}

// Save creates the Metric in the database.
func (mc *MetricCreate) Save(ctx context.Context) (*Metric, error) {
	return withHooks[*Metric, MetricMutation](ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MetricCreate) SaveX(ctx context.Context) *Metric {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MetricCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MetricCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MetricCreate) check() error {
	if _, ok := mc.mutation.MetricName(); !ok {
		return &ValidationError{Name: "metric_name", err: errors.New(`ent: missing required field "Metric.metric_name"`)}
	}
	if _, ok := mc.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New(`ent: missing required field "Metric.date"`)}
	}
	if _, ok := mc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "Metric.value"`)}
	}
	return nil
}

func (mc *MetricCreate) sqlSave(ctx context.Context) (*Metric, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *MetricCreate) createSpec() (*Metric, *sqlgraph.CreateSpec) {
	var (
		_node = &Metric{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(metric.Table, sqlgraph.NewFieldSpec(metric.FieldID, field.TypeInt))
	)
	_spec.OnConflict = mc.conflict
	if value, ok := mc.mutation.CreatedAt(); ok {
		_spec.SetField(metric.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mc.mutation.UpdatedAt(); ok {
		_spec.SetField(metric.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := mc.mutation.MetricName(); ok {
		_spec.SetField(metric.FieldMetricName, field.TypeString, value)
		_node.MetricName = value
	}
	if value, ok := mc.mutation.Date(); ok {
		_spec.SetField(metric.FieldDate, field.TypeString, value)
		_node.Date = value
	}
	if value, ok := mc.mutation.Value(); ok {
		_spec.SetField(metric.FieldValue, field.TypeFloat64, value)
		_node.Value = value
	}
	if nodes := mc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   metric.UserTable,
			Columns: []string{metric.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerUserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Metric.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MetricUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (mc *MetricCreate) OnConflict(opts ...sql.ConflictOption) *MetricUpsertOne {
	mc.conflict = opts
	return &MetricUpsertOne{
		create: mc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Metric.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mc *MetricCreate) OnConflictColumns(columns ...string) *MetricUpsertOne {
	mc.conflict = append(mc.conflict, sql.ConflictColumns(columns...))
	return &MetricUpsertOne{
		create: mc,
	}
}

type (
	// MetricUpsertOne is the builder for "upsert"-ing
	//  one Metric node.
	MetricUpsertOne struct {
		create *MetricCreate
	}

	// MetricUpsert is the "OnConflict" setter.
	MetricUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *MetricUpsert) SetUpdatedAt(v time.Time) *MetricUpsert {
	u.Set(metric.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MetricUpsert) UpdateUpdatedAt() *MetricUpsert {
	u.SetExcluded(metric.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *MetricUpsert) ClearUpdatedAt() *MetricUpsert {
	u.SetNull(metric.FieldUpdatedAt)
	return u
}

// SetMetricName sets the "metric_name" field.
func (u *MetricUpsert) SetMetricName(v string) *MetricUpsert {
	u.Set(metric.FieldMetricName, v)
	return u
}

// UpdateMetricName sets the "metric_name" field to the value that was provided on create.
func (u *MetricUpsert) UpdateMetricName() *MetricUpsert {
	u.SetExcluded(metric.FieldMetricName)
	return u
}

// SetDate sets the "date" field.
func (u *MetricUpsert) SetDate(v string) *MetricUpsert {
	u.Set(metric.FieldDate, v)
	return u
}

// UpdateDate sets the "date" field to the value that was provided on create.
func (u *MetricUpsert) UpdateDate() *MetricUpsert {
	u.SetExcluded(metric.FieldDate)
	return u
}

// SetValue sets the "value" field.
func (u *MetricUpsert) SetValue(v float64) *MetricUpsert {
	u.Set(metric.FieldValue, v)
	return u
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *MetricUpsert) UpdateValue() *MetricUpsert {
	u.SetExcluded(metric.FieldValue)
	return u
}

// AddValue adds v to the "value" field.
func (u *MetricUpsert) AddValue(v float64) *MetricUpsert {
	u.Add(metric.FieldValue, v)
	return u
}

// SetOwnerUserID sets the "owner_user_id" field.
func (u *MetricUpsert) SetOwnerUserID(v int) *MetricUpsert {
	u.Set(metric.FieldOwnerUserID, v)
	return u
}

// UpdateOwnerUserID sets the "owner_user_id" field to the value that was provided on create.
func (u *MetricUpsert) UpdateOwnerUserID() *MetricUpsert {
	u.SetExcluded(metric.FieldOwnerUserID)
	return u
}

// ClearOwnerUserID clears the value of the "owner_user_id" field.
func (u *MetricUpsert) ClearOwnerUserID() *MetricUpsert {
	u.SetNull(metric.FieldOwnerUserID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Metric.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *MetricUpsertOne) UpdateNewValues() *MetricUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(metric.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Metric.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MetricUpsertOne) Ignore() *MetricUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MetricUpsertOne) DoNothing() *MetricUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MetricCreate.OnConflict
// documentation for more info.
func (u *MetricUpsertOne) Update(set func(*MetricUpsert)) *MetricUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MetricUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MetricUpsertOne) SetUpdatedAt(v time.Time) *MetricUpsertOne {
	return u.Update(func(s *MetricUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MetricUpsertOne) UpdateUpdatedAt() *MetricUpsertOne {
	return u.Update(func(s *MetricUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *MetricUpsertOne) ClearUpdatedAt() *MetricUpsertOne {
	return u.Update(func(s *MetricUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetMetricName sets the "metric_name" field.
func (u *MetricUpsertOne) SetMetricName(v string) *MetricUpsertOne {
	return u.Update(func(s *MetricUpsert) {
		s.SetMetricName(v)
	})
}

// UpdateMetricName sets the "metric_name" field to the value that was provided on create.
func (u *MetricUpsertOne) UpdateMetricName() *MetricUpsertOne {
	return u.Update(func(s *MetricUpsert) {
		s.UpdateMetricName()
	})
}

// SetDate sets the "date" field.
func (u *MetricUpsertOne) SetDate(v string) *MetricUpsertOne {
	return u.Update(func(s *MetricUpsert) {
		s.SetDate(v)
	})
}

// UpdateDate sets the "date" field to the value that was provided on create.
func (u *MetricUpsertOne) UpdateDate() *MetricUpsertOne {
	return u.Update(func(s *MetricUpsert) {
		s.UpdateDate()
	})
}

// SetValue sets the "value" field.
func (u *MetricUpsertOne) SetValue(v float64) *MetricUpsertOne {
	return u.Update(func(s *MetricUpsert) {
		s.SetValue(v)
	})
}

// AddValue adds v to the "value" field.
func (u *MetricUpsertOne) AddValue(v float64) *MetricUpsertOne {
	return u.Update(func(s *MetricUpsert) {
		s.AddValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *MetricUpsertOne) UpdateValue() *MetricUpsertOne {
	return u.Update(func(s *MetricUpsert) {
		s.UpdateValue()
	})
}

// SetOwnerUserID sets the "owner_user_id" field.
func (u *MetricUpsertOne) SetOwnerUserID(v int) *MetricUpsertOne {
	return u.Update(func(s *MetricUpsert) {
		s.SetOwnerUserID(v)
	})
}

// UpdateOwnerUserID sets the "owner_user_id" field to the value that was provided on create.
func (u *MetricUpsertOne) UpdateOwnerUserID() *MetricUpsertOne {
	return u.Update(func(s *MetricUpsert) {
		s.UpdateOwnerUserID()
	})
}

// ClearOwnerUserID clears the value of the "owner_user_id" field.
func (u *MetricUpsertOne) ClearOwnerUserID() *MetricUpsertOne {
	return u.Update(func(s *MetricUpsert) {
		s.ClearOwnerUserID()
	})
}

// Exec executes the query.
func (u *MetricUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MetricCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MetricUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MetricUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MetricUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MetricCreateBulk is the builder for creating many Metric entities in bulk.
type MetricCreateBulk struct {
	config
	builders []*MetricCreate
	conflict []sql.ConflictOption
}

// Save creates the Metric entities in the database.
func (mcb *MetricCreateBulk) Save(ctx context.Context) ([]*Metric, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Metric, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MetricMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MetricCreateBulk) SaveX(ctx context.Context) []*Metric {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MetricCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MetricCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Metric.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MetricUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (mcb *MetricCreateBulk) OnConflict(opts ...sql.ConflictOption) *MetricUpsertBulk {
	mcb.conflict = opts
	return &MetricUpsertBulk{
		create: mcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Metric.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mcb *MetricCreateBulk) OnConflictColumns(columns ...string) *MetricUpsertBulk {
	mcb.conflict = append(mcb.conflict, sql.ConflictColumns(columns...))
	return &MetricUpsertBulk{
		create: mcb,
	}
}

// MetricUpsertBulk is the builder for "upsert"-ing
// a bulk of Metric nodes.
type MetricUpsertBulk struct {
	create *MetricCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Metric.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *MetricUpsertBulk) UpdateNewValues() *MetricUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(metric.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Metric.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MetricUpsertBulk) Ignore() *MetricUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MetricUpsertBulk) DoNothing() *MetricUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MetricCreateBulk.OnConflict
// documentation for more info.
func (u *MetricUpsertBulk) Update(set func(*MetricUpsert)) *MetricUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MetricUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MetricUpsertBulk) SetUpdatedAt(v time.Time) *MetricUpsertBulk {
	return u.Update(func(s *MetricUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MetricUpsertBulk) UpdateUpdatedAt() *MetricUpsertBulk {
	return u.Update(func(s *MetricUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *MetricUpsertBulk) ClearUpdatedAt() *MetricUpsertBulk {
	return u.Update(func(s *MetricUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetMetricName sets the "metric_name" field.
func (u *MetricUpsertBulk) SetMetricName(v string) *MetricUpsertBulk {
	return u.Update(func(s *MetricUpsert) {
		s.SetMetricName(v)
	})
}

// UpdateMetricName sets the "metric_name" field to the value that was provided on create.
func (u *MetricUpsertBulk) UpdateMetricName() *MetricUpsertBulk {
	return u.Update(func(s *MetricUpsert) {
		s.UpdateMetricName()
	})
}

// SetDate sets the "date" field.
func (u *MetricUpsertBulk) SetDate(v string) *MetricUpsertBulk {
	return u.Update(func(s *MetricUpsert) {
		s.SetDate(v)
	})
}

// UpdateDate sets the "date" field to the value that was provided on create.
func (u *MetricUpsertBulk) UpdateDate() *MetricUpsertBulk {
	return u.Update(func(s *MetricUpsert) {
		s.UpdateDate()
	})
}

// SetValue sets the "value" field.
func (u *MetricUpsertBulk) SetValue(v float64) *MetricUpsertBulk {
	return u.Update(func(s *MetricUpsert) {
		s.SetValue(v)
	})
}

// AddValue adds v to the "value" field.
func (u *MetricUpsertBulk) AddValue(v float64) *MetricUpsertBulk {
	return u.Update(func(s *MetricUpsert) {
		s.AddValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *MetricUpsertBulk) UpdateValue() *MetricUpsertBulk {
	return u.Update(func(s *MetricUpsert) {
		s.UpdateValue()
	})
}

// SetOwnerUserID sets the "owner_user_id" field.
func (u *MetricUpsertBulk) SetOwnerUserID(v int) *MetricUpsertBulk {
	return u.Update(func(s *MetricUpsert) {
		s.SetOwnerUserID(v)
	})
}

// UpdateOwnerUserID sets the "owner_user_id" field to the value that was provided on create.
func (u *MetricUpsertBulk) UpdateOwnerUserID() *MetricUpsertBulk {
	return u.Update(func(s *MetricUpsert) {
		s.UpdateOwnerUserID()
	})
}

// ClearOwnerUserID clears the value of the "owner_user_id" field.
func (u *MetricUpsertBulk) ClearOwnerUserID() *MetricUpsertBulk {
	return u.Update(func(s *MetricUpsert) {
		s.ClearOwnerUserID()
	})
}

// Exec executes the query.
func (u *MetricUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the MetricCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MetricCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MetricUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
