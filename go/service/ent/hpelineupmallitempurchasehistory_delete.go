// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yssk22/hpapp/go/service/ent/hpelineupmallitempurchasehistory"
	"github.com/yssk22/hpapp/go/service/ent/predicate"
)

// HPElineupMallItemPurchaseHistoryDelete is the builder for deleting a HPElineupMallItemPurchaseHistory entity.
type HPElineupMallItemPurchaseHistoryDelete struct {
	config
	hooks    []Hook
	mutation *HPElineupMallItemPurchaseHistoryMutation
}

// Where appends a list predicates to the HPElineupMallItemPurchaseHistoryDelete builder.
func (hemiphd *HPElineupMallItemPurchaseHistoryDelete) Where(ps ...predicate.HPElineupMallItemPurchaseHistory) *HPElineupMallItemPurchaseHistoryDelete {
	hemiphd.mutation.Where(ps...)
	return hemiphd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (hemiphd *HPElineupMallItemPurchaseHistoryDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, HPElineupMallItemPurchaseHistoryMutation](ctx, hemiphd.sqlExec, hemiphd.mutation, hemiphd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (hemiphd *HPElineupMallItemPurchaseHistoryDelete) ExecX(ctx context.Context) int {
	n, err := hemiphd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (hemiphd *HPElineupMallItemPurchaseHistoryDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(hpelineupmallitempurchasehistory.Table, sqlgraph.NewFieldSpec(hpelineupmallitempurchasehistory.FieldID, field.TypeInt))
	if ps := hemiphd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, hemiphd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	hemiphd.mutation.done = true
	return affected, err
}

// HPElineupMallItemPurchaseHistoryDeleteOne is the builder for deleting a single HPElineupMallItemPurchaseHistory entity.
type HPElineupMallItemPurchaseHistoryDeleteOne struct {
	hemiphd *HPElineupMallItemPurchaseHistoryDelete
}

// Where appends a list predicates to the HPElineupMallItemPurchaseHistoryDelete builder.
func (hemiphdo *HPElineupMallItemPurchaseHistoryDeleteOne) Where(ps ...predicate.HPElineupMallItemPurchaseHistory) *HPElineupMallItemPurchaseHistoryDeleteOne {
	hemiphdo.hemiphd.mutation.Where(ps...)
	return hemiphdo
}

// Exec executes the deletion query.
func (hemiphdo *HPElineupMallItemPurchaseHistoryDeleteOne) Exec(ctx context.Context) error {
	n, err := hemiphdo.hemiphd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{hpelineupmallitempurchasehistory.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (hemiphdo *HPElineupMallItemPurchaseHistoryDeleteOne) ExecX(ctx context.Context) {
	if err := hemiphdo.Exec(ctx); err != nil {
		panic(err)
	}
}
