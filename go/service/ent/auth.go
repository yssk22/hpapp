// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/yssk22/hpapp/go/service/ent/auth"
	"github.com/yssk22/hpapp/go/service/ent/user"
)

// Auth is the model entity for the Auth schema.
type Auth struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// oauth provider name
	ProviderName string `json:"provider_name,omitempty"`
	// user id that the provider uses
	ProviderUserID string `json:"provider_user_id,omitempty"`
	// [DEPRECATED - #125] access token
	AccessToken string `json:"-"`
	// [DEPRECATED - #125] refresh token
	RefreshToken string `json:"-"`
	// token expire
	ExpireAt time.Time `json:"expire_at,omitempty"`
	// oauth scope
	Scope []string `json:"scope,omitempty"`
	// owner user id
	OwnerUserID int `json:"owner_user_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AuthQuery when eager-loading is set.
	Edges        AuthEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AuthEdges holds the relations/edges for other nodes in the graph.
type AuthEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AuthEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Auth) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case auth.FieldScope:
			values[i] = new([]byte)
		case auth.FieldID, auth.FieldOwnerUserID:
			values[i] = new(sql.NullInt64)
		case auth.FieldProviderName, auth.FieldProviderUserID, auth.FieldAccessToken, auth.FieldRefreshToken:
			values[i] = new(sql.NullString)
		case auth.FieldCreatedAt, auth.FieldUpdatedAt, auth.FieldExpireAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Auth fields.
func (a *Auth) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case auth.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case auth.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				a.CreatedAt = value.Time
			}
		case auth.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				a.UpdatedAt = value.Time
			}
		case auth.FieldProviderName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider_name", values[i])
			} else if value.Valid {
				a.ProviderName = value.String
			}
		case auth.FieldProviderUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider_user_id", values[i])
			} else if value.Valid {
				a.ProviderUserID = value.String
			}
		case auth.FieldAccessToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field access_token", values[i])
			} else if value.Valid {
				a.AccessToken = value.String
			}
		case auth.FieldRefreshToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field refresh_token", values[i])
			} else if value.Valid {
				a.RefreshToken = value.String
			}
		case auth.FieldExpireAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expire_at", values[i])
			} else if value.Valid {
				a.ExpireAt = value.Time
			}
		case auth.FieldScope:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field scope", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &a.Scope); err != nil {
					return fmt.Errorf("unmarshal field scope: %w", err)
				}
			}
		case auth.FieldOwnerUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field owner_user_id", values[i])
			} else if value.Valid {
				a.OwnerUserID = int(value.Int64)
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Auth.
// This includes values selected through modifiers, order, etc.
func (a *Auth) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Auth entity.
func (a *Auth) QueryUser() *UserQuery {
	return NewAuthClient(a.config).QueryUser(a)
}

// Update returns a builder for updating this Auth.
// Note that you need to call Auth.Unwrap() before calling this method if this Auth
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Auth) Update() *AuthUpdateOne {
	return NewAuthClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Auth entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Auth) Unwrap() *Auth {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Auth is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Auth) String() string {
	var builder strings.Builder
	builder.WriteString("Auth(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("created_at=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(a.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("provider_name=")
	builder.WriteString(a.ProviderName)
	builder.WriteString(", ")
	builder.WriteString("provider_user_id=")
	builder.WriteString(a.ProviderUserID)
	builder.WriteString(", ")
	builder.WriteString("access_token=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("refresh_token=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("expire_at=")
	builder.WriteString(a.ExpireAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("scope=")
	builder.WriteString(fmt.Sprintf("%v", a.Scope))
	builder.WriteString(", ")
	builder.WriteString("owner_user_id=")
	builder.WriteString(fmt.Sprintf("%v", a.OwnerUserID))
	builder.WriteByte(')')
	return builder.String()
}

// Auths is a parsable slice of Auth.
type Auths []*Auth
