// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (hap *HPAmebloPost) OwnerArtist(ctx context.Context) (*HPArtist, error) {
	result, err := hap.Edges.OwnerArtistOrErr()
	if IsNotLoaded(err) {
		result, err = hap.QueryOwnerArtist().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (hap *HPAmebloPost) OwnerMember(ctx context.Context) (*HPMember, error) {
	result, err := hap.Edges.OwnerMemberOrErr()
	if IsNotLoaded(err) {
		result, err = hap.QueryOwnerMember().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (hap *HPAmebloPost) TaggedArtists(ctx context.Context) (result []*HPArtist, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = hap.NamedTaggedArtists(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = hap.Edges.TaggedArtistsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = hap.QueryTaggedArtists().All(ctx)
	}
	return result, err
}

func (hap *HPAmebloPost) TaggedMembers(ctx context.Context) (result []*HPMember, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = hap.NamedTaggedMembers(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = hap.Edges.TaggedMembersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = hap.QueryTaggedMembers().All(ctx)
	}
	return result, err
}

func (hap *HPAmebloPost) Blobs(ctx context.Context) (result []*HPBlob, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = hap.NamedBlobs(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = hap.Edges.BlobsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = hap.QueryBlobs().All(ctx)
	}
	return result, err
}

func (ha *HPArtist) Members(ctx context.Context) (result []*HPMember, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ha.NamedMembers(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ha.Edges.MembersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ha.QueryMembers().All(ctx)
	}
	return result, err
}

func (hb *HPBlob) OwnerArtist(ctx context.Context) (*HPArtist, error) {
	result, err := hb.Edges.OwnerArtistOrErr()
	if IsNotLoaded(err) {
		result, err = hb.QueryOwnerArtist().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (hb *HPBlob) OwnerMember(ctx context.Context) (*HPMember, error) {
	result, err := hb.Edges.OwnerMemberOrErr()
	if IsNotLoaded(err) {
		result, err = hb.QueryOwnerMember().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (hb *HPBlob) AmebloPosts(ctx context.Context) (result []*HPAmebloPost, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = hb.NamedAmebloPosts(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = hb.Edges.AmebloPostsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = hb.QueryAmebloPosts().All(ctx)
	}
	return result, err
}

func (hb *HPBlob) IgPosts(ctx context.Context) (result []*HPIgPost, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = hb.NamedIgPosts(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = hb.Edges.IgPostsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = hb.QueryIgPosts().All(ctx)
	}
	return result, err
}

func (hemi *HPElineupMallItem) TaggedArtists(ctx context.Context) (result []*HPArtist, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = hemi.NamedTaggedArtists(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = hemi.Edges.TaggedArtistsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = hemi.QueryTaggedArtists().All(ctx)
	}
	return result, err
}

func (hemi *HPElineupMallItem) TaggedMembers(ctx context.Context) (result []*HPMember, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = hemi.NamedTaggedMembers(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = hemi.Edges.TaggedMembersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = hemi.QueryTaggedMembers().All(ctx)
	}
	return result, err
}

func (hemi *HPElineupMallItem) PurchaseHistories(ctx context.Context) (result []*HPElineupMallItemPurchaseHistory, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = hemi.NamedPurchaseHistories(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = hemi.Edges.PurchaseHistoriesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = hemi.QueryPurchaseHistories().All(ctx)
	}
	return result, err
}

func (hemiph *HPElineupMallItemPurchaseHistory) ElineupMallItem(ctx context.Context) (*HPElineupMallItem, error) {
	result, err := hemiph.Edges.ElineupMallItemOrErr()
	if IsNotLoaded(err) {
		result, err = hemiph.QueryElineupMallItem().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (hemiph *HPElineupMallItemPurchaseHistory) Owner(ctx context.Context) (*User, error) {
	result, err := hemiph.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = hemiph.QueryOwner().Only(ctx)
	}
	return result, err
}

func (hfi *HPFeedItem) OwnerArtist(ctx context.Context) (*HPArtist, error) {
	result, err := hfi.Edges.OwnerArtistOrErr()
	if IsNotLoaded(err) {
		result, err = hfi.QueryOwnerArtist().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (hfi *HPFeedItem) OwnerMember(ctx context.Context) (*HPMember, error) {
	result, err := hfi.Edges.OwnerMemberOrErr()
	if IsNotLoaded(err) {
		result, err = hfi.QueryOwnerMember().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (hfi *HPFeedItem) TaggedArtists(ctx context.Context) (result []*HPArtist, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = hfi.NamedTaggedArtists(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = hfi.Edges.TaggedArtistsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = hfi.QueryTaggedArtists().All(ctx)
	}
	return result, err
}

func (hfi *HPFeedItem) TaggedMembers(ctx context.Context) (result []*HPMember, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = hfi.NamedTaggedMembers(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = hfi.Edges.TaggedMembersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = hfi.QueryTaggedMembers().All(ctx)
	}
	return result, err
}

func (hf *HPFollow) User(ctx context.Context) (*User, error) {
	result, err := hf.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = hf.QueryUser().Only(ctx)
	}
	return result, err
}

func (hf *HPFollow) Member(ctx context.Context) (*HPMember, error) {
	result, err := hf.Edges.MemberOrErr()
	if IsNotLoaded(err) {
		result, err = hf.QueryMember().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (hf *HPFollow) Artist(ctx context.Context) (*HPArtist, error) {
	result, err := hf.Edges.ArtistOrErr()
	if IsNotLoaded(err) {
		result, err = hf.QueryArtist().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (hip *HPIgPost) OwnerArtist(ctx context.Context) (*HPArtist, error) {
	result, err := hip.Edges.OwnerArtistOrErr()
	if IsNotLoaded(err) {
		result, err = hip.QueryOwnerArtist().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (hip *HPIgPost) OwnerMember(ctx context.Context) (*HPMember, error) {
	result, err := hip.Edges.OwnerMemberOrErr()
	if IsNotLoaded(err) {
		result, err = hip.QueryOwnerMember().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (hip *HPIgPost) TaggedArtists(ctx context.Context) (result []*HPArtist, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = hip.NamedTaggedArtists(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = hip.Edges.TaggedArtistsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = hip.QueryTaggedArtists().All(ctx)
	}
	return result, err
}

func (hip *HPIgPost) TaggedMembers(ctx context.Context) (result []*HPMember, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = hip.NamedTaggedMembers(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = hip.Edges.TaggedMembersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = hip.QueryTaggedMembers().All(ctx)
	}
	return result, err
}

func (hip *HPIgPost) Blobs(ctx context.Context) (result []*HPBlob, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = hip.NamedBlobs(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = hip.Edges.BlobsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = hip.QueryBlobs().All(ctx)
	}
	return result, err
}

func (hm *HPMember) Artist(ctx context.Context) (*HPArtist, error) {
	result, err := hm.Edges.ArtistOrErr()
	if IsNotLoaded(err) {
		result, err = hm.QueryArtist().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (hsh *HPSortHistory) Owner(ctx context.Context) (*User, error) {
	result, err := hsh.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = hsh.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (hvh *HPViewHistory) Feed(ctx context.Context) (*HPFeedItem, error) {
	result, err := hvh.Edges.FeedOrErr()
	if IsNotLoaded(err) {
		result, err = hvh.QueryFeed().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (u *User) Auth(ctx context.Context) (result []*Auth, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedAuth(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.AuthOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryAuth().All(ctx)
	}
	return result, err
}

func (u *User) NotificationSettings(ctx context.Context) (result []*UserNotificationSetting, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedNotificationSettings(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.NotificationSettingsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryNotificationSettings().All(ctx)
	}
	return result, err
}

func (u *User) HpviewHistory(ctx context.Context) (result []*HPViewHistory, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedHpviewHistory(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.HpviewHistoryOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryHpviewHistory().All(ctx)
	}
	return result, err
}

func (u *User) Hpfollow(ctx context.Context) (result []*HPFollow, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedHpfollow(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.HpfollowOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryHpfollow().All(ctx)
	}
	return result, err
}

func (u *User) HpsortHistory(ctx context.Context) (result []*HPSortHistory, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedHpsortHistory(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.HpsortHistoryOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryHpsortHistory().All(ctx)
	}
	return result, err
}

func (u *User) HpfcEventTickets(ctx context.Context) (result []*HPFCEventTicket, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedHpfcEventTickets(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.HpfcEventTicketsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryHpfcEventTickets().All(ctx)
	}
	return result, err
}

func (u *User) ElineupMallPurchaseHistories(ctx context.Context) (result []*HPElineupMallItemPurchaseHistory, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedElineupMallPurchaseHistories(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.ElineupMallPurchaseHistoriesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryElineupMallPurchaseHistories().All(ctx)
	}
	return result, err
}

func (uns *UserNotificationSetting) User(ctx context.Context) (*User, error) {
	result, err := uns.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = uns.QueryUser().Only(ctx)
	}
	return result, MaskNotFound(err)
}
