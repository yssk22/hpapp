// Code generated by ent, DO NOT EDIT.

package auth

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"hpapp.yssk22.dev/go/service/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Auth {
	return predicate.Auth(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Auth {
	return predicate.Auth(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Auth {
	return predicate.Auth(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Auth {
	return predicate.Auth(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Auth {
	return predicate.Auth(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Auth {
	return predicate.Auth(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Auth {
	return predicate.Auth(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Auth {
	return predicate.Auth(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Auth {
	return predicate.Auth(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldEQ(FieldUpdatedAt, v))
}

// ProviderName applies equality check predicate on the "provider_name" field. It's identical to ProviderNameEQ.
func ProviderName(v string) predicate.Auth {
	return predicate.Auth(sql.FieldEQ(FieldProviderName, v))
}

// ProviderUserID applies equality check predicate on the "provider_user_id" field. It's identical to ProviderUserIDEQ.
func ProviderUserID(v string) predicate.Auth {
	return predicate.Auth(sql.FieldEQ(FieldProviderUserID, v))
}

// AccessToken applies equality check predicate on the "access_token" field. It's identical to AccessTokenEQ.
func AccessToken(v string) predicate.Auth {
	return predicate.Auth(sql.FieldEQ(FieldAccessToken, v))
}

// RefreshToken applies equality check predicate on the "refresh_token" field. It's identical to RefreshTokenEQ.
func RefreshToken(v string) predicate.Auth {
	return predicate.Auth(sql.FieldEQ(FieldRefreshToken, v))
}

// ExpireAt applies equality check predicate on the "expire_at" field. It's identical to ExpireAtEQ.
func ExpireAt(v time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldEQ(FieldExpireAt, v))
}

// OwnerUserID applies equality check predicate on the "owner_user_id" field. It's identical to OwnerUserIDEQ.
func OwnerUserID(v int) predicate.Auth {
	return predicate.Auth(sql.FieldEQ(FieldOwnerUserID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.Auth {
	return predicate.Auth(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.Auth {
	return predicate.Auth(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Auth {
	return predicate.Auth(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Auth {
	return predicate.Auth(sql.FieldNotNull(FieldUpdatedAt))
}

// ProviderNameEQ applies the EQ predicate on the "provider_name" field.
func ProviderNameEQ(v string) predicate.Auth {
	return predicate.Auth(sql.FieldEQ(FieldProviderName, v))
}

// ProviderNameNEQ applies the NEQ predicate on the "provider_name" field.
func ProviderNameNEQ(v string) predicate.Auth {
	return predicate.Auth(sql.FieldNEQ(FieldProviderName, v))
}

// ProviderNameIn applies the In predicate on the "provider_name" field.
func ProviderNameIn(vs ...string) predicate.Auth {
	return predicate.Auth(sql.FieldIn(FieldProviderName, vs...))
}

// ProviderNameNotIn applies the NotIn predicate on the "provider_name" field.
func ProviderNameNotIn(vs ...string) predicate.Auth {
	return predicate.Auth(sql.FieldNotIn(FieldProviderName, vs...))
}

// ProviderNameGT applies the GT predicate on the "provider_name" field.
func ProviderNameGT(v string) predicate.Auth {
	return predicate.Auth(sql.FieldGT(FieldProviderName, v))
}

// ProviderNameGTE applies the GTE predicate on the "provider_name" field.
func ProviderNameGTE(v string) predicate.Auth {
	return predicate.Auth(sql.FieldGTE(FieldProviderName, v))
}

// ProviderNameLT applies the LT predicate on the "provider_name" field.
func ProviderNameLT(v string) predicate.Auth {
	return predicate.Auth(sql.FieldLT(FieldProviderName, v))
}

// ProviderNameLTE applies the LTE predicate on the "provider_name" field.
func ProviderNameLTE(v string) predicate.Auth {
	return predicate.Auth(sql.FieldLTE(FieldProviderName, v))
}

// ProviderNameContains applies the Contains predicate on the "provider_name" field.
func ProviderNameContains(v string) predicate.Auth {
	return predicate.Auth(sql.FieldContains(FieldProviderName, v))
}

// ProviderNameHasPrefix applies the HasPrefix predicate on the "provider_name" field.
func ProviderNameHasPrefix(v string) predicate.Auth {
	return predicate.Auth(sql.FieldHasPrefix(FieldProviderName, v))
}

// ProviderNameHasSuffix applies the HasSuffix predicate on the "provider_name" field.
func ProviderNameHasSuffix(v string) predicate.Auth {
	return predicate.Auth(sql.FieldHasSuffix(FieldProviderName, v))
}

// ProviderNameEqualFold applies the EqualFold predicate on the "provider_name" field.
func ProviderNameEqualFold(v string) predicate.Auth {
	return predicate.Auth(sql.FieldEqualFold(FieldProviderName, v))
}

// ProviderNameContainsFold applies the ContainsFold predicate on the "provider_name" field.
func ProviderNameContainsFold(v string) predicate.Auth {
	return predicate.Auth(sql.FieldContainsFold(FieldProviderName, v))
}

// ProviderUserIDEQ applies the EQ predicate on the "provider_user_id" field.
func ProviderUserIDEQ(v string) predicate.Auth {
	return predicate.Auth(sql.FieldEQ(FieldProviderUserID, v))
}

// ProviderUserIDNEQ applies the NEQ predicate on the "provider_user_id" field.
func ProviderUserIDNEQ(v string) predicate.Auth {
	return predicate.Auth(sql.FieldNEQ(FieldProviderUserID, v))
}

// ProviderUserIDIn applies the In predicate on the "provider_user_id" field.
func ProviderUserIDIn(vs ...string) predicate.Auth {
	return predicate.Auth(sql.FieldIn(FieldProviderUserID, vs...))
}

// ProviderUserIDNotIn applies the NotIn predicate on the "provider_user_id" field.
func ProviderUserIDNotIn(vs ...string) predicate.Auth {
	return predicate.Auth(sql.FieldNotIn(FieldProviderUserID, vs...))
}

// ProviderUserIDGT applies the GT predicate on the "provider_user_id" field.
func ProviderUserIDGT(v string) predicate.Auth {
	return predicate.Auth(sql.FieldGT(FieldProviderUserID, v))
}

// ProviderUserIDGTE applies the GTE predicate on the "provider_user_id" field.
func ProviderUserIDGTE(v string) predicate.Auth {
	return predicate.Auth(sql.FieldGTE(FieldProviderUserID, v))
}

// ProviderUserIDLT applies the LT predicate on the "provider_user_id" field.
func ProviderUserIDLT(v string) predicate.Auth {
	return predicate.Auth(sql.FieldLT(FieldProviderUserID, v))
}

// ProviderUserIDLTE applies the LTE predicate on the "provider_user_id" field.
func ProviderUserIDLTE(v string) predicate.Auth {
	return predicate.Auth(sql.FieldLTE(FieldProviderUserID, v))
}

// ProviderUserIDContains applies the Contains predicate on the "provider_user_id" field.
func ProviderUserIDContains(v string) predicate.Auth {
	return predicate.Auth(sql.FieldContains(FieldProviderUserID, v))
}

// ProviderUserIDHasPrefix applies the HasPrefix predicate on the "provider_user_id" field.
func ProviderUserIDHasPrefix(v string) predicate.Auth {
	return predicate.Auth(sql.FieldHasPrefix(FieldProviderUserID, v))
}

// ProviderUserIDHasSuffix applies the HasSuffix predicate on the "provider_user_id" field.
func ProviderUserIDHasSuffix(v string) predicate.Auth {
	return predicate.Auth(sql.FieldHasSuffix(FieldProviderUserID, v))
}

// ProviderUserIDEqualFold applies the EqualFold predicate on the "provider_user_id" field.
func ProviderUserIDEqualFold(v string) predicate.Auth {
	return predicate.Auth(sql.FieldEqualFold(FieldProviderUserID, v))
}

// ProviderUserIDContainsFold applies the ContainsFold predicate on the "provider_user_id" field.
func ProviderUserIDContainsFold(v string) predicate.Auth {
	return predicate.Auth(sql.FieldContainsFold(FieldProviderUserID, v))
}

// AccessTokenEQ applies the EQ predicate on the "access_token" field.
func AccessTokenEQ(v string) predicate.Auth {
	return predicate.Auth(sql.FieldEQ(FieldAccessToken, v))
}

// AccessTokenNEQ applies the NEQ predicate on the "access_token" field.
func AccessTokenNEQ(v string) predicate.Auth {
	return predicate.Auth(sql.FieldNEQ(FieldAccessToken, v))
}

// AccessTokenIn applies the In predicate on the "access_token" field.
func AccessTokenIn(vs ...string) predicate.Auth {
	return predicate.Auth(sql.FieldIn(FieldAccessToken, vs...))
}

// AccessTokenNotIn applies the NotIn predicate on the "access_token" field.
func AccessTokenNotIn(vs ...string) predicate.Auth {
	return predicate.Auth(sql.FieldNotIn(FieldAccessToken, vs...))
}

// AccessTokenGT applies the GT predicate on the "access_token" field.
func AccessTokenGT(v string) predicate.Auth {
	return predicate.Auth(sql.FieldGT(FieldAccessToken, v))
}

// AccessTokenGTE applies the GTE predicate on the "access_token" field.
func AccessTokenGTE(v string) predicate.Auth {
	return predicate.Auth(sql.FieldGTE(FieldAccessToken, v))
}

// AccessTokenLT applies the LT predicate on the "access_token" field.
func AccessTokenLT(v string) predicate.Auth {
	return predicate.Auth(sql.FieldLT(FieldAccessToken, v))
}

// AccessTokenLTE applies the LTE predicate on the "access_token" field.
func AccessTokenLTE(v string) predicate.Auth {
	return predicate.Auth(sql.FieldLTE(FieldAccessToken, v))
}

// AccessTokenContains applies the Contains predicate on the "access_token" field.
func AccessTokenContains(v string) predicate.Auth {
	return predicate.Auth(sql.FieldContains(FieldAccessToken, v))
}

// AccessTokenHasPrefix applies the HasPrefix predicate on the "access_token" field.
func AccessTokenHasPrefix(v string) predicate.Auth {
	return predicate.Auth(sql.FieldHasPrefix(FieldAccessToken, v))
}

// AccessTokenHasSuffix applies the HasSuffix predicate on the "access_token" field.
func AccessTokenHasSuffix(v string) predicate.Auth {
	return predicate.Auth(sql.FieldHasSuffix(FieldAccessToken, v))
}

// AccessTokenEqualFold applies the EqualFold predicate on the "access_token" field.
func AccessTokenEqualFold(v string) predicate.Auth {
	return predicate.Auth(sql.FieldEqualFold(FieldAccessToken, v))
}

// AccessTokenContainsFold applies the ContainsFold predicate on the "access_token" field.
func AccessTokenContainsFold(v string) predicate.Auth {
	return predicate.Auth(sql.FieldContainsFold(FieldAccessToken, v))
}

// RefreshTokenEQ applies the EQ predicate on the "refresh_token" field.
func RefreshTokenEQ(v string) predicate.Auth {
	return predicate.Auth(sql.FieldEQ(FieldRefreshToken, v))
}

// RefreshTokenNEQ applies the NEQ predicate on the "refresh_token" field.
func RefreshTokenNEQ(v string) predicate.Auth {
	return predicate.Auth(sql.FieldNEQ(FieldRefreshToken, v))
}

// RefreshTokenIn applies the In predicate on the "refresh_token" field.
func RefreshTokenIn(vs ...string) predicate.Auth {
	return predicate.Auth(sql.FieldIn(FieldRefreshToken, vs...))
}

// RefreshTokenNotIn applies the NotIn predicate on the "refresh_token" field.
func RefreshTokenNotIn(vs ...string) predicate.Auth {
	return predicate.Auth(sql.FieldNotIn(FieldRefreshToken, vs...))
}

// RefreshTokenGT applies the GT predicate on the "refresh_token" field.
func RefreshTokenGT(v string) predicate.Auth {
	return predicate.Auth(sql.FieldGT(FieldRefreshToken, v))
}

// RefreshTokenGTE applies the GTE predicate on the "refresh_token" field.
func RefreshTokenGTE(v string) predicate.Auth {
	return predicate.Auth(sql.FieldGTE(FieldRefreshToken, v))
}

// RefreshTokenLT applies the LT predicate on the "refresh_token" field.
func RefreshTokenLT(v string) predicate.Auth {
	return predicate.Auth(sql.FieldLT(FieldRefreshToken, v))
}

// RefreshTokenLTE applies the LTE predicate on the "refresh_token" field.
func RefreshTokenLTE(v string) predicate.Auth {
	return predicate.Auth(sql.FieldLTE(FieldRefreshToken, v))
}

// RefreshTokenContains applies the Contains predicate on the "refresh_token" field.
func RefreshTokenContains(v string) predicate.Auth {
	return predicate.Auth(sql.FieldContains(FieldRefreshToken, v))
}

// RefreshTokenHasPrefix applies the HasPrefix predicate on the "refresh_token" field.
func RefreshTokenHasPrefix(v string) predicate.Auth {
	return predicate.Auth(sql.FieldHasPrefix(FieldRefreshToken, v))
}

// RefreshTokenHasSuffix applies the HasSuffix predicate on the "refresh_token" field.
func RefreshTokenHasSuffix(v string) predicate.Auth {
	return predicate.Auth(sql.FieldHasSuffix(FieldRefreshToken, v))
}

// RefreshTokenIsNil applies the IsNil predicate on the "refresh_token" field.
func RefreshTokenIsNil() predicate.Auth {
	return predicate.Auth(sql.FieldIsNull(FieldRefreshToken))
}

// RefreshTokenNotNil applies the NotNil predicate on the "refresh_token" field.
func RefreshTokenNotNil() predicate.Auth {
	return predicate.Auth(sql.FieldNotNull(FieldRefreshToken))
}

// RefreshTokenEqualFold applies the EqualFold predicate on the "refresh_token" field.
func RefreshTokenEqualFold(v string) predicate.Auth {
	return predicate.Auth(sql.FieldEqualFold(FieldRefreshToken, v))
}

// RefreshTokenContainsFold applies the ContainsFold predicate on the "refresh_token" field.
func RefreshTokenContainsFold(v string) predicate.Auth {
	return predicate.Auth(sql.FieldContainsFold(FieldRefreshToken, v))
}

// ExpireAtEQ applies the EQ predicate on the "expire_at" field.
func ExpireAtEQ(v time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldEQ(FieldExpireAt, v))
}

// ExpireAtNEQ applies the NEQ predicate on the "expire_at" field.
func ExpireAtNEQ(v time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldNEQ(FieldExpireAt, v))
}

// ExpireAtIn applies the In predicate on the "expire_at" field.
func ExpireAtIn(vs ...time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldIn(FieldExpireAt, vs...))
}

// ExpireAtNotIn applies the NotIn predicate on the "expire_at" field.
func ExpireAtNotIn(vs ...time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldNotIn(FieldExpireAt, vs...))
}

// ExpireAtGT applies the GT predicate on the "expire_at" field.
func ExpireAtGT(v time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldGT(FieldExpireAt, v))
}

// ExpireAtGTE applies the GTE predicate on the "expire_at" field.
func ExpireAtGTE(v time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldGTE(FieldExpireAt, v))
}

// ExpireAtLT applies the LT predicate on the "expire_at" field.
func ExpireAtLT(v time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldLT(FieldExpireAt, v))
}

// ExpireAtLTE applies the LTE predicate on the "expire_at" field.
func ExpireAtLTE(v time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldLTE(FieldExpireAt, v))
}

// ExpireAtIsNil applies the IsNil predicate on the "expire_at" field.
func ExpireAtIsNil() predicate.Auth {
	return predicate.Auth(sql.FieldIsNull(FieldExpireAt))
}

// ExpireAtNotNil applies the NotNil predicate on the "expire_at" field.
func ExpireAtNotNil() predicate.Auth {
	return predicate.Auth(sql.FieldNotNull(FieldExpireAt))
}

// ScopeIsNil applies the IsNil predicate on the "scope" field.
func ScopeIsNil() predicate.Auth {
	return predicate.Auth(sql.FieldIsNull(FieldScope))
}

// ScopeNotNil applies the NotNil predicate on the "scope" field.
func ScopeNotNil() predicate.Auth {
	return predicate.Auth(sql.FieldNotNull(FieldScope))
}

// OwnerUserIDEQ applies the EQ predicate on the "owner_user_id" field.
func OwnerUserIDEQ(v int) predicate.Auth {
	return predicate.Auth(sql.FieldEQ(FieldOwnerUserID, v))
}

// OwnerUserIDNEQ applies the NEQ predicate on the "owner_user_id" field.
func OwnerUserIDNEQ(v int) predicate.Auth {
	return predicate.Auth(sql.FieldNEQ(FieldOwnerUserID, v))
}

// OwnerUserIDIn applies the In predicate on the "owner_user_id" field.
func OwnerUserIDIn(vs ...int) predicate.Auth {
	return predicate.Auth(sql.FieldIn(FieldOwnerUserID, vs...))
}

// OwnerUserIDNotIn applies the NotIn predicate on the "owner_user_id" field.
func OwnerUserIDNotIn(vs ...int) predicate.Auth {
	return predicate.Auth(sql.FieldNotIn(FieldOwnerUserID, vs...))
}

// OwnerUserIDIsNil applies the IsNil predicate on the "owner_user_id" field.
func OwnerUserIDIsNil() predicate.Auth {
	return predicate.Auth(sql.FieldIsNull(FieldOwnerUserID))
}

// OwnerUserIDNotNil applies the NotNil predicate on the "owner_user_id" field.
func OwnerUserIDNotNil() predicate.Auth {
	return predicate.Auth(sql.FieldNotNull(FieldOwnerUserID))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Auth {
	return predicate.Auth(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Auth {
	return predicate.Auth(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Auth) predicate.Auth {
	return predicate.Auth(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Auth) predicate.Auth {
	return predicate.Auth(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Auth) predicate.Auth {
	return predicate.Auth(func(s *sql.Selector) {
		p(s.Not())
	})
}
