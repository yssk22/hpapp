// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yssk22/hpapp/go/service/ent/hpartist"
	"github.com/yssk22/hpapp/go/service/ent/hpelineupmallitem"
	"github.com/yssk22/hpapp/go/service/ent/hpmember"
	"github.com/yssk22/hpapp/go/service/schema/enums"
	"github.com/yssk22/hpapp/go/service/schema/jsonfields"
)

// HPElineupMallItemCreate is the builder for creating a HPElineupMallItem entity.
type HPElineupMallItemCreate struct {
	config
	mutation *HPElineupMallItemMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCrawledAt sets the "crawled_at" field.
func (hemic *HPElineupMallItemCreate) SetCrawledAt(t time.Time) *HPElineupMallItemCreate {
	hemic.mutation.SetCrawledAt(t)
	return hemic
}

// SetNillableCrawledAt sets the "crawled_at" field if the given value is not nil.
func (hemic *HPElineupMallItemCreate) SetNillableCrawledAt(t *time.Time) *HPElineupMallItemCreate {
	if t != nil {
		hemic.SetCrawledAt(*t)
	}
	return hemic
}

// SetErrorCount sets the "error_count" field.
func (hemic *HPElineupMallItemCreate) SetErrorCount(i int) *HPElineupMallItemCreate {
	hemic.mutation.SetErrorCount(i)
	return hemic
}

// SetNillableErrorCount sets the "error_count" field if the given value is not nil.
func (hemic *HPElineupMallItemCreate) SetNillableErrorCount(i *int) *HPElineupMallItemCreate {
	if i != nil {
		hemic.SetErrorCount(*i)
	}
	return hemic
}

// SetManuallyModified sets the "manually_modified" field.
func (hemic *HPElineupMallItemCreate) SetManuallyModified(jm *jsonfields.ManuallyModified) *HPElineupMallItemCreate {
	hemic.mutation.SetManuallyModified(jm)
	return hemic
}

// SetLastErrorMessage sets the "last_error_message" field.
func (hemic *HPElineupMallItemCreate) SetLastErrorMessage(s string) *HPElineupMallItemCreate {
	hemic.mutation.SetLastErrorMessage(s)
	return hemic
}

// SetNillableLastErrorMessage sets the "last_error_message" field if the given value is not nil.
func (hemic *HPElineupMallItemCreate) SetNillableLastErrorMessage(s *string) *HPElineupMallItemCreate {
	if s != nil {
		hemic.SetLastErrorMessage(*s)
	}
	return hemic
}

// SetRecrawlRequired sets the "recrawl_required" field.
func (hemic *HPElineupMallItemCreate) SetRecrawlRequired(b bool) *HPElineupMallItemCreate {
	hemic.mutation.SetRecrawlRequired(b)
	return hemic
}

// SetNillableRecrawlRequired sets the "recrawl_required" field if the given value is not nil.
func (hemic *HPElineupMallItemCreate) SetNillableRecrawlRequired(b *bool) *HPElineupMallItemCreate {
	if b != nil {
		hemic.SetRecrawlRequired(*b)
	}
	return hemic
}

// SetCreatedAt sets the "created_at" field.
func (hemic *HPElineupMallItemCreate) SetCreatedAt(t time.Time) *HPElineupMallItemCreate {
	hemic.mutation.SetCreatedAt(t)
	return hemic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (hemic *HPElineupMallItemCreate) SetNillableCreatedAt(t *time.Time) *HPElineupMallItemCreate {
	if t != nil {
		hemic.SetCreatedAt(*t)
	}
	return hemic
}

// SetUpdatedAt sets the "updated_at" field.
func (hemic *HPElineupMallItemCreate) SetUpdatedAt(t time.Time) *HPElineupMallItemCreate {
	hemic.mutation.SetUpdatedAt(t)
	return hemic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (hemic *HPElineupMallItemCreate) SetNillableUpdatedAt(t *time.Time) *HPElineupMallItemCreate {
	if t != nil {
		hemic.SetUpdatedAt(*t)
	}
	return hemic
}

// SetPermalink sets the "permalink" field.
func (hemic *HPElineupMallItemCreate) SetPermalink(s string) *HPElineupMallItemCreate {
	hemic.mutation.SetPermalink(s)
	return hemic
}

// SetName sets the "name" field.
func (hemic *HPElineupMallItemCreate) SetName(s string) *HPElineupMallItemCreate {
	hemic.mutation.SetName(s)
	return hemic
}

// SetDescription sets the "description" field.
func (hemic *HPElineupMallItemCreate) SetDescription(s string) *HPElineupMallItemCreate {
	hemic.mutation.SetDescription(s)
	return hemic
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (hemic *HPElineupMallItemCreate) SetNillableDescription(s *string) *HPElineupMallItemCreate {
	if s != nil {
		hemic.SetDescription(*s)
	}
	return hemic
}

// SetSupplier sets the "supplier" field.
func (hemic *HPElineupMallItemCreate) SetSupplier(s string) *HPElineupMallItemCreate {
	hemic.mutation.SetSupplier(s)
	return hemic
}

// SetPrice sets the "price" field.
func (hemic *HPElineupMallItemCreate) SetPrice(i int) *HPElineupMallItemCreate {
	hemic.mutation.SetPrice(i)
	return hemic
}

// SetIsLimitedToFc sets the "is_limited_to_fc" field.
func (hemic *HPElineupMallItemCreate) SetIsLimitedToFc(b bool) *HPElineupMallItemCreate {
	hemic.mutation.SetIsLimitedToFc(b)
	return hemic
}

// SetIsOutOfStock sets the "is_out_of_stock" field.
func (hemic *HPElineupMallItemCreate) SetIsOutOfStock(b bool) *HPElineupMallItemCreate {
	hemic.mutation.SetIsOutOfStock(b)
	return hemic
}

// SetImages sets the "images" field.
func (hemic *HPElineupMallItemCreate) SetImages(j []jsonfields.Media) *HPElineupMallItemCreate {
	hemic.mutation.SetImages(j)
	return hemic
}

// SetCategory sets the "category" field.
func (hemic *HPElineupMallItemCreate) SetCategory(eemic enums.HPElineupMallItemCategory) *HPElineupMallItemCreate {
	hemic.mutation.SetCategory(eemic)
	return hemic
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (hemic *HPElineupMallItemCreate) SetNillableCategory(eemic *enums.HPElineupMallItemCategory) *HPElineupMallItemCreate {
	if eemic != nil {
		hemic.SetCategory(*eemic)
	}
	return hemic
}

// SetOrderStartAt sets the "order_start_at" field.
func (hemic *HPElineupMallItemCreate) SetOrderStartAt(t time.Time) *HPElineupMallItemCreate {
	hemic.mutation.SetOrderStartAt(t)
	return hemic
}

// SetNillableOrderStartAt sets the "order_start_at" field if the given value is not nil.
func (hemic *HPElineupMallItemCreate) SetNillableOrderStartAt(t *time.Time) *HPElineupMallItemCreate {
	if t != nil {
		hemic.SetOrderStartAt(*t)
	}
	return hemic
}

// SetOrderEndAt sets the "order_end_at" field.
func (hemic *HPElineupMallItemCreate) SetOrderEndAt(t time.Time) *HPElineupMallItemCreate {
	hemic.mutation.SetOrderEndAt(t)
	return hemic
}

// SetNillableOrderEndAt sets the "order_end_at" field if the given value is not nil.
func (hemic *HPElineupMallItemCreate) SetNillableOrderEndAt(t *time.Time) *HPElineupMallItemCreate {
	if t != nil {
		hemic.SetOrderEndAt(*t)
	}
	return hemic
}

// AddTaggedArtistIDs adds the "tagged_artists" edge to the HPArtist entity by IDs.
func (hemic *HPElineupMallItemCreate) AddTaggedArtistIDs(ids ...int) *HPElineupMallItemCreate {
	hemic.mutation.AddTaggedArtistIDs(ids...)
	return hemic
}

// AddTaggedArtists adds the "tagged_artists" edges to the HPArtist entity.
func (hemic *HPElineupMallItemCreate) AddTaggedArtists(h ...*HPArtist) *HPElineupMallItemCreate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hemic.AddTaggedArtistIDs(ids...)
}

// AddTaggedMemberIDs adds the "tagged_members" edge to the HPMember entity by IDs.
func (hemic *HPElineupMallItemCreate) AddTaggedMemberIDs(ids ...int) *HPElineupMallItemCreate {
	hemic.mutation.AddTaggedMemberIDs(ids...)
	return hemic
}

// AddTaggedMembers adds the "tagged_members" edges to the HPMember entity.
func (hemic *HPElineupMallItemCreate) AddTaggedMembers(h ...*HPMember) *HPElineupMallItemCreate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hemic.AddTaggedMemberIDs(ids...)
}

// Mutation returns the HPElineupMallItemMutation object of the builder.
func (hemic *HPElineupMallItemCreate) Mutation() *HPElineupMallItemMutation {
	return hemic.mutation
}

// Save creates the HPElineupMallItem in the database.
func (hemic *HPElineupMallItemCreate) Save(ctx context.Context) (*HPElineupMallItem, error) {
	if err := hemic.defaults(); err != nil {
		return nil, err
	}
	return withHooks[*HPElineupMallItem, HPElineupMallItemMutation](ctx, hemic.sqlSave, hemic.mutation, hemic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (hemic *HPElineupMallItemCreate) SaveX(ctx context.Context) *HPElineupMallItem {
	v, err := hemic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hemic *HPElineupMallItemCreate) Exec(ctx context.Context) error {
	_, err := hemic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hemic *HPElineupMallItemCreate) ExecX(ctx context.Context) {
	if err := hemic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hemic *HPElineupMallItemCreate) defaults() error {
	if _, ok := hemic.mutation.ErrorCount(); !ok {
		v := hpelineupmallitem.DefaultErrorCount
		hemic.mutation.SetErrorCount(v)
	}
	if _, ok := hemic.mutation.RecrawlRequired(); !ok {
		v := hpelineupmallitem.DefaultRecrawlRequired
		hemic.mutation.SetRecrawlRequired(v)
	}
	if _, ok := hemic.mutation.Description(); !ok {
		v := hpelineupmallitem.DefaultDescription
		hemic.mutation.SetDescription(v)
	}
	if _, ok := hemic.mutation.Category(); !ok {
		v := hpelineupmallitem.DefaultCategory
		hemic.mutation.SetCategory(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (hemic *HPElineupMallItemCreate) check() error {
	if _, ok := hemic.mutation.ErrorCount(); !ok {
		return &ValidationError{Name: "error_count", err: errors.New(`ent: missing required field "HPElineupMallItem.error_count"`)}
	}
	if _, ok := hemic.mutation.Permalink(); !ok {
		return &ValidationError{Name: "permalink", err: errors.New(`ent: missing required field "HPElineupMallItem.permalink"`)}
	}
	if _, ok := hemic.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "HPElineupMallItem.name"`)}
	}
	if _, ok := hemic.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "HPElineupMallItem.description"`)}
	}
	if _, ok := hemic.mutation.Supplier(); !ok {
		return &ValidationError{Name: "supplier", err: errors.New(`ent: missing required field "HPElineupMallItem.supplier"`)}
	}
	if _, ok := hemic.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "HPElineupMallItem.price"`)}
	}
	if _, ok := hemic.mutation.IsLimitedToFc(); !ok {
		return &ValidationError{Name: "is_limited_to_fc", err: errors.New(`ent: missing required field "HPElineupMallItem.is_limited_to_fc"`)}
	}
	if _, ok := hemic.mutation.IsOutOfStock(); !ok {
		return &ValidationError{Name: "is_out_of_stock", err: errors.New(`ent: missing required field "HPElineupMallItem.is_out_of_stock"`)}
	}
	if _, ok := hemic.mutation.Images(); !ok {
		return &ValidationError{Name: "images", err: errors.New(`ent: missing required field "HPElineupMallItem.images"`)}
	}
	if _, ok := hemic.mutation.Category(); !ok {
		return &ValidationError{Name: "category", err: errors.New(`ent: missing required field "HPElineupMallItem.category"`)}
	}
	if v, ok := hemic.mutation.Category(); ok {
		if err := hpelineupmallitem.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "HPElineupMallItem.category": %w`, err)}
		}
	}
	return nil
}

func (hemic *HPElineupMallItemCreate) sqlSave(ctx context.Context) (*HPElineupMallItem, error) {
	if err := hemic.check(); err != nil {
		return nil, err
	}
	_node, _spec := hemic.createSpec()
	if err := sqlgraph.CreateNode(ctx, hemic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	hemic.mutation.id = &_node.ID
	hemic.mutation.done = true
	return _node, nil
}

func (hemic *HPElineupMallItemCreate) createSpec() (*HPElineupMallItem, *sqlgraph.CreateSpec) {
	var (
		_node = &HPElineupMallItem{config: hemic.config}
		_spec = sqlgraph.NewCreateSpec(hpelineupmallitem.Table, sqlgraph.NewFieldSpec(hpelineupmallitem.FieldID, field.TypeInt))
	)
	_spec.OnConflict = hemic.conflict
	if value, ok := hemic.mutation.CrawledAt(); ok {
		_spec.SetField(hpelineupmallitem.FieldCrawledAt, field.TypeTime, value)
		_node.CrawledAt = &value
	}
	if value, ok := hemic.mutation.ErrorCount(); ok {
		_spec.SetField(hpelineupmallitem.FieldErrorCount, field.TypeInt, value)
		_node.ErrorCount = value
	}
	if value, ok := hemic.mutation.ManuallyModified(); ok {
		_spec.SetField(hpelineupmallitem.FieldManuallyModified, field.TypeJSON, value)
		_node.ManuallyModified = value
	}
	if value, ok := hemic.mutation.LastErrorMessage(); ok {
		_spec.SetField(hpelineupmallitem.FieldLastErrorMessage, field.TypeString, value)
		_node.LastErrorMessage = &value
	}
	if value, ok := hemic.mutation.RecrawlRequired(); ok {
		_spec.SetField(hpelineupmallitem.FieldRecrawlRequired, field.TypeBool, value)
		_node.RecrawlRequired = value
	}
	if value, ok := hemic.mutation.CreatedAt(); ok {
		_spec.SetField(hpelineupmallitem.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := hemic.mutation.UpdatedAt(); ok {
		_spec.SetField(hpelineupmallitem.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := hemic.mutation.Permalink(); ok {
		_spec.SetField(hpelineupmallitem.FieldPermalink, field.TypeString, value)
		_node.Permalink = value
	}
	if value, ok := hemic.mutation.Name(); ok {
		_spec.SetField(hpelineupmallitem.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := hemic.mutation.Description(); ok {
		_spec.SetField(hpelineupmallitem.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := hemic.mutation.Supplier(); ok {
		_spec.SetField(hpelineupmallitem.FieldSupplier, field.TypeString, value)
		_node.Supplier = value
	}
	if value, ok := hemic.mutation.Price(); ok {
		_spec.SetField(hpelineupmallitem.FieldPrice, field.TypeInt, value)
		_node.Price = value
	}
	if value, ok := hemic.mutation.IsLimitedToFc(); ok {
		_spec.SetField(hpelineupmallitem.FieldIsLimitedToFc, field.TypeBool, value)
		_node.IsLimitedToFc = value
	}
	if value, ok := hemic.mutation.IsOutOfStock(); ok {
		_spec.SetField(hpelineupmallitem.FieldIsOutOfStock, field.TypeBool, value)
		_node.IsOutOfStock = value
	}
	if value, ok := hemic.mutation.Images(); ok {
		_spec.SetField(hpelineupmallitem.FieldImages, field.TypeJSON, value)
		_node.Images = value
	}
	if value, ok := hemic.mutation.Category(); ok {
		_spec.SetField(hpelineupmallitem.FieldCategory, field.TypeEnum, value)
		_node.Category = value
	}
	if value, ok := hemic.mutation.OrderStartAt(); ok {
		_spec.SetField(hpelineupmallitem.FieldOrderStartAt, field.TypeTime, value)
		_node.OrderStartAt = &value
	}
	if value, ok := hemic.mutation.OrderEndAt(); ok {
		_spec.SetField(hpelineupmallitem.FieldOrderEndAt, field.TypeTime, value)
		_node.OrderEndAt = &value
	}
	if nodes := hemic.mutation.TaggedArtistsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpelineupmallitem.TaggedArtistsTable,
			Columns: hpelineupmallitem.TaggedArtistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpartist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hemic.mutation.TaggedMembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpelineupmallitem.TaggedMembersTable,
			Columns: hpelineupmallitem.TaggedMembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.HPElineupMallItem.Create().
//		SetCrawledAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.HPElineupMallItemUpsert) {
//			SetCrawledAt(v+v).
//		}).
//		Exec(ctx)
func (hemic *HPElineupMallItemCreate) OnConflict(opts ...sql.ConflictOption) *HPElineupMallItemUpsertOne {
	hemic.conflict = opts
	return &HPElineupMallItemUpsertOne{
		create: hemic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.HPElineupMallItem.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (hemic *HPElineupMallItemCreate) OnConflictColumns(columns ...string) *HPElineupMallItemUpsertOne {
	hemic.conflict = append(hemic.conflict, sql.ConflictColumns(columns...))
	return &HPElineupMallItemUpsertOne{
		create: hemic,
	}
}

type (
	// HPElineupMallItemUpsertOne is the builder for "upsert"-ing
	//  one HPElineupMallItem node.
	HPElineupMallItemUpsertOne struct {
		create *HPElineupMallItemCreate
	}

	// HPElineupMallItemUpsert is the "OnConflict" setter.
	HPElineupMallItemUpsert struct {
		*sql.UpdateSet
	}
)

// SetCrawledAt sets the "crawled_at" field.
func (u *HPElineupMallItemUpsert) SetCrawledAt(v time.Time) *HPElineupMallItemUpsert {
	u.Set(hpelineupmallitem.FieldCrawledAt, v)
	return u
}

// UpdateCrawledAt sets the "crawled_at" field to the value that was provided on create.
func (u *HPElineupMallItemUpsert) UpdateCrawledAt() *HPElineupMallItemUpsert {
	u.SetExcluded(hpelineupmallitem.FieldCrawledAt)
	return u
}

// ClearCrawledAt clears the value of the "crawled_at" field.
func (u *HPElineupMallItemUpsert) ClearCrawledAt() *HPElineupMallItemUpsert {
	u.SetNull(hpelineupmallitem.FieldCrawledAt)
	return u
}

// SetErrorCount sets the "error_count" field.
func (u *HPElineupMallItemUpsert) SetErrorCount(v int) *HPElineupMallItemUpsert {
	u.Set(hpelineupmallitem.FieldErrorCount, v)
	return u
}

// UpdateErrorCount sets the "error_count" field to the value that was provided on create.
func (u *HPElineupMallItemUpsert) UpdateErrorCount() *HPElineupMallItemUpsert {
	u.SetExcluded(hpelineupmallitem.FieldErrorCount)
	return u
}

// AddErrorCount adds v to the "error_count" field.
func (u *HPElineupMallItemUpsert) AddErrorCount(v int) *HPElineupMallItemUpsert {
	u.Add(hpelineupmallitem.FieldErrorCount, v)
	return u
}

// SetManuallyModified sets the "manually_modified" field.
func (u *HPElineupMallItemUpsert) SetManuallyModified(v *jsonfields.ManuallyModified) *HPElineupMallItemUpsert {
	u.Set(hpelineupmallitem.FieldManuallyModified, v)
	return u
}

// UpdateManuallyModified sets the "manually_modified" field to the value that was provided on create.
func (u *HPElineupMallItemUpsert) UpdateManuallyModified() *HPElineupMallItemUpsert {
	u.SetExcluded(hpelineupmallitem.FieldManuallyModified)
	return u
}

// ClearManuallyModified clears the value of the "manually_modified" field.
func (u *HPElineupMallItemUpsert) ClearManuallyModified() *HPElineupMallItemUpsert {
	u.SetNull(hpelineupmallitem.FieldManuallyModified)
	return u
}

// SetLastErrorMessage sets the "last_error_message" field.
func (u *HPElineupMallItemUpsert) SetLastErrorMessage(v string) *HPElineupMallItemUpsert {
	u.Set(hpelineupmallitem.FieldLastErrorMessage, v)
	return u
}

// UpdateLastErrorMessage sets the "last_error_message" field to the value that was provided on create.
func (u *HPElineupMallItemUpsert) UpdateLastErrorMessage() *HPElineupMallItemUpsert {
	u.SetExcluded(hpelineupmallitem.FieldLastErrorMessage)
	return u
}

// ClearLastErrorMessage clears the value of the "last_error_message" field.
func (u *HPElineupMallItemUpsert) ClearLastErrorMessage() *HPElineupMallItemUpsert {
	u.SetNull(hpelineupmallitem.FieldLastErrorMessage)
	return u
}

// SetRecrawlRequired sets the "recrawl_required" field.
func (u *HPElineupMallItemUpsert) SetRecrawlRequired(v bool) *HPElineupMallItemUpsert {
	u.Set(hpelineupmallitem.FieldRecrawlRequired, v)
	return u
}

// UpdateRecrawlRequired sets the "recrawl_required" field to the value that was provided on create.
func (u *HPElineupMallItemUpsert) UpdateRecrawlRequired() *HPElineupMallItemUpsert {
	u.SetExcluded(hpelineupmallitem.FieldRecrawlRequired)
	return u
}

// ClearRecrawlRequired clears the value of the "recrawl_required" field.
func (u *HPElineupMallItemUpsert) ClearRecrawlRequired() *HPElineupMallItemUpsert {
	u.SetNull(hpelineupmallitem.FieldRecrawlRequired)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *HPElineupMallItemUpsert) SetUpdatedAt(v time.Time) *HPElineupMallItemUpsert {
	u.Set(hpelineupmallitem.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *HPElineupMallItemUpsert) UpdateUpdatedAt() *HPElineupMallItemUpsert {
	u.SetExcluded(hpelineupmallitem.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *HPElineupMallItemUpsert) ClearUpdatedAt() *HPElineupMallItemUpsert {
	u.SetNull(hpelineupmallitem.FieldUpdatedAt)
	return u
}

// SetPermalink sets the "permalink" field.
func (u *HPElineupMallItemUpsert) SetPermalink(v string) *HPElineupMallItemUpsert {
	u.Set(hpelineupmallitem.FieldPermalink, v)
	return u
}

// UpdatePermalink sets the "permalink" field to the value that was provided on create.
func (u *HPElineupMallItemUpsert) UpdatePermalink() *HPElineupMallItemUpsert {
	u.SetExcluded(hpelineupmallitem.FieldPermalink)
	return u
}

// SetName sets the "name" field.
func (u *HPElineupMallItemUpsert) SetName(v string) *HPElineupMallItemUpsert {
	u.Set(hpelineupmallitem.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *HPElineupMallItemUpsert) UpdateName() *HPElineupMallItemUpsert {
	u.SetExcluded(hpelineupmallitem.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *HPElineupMallItemUpsert) SetDescription(v string) *HPElineupMallItemUpsert {
	u.Set(hpelineupmallitem.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *HPElineupMallItemUpsert) UpdateDescription() *HPElineupMallItemUpsert {
	u.SetExcluded(hpelineupmallitem.FieldDescription)
	return u
}

// SetSupplier sets the "supplier" field.
func (u *HPElineupMallItemUpsert) SetSupplier(v string) *HPElineupMallItemUpsert {
	u.Set(hpelineupmallitem.FieldSupplier, v)
	return u
}

// UpdateSupplier sets the "supplier" field to the value that was provided on create.
func (u *HPElineupMallItemUpsert) UpdateSupplier() *HPElineupMallItemUpsert {
	u.SetExcluded(hpelineupmallitem.FieldSupplier)
	return u
}

// SetPrice sets the "price" field.
func (u *HPElineupMallItemUpsert) SetPrice(v int) *HPElineupMallItemUpsert {
	u.Set(hpelineupmallitem.FieldPrice, v)
	return u
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *HPElineupMallItemUpsert) UpdatePrice() *HPElineupMallItemUpsert {
	u.SetExcluded(hpelineupmallitem.FieldPrice)
	return u
}

// AddPrice adds v to the "price" field.
func (u *HPElineupMallItemUpsert) AddPrice(v int) *HPElineupMallItemUpsert {
	u.Add(hpelineupmallitem.FieldPrice, v)
	return u
}

// SetIsLimitedToFc sets the "is_limited_to_fc" field.
func (u *HPElineupMallItemUpsert) SetIsLimitedToFc(v bool) *HPElineupMallItemUpsert {
	u.Set(hpelineupmallitem.FieldIsLimitedToFc, v)
	return u
}

// UpdateIsLimitedToFc sets the "is_limited_to_fc" field to the value that was provided on create.
func (u *HPElineupMallItemUpsert) UpdateIsLimitedToFc() *HPElineupMallItemUpsert {
	u.SetExcluded(hpelineupmallitem.FieldIsLimitedToFc)
	return u
}

// SetIsOutOfStock sets the "is_out_of_stock" field.
func (u *HPElineupMallItemUpsert) SetIsOutOfStock(v bool) *HPElineupMallItemUpsert {
	u.Set(hpelineupmallitem.FieldIsOutOfStock, v)
	return u
}

// UpdateIsOutOfStock sets the "is_out_of_stock" field to the value that was provided on create.
func (u *HPElineupMallItemUpsert) UpdateIsOutOfStock() *HPElineupMallItemUpsert {
	u.SetExcluded(hpelineupmallitem.FieldIsOutOfStock)
	return u
}

// SetImages sets the "images" field.
func (u *HPElineupMallItemUpsert) SetImages(v []jsonfields.Media) *HPElineupMallItemUpsert {
	u.Set(hpelineupmallitem.FieldImages, v)
	return u
}

// UpdateImages sets the "images" field to the value that was provided on create.
func (u *HPElineupMallItemUpsert) UpdateImages() *HPElineupMallItemUpsert {
	u.SetExcluded(hpelineupmallitem.FieldImages)
	return u
}

// SetCategory sets the "category" field.
func (u *HPElineupMallItemUpsert) SetCategory(v enums.HPElineupMallItemCategory) *HPElineupMallItemUpsert {
	u.Set(hpelineupmallitem.FieldCategory, v)
	return u
}

// UpdateCategory sets the "category" field to the value that was provided on create.
func (u *HPElineupMallItemUpsert) UpdateCategory() *HPElineupMallItemUpsert {
	u.SetExcluded(hpelineupmallitem.FieldCategory)
	return u
}

// SetOrderStartAt sets the "order_start_at" field.
func (u *HPElineupMallItemUpsert) SetOrderStartAt(v time.Time) *HPElineupMallItemUpsert {
	u.Set(hpelineupmallitem.FieldOrderStartAt, v)
	return u
}

// UpdateOrderStartAt sets the "order_start_at" field to the value that was provided on create.
func (u *HPElineupMallItemUpsert) UpdateOrderStartAt() *HPElineupMallItemUpsert {
	u.SetExcluded(hpelineupmallitem.FieldOrderStartAt)
	return u
}

// ClearOrderStartAt clears the value of the "order_start_at" field.
func (u *HPElineupMallItemUpsert) ClearOrderStartAt() *HPElineupMallItemUpsert {
	u.SetNull(hpelineupmallitem.FieldOrderStartAt)
	return u
}

// SetOrderEndAt sets the "order_end_at" field.
func (u *HPElineupMallItemUpsert) SetOrderEndAt(v time.Time) *HPElineupMallItemUpsert {
	u.Set(hpelineupmallitem.FieldOrderEndAt, v)
	return u
}

// UpdateOrderEndAt sets the "order_end_at" field to the value that was provided on create.
func (u *HPElineupMallItemUpsert) UpdateOrderEndAt() *HPElineupMallItemUpsert {
	u.SetExcluded(hpelineupmallitem.FieldOrderEndAt)
	return u
}

// ClearOrderEndAt clears the value of the "order_end_at" field.
func (u *HPElineupMallItemUpsert) ClearOrderEndAt() *HPElineupMallItemUpsert {
	u.SetNull(hpelineupmallitem.FieldOrderEndAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.HPElineupMallItem.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *HPElineupMallItemUpsertOne) UpdateNewValues() *HPElineupMallItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(hpelineupmallitem.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.HPElineupMallItem.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *HPElineupMallItemUpsertOne) Ignore() *HPElineupMallItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *HPElineupMallItemUpsertOne) DoNothing() *HPElineupMallItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the HPElineupMallItemCreate.OnConflict
// documentation for more info.
func (u *HPElineupMallItemUpsertOne) Update(set func(*HPElineupMallItemUpsert)) *HPElineupMallItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&HPElineupMallItemUpsert{UpdateSet: update})
	}))
	return u
}

// SetCrawledAt sets the "crawled_at" field.
func (u *HPElineupMallItemUpsertOne) SetCrawledAt(v time.Time) *HPElineupMallItemUpsertOne {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.SetCrawledAt(v)
	})
}

// UpdateCrawledAt sets the "crawled_at" field to the value that was provided on create.
func (u *HPElineupMallItemUpsertOne) UpdateCrawledAt() *HPElineupMallItemUpsertOne {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.UpdateCrawledAt()
	})
}

// ClearCrawledAt clears the value of the "crawled_at" field.
func (u *HPElineupMallItemUpsertOne) ClearCrawledAt() *HPElineupMallItemUpsertOne {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.ClearCrawledAt()
	})
}

// SetErrorCount sets the "error_count" field.
func (u *HPElineupMallItemUpsertOne) SetErrorCount(v int) *HPElineupMallItemUpsertOne {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.SetErrorCount(v)
	})
}

// AddErrorCount adds v to the "error_count" field.
func (u *HPElineupMallItemUpsertOne) AddErrorCount(v int) *HPElineupMallItemUpsertOne {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.AddErrorCount(v)
	})
}

// UpdateErrorCount sets the "error_count" field to the value that was provided on create.
func (u *HPElineupMallItemUpsertOne) UpdateErrorCount() *HPElineupMallItemUpsertOne {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.UpdateErrorCount()
	})
}

// SetManuallyModified sets the "manually_modified" field.
func (u *HPElineupMallItemUpsertOne) SetManuallyModified(v *jsonfields.ManuallyModified) *HPElineupMallItemUpsertOne {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.SetManuallyModified(v)
	})
}

// UpdateManuallyModified sets the "manually_modified" field to the value that was provided on create.
func (u *HPElineupMallItemUpsertOne) UpdateManuallyModified() *HPElineupMallItemUpsertOne {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.UpdateManuallyModified()
	})
}

// ClearManuallyModified clears the value of the "manually_modified" field.
func (u *HPElineupMallItemUpsertOne) ClearManuallyModified() *HPElineupMallItemUpsertOne {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.ClearManuallyModified()
	})
}

// SetLastErrorMessage sets the "last_error_message" field.
func (u *HPElineupMallItemUpsertOne) SetLastErrorMessage(v string) *HPElineupMallItemUpsertOne {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.SetLastErrorMessage(v)
	})
}

// UpdateLastErrorMessage sets the "last_error_message" field to the value that was provided on create.
func (u *HPElineupMallItemUpsertOne) UpdateLastErrorMessage() *HPElineupMallItemUpsertOne {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.UpdateLastErrorMessage()
	})
}

// ClearLastErrorMessage clears the value of the "last_error_message" field.
func (u *HPElineupMallItemUpsertOne) ClearLastErrorMessage() *HPElineupMallItemUpsertOne {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.ClearLastErrorMessage()
	})
}

// SetRecrawlRequired sets the "recrawl_required" field.
func (u *HPElineupMallItemUpsertOne) SetRecrawlRequired(v bool) *HPElineupMallItemUpsertOne {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.SetRecrawlRequired(v)
	})
}

// UpdateRecrawlRequired sets the "recrawl_required" field to the value that was provided on create.
func (u *HPElineupMallItemUpsertOne) UpdateRecrawlRequired() *HPElineupMallItemUpsertOne {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.UpdateRecrawlRequired()
	})
}

// ClearRecrawlRequired clears the value of the "recrawl_required" field.
func (u *HPElineupMallItemUpsertOne) ClearRecrawlRequired() *HPElineupMallItemUpsertOne {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.ClearRecrawlRequired()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *HPElineupMallItemUpsertOne) SetUpdatedAt(v time.Time) *HPElineupMallItemUpsertOne {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *HPElineupMallItemUpsertOne) UpdateUpdatedAt() *HPElineupMallItemUpsertOne {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *HPElineupMallItemUpsertOne) ClearUpdatedAt() *HPElineupMallItemUpsertOne {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetPermalink sets the "permalink" field.
func (u *HPElineupMallItemUpsertOne) SetPermalink(v string) *HPElineupMallItemUpsertOne {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.SetPermalink(v)
	})
}

// UpdatePermalink sets the "permalink" field to the value that was provided on create.
func (u *HPElineupMallItemUpsertOne) UpdatePermalink() *HPElineupMallItemUpsertOne {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.UpdatePermalink()
	})
}

// SetName sets the "name" field.
func (u *HPElineupMallItemUpsertOne) SetName(v string) *HPElineupMallItemUpsertOne {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *HPElineupMallItemUpsertOne) UpdateName() *HPElineupMallItemUpsertOne {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *HPElineupMallItemUpsertOne) SetDescription(v string) *HPElineupMallItemUpsertOne {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *HPElineupMallItemUpsertOne) UpdateDescription() *HPElineupMallItemUpsertOne {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.UpdateDescription()
	})
}

// SetSupplier sets the "supplier" field.
func (u *HPElineupMallItemUpsertOne) SetSupplier(v string) *HPElineupMallItemUpsertOne {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.SetSupplier(v)
	})
}

// UpdateSupplier sets the "supplier" field to the value that was provided on create.
func (u *HPElineupMallItemUpsertOne) UpdateSupplier() *HPElineupMallItemUpsertOne {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.UpdateSupplier()
	})
}

// SetPrice sets the "price" field.
func (u *HPElineupMallItemUpsertOne) SetPrice(v int) *HPElineupMallItemUpsertOne {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.SetPrice(v)
	})
}

// AddPrice adds v to the "price" field.
func (u *HPElineupMallItemUpsertOne) AddPrice(v int) *HPElineupMallItemUpsertOne {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.AddPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *HPElineupMallItemUpsertOne) UpdatePrice() *HPElineupMallItemUpsertOne {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.UpdatePrice()
	})
}

// SetIsLimitedToFc sets the "is_limited_to_fc" field.
func (u *HPElineupMallItemUpsertOne) SetIsLimitedToFc(v bool) *HPElineupMallItemUpsertOne {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.SetIsLimitedToFc(v)
	})
}

// UpdateIsLimitedToFc sets the "is_limited_to_fc" field to the value that was provided on create.
func (u *HPElineupMallItemUpsertOne) UpdateIsLimitedToFc() *HPElineupMallItemUpsertOne {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.UpdateIsLimitedToFc()
	})
}

// SetIsOutOfStock sets the "is_out_of_stock" field.
func (u *HPElineupMallItemUpsertOne) SetIsOutOfStock(v bool) *HPElineupMallItemUpsertOne {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.SetIsOutOfStock(v)
	})
}

// UpdateIsOutOfStock sets the "is_out_of_stock" field to the value that was provided on create.
func (u *HPElineupMallItemUpsertOne) UpdateIsOutOfStock() *HPElineupMallItemUpsertOne {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.UpdateIsOutOfStock()
	})
}

// SetImages sets the "images" field.
func (u *HPElineupMallItemUpsertOne) SetImages(v []jsonfields.Media) *HPElineupMallItemUpsertOne {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.SetImages(v)
	})
}

// UpdateImages sets the "images" field to the value that was provided on create.
func (u *HPElineupMallItemUpsertOne) UpdateImages() *HPElineupMallItemUpsertOne {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.UpdateImages()
	})
}

// SetCategory sets the "category" field.
func (u *HPElineupMallItemUpsertOne) SetCategory(v enums.HPElineupMallItemCategory) *HPElineupMallItemUpsertOne {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.SetCategory(v)
	})
}

// UpdateCategory sets the "category" field to the value that was provided on create.
func (u *HPElineupMallItemUpsertOne) UpdateCategory() *HPElineupMallItemUpsertOne {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.UpdateCategory()
	})
}

// SetOrderStartAt sets the "order_start_at" field.
func (u *HPElineupMallItemUpsertOne) SetOrderStartAt(v time.Time) *HPElineupMallItemUpsertOne {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.SetOrderStartAt(v)
	})
}

// UpdateOrderStartAt sets the "order_start_at" field to the value that was provided on create.
func (u *HPElineupMallItemUpsertOne) UpdateOrderStartAt() *HPElineupMallItemUpsertOne {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.UpdateOrderStartAt()
	})
}

// ClearOrderStartAt clears the value of the "order_start_at" field.
func (u *HPElineupMallItemUpsertOne) ClearOrderStartAt() *HPElineupMallItemUpsertOne {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.ClearOrderStartAt()
	})
}

// SetOrderEndAt sets the "order_end_at" field.
func (u *HPElineupMallItemUpsertOne) SetOrderEndAt(v time.Time) *HPElineupMallItemUpsertOne {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.SetOrderEndAt(v)
	})
}

// UpdateOrderEndAt sets the "order_end_at" field to the value that was provided on create.
func (u *HPElineupMallItemUpsertOne) UpdateOrderEndAt() *HPElineupMallItemUpsertOne {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.UpdateOrderEndAt()
	})
}

// ClearOrderEndAt clears the value of the "order_end_at" field.
func (u *HPElineupMallItemUpsertOne) ClearOrderEndAt() *HPElineupMallItemUpsertOne {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.ClearOrderEndAt()
	})
}

// Exec executes the query.
func (u *HPElineupMallItemUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for HPElineupMallItemCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *HPElineupMallItemUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *HPElineupMallItemUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *HPElineupMallItemUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// HPElineupMallItemCreateBulk is the builder for creating many HPElineupMallItem entities in bulk.
type HPElineupMallItemCreateBulk struct {
	config
	builders []*HPElineupMallItemCreate
	conflict []sql.ConflictOption
}

// Save creates the HPElineupMallItem entities in the database.
func (hemicb *HPElineupMallItemCreateBulk) Save(ctx context.Context) ([]*HPElineupMallItem, error) {
	specs := make([]*sqlgraph.CreateSpec, len(hemicb.builders))
	nodes := make([]*HPElineupMallItem, len(hemicb.builders))
	mutators := make([]Mutator, len(hemicb.builders))
	for i := range hemicb.builders {
		func(i int, root context.Context) {
			builder := hemicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HPElineupMallItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hemicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = hemicb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hemicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hemicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hemicb *HPElineupMallItemCreateBulk) SaveX(ctx context.Context) []*HPElineupMallItem {
	v, err := hemicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hemicb *HPElineupMallItemCreateBulk) Exec(ctx context.Context) error {
	_, err := hemicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hemicb *HPElineupMallItemCreateBulk) ExecX(ctx context.Context) {
	if err := hemicb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.HPElineupMallItem.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.HPElineupMallItemUpsert) {
//			SetCrawledAt(v+v).
//		}).
//		Exec(ctx)
func (hemicb *HPElineupMallItemCreateBulk) OnConflict(opts ...sql.ConflictOption) *HPElineupMallItemUpsertBulk {
	hemicb.conflict = opts
	return &HPElineupMallItemUpsertBulk{
		create: hemicb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.HPElineupMallItem.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (hemicb *HPElineupMallItemCreateBulk) OnConflictColumns(columns ...string) *HPElineupMallItemUpsertBulk {
	hemicb.conflict = append(hemicb.conflict, sql.ConflictColumns(columns...))
	return &HPElineupMallItemUpsertBulk{
		create: hemicb,
	}
}

// HPElineupMallItemUpsertBulk is the builder for "upsert"-ing
// a bulk of HPElineupMallItem nodes.
type HPElineupMallItemUpsertBulk struct {
	create *HPElineupMallItemCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.HPElineupMallItem.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *HPElineupMallItemUpsertBulk) UpdateNewValues() *HPElineupMallItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(hpelineupmallitem.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.HPElineupMallItem.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *HPElineupMallItemUpsertBulk) Ignore() *HPElineupMallItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *HPElineupMallItemUpsertBulk) DoNothing() *HPElineupMallItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the HPElineupMallItemCreateBulk.OnConflict
// documentation for more info.
func (u *HPElineupMallItemUpsertBulk) Update(set func(*HPElineupMallItemUpsert)) *HPElineupMallItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&HPElineupMallItemUpsert{UpdateSet: update})
	}))
	return u
}

// SetCrawledAt sets the "crawled_at" field.
func (u *HPElineupMallItemUpsertBulk) SetCrawledAt(v time.Time) *HPElineupMallItemUpsertBulk {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.SetCrawledAt(v)
	})
}

// UpdateCrawledAt sets the "crawled_at" field to the value that was provided on create.
func (u *HPElineupMallItemUpsertBulk) UpdateCrawledAt() *HPElineupMallItemUpsertBulk {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.UpdateCrawledAt()
	})
}

// ClearCrawledAt clears the value of the "crawled_at" field.
func (u *HPElineupMallItemUpsertBulk) ClearCrawledAt() *HPElineupMallItemUpsertBulk {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.ClearCrawledAt()
	})
}

// SetErrorCount sets the "error_count" field.
func (u *HPElineupMallItemUpsertBulk) SetErrorCount(v int) *HPElineupMallItemUpsertBulk {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.SetErrorCount(v)
	})
}

// AddErrorCount adds v to the "error_count" field.
func (u *HPElineupMallItemUpsertBulk) AddErrorCount(v int) *HPElineupMallItemUpsertBulk {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.AddErrorCount(v)
	})
}

// UpdateErrorCount sets the "error_count" field to the value that was provided on create.
func (u *HPElineupMallItemUpsertBulk) UpdateErrorCount() *HPElineupMallItemUpsertBulk {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.UpdateErrorCount()
	})
}

// SetManuallyModified sets the "manually_modified" field.
func (u *HPElineupMallItemUpsertBulk) SetManuallyModified(v *jsonfields.ManuallyModified) *HPElineupMallItemUpsertBulk {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.SetManuallyModified(v)
	})
}

// UpdateManuallyModified sets the "manually_modified" field to the value that was provided on create.
func (u *HPElineupMallItemUpsertBulk) UpdateManuallyModified() *HPElineupMallItemUpsertBulk {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.UpdateManuallyModified()
	})
}

// ClearManuallyModified clears the value of the "manually_modified" field.
func (u *HPElineupMallItemUpsertBulk) ClearManuallyModified() *HPElineupMallItemUpsertBulk {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.ClearManuallyModified()
	})
}

// SetLastErrorMessage sets the "last_error_message" field.
func (u *HPElineupMallItemUpsertBulk) SetLastErrorMessage(v string) *HPElineupMallItemUpsertBulk {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.SetLastErrorMessage(v)
	})
}

// UpdateLastErrorMessage sets the "last_error_message" field to the value that was provided on create.
func (u *HPElineupMallItemUpsertBulk) UpdateLastErrorMessage() *HPElineupMallItemUpsertBulk {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.UpdateLastErrorMessage()
	})
}

// ClearLastErrorMessage clears the value of the "last_error_message" field.
func (u *HPElineupMallItemUpsertBulk) ClearLastErrorMessage() *HPElineupMallItemUpsertBulk {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.ClearLastErrorMessage()
	})
}

// SetRecrawlRequired sets the "recrawl_required" field.
func (u *HPElineupMallItemUpsertBulk) SetRecrawlRequired(v bool) *HPElineupMallItemUpsertBulk {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.SetRecrawlRequired(v)
	})
}

// UpdateRecrawlRequired sets the "recrawl_required" field to the value that was provided on create.
func (u *HPElineupMallItemUpsertBulk) UpdateRecrawlRequired() *HPElineupMallItemUpsertBulk {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.UpdateRecrawlRequired()
	})
}

// ClearRecrawlRequired clears the value of the "recrawl_required" field.
func (u *HPElineupMallItemUpsertBulk) ClearRecrawlRequired() *HPElineupMallItemUpsertBulk {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.ClearRecrawlRequired()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *HPElineupMallItemUpsertBulk) SetUpdatedAt(v time.Time) *HPElineupMallItemUpsertBulk {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *HPElineupMallItemUpsertBulk) UpdateUpdatedAt() *HPElineupMallItemUpsertBulk {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *HPElineupMallItemUpsertBulk) ClearUpdatedAt() *HPElineupMallItemUpsertBulk {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetPermalink sets the "permalink" field.
func (u *HPElineupMallItemUpsertBulk) SetPermalink(v string) *HPElineupMallItemUpsertBulk {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.SetPermalink(v)
	})
}

// UpdatePermalink sets the "permalink" field to the value that was provided on create.
func (u *HPElineupMallItemUpsertBulk) UpdatePermalink() *HPElineupMallItemUpsertBulk {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.UpdatePermalink()
	})
}

// SetName sets the "name" field.
func (u *HPElineupMallItemUpsertBulk) SetName(v string) *HPElineupMallItemUpsertBulk {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *HPElineupMallItemUpsertBulk) UpdateName() *HPElineupMallItemUpsertBulk {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *HPElineupMallItemUpsertBulk) SetDescription(v string) *HPElineupMallItemUpsertBulk {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *HPElineupMallItemUpsertBulk) UpdateDescription() *HPElineupMallItemUpsertBulk {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.UpdateDescription()
	})
}

// SetSupplier sets the "supplier" field.
func (u *HPElineupMallItemUpsertBulk) SetSupplier(v string) *HPElineupMallItemUpsertBulk {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.SetSupplier(v)
	})
}

// UpdateSupplier sets the "supplier" field to the value that was provided on create.
func (u *HPElineupMallItemUpsertBulk) UpdateSupplier() *HPElineupMallItemUpsertBulk {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.UpdateSupplier()
	})
}

// SetPrice sets the "price" field.
func (u *HPElineupMallItemUpsertBulk) SetPrice(v int) *HPElineupMallItemUpsertBulk {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.SetPrice(v)
	})
}

// AddPrice adds v to the "price" field.
func (u *HPElineupMallItemUpsertBulk) AddPrice(v int) *HPElineupMallItemUpsertBulk {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.AddPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *HPElineupMallItemUpsertBulk) UpdatePrice() *HPElineupMallItemUpsertBulk {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.UpdatePrice()
	})
}

// SetIsLimitedToFc sets the "is_limited_to_fc" field.
func (u *HPElineupMallItemUpsertBulk) SetIsLimitedToFc(v bool) *HPElineupMallItemUpsertBulk {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.SetIsLimitedToFc(v)
	})
}

// UpdateIsLimitedToFc sets the "is_limited_to_fc" field to the value that was provided on create.
func (u *HPElineupMallItemUpsertBulk) UpdateIsLimitedToFc() *HPElineupMallItemUpsertBulk {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.UpdateIsLimitedToFc()
	})
}

// SetIsOutOfStock sets the "is_out_of_stock" field.
func (u *HPElineupMallItemUpsertBulk) SetIsOutOfStock(v bool) *HPElineupMallItemUpsertBulk {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.SetIsOutOfStock(v)
	})
}

// UpdateIsOutOfStock sets the "is_out_of_stock" field to the value that was provided on create.
func (u *HPElineupMallItemUpsertBulk) UpdateIsOutOfStock() *HPElineupMallItemUpsertBulk {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.UpdateIsOutOfStock()
	})
}

// SetImages sets the "images" field.
func (u *HPElineupMallItemUpsertBulk) SetImages(v []jsonfields.Media) *HPElineupMallItemUpsertBulk {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.SetImages(v)
	})
}

// UpdateImages sets the "images" field to the value that was provided on create.
func (u *HPElineupMallItemUpsertBulk) UpdateImages() *HPElineupMallItemUpsertBulk {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.UpdateImages()
	})
}

// SetCategory sets the "category" field.
func (u *HPElineupMallItemUpsertBulk) SetCategory(v enums.HPElineupMallItemCategory) *HPElineupMallItemUpsertBulk {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.SetCategory(v)
	})
}

// UpdateCategory sets the "category" field to the value that was provided on create.
func (u *HPElineupMallItemUpsertBulk) UpdateCategory() *HPElineupMallItemUpsertBulk {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.UpdateCategory()
	})
}

// SetOrderStartAt sets the "order_start_at" field.
func (u *HPElineupMallItemUpsertBulk) SetOrderStartAt(v time.Time) *HPElineupMallItemUpsertBulk {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.SetOrderStartAt(v)
	})
}

// UpdateOrderStartAt sets the "order_start_at" field to the value that was provided on create.
func (u *HPElineupMallItemUpsertBulk) UpdateOrderStartAt() *HPElineupMallItemUpsertBulk {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.UpdateOrderStartAt()
	})
}

// ClearOrderStartAt clears the value of the "order_start_at" field.
func (u *HPElineupMallItemUpsertBulk) ClearOrderStartAt() *HPElineupMallItemUpsertBulk {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.ClearOrderStartAt()
	})
}

// SetOrderEndAt sets the "order_end_at" field.
func (u *HPElineupMallItemUpsertBulk) SetOrderEndAt(v time.Time) *HPElineupMallItemUpsertBulk {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.SetOrderEndAt(v)
	})
}

// UpdateOrderEndAt sets the "order_end_at" field to the value that was provided on create.
func (u *HPElineupMallItemUpsertBulk) UpdateOrderEndAt() *HPElineupMallItemUpsertBulk {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.UpdateOrderEndAt()
	})
}

// ClearOrderEndAt clears the value of the "order_end_at" field.
func (u *HPElineupMallItemUpsertBulk) ClearOrderEndAt() *HPElineupMallItemUpsertBulk {
	return u.Update(func(s *HPElineupMallItemUpsert) {
		s.ClearOrderEndAt()
	})
}

// Exec executes the query.
func (u *HPElineupMallItemUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the HPElineupMallItemCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for HPElineupMallItemCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *HPElineupMallItemUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
