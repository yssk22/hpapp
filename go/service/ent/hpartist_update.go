// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yssk22/hpapp/go/service/ent/hpameblopost"
	"github.com/yssk22/hpapp/go/service/ent/hpartist"
	"github.com/yssk22/hpapp/go/service/ent/hpasset"
	"github.com/yssk22/hpapp/go/service/ent/hpelineupmallitem"
	"github.com/yssk22/hpapp/go/service/ent/hpfeeditem"
	"github.com/yssk22/hpapp/go/service/ent/hpigpost"
	"github.com/yssk22/hpapp/go/service/ent/hpmember"
	"github.com/yssk22/hpapp/go/service/ent/predicate"
	"github.com/yssk22/hpapp/go/service/schema/jsonfields"
)

// HPArtistUpdate is the builder for updating HPArtist entities.
type HPArtistUpdate struct {
	config
	hooks    []Hook
	mutation *HPArtistMutation
}

// Where appends a list predicates to the HPArtistUpdate builder.
func (hau *HPArtistUpdate) Where(ps ...predicate.HPArtist) *HPArtistUpdate {
	hau.mutation.Where(ps...)
	return hau
}

// SetCrawledAt sets the "crawled_at" field.
func (hau *HPArtistUpdate) SetCrawledAt(t time.Time) *HPArtistUpdate {
	hau.mutation.SetCrawledAt(t)
	return hau
}

// SetNillableCrawledAt sets the "crawled_at" field if the given value is not nil.
func (hau *HPArtistUpdate) SetNillableCrawledAt(t *time.Time) *HPArtistUpdate {
	if t != nil {
		hau.SetCrawledAt(*t)
	}
	return hau
}

// ClearCrawledAt clears the value of the "crawled_at" field.
func (hau *HPArtistUpdate) ClearCrawledAt() *HPArtistUpdate {
	hau.mutation.ClearCrawledAt()
	return hau
}

// SetErrorCount sets the "error_count" field.
func (hau *HPArtistUpdate) SetErrorCount(i int) *HPArtistUpdate {
	hau.mutation.ResetErrorCount()
	hau.mutation.SetErrorCount(i)
	return hau
}

// SetNillableErrorCount sets the "error_count" field if the given value is not nil.
func (hau *HPArtistUpdate) SetNillableErrorCount(i *int) *HPArtistUpdate {
	if i != nil {
		hau.SetErrorCount(*i)
	}
	return hau
}

// AddErrorCount adds i to the "error_count" field.
func (hau *HPArtistUpdate) AddErrorCount(i int) *HPArtistUpdate {
	hau.mutation.AddErrorCount(i)
	return hau
}

// SetManuallyModified sets the "manually_modified" field.
func (hau *HPArtistUpdate) SetManuallyModified(jm *jsonfields.ManuallyModified) *HPArtistUpdate {
	hau.mutation.SetManuallyModified(jm)
	return hau
}

// ClearManuallyModified clears the value of the "manually_modified" field.
func (hau *HPArtistUpdate) ClearManuallyModified() *HPArtistUpdate {
	hau.mutation.ClearManuallyModified()
	return hau
}

// SetLastErrorMessage sets the "last_error_message" field.
func (hau *HPArtistUpdate) SetLastErrorMessage(s string) *HPArtistUpdate {
	hau.mutation.SetLastErrorMessage(s)
	return hau
}

// SetNillableLastErrorMessage sets the "last_error_message" field if the given value is not nil.
func (hau *HPArtistUpdate) SetNillableLastErrorMessage(s *string) *HPArtistUpdate {
	if s != nil {
		hau.SetLastErrorMessage(*s)
	}
	return hau
}

// ClearLastErrorMessage clears the value of the "last_error_message" field.
func (hau *HPArtistUpdate) ClearLastErrorMessage() *HPArtistUpdate {
	hau.mutation.ClearLastErrorMessage()
	return hau
}

// SetRecrawlRequired sets the "recrawl_required" field.
func (hau *HPArtistUpdate) SetRecrawlRequired(b bool) *HPArtistUpdate {
	hau.mutation.SetRecrawlRequired(b)
	return hau
}

// SetNillableRecrawlRequired sets the "recrawl_required" field if the given value is not nil.
func (hau *HPArtistUpdate) SetNillableRecrawlRequired(b *bool) *HPArtistUpdate {
	if b != nil {
		hau.SetRecrawlRequired(*b)
	}
	return hau
}

// ClearRecrawlRequired clears the value of the "recrawl_required" field.
func (hau *HPArtistUpdate) ClearRecrawlRequired() *HPArtistUpdate {
	hau.mutation.ClearRecrawlRequired()
	return hau
}

// SetUpdatedAt sets the "updated_at" field.
func (hau *HPArtistUpdate) SetUpdatedAt(t time.Time) *HPArtistUpdate {
	hau.mutation.SetUpdatedAt(t)
	return hau
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (hau *HPArtistUpdate) SetNillableUpdatedAt(t *time.Time) *HPArtistUpdate {
	if t != nil {
		hau.SetUpdatedAt(*t)
	}
	return hau
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (hau *HPArtistUpdate) ClearUpdatedAt() *HPArtistUpdate {
	hau.mutation.ClearUpdatedAt()
	return hau
}

// SetKey sets the "key" field.
func (hau *HPArtistUpdate) SetKey(s string) *HPArtistUpdate {
	hau.mutation.SetKey(s)
	return hau
}

// SetName sets the "name" field.
func (hau *HPArtistUpdate) SetName(s string) *HPArtistUpdate {
	hau.mutation.SetName(s)
	return hau
}

// SetThumbnailURL sets the "thumbnail_url" field.
func (hau *HPArtistUpdate) SetThumbnailURL(s string) *HPArtistUpdate {
	hau.mutation.SetThumbnailURL(s)
	return hau
}

// SetIndex sets the "index" field.
func (hau *HPArtistUpdate) SetIndex(i int) *HPArtistUpdate {
	hau.mutation.ResetIndex()
	hau.mutation.SetIndex(i)
	return hau
}

// AddIndex adds i to the "index" field.
func (hau *HPArtistUpdate) AddIndex(i int) *HPArtistUpdate {
	hau.mutation.AddIndex(i)
	return hau
}

// AddMemberIDs adds the "members" edge to the HPMember entity by IDs.
func (hau *HPArtistUpdate) AddMemberIDs(ids ...int) *HPArtistUpdate {
	hau.mutation.AddMemberIDs(ids...)
	return hau
}

// AddMembers adds the "members" edges to the HPMember entity.
func (hau *HPArtistUpdate) AddMembers(h ...*HPMember) *HPArtistUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hau.AddMemberIDs(ids...)
}

// AddAssetIDs adds the "assets" edge to the HPAsset entity by IDs.
func (hau *HPArtistUpdate) AddAssetIDs(ids ...int) *HPArtistUpdate {
	hau.mutation.AddAssetIDs(ids...)
	return hau
}

// AddAssets adds the "assets" edges to the HPAsset entity.
func (hau *HPArtistUpdate) AddAssets(h ...*HPAsset) *HPArtistUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hau.AddAssetIDs(ids...)
}

// AddOwningFeedIDs adds the "owning_feed" edge to the HPFeedItem entity by IDs.
func (hau *HPArtistUpdate) AddOwningFeedIDs(ids ...int) *HPArtistUpdate {
	hau.mutation.AddOwningFeedIDs(ids...)
	return hau
}

// AddOwningFeed adds the "owning_feed" edges to the HPFeedItem entity.
func (hau *HPArtistUpdate) AddOwningFeed(h ...*HPFeedItem) *HPArtistUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hau.AddOwningFeedIDs(ids...)
}

// AddTaggedFeedIDs adds the "tagged_feed" edge to the HPFeedItem entity by IDs.
func (hau *HPArtistUpdate) AddTaggedFeedIDs(ids ...int) *HPArtistUpdate {
	hau.mutation.AddTaggedFeedIDs(ids...)
	return hau
}

// AddTaggedFeed adds the "tagged_feed" edges to the HPFeedItem entity.
func (hau *HPArtistUpdate) AddTaggedFeed(h ...*HPFeedItem) *HPArtistUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hau.AddTaggedFeedIDs(ids...)
}

// AddOwningIgPostIDs adds the "owning_ig_posts" edge to the HPIgPost entity by IDs.
func (hau *HPArtistUpdate) AddOwningIgPostIDs(ids ...int) *HPArtistUpdate {
	hau.mutation.AddOwningIgPostIDs(ids...)
	return hau
}

// AddOwningIgPosts adds the "owning_ig_posts" edges to the HPIgPost entity.
func (hau *HPArtistUpdate) AddOwningIgPosts(h ...*HPIgPost) *HPArtistUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hau.AddOwningIgPostIDs(ids...)
}

// AddTaggedIgPostIDs adds the "tagged_ig_posts" edge to the HPIgPost entity by IDs.
func (hau *HPArtistUpdate) AddTaggedIgPostIDs(ids ...int) *HPArtistUpdate {
	hau.mutation.AddTaggedIgPostIDs(ids...)
	return hau
}

// AddTaggedIgPosts adds the "tagged_ig_posts" edges to the HPIgPost entity.
func (hau *HPArtistUpdate) AddTaggedIgPosts(h ...*HPIgPost) *HPArtistUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hau.AddTaggedIgPostIDs(ids...)
}

// AddOwningAmebloPostIDs adds the "owning_ameblo_posts" edge to the HPAmebloPost entity by IDs.
func (hau *HPArtistUpdate) AddOwningAmebloPostIDs(ids ...int) *HPArtistUpdate {
	hau.mutation.AddOwningAmebloPostIDs(ids...)
	return hau
}

// AddOwningAmebloPosts adds the "owning_ameblo_posts" edges to the HPAmebloPost entity.
func (hau *HPArtistUpdate) AddOwningAmebloPosts(h ...*HPAmebloPost) *HPArtistUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hau.AddOwningAmebloPostIDs(ids...)
}

// AddTaggedAmebloPostIDs adds the "tagged_ameblo_posts" edge to the HPAmebloPost entity by IDs.
func (hau *HPArtistUpdate) AddTaggedAmebloPostIDs(ids ...int) *HPArtistUpdate {
	hau.mutation.AddTaggedAmebloPostIDs(ids...)
	return hau
}

// AddTaggedAmebloPosts adds the "tagged_ameblo_posts" edges to the HPAmebloPost entity.
func (hau *HPArtistUpdate) AddTaggedAmebloPosts(h ...*HPAmebloPost) *HPArtistUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hau.AddTaggedAmebloPostIDs(ids...)
}

// AddTaggedElineupMallItemIDs adds the "tagged_elineup_mall_items" edge to the HPElineupMallItem entity by IDs.
func (hau *HPArtistUpdate) AddTaggedElineupMallItemIDs(ids ...int) *HPArtistUpdate {
	hau.mutation.AddTaggedElineupMallItemIDs(ids...)
	return hau
}

// AddTaggedElineupMallItems adds the "tagged_elineup_mall_items" edges to the HPElineupMallItem entity.
func (hau *HPArtistUpdate) AddTaggedElineupMallItems(h ...*HPElineupMallItem) *HPArtistUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hau.AddTaggedElineupMallItemIDs(ids...)
}

// Mutation returns the HPArtistMutation object of the builder.
func (hau *HPArtistUpdate) Mutation() *HPArtistMutation {
	return hau.mutation
}

// ClearMembers clears all "members" edges to the HPMember entity.
func (hau *HPArtistUpdate) ClearMembers() *HPArtistUpdate {
	hau.mutation.ClearMembers()
	return hau
}

// RemoveMemberIDs removes the "members" edge to HPMember entities by IDs.
func (hau *HPArtistUpdate) RemoveMemberIDs(ids ...int) *HPArtistUpdate {
	hau.mutation.RemoveMemberIDs(ids...)
	return hau
}

// RemoveMembers removes "members" edges to HPMember entities.
func (hau *HPArtistUpdate) RemoveMembers(h ...*HPMember) *HPArtistUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hau.RemoveMemberIDs(ids...)
}

// ClearAssets clears all "assets" edges to the HPAsset entity.
func (hau *HPArtistUpdate) ClearAssets() *HPArtistUpdate {
	hau.mutation.ClearAssets()
	return hau
}

// RemoveAssetIDs removes the "assets" edge to HPAsset entities by IDs.
func (hau *HPArtistUpdate) RemoveAssetIDs(ids ...int) *HPArtistUpdate {
	hau.mutation.RemoveAssetIDs(ids...)
	return hau
}

// RemoveAssets removes "assets" edges to HPAsset entities.
func (hau *HPArtistUpdate) RemoveAssets(h ...*HPAsset) *HPArtistUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hau.RemoveAssetIDs(ids...)
}

// ClearOwningFeed clears all "owning_feed" edges to the HPFeedItem entity.
func (hau *HPArtistUpdate) ClearOwningFeed() *HPArtistUpdate {
	hau.mutation.ClearOwningFeed()
	return hau
}

// RemoveOwningFeedIDs removes the "owning_feed" edge to HPFeedItem entities by IDs.
func (hau *HPArtistUpdate) RemoveOwningFeedIDs(ids ...int) *HPArtistUpdate {
	hau.mutation.RemoveOwningFeedIDs(ids...)
	return hau
}

// RemoveOwningFeed removes "owning_feed" edges to HPFeedItem entities.
func (hau *HPArtistUpdate) RemoveOwningFeed(h ...*HPFeedItem) *HPArtistUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hau.RemoveOwningFeedIDs(ids...)
}

// ClearTaggedFeed clears all "tagged_feed" edges to the HPFeedItem entity.
func (hau *HPArtistUpdate) ClearTaggedFeed() *HPArtistUpdate {
	hau.mutation.ClearTaggedFeed()
	return hau
}

// RemoveTaggedFeedIDs removes the "tagged_feed" edge to HPFeedItem entities by IDs.
func (hau *HPArtistUpdate) RemoveTaggedFeedIDs(ids ...int) *HPArtistUpdate {
	hau.mutation.RemoveTaggedFeedIDs(ids...)
	return hau
}

// RemoveTaggedFeed removes "tagged_feed" edges to HPFeedItem entities.
func (hau *HPArtistUpdate) RemoveTaggedFeed(h ...*HPFeedItem) *HPArtistUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hau.RemoveTaggedFeedIDs(ids...)
}

// ClearOwningIgPosts clears all "owning_ig_posts" edges to the HPIgPost entity.
func (hau *HPArtistUpdate) ClearOwningIgPosts() *HPArtistUpdate {
	hau.mutation.ClearOwningIgPosts()
	return hau
}

// RemoveOwningIgPostIDs removes the "owning_ig_posts" edge to HPIgPost entities by IDs.
func (hau *HPArtistUpdate) RemoveOwningIgPostIDs(ids ...int) *HPArtistUpdate {
	hau.mutation.RemoveOwningIgPostIDs(ids...)
	return hau
}

// RemoveOwningIgPosts removes "owning_ig_posts" edges to HPIgPost entities.
func (hau *HPArtistUpdate) RemoveOwningIgPosts(h ...*HPIgPost) *HPArtistUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hau.RemoveOwningIgPostIDs(ids...)
}

// ClearTaggedIgPosts clears all "tagged_ig_posts" edges to the HPIgPost entity.
func (hau *HPArtistUpdate) ClearTaggedIgPosts() *HPArtistUpdate {
	hau.mutation.ClearTaggedIgPosts()
	return hau
}

// RemoveTaggedIgPostIDs removes the "tagged_ig_posts" edge to HPIgPost entities by IDs.
func (hau *HPArtistUpdate) RemoveTaggedIgPostIDs(ids ...int) *HPArtistUpdate {
	hau.mutation.RemoveTaggedIgPostIDs(ids...)
	return hau
}

// RemoveTaggedIgPosts removes "tagged_ig_posts" edges to HPIgPost entities.
func (hau *HPArtistUpdate) RemoveTaggedIgPosts(h ...*HPIgPost) *HPArtistUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hau.RemoveTaggedIgPostIDs(ids...)
}

// ClearOwningAmebloPosts clears all "owning_ameblo_posts" edges to the HPAmebloPost entity.
func (hau *HPArtistUpdate) ClearOwningAmebloPosts() *HPArtistUpdate {
	hau.mutation.ClearOwningAmebloPosts()
	return hau
}

// RemoveOwningAmebloPostIDs removes the "owning_ameblo_posts" edge to HPAmebloPost entities by IDs.
func (hau *HPArtistUpdate) RemoveOwningAmebloPostIDs(ids ...int) *HPArtistUpdate {
	hau.mutation.RemoveOwningAmebloPostIDs(ids...)
	return hau
}

// RemoveOwningAmebloPosts removes "owning_ameblo_posts" edges to HPAmebloPost entities.
func (hau *HPArtistUpdate) RemoveOwningAmebloPosts(h ...*HPAmebloPost) *HPArtistUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hau.RemoveOwningAmebloPostIDs(ids...)
}

// ClearTaggedAmebloPosts clears all "tagged_ameblo_posts" edges to the HPAmebloPost entity.
func (hau *HPArtistUpdate) ClearTaggedAmebloPosts() *HPArtistUpdate {
	hau.mutation.ClearTaggedAmebloPosts()
	return hau
}

// RemoveTaggedAmebloPostIDs removes the "tagged_ameblo_posts" edge to HPAmebloPost entities by IDs.
func (hau *HPArtistUpdate) RemoveTaggedAmebloPostIDs(ids ...int) *HPArtistUpdate {
	hau.mutation.RemoveTaggedAmebloPostIDs(ids...)
	return hau
}

// RemoveTaggedAmebloPosts removes "tagged_ameblo_posts" edges to HPAmebloPost entities.
func (hau *HPArtistUpdate) RemoveTaggedAmebloPosts(h ...*HPAmebloPost) *HPArtistUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hau.RemoveTaggedAmebloPostIDs(ids...)
}

// ClearTaggedElineupMallItems clears all "tagged_elineup_mall_items" edges to the HPElineupMallItem entity.
func (hau *HPArtistUpdate) ClearTaggedElineupMallItems() *HPArtistUpdate {
	hau.mutation.ClearTaggedElineupMallItems()
	return hau
}

// RemoveTaggedElineupMallItemIDs removes the "tagged_elineup_mall_items" edge to HPElineupMallItem entities by IDs.
func (hau *HPArtistUpdate) RemoveTaggedElineupMallItemIDs(ids ...int) *HPArtistUpdate {
	hau.mutation.RemoveTaggedElineupMallItemIDs(ids...)
	return hau
}

// RemoveTaggedElineupMallItems removes "tagged_elineup_mall_items" edges to HPElineupMallItem entities.
func (hau *HPArtistUpdate) RemoveTaggedElineupMallItems(h ...*HPElineupMallItem) *HPArtistUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hau.RemoveTaggedElineupMallItemIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hau *HPArtistUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, HPArtistMutation](ctx, hau.sqlSave, hau.mutation, hau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hau *HPArtistUpdate) SaveX(ctx context.Context) int {
	affected, err := hau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hau *HPArtistUpdate) Exec(ctx context.Context) error {
	_, err := hau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hau *HPArtistUpdate) ExecX(ctx context.Context) {
	if err := hau.Exec(ctx); err != nil {
		panic(err)
	}
}

func (hau *HPArtistUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(hpartist.Table, hpartist.Columns, sqlgraph.NewFieldSpec(hpartist.FieldID, field.TypeInt))
	if ps := hau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hau.mutation.CrawledAt(); ok {
		_spec.SetField(hpartist.FieldCrawledAt, field.TypeTime, value)
	}
	if hau.mutation.CrawledAtCleared() {
		_spec.ClearField(hpartist.FieldCrawledAt, field.TypeTime)
	}
	if value, ok := hau.mutation.ErrorCount(); ok {
		_spec.SetField(hpartist.FieldErrorCount, field.TypeInt, value)
	}
	if value, ok := hau.mutation.AddedErrorCount(); ok {
		_spec.AddField(hpartist.FieldErrorCount, field.TypeInt, value)
	}
	if value, ok := hau.mutation.ManuallyModified(); ok {
		_spec.SetField(hpartist.FieldManuallyModified, field.TypeJSON, value)
	}
	if hau.mutation.ManuallyModifiedCleared() {
		_spec.ClearField(hpartist.FieldManuallyModified, field.TypeJSON)
	}
	if value, ok := hau.mutation.LastErrorMessage(); ok {
		_spec.SetField(hpartist.FieldLastErrorMessage, field.TypeString, value)
	}
	if hau.mutation.LastErrorMessageCleared() {
		_spec.ClearField(hpartist.FieldLastErrorMessage, field.TypeString)
	}
	if value, ok := hau.mutation.RecrawlRequired(); ok {
		_spec.SetField(hpartist.FieldRecrawlRequired, field.TypeBool, value)
	}
	if hau.mutation.RecrawlRequiredCleared() {
		_spec.ClearField(hpartist.FieldRecrawlRequired, field.TypeBool)
	}
	if hau.mutation.CreatedAtCleared() {
		_spec.ClearField(hpartist.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := hau.mutation.UpdatedAt(); ok {
		_spec.SetField(hpartist.FieldUpdatedAt, field.TypeTime, value)
	}
	if hau.mutation.UpdatedAtCleared() {
		_spec.ClearField(hpartist.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := hau.mutation.Key(); ok {
		_spec.SetField(hpartist.FieldKey, field.TypeString, value)
	}
	if value, ok := hau.mutation.Name(); ok {
		_spec.SetField(hpartist.FieldName, field.TypeString, value)
	}
	if value, ok := hau.mutation.ThumbnailURL(); ok {
		_spec.SetField(hpartist.FieldThumbnailURL, field.TypeString, value)
	}
	if value, ok := hau.mutation.Index(); ok {
		_spec.SetField(hpartist.FieldIndex, field.TypeInt, value)
	}
	if value, ok := hau.mutation.AddedIndex(); ok {
		_spec.AddField(hpartist.FieldIndex, field.TypeInt, value)
	}
	if hau.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpartist.MembersTable,
			Columns: []string{hpartist.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpmember.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hau.mutation.RemovedMembersIDs(); len(nodes) > 0 && !hau.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpartist.MembersTable,
			Columns: []string{hpartist.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hau.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpartist.MembersTable,
			Columns: []string{hpartist.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hau.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpartist.AssetsTable,
			Columns: []string{hpartist.AssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpasset.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hau.mutation.RemovedAssetsIDs(); len(nodes) > 0 && !hau.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpartist.AssetsTable,
			Columns: []string{hpartist.AssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpasset.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hau.mutation.AssetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpartist.AssetsTable,
			Columns: []string{hpartist.AssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpasset.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hau.mutation.OwningFeedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpartist.OwningFeedTable,
			Columns: []string{hpartist.OwningFeedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpfeeditem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hau.mutation.RemovedOwningFeedIDs(); len(nodes) > 0 && !hau.mutation.OwningFeedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpartist.OwningFeedTable,
			Columns: []string{hpartist.OwningFeedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpfeeditem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hau.mutation.OwningFeedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpartist.OwningFeedTable,
			Columns: []string{hpartist.OwningFeedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpfeeditem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hau.mutation.TaggedFeedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpartist.TaggedFeedTable,
			Columns: hpartist.TaggedFeedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpfeeditem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hau.mutation.RemovedTaggedFeedIDs(); len(nodes) > 0 && !hau.mutation.TaggedFeedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpartist.TaggedFeedTable,
			Columns: hpartist.TaggedFeedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpfeeditem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hau.mutation.TaggedFeedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpartist.TaggedFeedTable,
			Columns: hpartist.TaggedFeedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpfeeditem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hau.mutation.OwningIgPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpartist.OwningIgPostsTable,
			Columns: []string{hpartist.OwningIgPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpigpost.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hau.mutation.RemovedOwningIgPostsIDs(); len(nodes) > 0 && !hau.mutation.OwningIgPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpartist.OwningIgPostsTable,
			Columns: []string{hpartist.OwningIgPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpigpost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hau.mutation.OwningIgPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpartist.OwningIgPostsTable,
			Columns: []string{hpartist.OwningIgPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpigpost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hau.mutation.TaggedIgPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpartist.TaggedIgPostsTable,
			Columns: hpartist.TaggedIgPostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpigpost.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hau.mutation.RemovedTaggedIgPostsIDs(); len(nodes) > 0 && !hau.mutation.TaggedIgPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpartist.TaggedIgPostsTable,
			Columns: hpartist.TaggedIgPostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpigpost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hau.mutation.TaggedIgPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpartist.TaggedIgPostsTable,
			Columns: hpartist.TaggedIgPostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpigpost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hau.mutation.OwningAmebloPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpartist.OwningAmebloPostsTable,
			Columns: []string{hpartist.OwningAmebloPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpameblopost.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hau.mutation.RemovedOwningAmebloPostsIDs(); len(nodes) > 0 && !hau.mutation.OwningAmebloPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpartist.OwningAmebloPostsTable,
			Columns: []string{hpartist.OwningAmebloPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpameblopost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hau.mutation.OwningAmebloPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpartist.OwningAmebloPostsTable,
			Columns: []string{hpartist.OwningAmebloPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpameblopost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hau.mutation.TaggedAmebloPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpartist.TaggedAmebloPostsTable,
			Columns: hpartist.TaggedAmebloPostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpameblopost.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hau.mutation.RemovedTaggedAmebloPostsIDs(); len(nodes) > 0 && !hau.mutation.TaggedAmebloPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpartist.TaggedAmebloPostsTable,
			Columns: hpartist.TaggedAmebloPostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpameblopost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hau.mutation.TaggedAmebloPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpartist.TaggedAmebloPostsTable,
			Columns: hpartist.TaggedAmebloPostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpameblopost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hau.mutation.TaggedElineupMallItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpartist.TaggedElineupMallItemsTable,
			Columns: hpartist.TaggedElineupMallItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpelineupmallitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hau.mutation.RemovedTaggedElineupMallItemsIDs(); len(nodes) > 0 && !hau.mutation.TaggedElineupMallItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpartist.TaggedElineupMallItemsTable,
			Columns: hpartist.TaggedElineupMallItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpelineupmallitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hau.mutation.TaggedElineupMallItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpartist.TaggedElineupMallItemsTable,
			Columns: hpartist.TaggedElineupMallItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpelineupmallitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hpartist.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	hau.mutation.done = true
	return n, nil
}

// HPArtistUpdateOne is the builder for updating a single HPArtist entity.
type HPArtistUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HPArtistMutation
}

// SetCrawledAt sets the "crawled_at" field.
func (hauo *HPArtistUpdateOne) SetCrawledAt(t time.Time) *HPArtistUpdateOne {
	hauo.mutation.SetCrawledAt(t)
	return hauo
}

// SetNillableCrawledAt sets the "crawled_at" field if the given value is not nil.
func (hauo *HPArtistUpdateOne) SetNillableCrawledAt(t *time.Time) *HPArtistUpdateOne {
	if t != nil {
		hauo.SetCrawledAt(*t)
	}
	return hauo
}

// ClearCrawledAt clears the value of the "crawled_at" field.
func (hauo *HPArtistUpdateOne) ClearCrawledAt() *HPArtistUpdateOne {
	hauo.mutation.ClearCrawledAt()
	return hauo
}

// SetErrorCount sets the "error_count" field.
func (hauo *HPArtistUpdateOne) SetErrorCount(i int) *HPArtistUpdateOne {
	hauo.mutation.ResetErrorCount()
	hauo.mutation.SetErrorCount(i)
	return hauo
}

// SetNillableErrorCount sets the "error_count" field if the given value is not nil.
func (hauo *HPArtistUpdateOne) SetNillableErrorCount(i *int) *HPArtistUpdateOne {
	if i != nil {
		hauo.SetErrorCount(*i)
	}
	return hauo
}

// AddErrorCount adds i to the "error_count" field.
func (hauo *HPArtistUpdateOne) AddErrorCount(i int) *HPArtistUpdateOne {
	hauo.mutation.AddErrorCount(i)
	return hauo
}

// SetManuallyModified sets the "manually_modified" field.
func (hauo *HPArtistUpdateOne) SetManuallyModified(jm *jsonfields.ManuallyModified) *HPArtistUpdateOne {
	hauo.mutation.SetManuallyModified(jm)
	return hauo
}

// ClearManuallyModified clears the value of the "manually_modified" field.
func (hauo *HPArtistUpdateOne) ClearManuallyModified() *HPArtistUpdateOne {
	hauo.mutation.ClearManuallyModified()
	return hauo
}

// SetLastErrorMessage sets the "last_error_message" field.
func (hauo *HPArtistUpdateOne) SetLastErrorMessage(s string) *HPArtistUpdateOne {
	hauo.mutation.SetLastErrorMessage(s)
	return hauo
}

// SetNillableLastErrorMessage sets the "last_error_message" field if the given value is not nil.
func (hauo *HPArtistUpdateOne) SetNillableLastErrorMessage(s *string) *HPArtistUpdateOne {
	if s != nil {
		hauo.SetLastErrorMessage(*s)
	}
	return hauo
}

// ClearLastErrorMessage clears the value of the "last_error_message" field.
func (hauo *HPArtistUpdateOne) ClearLastErrorMessage() *HPArtistUpdateOne {
	hauo.mutation.ClearLastErrorMessage()
	return hauo
}

// SetRecrawlRequired sets the "recrawl_required" field.
func (hauo *HPArtistUpdateOne) SetRecrawlRequired(b bool) *HPArtistUpdateOne {
	hauo.mutation.SetRecrawlRequired(b)
	return hauo
}

// SetNillableRecrawlRequired sets the "recrawl_required" field if the given value is not nil.
func (hauo *HPArtistUpdateOne) SetNillableRecrawlRequired(b *bool) *HPArtistUpdateOne {
	if b != nil {
		hauo.SetRecrawlRequired(*b)
	}
	return hauo
}

// ClearRecrawlRequired clears the value of the "recrawl_required" field.
func (hauo *HPArtistUpdateOne) ClearRecrawlRequired() *HPArtistUpdateOne {
	hauo.mutation.ClearRecrawlRequired()
	return hauo
}

// SetUpdatedAt sets the "updated_at" field.
func (hauo *HPArtistUpdateOne) SetUpdatedAt(t time.Time) *HPArtistUpdateOne {
	hauo.mutation.SetUpdatedAt(t)
	return hauo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (hauo *HPArtistUpdateOne) SetNillableUpdatedAt(t *time.Time) *HPArtistUpdateOne {
	if t != nil {
		hauo.SetUpdatedAt(*t)
	}
	return hauo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (hauo *HPArtistUpdateOne) ClearUpdatedAt() *HPArtistUpdateOne {
	hauo.mutation.ClearUpdatedAt()
	return hauo
}

// SetKey sets the "key" field.
func (hauo *HPArtistUpdateOne) SetKey(s string) *HPArtistUpdateOne {
	hauo.mutation.SetKey(s)
	return hauo
}

// SetName sets the "name" field.
func (hauo *HPArtistUpdateOne) SetName(s string) *HPArtistUpdateOne {
	hauo.mutation.SetName(s)
	return hauo
}

// SetThumbnailURL sets the "thumbnail_url" field.
func (hauo *HPArtistUpdateOne) SetThumbnailURL(s string) *HPArtistUpdateOne {
	hauo.mutation.SetThumbnailURL(s)
	return hauo
}

// SetIndex sets the "index" field.
func (hauo *HPArtistUpdateOne) SetIndex(i int) *HPArtistUpdateOne {
	hauo.mutation.ResetIndex()
	hauo.mutation.SetIndex(i)
	return hauo
}

// AddIndex adds i to the "index" field.
func (hauo *HPArtistUpdateOne) AddIndex(i int) *HPArtistUpdateOne {
	hauo.mutation.AddIndex(i)
	return hauo
}

// AddMemberIDs adds the "members" edge to the HPMember entity by IDs.
func (hauo *HPArtistUpdateOne) AddMemberIDs(ids ...int) *HPArtistUpdateOne {
	hauo.mutation.AddMemberIDs(ids...)
	return hauo
}

// AddMembers adds the "members" edges to the HPMember entity.
func (hauo *HPArtistUpdateOne) AddMembers(h ...*HPMember) *HPArtistUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hauo.AddMemberIDs(ids...)
}

// AddAssetIDs adds the "assets" edge to the HPAsset entity by IDs.
func (hauo *HPArtistUpdateOne) AddAssetIDs(ids ...int) *HPArtistUpdateOne {
	hauo.mutation.AddAssetIDs(ids...)
	return hauo
}

// AddAssets adds the "assets" edges to the HPAsset entity.
func (hauo *HPArtistUpdateOne) AddAssets(h ...*HPAsset) *HPArtistUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hauo.AddAssetIDs(ids...)
}

// AddOwningFeedIDs adds the "owning_feed" edge to the HPFeedItem entity by IDs.
func (hauo *HPArtistUpdateOne) AddOwningFeedIDs(ids ...int) *HPArtistUpdateOne {
	hauo.mutation.AddOwningFeedIDs(ids...)
	return hauo
}

// AddOwningFeed adds the "owning_feed" edges to the HPFeedItem entity.
func (hauo *HPArtistUpdateOne) AddOwningFeed(h ...*HPFeedItem) *HPArtistUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hauo.AddOwningFeedIDs(ids...)
}

// AddTaggedFeedIDs adds the "tagged_feed" edge to the HPFeedItem entity by IDs.
func (hauo *HPArtistUpdateOne) AddTaggedFeedIDs(ids ...int) *HPArtistUpdateOne {
	hauo.mutation.AddTaggedFeedIDs(ids...)
	return hauo
}

// AddTaggedFeed adds the "tagged_feed" edges to the HPFeedItem entity.
func (hauo *HPArtistUpdateOne) AddTaggedFeed(h ...*HPFeedItem) *HPArtistUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hauo.AddTaggedFeedIDs(ids...)
}

// AddOwningIgPostIDs adds the "owning_ig_posts" edge to the HPIgPost entity by IDs.
func (hauo *HPArtistUpdateOne) AddOwningIgPostIDs(ids ...int) *HPArtistUpdateOne {
	hauo.mutation.AddOwningIgPostIDs(ids...)
	return hauo
}

// AddOwningIgPosts adds the "owning_ig_posts" edges to the HPIgPost entity.
func (hauo *HPArtistUpdateOne) AddOwningIgPosts(h ...*HPIgPost) *HPArtistUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hauo.AddOwningIgPostIDs(ids...)
}

// AddTaggedIgPostIDs adds the "tagged_ig_posts" edge to the HPIgPost entity by IDs.
func (hauo *HPArtistUpdateOne) AddTaggedIgPostIDs(ids ...int) *HPArtistUpdateOne {
	hauo.mutation.AddTaggedIgPostIDs(ids...)
	return hauo
}

// AddTaggedIgPosts adds the "tagged_ig_posts" edges to the HPIgPost entity.
func (hauo *HPArtistUpdateOne) AddTaggedIgPosts(h ...*HPIgPost) *HPArtistUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hauo.AddTaggedIgPostIDs(ids...)
}

// AddOwningAmebloPostIDs adds the "owning_ameblo_posts" edge to the HPAmebloPost entity by IDs.
func (hauo *HPArtistUpdateOne) AddOwningAmebloPostIDs(ids ...int) *HPArtistUpdateOne {
	hauo.mutation.AddOwningAmebloPostIDs(ids...)
	return hauo
}

// AddOwningAmebloPosts adds the "owning_ameblo_posts" edges to the HPAmebloPost entity.
func (hauo *HPArtistUpdateOne) AddOwningAmebloPosts(h ...*HPAmebloPost) *HPArtistUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hauo.AddOwningAmebloPostIDs(ids...)
}

// AddTaggedAmebloPostIDs adds the "tagged_ameblo_posts" edge to the HPAmebloPost entity by IDs.
func (hauo *HPArtistUpdateOne) AddTaggedAmebloPostIDs(ids ...int) *HPArtistUpdateOne {
	hauo.mutation.AddTaggedAmebloPostIDs(ids...)
	return hauo
}

// AddTaggedAmebloPosts adds the "tagged_ameblo_posts" edges to the HPAmebloPost entity.
func (hauo *HPArtistUpdateOne) AddTaggedAmebloPosts(h ...*HPAmebloPost) *HPArtistUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hauo.AddTaggedAmebloPostIDs(ids...)
}

// AddTaggedElineupMallItemIDs adds the "tagged_elineup_mall_items" edge to the HPElineupMallItem entity by IDs.
func (hauo *HPArtistUpdateOne) AddTaggedElineupMallItemIDs(ids ...int) *HPArtistUpdateOne {
	hauo.mutation.AddTaggedElineupMallItemIDs(ids...)
	return hauo
}

// AddTaggedElineupMallItems adds the "tagged_elineup_mall_items" edges to the HPElineupMallItem entity.
func (hauo *HPArtistUpdateOne) AddTaggedElineupMallItems(h ...*HPElineupMallItem) *HPArtistUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hauo.AddTaggedElineupMallItemIDs(ids...)
}

// Mutation returns the HPArtistMutation object of the builder.
func (hauo *HPArtistUpdateOne) Mutation() *HPArtistMutation {
	return hauo.mutation
}

// ClearMembers clears all "members" edges to the HPMember entity.
func (hauo *HPArtistUpdateOne) ClearMembers() *HPArtistUpdateOne {
	hauo.mutation.ClearMembers()
	return hauo
}

// RemoveMemberIDs removes the "members" edge to HPMember entities by IDs.
func (hauo *HPArtistUpdateOne) RemoveMemberIDs(ids ...int) *HPArtistUpdateOne {
	hauo.mutation.RemoveMemberIDs(ids...)
	return hauo
}

// RemoveMembers removes "members" edges to HPMember entities.
func (hauo *HPArtistUpdateOne) RemoveMembers(h ...*HPMember) *HPArtistUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hauo.RemoveMemberIDs(ids...)
}

// ClearAssets clears all "assets" edges to the HPAsset entity.
func (hauo *HPArtistUpdateOne) ClearAssets() *HPArtistUpdateOne {
	hauo.mutation.ClearAssets()
	return hauo
}

// RemoveAssetIDs removes the "assets" edge to HPAsset entities by IDs.
func (hauo *HPArtistUpdateOne) RemoveAssetIDs(ids ...int) *HPArtistUpdateOne {
	hauo.mutation.RemoveAssetIDs(ids...)
	return hauo
}

// RemoveAssets removes "assets" edges to HPAsset entities.
func (hauo *HPArtistUpdateOne) RemoveAssets(h ...*HPAsset) *HPArtistUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hauo.RemoveAssetIDs(ids...)
}

// ClearOwningFeed clears all "owning_feed" edges to the HPFeedItem entity.
func (hauo *HPArtistUpdateOne) ClearOwningFeed() *HPArtistUpdateOne {
	hauo.mutation.ClearOwningFeed()
	return hauo
}

// RemoveOwningFeedIDs removes the "owning_feed" edge to HPFeedItem entities by IDs.
func (hauo *HPArtistUpdateOne) RemoveOwningFeedIDs(ids ...int) *HPArtistUpdateOne {
	hauo.mutation.RemoveOwningFeedIDs(ids...)
	return hauo
}

// RemoveOwningFeed removes "owning_feed" edges to HPFeedItem entities.
func (hauo *HPArtistUpdateOne) RemoveOwningFeed(h ...*HPFeedItem) *HPArtistUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hauo.RemoveOwningFeedIDs(ids...)
}

// ClearTaggedFeed clears all "tagged_feed" edges to the HPFeedItem entity.
func (hauo *HPArtistUpdateOne) ClearTaggedFeed() *HPArtistUpdateOne {
	hauo.mutation.ClearTaggedFeed()
	return hauo
}

// RemoveTaggedFeedIDs removes the "tagged_feed" edge to HPFeedItem entities by IDs.
func (hauo *HPArtistUpdateOne) RemoveTaggedFeedIDs(ids ...int) *HPArtistUpdateOne {
	hauo.mutation.RemoveTaggedFeedIDs(ids...)
	return hauo
}

// RemoveTaggedFeed removes "tagged_feed" edges to HPFeedItem entities.
func (hauo *HPArtistUpdateOne) RemoveTaggedFeed(h ...*HPFeedItem) *HPArtistUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hauo.RemoveTaggedFeedIDs(ids...)
}

// ClearOwningIgPosts clears all "owning_ig_posts" edges to the HPIgPost entity.
func (hauo *HPArtistUpdateOne) ClearOwningIgPosts() *HPArtistUpdateOne {
	hauo.mutation.ClearOwningIgPosts()
	return hauo
}

// RemoveOwningIgPostIDs removes the "owning_ig_posts" edge to HPIgPost entities by IDs.
func (hauo *HPArtistUpdateOne) RemoveOwningIgPostIDs(ids ...int) *HPArtistUpdateOne {
	hauo.mutation.RemoveOwningIgPostIDs(ids...)
	return hauo
}

// RemoveOwningIgPosts removes "owning_ig_posts" edges to HPIgPost entities.
func (hauo *HPArtistUpdateOne) RemoveOwningIgPosts(h ...*HPIgPost) *HPArtistUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hauo.RemoveOwningIgPostIDs(ids...)
}

// ClearTaggedIgPosts clears all "tagged_ig_posts" edges to the HPIgPost entity.
func (hauo *HPArtistUpdateOne) ClearTaggedIgPosts() *HPArtistUpdateOne {
	hauo.mutation.ClearTaggedIgPosts()
	return hauo
}

// RemoveTaggedIgPostIDs removes the "tagged_ig_posts" edge to HPIgPost entities by IDs.
func (hauo *HPArtistUpdateOne) RemoveTaggedIgPostIDs(ids ...int) *HPArtistUpdateOne {
	hauo.mutation.RemoveTaggedIgPostIDs(ids...)
	return hauo
}

// RemoveTaggedIgPosts removes "tagged_ig_posts" edges to HPIgPost entities.
func (hauo *HPArtistUpdateOne) RemoveTaggedIgPosts(h ...*HPIgPost) *HPArtistUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hauo.RemoveTaggedIgPostIDs(ids...)
}

// ClearOwningAmebloPosts clears all "owning_ameblo_posts" edges to the HPAmebloPost entity.
func (hauo *HPArtistUpdateOne) ClearOwningAmebloPosts() *HPArtistUpdateOne {
	hauo.mutation.ClearOwningAmebloPosts()
	return hauo
}

// RemoveOwningAmebloPostIDs removes the "owning_ameblo_posts" edge to HPAmebloPost entities by IDs.
func (hauo *HPArtistUpdateOne) RemoveOwningAmebloPostIDs(ids ...int) *HPArtistUpdateOne {
	hauo.mutation.RemoveOwningAmebloPostIDs(ids...)
	return hauo
}

// RemoveOwningAmebloPosts removes "owning_ameblo_posts" edges to HPAmebloPost entities.
func (hauo *HPArtistUpdateOne) RemoveOwningAmebloPosts(h ...*HPAmebloPost) *HPArtistUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hauo.RemoveOwningAmebloPostIDs(ids...)
}

// ClearTaggedAmebloPosts clears all "tagged_ameblo_posts" edges to the HPAmebloPost entity.
func (hauo *HPArtistUpdateOne) ClearTaggedAmebloPosts() *HPArtistUpdateOne {
	hauo.mutation.ClearTaggedAmebloPosts()
	return hauo
}

// RemoveTaggedAmebloPostIDs removes the "tagged_ameblo_posts" edge to HPAmebloPost entities by IDs.
func (hauo *HPArtistUpdateOne) RemoveTaggedAmebloPostIDs(ids ...int) *HPArtistUpdateOne {
	hauo.mutation.RemoveTaggedAmebloPostIDs(ids...)
	return hauo
}

// RemoveTaggedAmebloPosts removes "tagged_ameblo_posts" edges to HPAmebloPost entities.
func (hauo *HPArtistUpdateOne) RemoveTaggedAmebloPosts(h ...*HPAmebloPost) *HPArtistUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hauo.RemoveTaggedAmebloPostIDs(ids...)
}

// ClearTaggedElineupMallItems clears all "tagged_elineup_mall_items" edges to the HPElineupMallItem entity.
func (hauo *HPArtistUpdateOne) ClearTaggedElineupMallItems() *HPArtistUpdateOne {
	hauo.mutation.ClearTaggedElineupMallItems()
	return hauo
}

// RemoveTaggedElineupMallItemIDs removes the "tagged_elineup_mall_items" edge to HPElineupMallItem entities by IDs.
func (hauo *HPArtistUpdateOne) RemoveTaggedElineupMallItemIDs(ids ...int) *HPArtistUpdateOne {
	hauo.mutation.RemoveTaggedElineupMallItemIDs(ids...)
	return hauo
}

// RemoveTaggedElineupMallItems removes "tagged_elineup_mall_items" edges to HPElineupMallItem entities.
func (hauo *HPArtistUpdateOne) RemoveTaggedElineupMallItems(h ...*HPElineupMallItem) *HPArtistUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hauo.RemoveTaggedElineupMallItemIDs(ids...)
}

// Where appends a list predicates to the HPArtistUpdate builder.
func (hauo *HPArtistUpdateOne) Where(ps ...predicate.HPArtist) *HPArtistUpdateOne {
	hauo.mutation.Where(ps...)
	return hauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (hauo *HPArtistUpdateOne) Select(field string, fields ...string) *HPArtistUpdateOne {
	hauo.fields = append([]string{field}, fields...)
	return hauo
}

// Save executes the query and returns the updated HPArtist entity.
func (hauo *HPArtistUpdateOne) Save(ctx context.Context) (*HPArtist, error) {
	return withHooks[*HPArtist, HPArtistMutation](ctx, hauo.sqlSave, hauo.mutation, hauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hauo *HPArtistUpdateOne) SaveX(ctx context.Context) *HPArtist {
	node, err := hauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (hauo *HPArtistUpdateOne) Exec(ctx context.Context) error {
	_, err := hauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hauo *HPArtistUpdateOne) ExecX(ctx context.Context) {
	if err := hauo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (hauo *HPArtistUpdateOne) sqlSave(ctx context.Context) (_node *HPArtist, err error) {
	_spec := sqlgraph.NewUpdateSpec(hpartist.Table, hpartist.Columns, sqlgraph.NewFieldSpec(hpartist.FieldID, field.TypeInt))
	id, ok := hauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "HPArtist.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := hauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hpartist.FieldID)
		for _, f := range fields {
			if !hpartist.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != hpartist.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := hauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hauo.mutation.CrawledAt(); ok {
		_spec.SetField(hpartist.FieldCrawledAt, field.TypeTime, value)
	}
	if hauo.mutation.CrawledAtCleared() {
		_spec.ClearField(hpartist.FieldCrawledAt, field.TypeTime)
	}
	if value, ok := hauo.mutation.ErrorCount(); ok {
		_spec.SetField(hpartist.FieldErrorCount, field.TypeInt, value)
	}
	if value, ok := hauo.mutation.AddedErrorCount(); ok {
		_spec.AddField(hpartist.FieldErrorCount, field.TypeInt, value)
	}
	if value, ok := hauo.mutation.ManuallyModified(); ok {
		_spec.SetField(hpartist.FieldManuallyModified, field.TypeJSON, value)
	}
	if hauo.mutation.ManuallyModifiedCleared() {
		_spec.ClearField(hpartist.FieldManuallyModified, field.TypeJSON)
	}
	if value, ok := hauo.mutation.LastErrorMessage(); ok {
		_spec.SetField(hpartist.FieldLastErrorMessage, field.TypeString, value)
	}
	if hauo.mutation.LastErrorMessageCleared() {
		_spec.ClearField(hpartist.FieldLastErrorMessage, field.TypeString)
	}
	if value, ok := hauo.mutation.RecrawlRequired(); ok {
		_spec.SetField(hpartist.FieldRecrawlRequired, field.TypeBool, value)
	}
	if hauo.mutation.RecrawlRequiredCleared() {
		_spec.ClearField(hpartist.FieldRecrawlRequired, field.TypeBool)
	}
	if hauo.mutation.CreatedAtCleared() {
		_spec.ClearField(hpartist.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := hauo.mutation.UpdatedAt(); ok {
		_spec.SetField(hpartist.FieldUpdatedAt, field.TypeTime, value)
	}
	if hauo.mutation.UpdatedAtCleared() {
		_spec.ClearField(hpartist.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := hauo.mutation.Key(); ok {
		_spec.SetField(hpartist.FieldKey, field.TypeString, value)
	}
	if value, ok := hauo.mutation.Name(); ok {
		_spec.SetField(hpartist.FieldName, field.TypeString, value)
	}
	if value, ok := hauo.mutation.ThumbnailURL(); ok {
		_spec.SetField(hpartist.FieldThumbnailURL, field.TypeString, value)
	}
	if value, ok := hauo.mutation.Index(); ok {
		_spec.SetField(hpartist.FieldIndex, field.TypeInt, value)
	}
	if value, ok := hauo.mutation.AddedIndex(); ok {
		_spec.AddField(hpartist.FieldIndex, field.TypeInt, value)
	}
	if hauo.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpartist.MembersTable,
			Columns: []string{hpartist.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpmember.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hauo.mutation.RemovedMembersIDs(); len(nodes) > 0 && !hauo.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpartist.MembersTable,
			Columns: []string{hpartist.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hauo.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpartist.MembersTable,
			Columns: []string{hpartist.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hauo.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpartist.AssetsTable,
			Columns: []string{hpartist.AssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpasset.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hauo.mutation.RemovedAssetsIDs(); len(nodes) > 0 && !hauo.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpartist.AssetsTable,
			Columns: []string{hpartist.AssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpasset.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hauo.mutation.AssetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpartist.AssetsTable,
			Columns: []string{hpartist.AssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpasset.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hauo.mutation.OwningFeedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpartist.OwningFeedTable,
			Columns: []string{hpartist.OwningFeedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpfeeditem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hauo.mutation.RemovedOwningFeedIDs(); len(nodes) > 0 && !hauo.mutation.OwningFeedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpartist.OwningFeedTable,
			Columns: []string{hpartist.OwningFeedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpfeeditem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hauo.mutation.OwningFeedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpartist.OwningFeedTable,
			Columns: []string{hpartist.OwningFeedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpfeeditem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hauo.mutation.TaggedFeedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpartist.TaggedFeedTable,
			Columns: hpartist.TaggedFeedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpfeeditem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hauo.mutation.RemovedTaggedFeedIDs(); len(nodes) > 0 && !hauo.mutation.TaggedFeedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpartist.TaggedFeedTable,
			Columns: hpartist.TaggedFeedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpfeeditem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hauo.mutation.TaggedFeedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpartist.TaggedFeedTable,
			Columns: hpartist.TaggedFeedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpfeeditem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hauo.mutation.OwningIgPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpartist.OwningIgPostsTable,
			Columns: []string{hpartist.OwningIgPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpigpost.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hauo.mutation.RemovedOwningIgPostsIDs(); len(nodes) > 0 && !hauo.mutation.OwningIgPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpartist.OwningIgPostsTable,
			Columns: []string{hpartist.OwningIgPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpigpost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hauo.mutation.OwningIgPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpartist.OwningIgPostsTable,
			Columns: []string{hpartist.OwningIgPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpigpost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hauo.mutation.TaggedIgPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpartist.TaggedIgPostsTable,
			Columns: hpartist.TaggedIgPostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpigpost.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hauo.mutation.RemovedTaggedIgPostsIDs(); len(nodes) > 0 && !hauo.mutation.TaggedIgPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpartist.TaggedIgPostsTable,
			Columns: hpartist.TaggedIgPostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpigpost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hauo.mutation.TaggedIgPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpartist.TaggedIgPostsTable,
			Columns: hpartist.TaggedIgPostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpigpost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hauo.mutation.OwningAmebloPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpartist.OwningAmebloPostsTable,
			Columns: []string{hpartist.OwningAmebloPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpameblopost.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hauo.mutation.RemovedOwningAmebloPostsIDs(); len(nodes) > 0 && !hauo.mutation.OwningAmebloPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpartist.OwningAmebloPostsTable,
			Columns: []string{hpartist.OwningAmebloPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpameblopost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hauo.mutation.OwningAmebloPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpartist.OwningAmebloPostsTable,
			Columns: []string{hpartist.OwningAmebloPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpameblopost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hauo.mutation.TaggedAmebloPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpartist.TaggedAmebloPostsTable,
			Columns: hpartist.TaggedAmebloPostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpameblopost.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hauo.mutation.RemovedTaggedAmebloPostsIDs(); len(nodes) > 0 && !hauo.mutation.TaggedAmebloPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpartist.TaggedAmebloPostsTable,
			Columns: hpartist.TaggedAmebloPostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpameblopost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hauo.mutation.TaggedAmebloPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpartist.TaggedAmebloPostsTable,
			Columns: hpartist.TaggedAmebloPostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpameblopost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hauo.mutation.TaggedElineupMallItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpartist.TaggedElineupMallItemsTable,
			Columns: hpartist.TaggedElineupMallItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpelineupmallitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hauo.mutation.RemovedTaggedElineupMallItemsIDs(); len(nodes) > 0 && !hauo.mutation.TaggedElineupMallItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpartist.TaggedElineupMallItemsTable,
			Columns: hpartist.TaggedElineupMallItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpelineupmallitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hauo.mutation.TaggedElineupMallItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpartist.TaggedElineupMallItemsTable,
			Columns: hpartist.TaggedElineupMallItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpelineupmallitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &HPArtist{config: hauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, hauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hpartist.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	hauo.mutation.done = true
	return _node, nil
}
