// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yssk22/hpapp/go/service/ent/usernotificationlog"
	"github.com/yssk22/hpapp/go/service/ent/usernotificationsetting"
	"github.com/yssk22/hpapp/go/service/schema/enums"
	"github.com/yssk22/hpapp/go/service/schema/jsonfields"
)

// UserNotificationLogCreate is the builder for creating a UserNotificationLog entity.
type UserNotificationLogCreate struct {
	config
	mutation *UserNotificationLogMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (unlc *UserNotificationLogCreate) SetCreatedAt(t time.Time) *UserNotificationLogCreate {
	unlc.mutation.SetCreatedAt(t)
	return unlc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (unlc *UserNotificationLogCreate) SetNillableCreatedAt(t *time.Time) *UserNotificationLogCreate {
	if t != nil {
		unlc.SetCreatedAt(*t)
	}
	return unlc
}

// SetUpdatedAt sets the "updated_at" field.
func (unlc *UserNotificationLogCreate) SetUpdatedAt(t time.Time) *UserNotificationLogCreate {
	unlc.mutation.SetUpdatedAt(t)
	return unlc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (unlc *UserNotificationLogCreate) SetNillableUpdatedAt(t *time.Time) *UserNotificationLogCreate {
	if t != nil {
		unlc.SetUpdatedAt(*t)
	}
	return unlc
}

// SetKey sets the "key" field.
func (unlc *UserNotificationLogCreate) SetKey(s string) *UserNotificationLogCreate {
	unlc.mutation.SetKey(s)
	return unlc
}

// SetTrigger sets the "trigger" field.
func (unlc *UserNotificationLogCreate) SetTrigger(s string) *UserNotificationLogCreate {
	unlc.mutation.SetTrigger(s)
	return unlc
}

// SetIsTest sets the "is_test" field.
func (unlc *UserNotificationLogCreate) SetIsTest(b bool) *UserNotificationLogCreate {
	unlc.mutation.SetIsTest(b)
	return unlc
}

// SetReactNavigationMessage sets the "react_navigation_message" field.
func (unlc *UserNotificationLogCreate) SetReactNavigationMessage(jnp jsonfields.ReactNavigationPush) *UserNotificationLogCreate {
	unlc.mutation.SetReactNavigationMessage(jnp)
	return unlc
}

// SetExpectedDeliveryTime sets the "expected_delivery_time" field.
func (unlc *UserNotificationLogCreate) SetExpectedDeliveryTime(t time.Time) *UserNotificationLogCreate {
	unlc.mutation.SetExpectedDeliveryTime(t)
	return unlc
}

// SetStatus sets the "status" field.
func (unlc *UserNotificationLogCreate) SetStatus(ens enums.UserNotificationStatus) *UserNotificationLogCreate {
	unlc.mutation.SetStatus(ens)
	return unlc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (unlc *UserNotificationLogCreate) SetNillableStatus(ens *enums.UserNotificationStatus) *UserNotificationLogCreate {
	if ens != nil {
		unlc.SetStatus(*ens)
	}
	return unlc
}

// SetStatusMessage sets the "status_message" field.
func (unlc *UserNotificationLogCreate) SetStatusMessage(s string) *UserNotificationLogCreate {
	unlc.mutation.SetStatusMessage(s)
	return unlc
}

// SetNillableStatusMessage sets the "status_message" field if the given value is not nil.
func (unlc *UserNotificationLogCreate) SetNillableStatusMessage(s *string) *UserNotificationLogCreate {
	if s != nil {
		unlc.SetStatusMessage(*s)
	}
	return unlc
}

// AddReceiverIDs adds the "receivers" edge to the UserNotificationSetting entity by IDs.
func (unlc *UserNotificationLogCreate) AddReceiverIDs(ids ...int) *UserNotificationLogCreate {
	unlc.mutation.AddReceiverIDs(ids...)
	return unlc
}

// AddReceivers adds the "receivers" edges to the UserNotificationSetting entity.
func (unlc *UserNotificationLogCreate) AddReceivers(u ...*UserNotificationSetting) *UserNotificationLogCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return unlc.AddReceiverIDs(ids...)
}

// Mutation returns the UserNotificationLogMutation object of the builder.
func (unlc *UserNotificationLogCreate) Mutation() *UserNotificationLogMutation {
	return unlc.mutation
}

// Save creates the UserNotificationLog in the database.
func (unlc *UserNotificationLogCreate) Save(ctx context.Context) (*UserNotificationLog, error) {
	if err := unlc.defaults(); err != nil {
		return nil, err
	}
	return withHooks[*UserNotificationLog, UserNotificationLogMutation](ctx, unlc.sqlSave, unlc.mutation, unlc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (unlc *UserNotificationLogCreate) SaveX(ctx context.Context) *UserNotificationLog {
	v, err := unlc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (unlc *UserNotificationLogCreate) Exec(ctx context.Context) error {
	_, err := unlc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (unlc *UserNotificationLogCreate) ExecX(ctx context.Context) {
	if err := unlc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (unlc *UserNotificationLogCreate) defaults() error {
	if _, ok := unlc.mutation.Status(); !ok {
		v := usernotificationlog.DefaultStatus
		unlc.mutation.SetStatus(v)
	}
	if _, ok := unlc.mutation.StatusMessage(); !ok {
		v := usernotificationlog.DefaultStatusMessage
		unlc.mutation.SetStatusMessage(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (unlc *UserNotificationLogCreate) check() error {
	if _, ok := unlc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "UserNotificationLog.key"`)}
	}
	if _, ok := unlc.mutation.Trigger(); !ok {
		return &ValidationError{Name: "trigger", err: errors.New(`ent: missing required field "UserNotificationLog.trigger"`)}
	}
	if _, ok := unlc.mutation.IsTest(); !ok {
		return &ValidationError{Name: "is_test", err: errors.New(`ent: missing required field "UserNotificationLog.is_test"`)}
	}
	if _, ok := unlc.mutation.ReactNavigationMessage(); !ok {
		return &ValidationError{Name: "react_navigation_message", err: errors.New(`ent: missing required field "UserNotificationLog.react_navigation_message"`)}
	}
	if _, ok := unlc.mutation.ExpectedDeliveryTime(); !ok {
		return &ValidationError{Name: "expected_delivery_time", err: errors.New(`ent: missing required field "UserNotificationLog.expected_delivery_time"`)}
	}
	if _, ok := unlc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "UserNotificationLog.status"`)}
	}
	if v, ok := unlc.mutation.Status(); ok {
		if err := usernotificationlog.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "UserNotificationLog.status": %w`, err)}
		}
	}
	if _, ok := unlc.mutation.StatusMessage(); !ok {
		return &ValidationError{Name: "status_message", err: errors.New(`ent: missing required field "UserNotificationLog.status_message"`)}
	}
	return nil
}

func (unlc *UserNotificationLogCreate) sqlSave(ctx context.Context) (*UserNotificationLog, error) {
	if err := unlc.check(); err != nil {
		return nil, err
	}
	_node, _spec := unlc.createSpec()
	if err := sqlgraph.CreateNode(ctx, unlc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	unlc.mutation.id = &_node.ID
	unlc.mutation.done = true
	return _node, nil
}

func (unlc *UserNotificationLogCreate) createSpec() (*UserNotificationLog, *sqlgraph.CreateSpec) {
	var (
		_node = &UserNotificationLog{config: unlc.config}
		_spec = sqlgraph.NewCreateSpec(usernotificationlog.Table, sqlgraph.NewFieldSpec(usernotificationlog.FieldID, field.TypeInt))
	)
	_spec.OnConflict = unlc.conflict
	if value, ok := unlc.mutation.CreatedAt(); ok {
		_spec.SetField(usernotificationlog.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := unlc.mutation.UpdatedAt(); ok {
		_spec.SetField(usernotificationlog.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := unlc.mutation.Key(); ok {
		_spec.SetField(usernotificationlog.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := unlc.mutation.Trigger(); ok {
		_spec.SetField(usernotificationlog.FieldTrigger, field.TypeString, value)
		_node.Trigger = value
	}
	if value, ok := unlc.mutation.IsTest(); ok {
		_spec.SetField(usernotificationlog.FieldIsTest, field.TypeBool, value)
		_node.IsTest = value
	}
	if value, ok := unlc.mutation.ReactNavigationMessage(); ok {
		_spec.SetField(usernotificationlog.FieldReactNavigationMessage, field.TypeJSON, value)
		_node.ReactNavigationMessage = value
	}
	if value, ok := unlc.mutation.ExpectedDeliveryTime(); ok {
		_spec.SetField(usernotificationlog.FieldExpectedDeliveryTime, field.TypeTime, value)
		_node.ExpectedDeliveryTime = value
	}
	if value, ok := unlc.mutation.Status(); ok {
		_spec.SetField(usernotificationlog.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := unlc.mutation.StatusMessage(); ok {
		_spec.SetField(usernotificationlog.FieldStatusMessage, field.TypeString, value)
		_node.StatusMessage = value
	}
	if nodes := unlc.mutation.ReceiversIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   usernotificationlog.ReceiversTable,
			Columns: usernotificationlog.ReceiversPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usernotificationsetting.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserNotificationLog.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserNotificationLogUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (unlc *UserNotificationLogCreate) OnConflict(opts ...sql.ConflictOption) *UserNotificationLogUpsertOne {
	unlc.conflict = opts
	return &UserNotificationLogUpsertOne{
		create: unlc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserNotificationLog.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (unlc *UserNotificationLogCreate) OnConflictColumns(columns ...string) *UserNotificationLogUpsertOne {
	unlc.conflict = append(unlc.conflict, sql.ConflictColumns(columns...))
	return &UserNotificationLogUpsertOne{
		create: unlc,
	}
}

type (
	// UserNotificationLogUpsertOne is the builder for "upsert"-ing
	//  one UserNotificationLog node.
	UserNotificationLogUpsertOne struct {
		create *UserNotificationLogCreate
	}

	// UserNotificationLogUpsert is the "OnConflict" setter.
	UserNotificationLogUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *UserNotificationLogUpsert) SetUpdatedAt(v time.Time) *UserNotificationLogUpsert {
	u.Set(usernotificationlog.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserNotificationLogUpsert) UpdateUpdatedAt() *UserNotificationLogUpsert {
	u.SetExcluded(usernotificationlog.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *UserNotificationLogUpsert) ClearUpdatedAt() *UserNotificationLogUpsert {
	u.SetNull(usernotificationlog.FieldUpdatedAt)
	return u
}

// SetIsTest sets the "is_test" field.
func (u *UserNotificationLogUpsert) SetIsTest(v bool) *UserNotificationLogUpsert {
	u.Set(usernotificationlog.FieldIsTest, v)
	return u
}

// UpdateIsTest sets the "is_test" field to the value that was provided on create.
func (u *UserNotificationLogUpsert) UpdateIsTest() *UserNotificationLogUpsert {
	u.SetExcluded(usernotificationlog.FieldIsTest)
	return u
}

// SetReactNavigationMessage sets the "react_navigation_message" field.
func (u *UserNotificationLogUpsert) SetReactNavigationMessage(v jsonfields.ReactNavigationPush) *UserNotificationLogUpsert {
	u.Set(usernotificationlog.FieldReactNavigationMessage, v)
	return u
}

// UpdateReactNavigationMessage sets the "react_navigation_message" field to the value that was provided on create.
func (u *UserNotificationLogUpsert) UpdateReactNavigationMessage() *UserNotificationLogUpsert {
	u.SetExcluded(usernotificationlog.FieldReactNavigationMessage)
	return u
}

// SetExpectedDeliveryTime sets the "expected_delivery_time" field.
func (u *UserNotificationLogUpsert) SetExpectedDeliveryTime(v time.Time) *UserNotificationLogUpsert {
	u.Set(usernotificationlog.FieldExpectedDeliveryTime, v)
	return u
}

// UpdateExpectedDeliveryTime sets the "expected_delivery_time" field to the value that was provided on create.
func (u *UserNotificationLogUpsert) UpdateExpectedDeliveryTime() *UserNotificationLogUpsert {
	u.SetExcluded(usernotificationlog.FieldExpectedDeliveryTime)
	return u
}

// SetStatus sets the "status" field.
func (u *UserNotificationLogUpsert) SetStatus(v enums.UserNotificationStatus) *UserNotificationLogUpsert {
	u.Set(usernotificationlog.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *UserNotificationLogUpsert) UpdateStatus() *UserNotificationLogUpsert {
	u.SetExcluded(usernotificationlog.FieldStatus)
	return u
}

// SetStatusMessage sets the "status_message" field.
func (u *UserNotificationLogUpsert) SetStatusMessage(v string) *UserNotificationLogUpsert {
	u.Set(usernotificationlog.FieldStatusMessage, v)
	return u
}

// UpdateStatusMessage sets the "status_message" field to the value that was provided on create.
func (u *UserNotificationLogUpsert) UpdateStatusMessage() *UserNotificationLogUpsert {
	u.SetExcluded(usernotificationlog.FieldStatusMessage)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.UserNotificationLog.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *UserNotificationLogUpsertOne) UpdateNewValues() *UserNotificationLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(usernotificationlog.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Key(); exists {
			s.SetIgnore(usernotificationlog.FieldKey)
		}
		if _, exists := u.create.mutation.Trigger(); exists {
			s.SetIgnore(usernotificationlog.FieldTrigger)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.UserNotificationLog.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *UserNotificationLogUpsertOne) Ignore() *UserNotificationLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserNotificationLogUpsertOne) DoNothing() *UserNotificationLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserNotificationLogCreate.OnConflict
// documentation for more info.
func (u *UserNotificationLogUpsertOne) Update(set func(*UserNotificationLogUpsert)) *UserNotificationLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserNotificationLogUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserNotificationLogUpsertOne) SetUpdatedAt(v time.Time) *UserNotificationLogUpsertOne {
	return u.Update(func(s *UserNotificationLogUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserNotificationLogUpsertOne) UpdateUpdatedAt() *UserNotificationLogUpsertOne {
	return u.Update(func(s *UserNotificationLogUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *UserNotificationLogUpsertOne) ClearUpdatedAt() *UserNotificationLogUpsertOne {
	return u.Update(func(s *UserNotificationLogUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetIsTest sets the "is_test" field.
func (u *UserNotificationLogUpsertOne) SetIsTest(v bool) *UserNotificationLogUpsertOne {
	return u.Update(func(s *UserNotificationLogUpsert) {
		s.SetIsTest(v)
	})
}

// UpdateIsTest sets the "is_test" field to the value that was provided on create.
func (u *UserNotificationLogUpsertOne) UpdateIsTest() *UserNotificationLogUpsertOne {
	return u.Update(func(s *UserNotificationLogUpsert) {
		s.UpdateIsTest()
	})
}

// SetReactNavigationMessage sets the "react_navigation_message" field.
func (u *UserNotificationLogUpsertOne) SetReactNavigationMessage(v jsonfields.ReactNavigationPush) *UserNotificationLogUpsertOne {
	return u.Update(func(s *UserNotificationLogUpsert) {
		s.SetReactNavigationMessage(v)
	})
}

// UpdateReactNavigationMessage sets the "react_navigation_message" field to the value that was provided on create.
func (u *UserNotificationLogUpsertOne) UpdateReactNavigationMessage() *UserNotificationLogUpsertOne {
	return u.Update(func(s *UserNotificationLogUpsert) {
		s.UpdateReactNavigationMessage()
	})
}

// SetExpectedDeliveryTime sets the "expected_delivery_time" field.
func (u *UserNotificationLogUpsertOne) SetExpectedDeliveryTime(v time.Time) *UserNotificationLogUpsertOne {
	return u.Update(func(s *UserNotificationLogUpsert) {
		s.SetExpectedDeliveryTime(v)
	})
}

// UpdateExpectedDeliveryTime sets the "expected_delivery_time" field to the value that was provided on create.
func (u *UserNotificationLogUpsertOne) UpdateExpectedDeliveryTime() *UserNotificationLogUpsertOne {
	return u.Update(func(s *UserNotificationLogUpsert) {
		s.UpdateExpectedDeliveryTime()
	})
}

// SetStatus sets the "status" field.
func (u *UserNotificationLogUpsertOne) SetStatus(v enums.UserNotificationStatus) *UserNotificationLogUpsertOne {
	return u.Update(func(s *UserNotificationLogUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *UserNotificationLogUpsertOne) UpdateStatus() *UserNotificationLogUpsertOne {
	return u.Update(func(s *UserNotificationLogUpsert) {
		s.UpdateStatus()
	})
}

// SetStatusMessage sets the "status_message" field.
func (u *UserNotificationLogUpsertOne) SetStatusMessage(v string) *UserNotificationLogUpsertOne {
	return u.Update(func(s *UserNotificationLogUpsert) {
		s.SetStatusMessage(v)
	})
}

// UpdateStatusMessage sets the "status_message" field to the value that was provided on create.
func (u *UserNotificationLogUpsertOne) UpdateStatusMessage() *UserNotificationLogUpsertOne {
	return u.Update(func(s *UserNotificationLogUpsert) {
		s.UpdateStatusMessage()
	})
}

// Exec executes the query.
func (u *UserNotificationLogUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserNotificationLogCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserNotificationLogUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserNotificationLogUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserNotificationLogUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserNotificationLogCreateBulk is the builder for creating many UserNotificationLog entities in bulk.
type UserNotificationLogCreateBulk struct {
	config
	builders []*UserNotificationLogCreate
	conflict []sql.ConflictOption
}

// Save creates the UserNotificationLog entities in the database.
func (unlcb *UserNotificationLogCreateBulk) Save(ctx context.Context) ([]*UserNotificationLog, error) {
	specs := make([]*sqlgraph.CreateSpec, len(unlcb.builders))
	nodes := make([]*UserNotificationLog, len(unlcb.builders))
	mutators := make([]Mutator, len(unlcb.builders))
	for i := range unlcb.builders {
		func(i int, root context.Context) {
			builder := unlcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserNotificationLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, unlcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = unlcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, unlcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, unlcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (unlcb *UserNotificationLogCreateBulk) SaveX(ctx context.Context) []*UserNotificationLog {
	v, err := unlcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (unlcb *UserNotificationLogCreateBulk) Exec(ctx context.Context) error {
	_, err := unlcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (unlcb *UserNotificationLogCreateBulk) ExecX(ctx context.Context) {
	if err := unlcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserNotificationLog.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserNotificationLogUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (unlcb *UserNotificationLogCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserNotificationLogUpsertBulk {
	unlcb.conflict = opts
	return &UserNotificationLogUpsertBulk{
		create: unlcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserNotificationLog.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (unlcb *UserNotificationLogCreateBulk) OnConflictColumns(columns ...string) *UserNotificationLogUpsertBulk {
	unlcb.conflict = append(unlcb.conflict, sql.ConflictColumns(columns...))
	return &UserNotificationLogUpsertBulk{
		create: unlcb,
	}
}

// UserNotificationLogUpsertBulk is the builder for "upsert"-ing
// a bulk of UserNotificationLog nodes.
type UserNotificationLogUpsertBulk struct {
	create *UserNotificationLogCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.UserNotificationLog.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *UserNotificationLogUpsertBulk) UpdateNewValues() *UserNotificationLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(usernotificationlog.FieldCreatedAt)
			}
			if _, exists := b.mutation.Key(); exists {
				s.SetIgnore(usernotificationlog.FieldKey)
			}
			if _, exists := b.mutation.Trigger(); exists {
				s.SetIgnore(usernotificationlog.FieldTrigger)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserNotificationLog.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *UserNotificationLogUpsertBulk) Ignore() *UserNotificationLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserNotificationLogUpsertBulk) DoNothing() *UserNotificationLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserNotificationLogCreateBulk.OnConflict
// documentation for more info.
func (u *UserNotificationLogUpsertBulk) Update(set func(*UserNotificationLogUpsert)) *UserNotificationLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserNotificationLogUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserNotificationLogUpsertBulk) SetUpdatedAt(v time.Time) *UserNotificationLogUpsertBulk {
	return u.Update(func(s *UserNotificationLogUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserNotificationLogUpsertBulk) UpdateUpdatedAt() *UserNotificationLogUpsertBulk {
	return u.Update(func(s *UserNotificationLogUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *UserNotificationLogUpsertBulk) ClearUpdatedAt() *UserNotificationLogUpsertBulk {
	return u.Update(func(s *UserNotificationLogUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetIsTest sets the "is_test" field.
func (u *UserNotificationLogUpsertBulk) SetIsTest(v bool) *UserNotificationLogUpsertBulk {
	return u.Update(func(s *UserNotificationLogUpsert) {
		s.SetIsTest(v)
	})
}

// UpdateIsTest sets the "is_test" field to the value that was provided on create.
func (u *UserNotificationLogUpsertBulk) UpdateIsTest() *UserNotificationLogUpsertBulk {
	return u.Update(func(s *UserNotificationLogUpsert) {
		s.UpdateIsTest()
	})
}

// SetReactNavigationMessage sets the "react_navigation_message" field.
func (u *UserNotificationLogUpsertBulk) SetReactNavigationMessage(v jsonfields.ReactNavigationPush) *UserNotificationLogUpsertBulk {
	return u.Update(func(s *UserNotificationLogUpsert) {
		s.SetReactNavigationMessage(v)
	})
}

// UpdateReactNavigationMessage sets the "react_navigation_message" field to the value that was provided on create.
func (u *UserNotificationLogUpsertBulk) UpdateReactNavigationMessage() *UserNotificationLogUpsertBulk {
	return u.Update(func(s *UserNotificationLogUpsert) {
		s.UpdateReactNavigationMessage()
	})
}

// SetExpectedDeliveryTime sets the "expected_delivery_time" field.
func (u *UserNotificationLogUpsertBulk) SetExpectedDeliveryTime(v time.Time) *UserNotificationLogUpsertBulk {
	return u.Update(func(s *UserNotificationLogUpsert) {
		s.SetExpectedDeliveryTime(v)
	})
}

// UpdateExpectedDeliveryTime sets the "expected_delivery_time" field to the value that was provided on create.
func (u *UserNotificationLogUpsertBulk) UpdateExpectedDeliveryTime() *UserNotificationLogUpsertBulk {
	return u.Update(func(s *UserNotificationLogUpsert) {
		s.UpdateExpectedDeliveryTime()
	})
}

// SetStatus sets the "status" field.
func (u *UserNotificationLogUpsertBulk) SetStatus(v enums.UserNotificationStatus) *UserNotificationLogUpsertBulk {
	return u.Update(func(s *UserNotificationLogUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *UserNotificationLogUpsertBulk) UpdateStatus() *UserNotificationLogUpsertBulk {
	return u.Update(func(s *UserNotificationLogUpsert) {
		s.UpdateStatus()
	})
}

// SetStatusMessage sets the "status_message" field.
func (u *UserNotificationLogUpsertBulk) SetStatusMessage(v string) *UserNotificationLogUpsertBulk {
	return u.Update(func(s *UserNotificationLogUpsert) {
		s.SetStatusMessage(v)
	})
}

// UpdateStatusMessage sets the "status_message" field to the value that was provided on create.
func (u *UserNotificationLogUpsertBulk) UpdateStatusMessage() *UserNotificationLogUpsertBulk {
	return u.Update(func(s *UserNotificationLogUpsert) {
		s.UpdateStatusMessage()
	})
}

// Exec executes the query.
func (u *UserNotificationLogUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserNotificationLogCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserNotificationLogCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserNotificationLogUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
