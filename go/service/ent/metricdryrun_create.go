// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yssk22/hpapp/go/service/ent/metricdryrun"
)

// MetricDryRunCreate is the builder for creating a MetricDryRun entity.
type MetricDryRunCreate struct {
	config
	mutation *MetricDryRunMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (mdrc *MetricDryRunCreate) SetCreatedAt(t time.Time) *MetricDryRunCreate {
	mdrc.mutation.SetCreatedAt(t)
	return mdrc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mdrc *MetricDryRunCreate) SetNillableCreatedAt(t *time.Time) *MetricDryRunCreate {
	if t != nil {
		mdrc.SetCreatedAt(*t)
	}
	return mdrc
}

// SetUpdatedAt sets the "updated_at" field.
func (mdrc *MetricDryRunCreate) SetUpdatedAt(t time.Time) *MetricDryRunCreate {
	mdrc.mutation.SetUpdatedAt(t)
	return mdrc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mdrc *MetricDryRunCreate) SetNillableUpdatedAt(t *time.Time) *MetricDryRunCreate {
	if t != nil {
		mdrc.SetUpdatedAt(*t)
	}
	return mdrc
}

// SetMetricName sets the "metric_name" field.
func (mdrc *MetricDryRunCreate) SetMetricName(s string) *MetricDryRunCreate {
	mdrc.mutation.SetMetricName(s)
	return mdrc
}

// SetDate sets the "date" field.
func (mdrc *MetricDryRunCreate) SetDate(s string) *MetricDryRunCreate {
	mdrc.mutation.SetDate(s)
	return mdrc
}

// SetValue sets the "value" field.
func (mdrc *MetricDryRunCreate) SetValue(f float64) *MetricDryRunCreate {
	mdrc.mutation.SetValue(f)
	return mdrc
}

// SetOwnerUserID sets the "owner_user_id" field.
func (mdrc *MetricDryRunCreate) SetOwnerUserID(i int) *MetricDryRunCreate {
	mdrc.mutation.SetOwnerUserID(i)
	return mdrc
}

// SetNillableOwnerUserID sets the "owner_user_id" field if the given value is not nil.
func (mdrc *MetricDryRunCreate) SetNillableOwnerUserID(i *int) *MetricDryRunCreate {
	if i != nil {
		mdrc.SetOwnerUserID(*i)
	}
	return mdrc
}

// Mutation returns the MetricDryRunMutation object of the builder.
func (mdrc *MetricDryRunCreate) Mutation() *MetricDryRunMutation {
	return mdrc.mutation
}

// Save creates the MetricDryRun in the database.
func (mdrc *MetricDryRunCreate) Save(ctx context.Context) (*MetricDryRun, error) {
	return withHooks[*MetricDryRun, MetricDryRunMutation](ctx, mdrc.sqlSave, mdrc.mutation, mdrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mdrc *MetricDryRunCreate) SaveX(ctx context.Context) *MetricDryRun {
	v, err := mdrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mdrc *MetricDryRunCreate) Exec(ctx context.Context) error {
	_, err := mdrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mdrc *MetricDryRunCreate) ExecX(ctx context.Context) {
	if err := mdrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mdrc *MetricDryRunCreate) check() error {
	if _, ok := mdrc.mutation.MetricName(); !ok {
		return &ValidationError{Name: "metric_name", err: errors.New(`ent: missing required field "MetricDryRun.metric_name"`)}
	}
	if _, ok := mdrc.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New(`ent: missing required field "MetricDryRun.date"`)}
	}
	if _, ok := mdrc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "MetricDryRun.value"`)}
	}
	return nil
}

func (mdrc *MetricDryRunCreate) sqlSave(ctx context.Context) (*MetricDryRun, error) {
	if err := mdrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mdrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mdrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	mdrc.mutation.id = &_node.ID
	mdrc.mutation.done = true
	return _node, nil
}

func (mdrc *MetricDryRunCreate) createSpec() (*MetricDryRun, *sqlgraph.CreateSpec) {
	var (
		_node = &MetricDryRun{config: mdrc.config}
		_spec = sqlgraph.NewCreateSpec(metricdryrun.Table, sqlgraph.NewFieldSpec(metricdryrun.FieldID, field.TypeInt))
	)
	_spec.OnConflict = mdrc.conflict
	if value, ok := mdrc.mutation.CreatedAt(); ok {
		_spec.SetField(metricdryrun.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mdrc.mutation.UpdatedAt(); ok {
		_spec.SetField(metricdryrun.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := mdrc.mutation.MetricName(); ok {
		_spec.SetField(metricdryrun.FieldMetricName, field.TypeString, value)
		_node.MetricName = value
	}
	if value, ok := mdrc.mutation.Date(); ok {
		_spec.SetField(metricdryrun.FieldDate, field.TypeString, value)
		_node.Date = value
	}
	if value, ok := mdrc.mutation.Value(); ok {
		_spec.SetField(metricdryrun.FieldValue, field.TypeFloat64, value)
		_node.Value = value
	}
	if value, ok := mdrc.mutation.OwnerUserID(); ok {
		_spec.SetField(metricdryrun.FieldOwnerUserID, field.TypeInt, value)
		_node.OwnerUserID = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MetricDryRun.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MetricDryRunUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (mdrc *MetricDryRunCreate) OnConflict(opts ...sql.ConflictOption) *MetricDryRunUpsertOne {
	mdrc.conflict = opts
	return &MetricDryRunUpsertOne{
		create: mdrc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MetricDryRun.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mdrc *MetricDryRunCreate) OnConflictColumns(columns ...string) *MetricDryRunUpsertOne {
	mdrc.conflict = append(mdrc.conflict, sql.ConflictColumns(columns...))
	return &MetricDryRunUpsertOne{
		create: mdrc,
	}
}

type (
	// MetricDryRunUpsertOne is the builder for "upsert"-ing
	//  one MetricDryRun node.
	MetricDryRunUpsertOne struct {
		create *MetricDryRunCreate
	}

	// MetricDryRunUpsert is the "OnConflict" setter.
	MetricDryRunUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *MetricDryRunUpsert) SetUpdatedAt(v time.Time) *MetricDryRunUpsert {
	u.Set(metricdryrun.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MetricDryRunUpsert) UpdateUpdatedAt() *MetricDryRunUpsert {
	u.SetExcluded(metricdryrun.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *MetricDryRunUpsert) ClearUpdatedAt() *MetricDryRunUpsert {
	u.SetNull(metricdryrun.FieldUpdatedAt)
	return u
}

// SetMetricName sets the "metric_name" field.
func (u *MetricDryRunUpsert) SetMetricName(v string) *MetricDryRunUpsert {
	u.Set(metricdryrun.FieldMetricName, v)
	return u
}

// UpdateMetricName sets the "metric_name" field to the value that was provided on create.
func (u *MetricDryRunUpsert) UpdateMetricName() *MetricDryRunUpsert {
	u.SetExcluded(metricdryrun.FieldMetricName)
	return u
}

// SetDate sets the "date" field.
func (u *MetricDryRunUpsert) SetDate(v string) *MetricDryRunUpsert {
	u.Set(metricdryrun.FieldDate, v)
	return u
}

// UpdateDate sets the "date" field to the value that was provided on create.
func (u *MetricDryRunUpsert) UpdateDate() *MetricDryRunUpsert {
	u.SetExcluded(metricdryrun.FieldDate)
	return u
}

// SetValue sets the "value" field.
func (u *MetricDryRunUpsert) SetValue(v float64) *MetricDryRunUpsert {
	u.Set(metricdryrun.FieldValue, v)
	return u
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *MetricDryRunUpsert) UpdateValue() *MetricDryRunUpsert {
	u.SetExcluded(metricdryrun.FieldValue)
	return u
}

// AddValue adds v to the "value" field.
func (u *MetricDryRunUpsert) AddValue(v float64) *MetricDryRunUpsert {
	u.Add(metricdryrun.FieldValue, v)
	return u
}

// SetOwnerUserID sets the "owner_user_id" field.
func (u *MetricDryRunUpsert) SetOwnerUserID(v int) *MetricDryRunUpsert {
	u.Set(metricdryrun.FieldOwnerUserID, v)
	return u
}

// UpdateOwnerUserID sets the "owner_user_id" field to the value that was provided on create.
func (u *MetricDryRunUpsert) UpdateOwnerUserID() *MetricDryRunUpsert {
	u.SetExcluded(metricdryrun.FieldOwnerUserID)
	return u
}

// AddOwnerUserID adds v to the "owner_user_id" field.
func (u *MetricDryRunUpsert) AddOwnerUserID(v int) *MetricDryRunUpsert {
	u.Add(metricdryrun.FieldOwnerUserID, v)
	return u
}

// ClearOwnerUserID clears the value of the "owner_user_id" field.
func (u *MetricDryRunUpsert) ClearOwnerUserID() *MetricDryRunUpsert {
	u.SetNull(metricdryrun.FieldOwnerUserID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.MetricDryRun.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *MetricDryRunUpsertOne) UpdateNewValues() *MetricDryRunUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(metricdryrun.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MetricDryRun.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MetricDryRunUpsertOne) Ignore() *MetricDryRunUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MetricDryRunUpsertOne) DoNothing() *MetricDryRunUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MetricDryRunCreate.OnConflict
// documentation for more info.
func (u *MetricDryRunUpsertOne) Update(set func(*MetricDryRunUpsert)) *MetricDryRunUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MetricDryRunUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MetricDryRunUpsertOne) SetUpdatedAt(v time.Time) *MetricDryRunUpsertOne {
	return u.Update(func(s *MetricDryRunUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MetricDryRunUpsertOne) UpdateUpdatedAt() *MetricDryRunUpsertOne {
	return u.Update(func(s *MetricDryRunUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *MetricDryRunUpsertOne) ClearUpdatedAt() *MetricDryRunUpsertOne {
	return u.Update(func(s *MetricDryRunUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetMetricName sets the "metric_name" field.
func (u *MetricDryRunUpsertOne) SetMetricName(v string) *MetricDryRunUpsertOne {
	return u.Update(func(s *MetricDryRunUpsert) {
		s.SetMetricName(v)
	})
}

// UpdateMetricName sets the "metric_name" field to the value that was provided on create.
func (u *MetricDryRunUpsertOne) UpdateMetricName() *MetricDryRunUpsertOne {
	return u.Update(func(s *MetricDryRunUpsert) {
		s.UpdateMetricName()
	})
}

// SetDate sets the "date" field.
func (u *MetricDryRunUpsertOne) SetDate(v string) *MetricDryRunUpsertOne {
	return u.Update(func(s *MetricDryRunUpsert) {
		s.SetDate(v)
	})
}

// UpdateDate sets the "date" field to the value that was provided on create.
func (u *MetricDryRunUpsertOne) UpdateDate() *MetricDryRunUpsertOne {
	return u.Update(func(s *MetricDryRunUpsert) {
		s.UpdateDate()
	})
}

// SetValue sets the "value" field.
func (u *MetricDryRunUpsertOne) SetValue(v float64) *MetricDryRunUpsertOne {
	return u.Update(func(s *MetricDryRunUpsert) {
		s.SetValue(v)
	})
}

// AddValue adds v to the "value" field.
func (u *MetricDryRunUpsertOne) AddValue(v float64) *MetricDryRunUpsertOne {
	return u.Update(func(s *MetricDryRunUpsert) {
		s.AddValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *MetricDryRunUpsertOne) UpdateValue() *MetricDryRunUpsertOne {
	return u.Update(func(s *MetricDryRunUpsert) {
		s.UpdateValue()
	})
}

// SetOwnerUserID sets the "owner_user_id" field.
func (u *MetricDryRunUpsertOne) SetOwnerUserID(v int) *MetricDryRunUpsertOne {
	return u.Update(func(s *MetricDryRunUpsert) {
		s.SetOwnerUserID(v)
	})
}

// AddOwnerUserID adds v to the "owner_user_id" field.
func (u *MetricDryRunUpsertOne) AddOwnerUserID(v int) *MetricDryRunUpsertOne {
	return u.Update(func(s *MetricDryRunUpsert) {
		s.AddOwnerUserID(v)
	})
}

// UpdateOwnerUserID sets the "owner_user_id" field to the value that was provided on create.
func (u *MetricDryRunUpsertOne) UpdateOwnerUserID() *MetricDryRunUpsertOne {
	return u.Update(func(s *MetricDryRunUpsert) {
		s.UpdateOwnerUserID()
	})
}

// ClearOwnerUserID clears the value of the "owner_user_id" field.
func (u *MetricDryRunUpsertOne) ClearOwnerUserID() *MetricDryRunUpsertOne {
	return u.Update(func(s *MetricDryRunUpsert) {
		s.ClearOwnerUserID()
	})
}

// Exec executes the query.
func (u *MetricDryRunUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MetricDryRunCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MetricDryRunUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MetricDryRunUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MetricDryRunUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MetricDryRunCreateBulk is the builder for creating many MetricDryRun entities in bulk.
type MetricDryRunCreateBulk struct {
	config
	builders []*MetricDryRunCreate
	conflict []sql.ConflictOption
}

// Save creates the MetricDryRun entities in the database.
func (mdrcb *MetricDryRunCreateBulk) Save(ctx context.Context) ([]*MetricDryRun, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mdrcb.builders))
	nodes := make([]*MetricDryRun, len(mdrcb.builders))
	mutators := make([]Mutator, len(mdrcb.builders))
	for i := range mdrcb.builders {
		func(i int, root context.Context) {
			builder := mdrcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MetricDryRunMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mdrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mdrcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mdrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mdrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mdrcb *MetricDryRunCreateBulk) SaveX(ctx context.Context) []*MetricDryRun {
	v, err := mdrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mdrcb *MetricDryRunCreateBulk) Exec(ctx context.Context) error {
	_, err := mdrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mdrcb *MetricDryRunCreateBulk) ExecX(ctx context.Context) {
	if err := mdrcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MetricDryRun.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MetricDryRunUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (mdrcb *MetricDryRunCreateBulk) OnConflict(opts ...sql.ConflictOption) *MetricDryRunUpsertBulk {
	mdrcb.conflict = opts
	return &MetricDryRunUpsertBulk{
		create: mdrcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MetricDryRun.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mdrcb *MetricDryRunCreateBulk) OnConflictColumns(columns ...string) *MetricDryRunUpsertBulk {
	mdrcb.conflict = append(mdrcb.conflict, sql.ConflictColumns(columns...))
	return &MetricDryRunUpsertBulk{
		create: mdrcb,
	}
}

// MetricDryRunUpsertBulk is the builder for "upsert"-ing
// a bulk of MetricDryRun nodes.
type MetricDryRunUpsertBulk struct {
	create *MetricDryRunCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.MetricDryRun.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *MetricDryRunUpsertBulk) UpdateNewValues() *MetricDryRunUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(metricdryrun.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MetricDryRun.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MetricDryRunUpsertBulk) Ignore() *MetricDryRunUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MetricDryRunUpsertBulk) DoNothing() *MetricDryRunUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MetricDryRunCreateBulk.OnConflict
// documentation for more info.
func (u *MetricDryRunUpsertBulk) Update(set func(*MetricDryRunUpsert)) *MetricDryRunUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MetricDryRunUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MetricDryRunUpsertBulk) SetUpdatedAt(v time.Time) *MetricDryRunUpsertBulk {
	return u.Update(func(s *MetricDryRunUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MetricDryRunUpsertBulk) UpdateUpdatedAt() *MetricDryRunUpsertBulk {
	return u.Update(func(s *MetricDryRunUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *MetricDryRunUpsertBulk) ClearUpdatedAt() *MetricDryRunUpsertBulk {
	return u.Update(func(s *MetricDryRunUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetMetricName sets the "metric_name" field.
func (u *MetricDryRunUpsertBulk) SetMetricName(v string) *MetricDryRunUpsertBulk {
	return u.Update(func(s *MetricDryRunUpsert) {
		s.SetMetricName(v)
	})
}

// UpdateMetricName sets the "metric_name" field to the value that was provided on create.
func (u *MetricDryRunUpsertBulk) UpdateMetricName() *MetricDryRunUpsertBulk {
	return u.Update(func(s *MetricDryRunUpsert) {
		s.UpdateMetricName()
	})
}

// SetDate sets the "date" field.
func (u *MetricDryRunUpsertBulk) SetDate(v string) *MetricDryRunUpsertBulk {
	return u.Update(func(s *MetricDryRunUpsert) {
		s.SetDate(v)
	})
}

// UpdateDate sets the "date" field to the value that was provided on create.
func (u *MetricDryRunUpsertBulk) UpdateDate() *MetricDryRunUpsertBulk {
	return u.Update(func(s *MetricDryRunUpsert) {
		s.UpdateDate()
	})
}

// SetValue sets the "value" field.
func (u *MetricDryRunUpsertBulk) SetValue(v float64) *MetricDryRunUpsertBulk {
	return u.Update(func(s *MetricDryRunUpsert) {
		s.SetValue(v)
	})
}

// AddValue adds v to the "value" field.
func (u *MetricDryRunUpsertBulk) AddValue(v float64) *MetricDryRunUpsertBulk {
	return u.Update(func(s *MetricDryRunUpsert) {
		s.AddValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *MetricDryRunUpsertBulk) UpdateValue() *MetricDryRunUpsertBulk {
	return u.Update(func(s *MetricDryRunUpsert) {
		s.UpdateValue()
	})
}

// SetOwnerUserID sets the "owner_user_id" field.
func (u *MetricDryRunUpsertBulk) SetOwnerUserID(v int) *MetricDryRunUpsertBulk {
	return u.Update(func(s *MetricDryRunUpsert) {
		s.SetOwnerUserID(v)
	})
}

// AddOwnerUserID adds v to the "owner_user_id" field.
func (u *MetricDryRunUpsertBulk) AddOwnerUserID(v int) *MetricDryRunUpsertBulk {
	return u.Update(func(s *MetricDryRunUpsert) {
		s.AddOwnerUserID(v)
	})
}

// UpdateOwnerUserID sets the "owner_user_id" field to the value that was provided on create.
func (u *MetricDryRunUpsertBulk) UpdateOwnerUserID() *MetricDryRunUpsertBulk {
	return u.Update(func(s *MetricDryRunUpsert) {
		s.UpdateOwnerUserID()
	})
}

// ClearOwnerUserID clears the value of the "owner_user_id" field.
func (u *MetricDryRunUpsertBulk) ClearOwnerUserID() *MetricDryRunUpsertBulk {
	return u.Update(func(s *MetricDryRunUpsert) {
		s.ClearOwnerUserID()
	})
}

// Exec executes the query.
func (u *MetricDryRunUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the MetricDryRunCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MetricDryRunCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MetricDryRunUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
