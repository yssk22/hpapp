// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yssk22/hpapp/go/service/ent/hpameblopost"
	"github.com/yssk22/hpapp/go/service/ent/hpartist"
	"github.com/yssk22/hpapp/go/service/ent/hpasset"
	"github.com/yssk22/hpapp/go/service/ent/hpblob"
	"github.com/yssk22/hpapp/go/service/ent/hpmember"
	"github.com/yssk22/hpapp/go/service/schema/jsonfields"
)

// HPAmebloPostCreate is the builder for creating a HPAmebloPost entity.
type HPAmebloPostCreate struct {
	config
	mutation *HPAmebloPostMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCrawledAt sets the "crawled_at" field.
func (hapc *HPAmebloPostCreate) SetCrawledAt(t time.Time) *HPAmebloPostCreate {
	hapc.mutation.SetCrawledAt(t)
	return hapc
}

// SetNillableCrawledAt sets the "crawled_at" field if the given value is not nil.
func (hapc *HPAmebloPostCreate) SetNillableCrawledAt(t *time.Time) *HPAmebloPostCreate {
	if t != nil {
		hapc.SetCrawledAt(*t)
	}
	return hapc
}

// SetErrorCount sets the "error_count" field.
func (hapc *HPAmebloPostCreate) SetErrorCount(i int) *HPAmebloPostCreate {
	hapc.mutation.SetErrorCount(i)
	return hapc
}

// SetNillableErrorCount sets the "error_count" field if the given value is not nil.
func (hapc *HPAmebloPostCreate) SetNillableErrorCount(i *int) *HPAmebloPostCreate {
	if i != nil {
		hapc.SetErrorCount(*i)
	}
	return hapc
}

// SetManuallyModified sets the "manually_modified" field.
func (hapc *HPAmebloPostCreate) SetManuallyModified(jm *jsonfields.ManuallyModified) *HPAmebloPostCreate {
	hapc.mutation.SetManuallyModified(jm)
	return hapc
}

// SetLastErrorMessage sets the "last_error_message" field.
func (hapc *HPAmebloPostCreate) SetLastErrorMessage(s string) *HPAmebloPostCreate {
	hapc.mutation.SetLastErrorMessage(s)
	return hapc
}

// SetNillableLastErrorMessage sets the "last_error_message" field if the given value is not nil.
func (hapc *HPAmebloPostCreate) SetNillableLastErrorMessage(s *string) *HPAmebloPostCreate {
	if s != nil {
		hapc.SetLastErrorMessage(*s)
	}
	return hapc
}

// SetRecrawlRequired sets the "recrawl_required" field.
func (hapc *HPAmebloPostCreate) SetRecrawlRequired(b bool) *HPAmebloPostCreate {
	hapc.mutation.SetRecrawlRequired(b)
	return hapc
}

// SetNillableRecrawlRequired sets the "recrawl_required" field if the given value is not nil.
func (hapc *HPAmebloPostCreate) SetNillableRecrawlRequired(b *bool) *HPAmebloPostCreate {
	if b != nil {
		hapc.SetRecrawlRequired(*b)
	}
	return hapc
}

// SetCreatedAt sets the "created_at" field.
func (hapc *HPAmebloPostCreate) SetCreatedAt(t time.Time) *HPAmebloPostCreate {
	hapc.mutation.SetCreatedAt(t)
	return hapc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (hapc *HPAmebloPostCreate) SetNillableCreatedAt(t *time.Time) *HPAmebloPostCreate {
	if t != nil {
		hapc.SetCreatedAt(*t)
	}
	return hapc
}

// SetUpdatedAt sets the "updated_at" field.
func (hapc *HPAmebloPostCreate) SetUpdatedAt(t time.Time) *HPAmebloPostCreate {
	hapc.mutation.SetUpdatedAt(t)
	return hapc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (hapc *HPAmebloPostCreate) SetNillableUpdatedAt(t *time.Time) *HPAmebloPostCreate {
	if t != nil {
		hapc.SetUpdatedAt(*t)
	}
	return hapc
}

// SetPath sets the "path" field.
func (hapc *HPAmebloPostCreate) SetPath(s string) *HPAmebloPostCreate {
	hapc.mutation.SetPath(s)
	return hapc
}

// SetNextPath sets the "next_path" field.
func (hapc *HPAmebloPostCreate) SetNextPath(s string) *HPAmebloPostCreate {
	hapc.mutation.SetNextPath(s)
	return hapc
}

// SetNillableNextPath sets the "next_path" field if the given value is not nil.
func (hapc *HPAmebloPostCreate) SetNillableNextPath(s *string) *HPAmebloPostCreate {
	if s != nil {
		hapc.SetNextPath(*s)
	}
	return hapc
}

// SetPrevPath sets the "prev_path" field.
func (hapc *HPAmebloPostCreate) SetPrevPath(s string) *HPAmebloPostCreate {
	hapc.mutation.SetPrevPath(s)
	return hapc
}

// SetNillablePrevPath sets the "prev_path" field if the given value is not nil.
func (hapc *HPAmebloPostCreate) SetNillablePrevPath(s *string) *HPAmebloPostCreate {
	if s != nil {
		hapc.SetPrevPath(*s)
	}
	return hapc
}

// SetArtistKey sets the "artist_key" field.
func (hapc *HPAmebloPostCreate) SetArtistKey(s string) *HPAmebloPostCreate {
	hapc.mutation.SetArtistKey(s)
	return hapc
}

// SetMemberKey sets the "member_key" field.
func (hapc *HPAmebloPostCreate) SetMemberKey(s string) *HPAmebloPostCreate {
	hapc.mutation.SetMemberKey(s)
	return hapc
}

// SetNillableMemberKey sets the "member_key" field if the given value is not nil.
func (hapc *HPAmebloPostCreate) SetNillableMemberKey(s *string) *HPAmebloPostCreate {
	if s != nil {
		hapc.SetMemberKey(*s)
	}
	return hapc
}

// SetTitle sets the "title" field.
func (hapc *HPAmebloPostCreate) SetTitle(s string) *HPAmebloPostCreate {
	hapc.mutation.SetTitle(s)
	return hapc
}

// SetDescription sets the "description" field.
func (hapc *HPAmebloPostCreate) SetDescription(s string) *HPAmebloPostCreate {
	hapc.mutation.SetDescription(s)
	return hapc
}

// SetTheme sets the "theme" field.
func (hapc *HPAmebloPostCreate) SetTheme(s string) *HPAmebloPostCreate {
	hapc.mutation.SetTheme(s)
	return hapc
}

// SetNillableTheme sets the "theme" field if the given value is not nil.
func (hapc *HPAmebloPostCreate) SetNillableTheme(s *string) *HPAmebloPostCreate {
	if s != nil {
		hapc.SetTheme(*s)
	}
	return hapc
}

// SetPostAt sets the "post_at" field.
func (hapc *HPAmebloPostCreate) SetPostAt(t time.Time) *HPAmebloPostCreate {
	hapc.mutation.SetPostAt(t)
	return hapc
}

// SetSource sets the "source" field.
func (hapc *HPAmebloPostCreate) SetSource(h hpameblopost.Source) *HPAmebloPostCreate {
	hapc.mutation.SetSource(h)
	return hapc
}

// SetImages sets the "images" field.
func (hapc *HPAmebloPostCreate) SetImages(j []jsonfields.Media) *HPAmebloPostCreate {
	hapc.mutation.SetImages(j)
	return hapc
}

// SetLikes sets the "likes" field.
func (hapc *HPAmebloPostCreate) SetLikes(i int) *HPAmebloPostCreate {
	hapc.mutation.SetLikes(i)
	return hapc
}

// SetNillableLikes sets the "likes" field if the given value is not nil.
func (hapc *HPAmebloPostCreate) SetNillableLikes(i *int) *HPAmebloPostCreate {
	if i != nil {
		hapc.SetLikes(*i)
	}
	return hapc
}

// SetComments sets the "comments" field.
func (hapc *HPAmebloPostCreate) SetComments(i int) *HPAmebloPostCreate {
	hapc.mutation.SetComments(i)
	return hapc
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (hapc *HPAmebloPostCreate) SetNillableComments(i *int) *HPAmebloPostCreate {
	if i != nil {
		hapc.SetComments(*i)
	}
	return hapc
}

// SetReblogs sets the "reblogs" field.
func (hapc *HPAmebloPostCreate) SetReblogs(i int) *HPAmebloPostCreate {
	hapc.mutation.SetReblogs(i)
	return hapc
}

// SetNillableReblogs sets the "reblogs" field if the given value is not nil.
func (hapc *HPAmebloPostCreate) SetNillableReblogs(i *int) *HPAmebloPostCreate {
	if i != nil {
		hapc.SetReblogs(*i)
	}
	return hapc
}

// SetOwnerArtistID sets the "owner_artist_id" field.
func (hapc *HPAmebloPostCreate) SetOwnerArtistID(i int) *HPAmebloPostCreate {
	hapc.mutation.SetOwnerArtistID(i)
	return hapc
}

// SetNillableOwnerArtistID sets the "owner_artist_id" field if the given value is not nil.
func (hapc *HPAmebloPostCreate) SetNillableOwnerArtistID(i *int) *HPAmebloPostCreate {
	if i != nil {
		hapc.SetOwnerArtistID(*i)
	}
	return hapc
}

// SetOwnerMemberID sets the "owner_member_id" field.
func (hapc *HPAmebloPostCreate) SetOwnerMemberID(i int) *HPAmebloPostCreate {
	hapc.mutation.SetOwnerMemberID(i)
	return hapc
}

// SetNillableOwnerMemberID sets the "owner_member_id" field if the given value is not nil.
func (hapc *HPAmebloPostCreate) SetNillableOwnerMemberID(i *int) *HPAmebloPostCreate {
	if i != nil {
		hapc.SetOwnerMemberID(*i)
	}
	return hapc
}

// SetOwnerArtist sets the "owner_artist" edge to the HPArtist entity.
func (hapc *HPAmebloPostCreate) SetOwnerArtist(h *HPArtist) *HPAmebloPostCreate {
	return hapc.SetOwnerArtistID(h.ID)
}

// SetOwnerMember sets the "owner_member" edge to the HPMember entity.
func (hapc *HPAmebloPostCreate) SetOwnerMember(h *HPMember) *HPAmebloPostCreate {
	return hapc.SetOwnerMemberID(h.ID)
}

// AddTaggedArtistIDs adds the "tagged_artists" edge to the HPArtist entity by IDs.
func (hapc *HPAmebloPostCreate) AddTaggedArtistIDs(ids ...int) *HPAmebloPostCreate {
	hapc.mutation.AddTaggedArtistIDs(ids...)
	return hapc
}

// AddTaggedArtists adds the "tagged_artists" edges to the HPArtist entity.
func (hapc *HPAmebloPostCreate) AddTaggedArtists(h ...*HPArtist) *HPAmebloPostCreate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hapc.AddTaggedArtistIDs(ids...)
}

// AddTaggedMemberIDs adds the "tagged_members" edge to the HPMember entity by IDs.
func (hapc *HPAmebloPostCreate) AddTaggedMemberIDs(ids ...int) *HPAmebloPostCreate {
	hapc.mutation.AddTaggedMemberIDs(ids...)
	return hapc
}

// AddTaggedMembers adds the "tagged_members" edges to the HPMember entity.
func (hapc *HPAmebloPostCreate) AddTaggedMembers(h ...*HPMember) *HPAmebloPostCreate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hapc.AddTaggedMemberIDs(ids...)
}

// SetAssetID sets the "asset" edge to the HPAsset entity by ID.
func (hapc *HPAmebloPostCreate) SetAssetID(id int) *HPAmebloPostCreate {
	hapc.mutation.SetAssetID(id)
	return hapc
}

// SetNillableAssetID sets the "asset" edge to the HPAsset entity by ID if the given value is not nil.
func (hapc *HPAmebloPostCreate) SetNillableAssetID(id *int) *HPAmebloPostCreate {
	if id != nil {
		hapc = hapc.SetAssetID(*id)
	}
	return hapc
}

// SetAsset sets the "asset" edge to the HPAsset entity.
func (hapc *HPAmebloPostCreate) SetAsset(h *HPAsset) *HPAmebloPostCreate {
	return hapc.SetAssetID(h.ID)
}

// AddBlobIDs adds the "blobs" edge to the HPBlob entity by IDs.
func (hapc *HPAmebloPostCreate) AddBlobIDs(ids ...int) *HPAmebloPostCreate {
	hapc.mutation.AddBlobIDs(ids...)
	return hapc
}

// AddBlobs adds the "blobs" edges to the HPBlob entity.
func (hapc *HPAmebloPostCreate) AddBlobs(h ...*HPBlob) *HPAmebloPostCreate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hapc.AddBlobIDs(ids...)
}

// Mutation returns the HPAmebloPostMutation object of the builder.
func (hapc *HPAmebloPostCreate) Mutation() *HPAmebloPostMutation {
	return hapc.mutation
}

// Save creates the HPAmebloPost in the database.
func (hapc *HPAmebloPostCreate) Save(ctx context.Context) (*HPAmebloPost, error) {
	if err := hapc.defaults(); err != nil {
		return nil, err
	}
	return withHooks[*HPAmebloPost, HPAmebloPostMutation](ctx, hapc.sqlSave, hapc.mutation, hapc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (hapc *HPAmebloPostCreate) SaveX(ctx context.Context) *HPAmebloPost {
	v, err := hapc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hapc *HPAmebloPostCreate) Exec(ctx context.Context) error {
	_, err := hapc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hapc *HPAmebloPostCreate) ExecX(ctx context.Context) {
	if err := hapc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hapc *HPAmebloPostCreate) defaults() error {
	if _, ok := hapc.mutation.ErrorCount(); !ok {
		v := hpameblopost.DefaultErrorCount
		hapc.mutation.SetErrorCount(v)
	}
	if _, ok := hapc.mutation.RecrawlRequired(); !ok {
		v := hpameblopost.DefaultRecrawlRequired
		hapc.mutation.SetRecrawlRequired(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (hapc *HPAmebloPostCreate) check() error {
	if _, ok := hapc.mutation.ErrorCount(); !ok {
		return &ValidationError{Name: "error_count", err: errors.New(`ent: missing required field "HPAmebloPost.error_count"`)}
	}
	if _, ok := hapc.mutation.Path(); !ok {
		return &ValidationError{Name: "path", err: errors.New(`ent: missing required field "HPAmebloPost.path"`)}
	}
	if _, ok := hapc.mutation.ArtistKey(); !ok {
		return &ValidationError{Name: "artist_key", err: errors.New(`ent: missing required field "HPAmebloPost.artist_key"`)}
	}
	if _, ok := hapc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "HPAmebloPost.title"`)}
	}
	if _, ok := hapc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "HPAmebloPost.description"`)}
	}
	if _, ok := hapc.mutation.PostAt(); !ok {
		return &ValidationError{Name: "post_at", err: errors.New(`ent: missing required field "HPAmebloPost.post_at"`)}
	}
	if _, ok := hapc.mutation.Source(); !ok {
		return &ValidationError{Name: "source", err: errors.New(`ent: missing required field "HPAmebloPost.source"`)}
	}
	if v, ok := hapc.mutation.Source(); ok {
		if err := hpameblopost.SourceValidator(v); err != nil {
			return &ValidationError{Name: "source", err: fmt.Errorf(`ent: validator failed for field "HPAmebloPost.source": %w`, err)}
		}
	}
	return nil
}

func (hapc *HPAmebloPostCreate) sqlSave(ctx context.Context) (*HPAmebloPost, error) {
	if err := hapc.check(); err != nil {
		return nil, err
	}
	_node, _spec := hapc.createSpec()
	if err := sqlgraph.CreateNode(ctx, hapc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	hapc.mutation.id = &_node.ID
	hapc.mutation.done = true
	return _node, nil
}

func (hapc *HPAmebloPostCreate) createSpec() (*HPAmebloPost, *sqlgraph.CreateSpec) {
	var (
		_node = &HPAmebloPost{config: hapc.config}
		_spec = sqlgraph.NewCreateSpec(hpameblopost.Table, sqlgraph.NewFieldSpec(hpameblopost.FieldID, field.TypeInt))
	)
	_spec.OnConflict = hapc.conflict
	if value, ok := hapc.mutation.CrawledAt(); ok {
		_spec.SetField(hpameblopost.FieldCrawledAt, field.TypeTime, value)
		_node.CrawledAt = &value
	}
	if value, ok := hapc.mutation.ErrorCount(); ok {
		_spec.SetField(hpameblopost.FieldErrorCount, field.TypeInt, value)
		_node.ErrorCount = value
	}
	if value, ok := hapc.mutation.ManuallyModified(); ok {
		_spec.SetField(hpameblopost.FieldManuallyModified, field.TypeJSON, value)
		_node.ManuallyModified = value
	}
	if value, ok := hapc.mutation.LastErrorMessage(); ok {
		_spec.SetField(hpameblopost.FieldLastErrorMessage, field.TypeString, value)
		_node.LastErrorMessage = &value
	}
	if value, ok := hapc.mutation.RecrawlRequired(); ok {
		_spec.SetField(hpameblopost.FieldRecrawlRequired, field.TypeBool, value)
		_node.RecrawlRequired = value
	}
	if value, ok := hapc.mutation.CreatedAt(); ok {
		_spec.SetField(hpameblopost.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := hapc.mutation.UpdatedAt(); ok {
		_spec.SetField(hpameblopost.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := hapc.mutation.Path(); ok {
		_spec.SetField(hpameblopost.FieldPath, field.TypeString, value)
		_node.Path = value
	}
	if value, ok := hapc.mutation.NextPath(); ok {
		_spec.SetField(hpameblopost.FieldNextPath, field.TypeString, value)
		_node.NextPath = &value
	}
	if value, ok := hapc.mutation.PrevPath(); ok {
		_spec.SetField(hpameblopost.FieldPrevPath, field.TypeString, value)
		_node.PrevPath = &value
	}
	if value, ok := hapc.mutation.ArtistKey(); ok {
		_spec.SetField(hpameblopost.FieldArtistKey, field.TypeString, value)
		_node.ArtistKey = value
	}
	if value, ok := hapc.mutation.MemberKey(); ok {
		_spec.SetField(hpameblopost.FieldMemberKey, field.TypeString, value)
		_node.MemberKey = &value
	}
	if value, ok := hapc.mutation.Title(); ok {
		_spec.SetField(hpameblopost.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := hapc.mutation.Description(); ok {
		_spec.SetField(hpameblopost.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := hapc.mutation.Theme(); ok {
		_spec.SetField(hpameblopost.FieldTheme, field.TypeString, value)
		_node.Theme = &value
	}
	if value, ok := hapc.mutation.PostAt(); ok {
		_spec.SetField(hpameblopost.FieldPostAt, field.TypeTime, value)
		_node.PostAt = value
	}
	if value, ok := hapc.mutation.Source(); ok {
		_spec.SetField(hpameblopost.FieldSource, field.TypeEnum, value)
		_node.Source = value
	}
	if value, ok := hapc.mutation.Images(); ok {
		_spec.SetField(hpameblopost.FieldImages, field.TypeJSON, value)
		_node.Images = value
	}
	if value, ok := hapc.mutation.Likes(); ok {
		_spec.SetField(hpameblopost.FieldLikes, field.TypeInt, value)
		_node.Likes = &value
	}
	if value, ok := hapc.mutation.Comments(); ok {
		_spec.SetField(hpameblopost.FieldComments, field.TypeInt, value)
		_node.Comments = &value
	}
	if value, ok := hapc.mutation.Reblogs(); ok {
		_spec.SetField(hpameblopost.FieldReblogs, field.TypeInt, value)
		_node.Reblogs = &value
	}
	if nodes := hapc.mutation.OwnerArtistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpameblopost.OwnerArtistTable,
			Columns: []string{hpameblopost.OwnerArtistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpartist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerArtistID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hapc.mutation.OwnerMemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpameblopost.OwnerMemberTable,
			Columns: []string{hpameblopost.OwnerMemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerMemberID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hapc.mutation.TaggedArtistsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpameblopost.TaggedArtistsTable,
			Columns: hpameblopost.TaggedArtistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpartist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hapc.mutation.TaggedMembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpameblopost.TaggedMembersTable,
			Columns: hpameblopost.TaggedMembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hapc.mutation.AssetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpameblopost.AssetTable,
			Columns: []string{hpameblopost.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpasset.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.hp_asset_ameblo_posts = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hapc.mutation.BlobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpameblopost.BlobsTable,
			Columns: hpameblopost.BlobsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpblob.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.HPAmebloPost.Create().
//		SetCrawledAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.HPAmebloPostUpsert) {
//			SetCrawledAt(v+v).
//		}).
//		Exec(ctx)
func (hapc *HPAmebloPostCreate) OnConflict(opts ...sql.ConflictOption) *HPAmebloPostUpsertOne {
	hapc.conflict = opts
	return &HPAmebloPostUpsertOne{
		create: hapc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.HPAmebloPost.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (hapc *HPAmebloPostCreate) OnConflictColumns(columns ...string) *HPAmebloPostUpsertOne {
	hapc.conflict = append(hapc.conflict, sql.ConflictColumns(columns...))
	return &HPAmebloPostUpsertOne{
		create: hapc,
	}
}

type (
	// HPAmebloPostUpsertOne is the builder for "upsert"-ing
	//  one HPAmebloPost node.
	HPAmebloPostUpsertOne struct {
		create *HPAmebloPostCreate
	}

	// HPAmebloPostUpsert is the "OnConflict" setter.
	HPAmebloPostUpsert struct {
		*sql.UpdateSet
	}
)

// SetCrawledAt sets the "crawled_at" field.
func (u *HPAmebloPostUpsert) SetCrawledAt(v time.Time) *HPAmebloPostUpsert {
	u.Set(hpameblopost.FieldCrawledAt, v)
	return u
}

// UpdateCrawledAt sets the "crawled_at" field to the value that was provided on create.
func (u *HPAmebloPostUpsert) UpdateCrawledAt() *HPAmebloPostUpsert {
	u.SetExcluded(hpameblopost.FieldCrawledAt)
	return u
}

// ClearCrawledAt clears the value of the "crawled_at" field.
func (u *HPAmebloPostUpsert) ClearCrawledAt() *HPAmebloPostUpsert {
	u.SetNull(hpameblopost.FieldCrawledAt)
	return u
}

// SetErrorCount sets the "error_count" field.
func (u *HPAmebloPostUpsert) SetErrorCount(v int) *HPAmebloPostUpsert {
	u.Set(hpameblopost.FieldErrorCount, v)
	return u
}

// UpdateErrorCount sets the "error_count" field to the value that was provided on create.
func (u *HPAmebloPostUpsert) UpdateErrorCount() *HPAmebloPostUpsert {
	u.SetExcluded(hpameblopost.FieldErrorCount)
	return u
}

// AddErrorCount adds v to the "error_count" field.
func (u *HPAmebloPostUpsert) AddErrorCount(v int) *HPAmebloPostUpsert {
	u.Add(hpameblopost.FieldErrorCount, v)
	return u
}

// SetManuallyModified sets the "manually_modified" field.
func (u *HPAmebloPostUpsert) SetManuallyModified(v *jsonfields.ManuallyModified) *HPAmebloPostUpsert {
	u.Set(hpameblopost.FieldManuallyModified, v)
	return u
}

// UpdateManuallyModified sets the "manually_modified" field to the value that was provided on create.
func (u *HPAmebloPostUpsert) UpdateManuallyModified() *HPAmebloPostUpsert {
	u.SetExcluded(hpameblopost.FieldManuallyModified)
	return u
}

// ClearManuallyModified clears the value of the "manually_modified" field.
func (u *HPAmebloPostUpsert) ClearManuallyModified() *HPAmebloPostUpsert {
	u.SetNull(hpameblopost.FieldManuallyModified)
	return u
}

// SetLastErrorMessage sets the "last_error_message" field.
func (u *HPAmebloPostUpsert) SetLastErrorMessage(v string) *HPAmebloPostUpsert {
	u.Set(hpameblopost.FieldLastErrorMessage, v)
	return u
}

// UpdateLastErrorMessage sets the "last_error_message" field to the value that was provided on create.
func (u *HPAmebloPostUpsert) UpdateLastErrorMessage() *HPAmebloPostUpsert {
	u.SetExcluded(hpameblopost.FieldLastErrorMessage)
	return u
}

// ClearLastErrorMessage clears the value of the "last_error_message" field.
func (u *HPAmebloPostUpsert) ClearLastErrorMessage() *HPAmebloPostUpsert {
	u.SetNull(hpameblopost.FieldLastErrorMessage)
	return u
}

// SetRecrawlRequired sets the "recrawl_required" field.
func (u *HPAmebloPostUpsert) SetRecrawlRequired(v bool) *HPAmebloPostUpsert {
	u.Set(hpameblopost.FieldRecrawlRequired, v)
	return u
}

// UpdateRecrawlRequired sets the "recrawl_required" field to the value that was provided on create.
func (u *HPAmebloPostUpsert) UpdateRecrawlRequired() *HPAmebloPostUpsert {
	u.SetExcluded(hpameblopost.FieldRecrawlRequired)
	return u
}

// ClearRecrawlRequired clears the value of the "recrawl_required" field.
func (u *HPAmebloPostUpsert) ClearRecrawlRequired() *HPAmebloPostUpsert {
	u.SetNull(hpameblopost.FieldRecrawlRequired)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *HPAmebloPostUpsert) SetUpdatedAt(v time.Time) *HPAmebloPostUpsert {
	u.Set(hpameblopost.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *HPAmebloPostUpsert) UpdateUpdatedAt() *HPAmebloPostUpsert {
	u.SetExcluded(hpameblopost.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *HPAmebloPostUpsert) ClearUpdatedAt() *HPAmebloPostUpsert {
	u.SetNull(hpameblopost.FieldUpdatedAt)
	return u
}

// SetPath sets the "path" field.
func (u *HPAmebloPostUpsert) SetPath(v string) *HPAmebloPostUpsert {
	u.Set(hpameblopost.FieldPath, v)
	return u
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *HPAmebloPostUpsert) UpdatePath() *HPAmebloPostUpsert {
	u.SetExcluded(hpameblopost.FieldPath)
	return u
}

// SetNextPath sets the "next_path" field.
func (u *HPAmebloPostUpsert) SetNextPath(v string) *HPAmebloPostUpsert {
	u.Set(hpameblopost.FieldNextPath, v)
	return u
}

// UpdateNextPath sets the "next_path" field to the value that was provided on create.
func (u *HPAmebloPostUpsert) UpdateNextPath() *HPAmebloPostUpsert {
	u.SetExcluded(hpameblopost.FieldNextPath)
	return u
}

// ClearNextPath clears the value of the "next_path" field.
func (u *HPAmebloPostUpsert) ClearNextPath() *HPAmebloPostUpsert {
	u.SetNull(hpameblopost.FieldNextPath)
	return u
}

// SetPrevPath sets the "prev_path" field.
func (u *HPAmebloPostUpsert) SetPrevPath(v string) *HPAmebloPostUpsert {
	u.Set(hpameblopost.FieldPrevPath, v)
	return u
}

// UpdatePrevPath sets the "prev_path" field to the value that was provided on create.
func (u *HPAmebloPostUpsert) UpdatePrevPath() *HPAmebloPostUpsert {
	u.SetExcluded(hpameblopost.FieldPrevPath)
	return u
}

// ClearPrevPath clears the value of the "prev_path" field.
func (u *HPAmebloPostUpsert) ClearPrevPath() *HPAmebloPostUpsert {
	u.SetNull(hpameblopost.FieldPrevPath)
	return u
}

// SetArtistKey sets the "artist_key" field.
func (u *HPAmebloPostUpsert) SetArtistKey(v string) *HPAmebloPostUpsert {
	u.Set(hpameblopost.FieldArtistKey, v)
	return u
}

// UpdateArtistKey sets the "artist_key" field to the value that was provided on create.
func (u *HPAmebloPostUpsert) UpdateArtistKey() *HPAmebloPostUpsert {
	u.SetExcluded(hpameblopost.FieldArtistKey)
	return u
}

// SetMemberKey sets the "member_key" field.
func (u *HPAmebloPostUpsert) SetMemberKey(v string) *HPAmebloPostUpsert {
	u.Set(hpameblopost.FieldMemberKey, v)
	return u
}

// UpdateMemberKey sets the "member_key" field to the value that was provided on create.
func (u *HPAmebloPostUpsert) UpdateMemberKey() *HPAmebloPostUpsert {
	u.SetExcluded(hpameblopost.FieldMemberKey)
	return u
}

// ClearMemberKey clears the value of the "member_key" field.
func (u *HPAmebloPostUpsert) ClearMemberKey() *HPAmebloPostUpsert {
	u.SetNull(hpameblopost.FieldMemberKey)
	return u
}

// SetTitle sets the "title" field.
func (u *HPAmebloPostUpsert) SetTitle(v string) *HPAmebloPostUpsert {
	u.Set(hpameblopost.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *HPAmebloPostUpsert) UpdateTitle() *HPAmebloPostUpsert {
	u.SetExcluded(hpameblopost.FieldTitle)
	return u
}

// SetDescription sets the "description" field.
func (u *HPAmebloPostUpsert) SetDescription(v string) *HPAmebloPostUpsert {
	u.Set(hpameblopost.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *HPAmebloPostUpsert) UpdateDescription() *HPAmebloPostUpsert {
	u.SetExcluded(hpameblopost.FieldDescription)
	return u
}

// SetTheme sets the "theme" field.
func (u *HPAmebloPostUpsert) SetTheme(v string) *HPAmebloPostUpsert {
	u.Set(hpameblopost.FieldTheme, v)
	return u
}

// UpdateTheme sets the "theme" field to the value that was provided on create.
func (u *HPAmebloPostUpsert) UpdateTheme() *HPAmebloPostUpsert {
	u.SetExcluded(hpameblopost.FieldTheme)
	return u
}

// ClearTheme clears the value of the "theme" field.
func (u *HPAmebloPostUpsert) ClearTheme() *HPAmebloPostUpsert {
	u.SetNull(hpameblopost.FieldTheme)
	return u
}

// SetPostAt sets the "post_at" field.
func (u *HPAmebloPostUpsert) SetPostAt(v time.Time) *HPAmebloPostUpsert {
	u.Set(hpameblopost.FieldPostAt, v)
	return u
}

// UpdatePostAt sets the "post_at" field to the value that was provided on create.
func (u *HPAmebloPostUpsert) UpdatePostAt() *HPAmebloPostUpsert {
	u.SetExcluded(hpameblopost.FieldPostAt)
	return u
}

// SetSource sets the "source" field.
func (u *HPAmebloPostUpsert) SetSource(v hpameblopost.Source) *HPAmebloPostUpsert {
	u.Set(hpameblopost.FieldSource, v)
	return u
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *HPAmebloPostUpsert) UpdateSource() *HPAmebloPostUpsert {
	u.SetExcluded(hpameblopost.FieldSource)
	return u
}

// SetImages sets the "images" field.
func (u *HPAmebloPostUpsert) SetImages(v []jsonfields.Media) *HPAmebloPostUpsert {
	u.Set(hpameblopost.FieldImages, v)
	return u
}

// UpdateImages sets the "images" field to the value that was provided on create.
func (u *HPAmebloPostUpsert) UpdateImages() *HPAmebloPostUpsert {
	u.SetExcluded(hpameblopost.FieldImages)
	return u
}

// ClearImages clears the value of the "images" field.
func (u *HPAmebloPostUpsert) ClearImages() *HPAmebloPostUpsert {
	u.SetNull(hpameblopost.FieldImages)
	return u
}

// SetLikes sets the "likes" field.
func (u *HPAmebloPostUpsert) SetLikes(v int) *HPAmebloPostUpsert {
	u.Set(hpameblopost.FieldLikes, v)
	return u
}

// UpdateLikes sets the "likes" field to the value that was provided on create.
func (u *HPAmebloPostUpsert) UpdateLikes() *HPAmebloPostUpsert {
	u.SetExcluded(hpameblopost.FieldLikes)
	return u
}

// AddLikes adds v to the "likes" field.
func (u *HPAmebloPostUpsert) AddLikes(v int) *HPAmebloPostUpsert {
	u.Add(hpameblopost.FieldLikes, v)
	return u
}

// ClearLikes clears the value of the "likes" field.
func (u *HPAmebloPostUpsert) ClearLikes() *HPAmebloPostUpsert {
	u.SetNull(hpameblopost.FieldLikes)
	return u
}

// SetComments sets the "comments" field.
func (u *HPAmebloPostUpsert) SetComments(v int) *HPAmebloPostUpsert {
	u.Set(hpameblopost.FieldComments, v)
	return u
}

// UpdateComments sets the "comments" field to the value that was provided on create.
func (u *HPAmebloPostUpsert) UpdateComments() *HPAmebloPostUpsert {
	u.SetExcluded(hpameblopost.FieldComments)
	return u
}

// AddComments adds v to the "comments" field.
func (u *HPAmebloPostUpsert) AddComments(v int) *HPAmebloPostUpsert {
	u.Add(hpameblopost.FieldComments, v)
	return u
}

// ClearComments clears the value of the "comments" field.
func (u *HPAmebloPostUpsert) ClearComments() *HPAmebloPostUpsert {
	u.SetNull(hpameblopost.FieldComments)
	return u
}

// SetReblogs sets the "reblogs" field.
func (u *HPAmebloPostUpsert) SetReblogs(v int) *HPAmebloPostUpsert {
	u.Set(hpameblopost.FieldReblogs, v)
	return u
}

// UpdateReblogs sets the "reblogs" field to the value that was provided on create.
func (u *HPAmebloPostUpsert) UpdateReblogs() *HPAmebloPostUpsert {
	u.SetExcluded(hpameblopost.FieldReblogs)
	return u
}

// AddReblogs adds v to the "reblogs" field.
func (u *HPAmebloPostUpsert) AddReblogs(v int) *HPAmebloPostUpsert {
	u.Add(hpameblopost.FieldReblogs, v)
	return u
}

// ClearReblogs clears the value of the "reblogs" field.
func (u *HPAmebloPostUpsert) ClearReblogs() *HPAmebloPostUpsert {
	u.SetNull(hpameblopost.FieldReblogs)
	return u
}

// SetOwnerArtistID sets the "owner_artist_id" field.
func (u *HPAmebloPostUpsert) SetOwnerArtistID(v int) *HPAmebloPostUpsert {
	u.Set(hpameblopost.FieldOwnerArtistID, v)
	return u
}

// UpdateOwnerArtistID sets the "owner_artist_id" field to the value that was provided on create.
func (u *HPAmebloPostUpsert) UpdateOwnerArtistID() *HPAmebloPostUpsert {
	u.SetExcluded(hpameblopost.FieldOwnerArtistID)
	return u
}

// ClearOwnerArtistID clears the value of the "owner_artist_id" field.
func (u *HPAmebloPostUpsert) ClearOwnerArtistID() *HPAmebloPostUpsert {
	u.SetNull(hpameblopost.FieldOwnerArtistID)
	return u
}

// SetOwnerMemberID sets the "owner_member_id" field.
func (u *HPAmebloPostUpsert) SetOwnerMemberID(v int) *HPAmebloPostUpsert {
	u.Set(hpameblopost.FieldOwnerMemberID, v)
	return u
}

// UpdateOwnerMemberID sets the "owner_member_id" field to the value that was provided on create.
func (u *HPAmebloPostUpsert) UpdateOwnerMemberID() *HPAmebloPostUpsert {
	u.SetExcluded(hpameblopost.FieldOwnerMemberID)
	return u
}

// ClearOwnerMemberID clears the value of the "owner_member_id" field.
func (u *HPAmebloPostUpsert) ClearOwnerMemberID() *HPAmebloPostUpsert {
	u.SetNull(hpameblopost.FieldOwnerMemberID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.HPAmebloPost.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *HPAmebloPostUpsertOne) UpdateNewValues() *HPAmebloPostUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(hpameblopost.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.HPAmebloPost.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *HPAmebloPostUpsertOne) Ignore() *HPAmebloPostUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *HPAmebloPostUpsertOne) DoNothing() *HPAmebloPostUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the HPAmebloPostCreate.OnConflict
// documentation for more info.
func (u *HPAmebloPostUpsertOne) Update(set func(*HPAmebloPostUpsert)) *HPAmebloPostUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&HPAmebloPostUpsert{UpdateSet: update})
	}))
	return u
}

// SetCrawledAt sets the "crawled_at" field.
func (u *HPAmebloPostUpsertOne) SetCrawledAt(v time.Time) *HPAmebloPostUpsertOne {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.SetCrawledAt(v)
	})
}

// UpdateCrawledAt sets the "crawled_at" field to the value that was provided on create.
func (u *HPAmebloPostUpsertOne) UpdateCrawledAt() *HPAmebloPostUpsertOne {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.UpdateCrawledAt()
	})
}

// ClearCrawledAt clears the value of the "crawled_at" field.
func (u *HPAmebloPostUpsertOne) ClearCrawledAt() *HPAmebloPostUpsertOne {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.ClearCrawledAt()
	})
}

// SetErrorCount sets the "error_count" field.
func (u *HPAmebloPostUpsertOne) SetErrorCount(v int) *HPAmebloPostUpsertOne {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.SetErrorCount(v)
	})
}

// AddErrorCount adds v to the "error_count" field.
func (u *HPAmebloPostUpsertOne) AddErrorCount(v int) *HPAmebloPostUpsertOne {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.AddErrorCount(v)
	})
}

// UpdateErrorCount sets the "error_count" field to the value that was provided on create.
func (u *HPAmebloPostUpsertOne) UpdateErrorCount() *HPAmebloPostUpsertOne {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.UpdateErrorCount()
	})
}

// SetManuallyModified sets the "manually_modified" field.
func (u *HPAmebloPostUpsertOne) SetManuallyModified(v *jsonfields.ManuallyModified) *HPAmebloPostUpsertOne {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.SetManuallyModified(v)
	})
}

// UpdateManuallyModified sets the "manually_modified" field to the value that was provided on create.
func (u *HPAmebloPostUpsertOne) UpdateManuallyModified() *HPAmebloPostUpsertOne {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.UpdateManuallyModified()
	})
}

// ClearManuallyModified clears the value of the "manually_modified" field.
func (u *HPAmebloPostUpsertOne) ClearManuallyModified() *HPAmebloPostUpsertOne {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.ClearManuallyModified()
	})
}

// SetLastErrorMessage sets the "last_error_message" field.
func (u *HPAmebloPostUpsertOne) SetLastErrorMessage(v string) *HPAmebloPostUpsertOne {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.SetLastErrorMessage(v)
	})
}

// UpdateLastErrorMessage sets the "last_error_message" field to the value that was provided on create.
func (u *HPAmebloPostUpsertOne) UpdateLastErrorMessage() *HPAmebloPostUpsertOne {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.UpdateLastErrorMessage()
	})
}

// ClearLastErrorMessage clears the value of the "last_error_message" field.
func (u *HPAmebloPostUpsertOne) ClearLastErrorMessage() *HPAmebloPostUpsertOne {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.ClearLastErrorMessage()
	})
}

// SetRecrawlRequired sets the "recrawl_required" field.
func (u *HPAmebloPostUpsertOne) SetRecrawlRequired(v bool) *HPAmebloPostUpsertOne {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.SetRecrawlRequired(v)
	})
}

// UpdateRecrawlRequired sets the "recrawl_required" field to the value that was provided on create.
func (u *HPAmebloPostUpsertOne) UpdateRecrawlRequired() *HPAmebloPostUpsertOne {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.UpdateRecrawlRequired()
	})
}

// ClearRecrawlRequired clears the value of the "recrawl_required" field.
func (u *HPAmebloPostUpsertOne) ClearRecrawlRequired() *HPAmebloPostUpsertOne {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.ClearRecrawlRequired()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *HPAmebloPostUpsertOne) SetUpdatedAt(v time.Time) *HPAmebloPostUpsertOne {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *HPAmebloPostUpsertOne) UpdateUpdatedAt() *HPAmebloPostUpsertOne {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *HPAmebloPostUpsertOne) ClearUpdatedAt() *HPAmebloPostUpsertOne {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetPath sets the "path" field.
func (u *HPAmebloPostUpsertOne) SetPath(v string) *HPAmebloPostUpsertOne {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.SetPath(v)
	})
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *HPAmebloPostUpsertOne) UpdatePath() *HPAmebloPostUpsertOne {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.UpdatePath()
	})
}

// SetNextPath sets the "next_path" field.
func (u *HPAmebloPostUpsertOne) SetNextPath(v string) *HPAmebloPostUpsertOne {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.SetNextPath(v)
	})
}

// UpdateNextPath sets the "next_path" field to the value that was provided on create.
func (u *HPAmebloPostUpsertOne) UpdateNextPath() *HPAmebloPostUpsertOne {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.UpdateNextPath()
	})
}

// ClearNextPath clears the value of the "next_path" field.
func (u *HPAmebloPostUpsertOne) ClearNextPath() *HPAmebloPostUpsertOne {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.ClearNextPath()
	})
}

// SetPrevPath sets the "prev_path" field.
func (u *HPAmebloPostUpsertOne) SetPrevPath(v string) *HPAmebloPostUpsertOne {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.SetPrevPath(v)
	})
}

// UpdatePrevPath sets the "prev_path" field to the value that was provided on create.
func (u *HPAmebloPostUpsertOne) UpdatePrevPath() *HPAmebloPostUpsertOne {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.UpdatePrevPath()
	})
}

// ClearPrevPath clears the value of the "prev_path" field.
func (u *HPAmebloPostUpsertOne) ClearPrevPath() *HPAmebloPostUpsertOne {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.ClearPrevPath()
	})
}

// SetArtistKey sets the "artist_key" field.
func (u *HPAmebloPostUpsertOne) SetArtistKey(v string) *HPAmebloPostUpsertOne {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.SetArtistKey(v)
	})
}

// UpdateArtistKey sets the "artist_key" field to the value that was provided on create.
func (u *HPAmebloPostUpsertOne) UpdateArtistKey() *HPAmebloPostUpsertOne {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.UpdateArtistKey()
	})
}

// SetMemberKey sets the "member_key" field.
func (u *HPAmebloPostUpsertOne) SetMemberKey(v string) *HPAmebloPostUpsertOne {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.SetMemberKey(v)
	})
}

// UpdateMemberKey sets the "member_key" field to the value that was provided on create.
func (u *HPAmebloPostUpsertOne) UpdateMemberKey() *HPAmebloPostUpsertOne {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.UpdateMemberKey()
	})
}

// ClearMemberKey clears the value of the "member_key" field.
func (u *HPAmebloPostUpsertOne) ClearMemberKey() *HPAmebloPostUpsertOne {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.ClearMemberKey()
	})
}

// SetTitle sets the "title" field.
func (u *HPAmebloPostUpsertOne) SetTitle(v string) *HPAmebloPostUpsertOne {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *HPAmebloPostUpsertOne) UpdateTitle() *HPAmebloPostUpsertOne {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *HPAmebloPostUpsertOne) SetDescription(v string) *HPAmebloPostUpsertOne {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *HPAmebloPostUpsertOne) UpdateDescription() *HPAmebloPostUpsertOne {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.UpdateDescription()
	})
}

// SetTheme sets the "theme" field.
func (u *HPAmebloPostUpsertOne) SetTheme(v string) *HPAmebloPostUpsertOne {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.SetTheme(v)
	})
}

// UpdateTheme sets the "theme" field to the value that was provided on create.
func (u *HPAmebloPostUpsertOne) UpdateTheme() *HPAmebloPostUpsertOne {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.UpdateTheme()
	})
}

// ClearTheme clears the value of the "theme" field.
func (u *HPAmebloPostUpsertOne) ClearTheme() *HPAmebloPostUpsertOne {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.ClearTheme()
	})
}

// SetPostAt sets the "post_at" field.
func (u *HPAmebloPostUpsertOne) SetPostAt(v time.Time) *HPAmebloPostUpsertOne {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.SetPostAt(v)
	})
}

// UpdatePostAt sets the "post_at" field to the value that was provided on create.
func (u *HPAmebloPostUpsertOne) UpdatePostAt() *HPAmebloPostUpsertOne {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.UpdatePostAt()
	})
}

// SetSource sets the "source" field.
func (u *HPAmebloPostUpsertOne) SetSource(v hpameblopost.Source) *HPAmebloPostUpsertOne {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.SetSource(v)
	})
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *HPAmebloPostUpsertOne) UpdateSource() *HPAmebloPostUpsertOne {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.UpdateSource()
	})
}

// SetImages sets the "images" field.
func (u *HPAmebloPostUpsertOne) SetImages(v []jsonfields.Media) *HPAmebloPostUpsertOne {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.SetImages(v)
	})
}

// UpdateImages sets the "images" field to the value that was provided on create.
func (u *HPAmebloPostUpsertOne) UpdateImages() *HPAmebloPostUpsertOne {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.UpdateImages()
	})
}

// ClearImages clears the value of the "images" field.
func (u *HPAmebloPostUpsertOne) ClearImages() *HPAmebloPostUpsertOne {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.ClearImages()
	})
}

// SetLikes sets the "likes" field.
func (u *HPAmebloPostUpsertOne) SetLikes(v int) *HPAmebloPostUpsertOne {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.SetLikes(v)
	})
}

// AddLikes adds v to the "likes" field.
func (u *HPAmebloPostUpsertOne) AddLikes(v int) *HPAmebloPostUpsertOne {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.AddLikes(v)
	})
}

// UpdateLikes sets the "likes" field to the value that was provided on create.
func (u *HPAmebloPostUpsertOne) UpdateLikes() *HPAmebloPostUpsertOne {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.UpdateLikes()
	})
}

// ClearLikes clears the value of the "likes" field.
func (u *HPAmebloPostUpsertOne) ClearLikes() *HPAmebloPostUpsertOne {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.ClearLikes()
	})
}

// SetComments sets the "comments" field.
func (u *HPAmebloPostUpsertOne) SetComments(v int) *HPAmebloPostUpsertOne {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.SetComments(v)
	})
}

// AddComments adds v to the "comments" field.
func (u *HPAmebloPostUpsertOne) AddComments(v int) *HPAmebloPostUpsertOne {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.AddComments(v)
	})
}

// UpdateComments sets the "comments" field to the value that was provided on create.
func (u *HPAmebloPostUpsertOne) UpdateComments() *HPAmebloPostUpsertOne {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.UpdateComments()
	})
}

// ClearComments clears the value of the "comments" field.
func (u *HPAmebloPostUpsertOne) ClearComments() *HPAmebloPostUpsertOne {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.ClearComments()
	})
}

// SetReblogs sets the "reblogs" field.
func (u *HPAmebloPostUpsertOne) SetReblogs(v int) *HPAmebloPostUpsertOne {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.SetReblogs(v)
	})
}

// AddReblogs adds v to the "reblogs" field.
func (u *HPAmebloPostUpsertOne) AddReblogs(v int) *HPAmebloPostUpsertOne {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.AddReblogs(v)
	})
}

// UpdateReblogs sets the "reblogs" field to the value that was provided on create.
func (u *HPAmebloPostUpsertOne) UpdateReblogs() *HPAmebloPostUpsertOne {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.UpdateReblogs()
	})
}

// ClearReblogs clears the value of the "reblogs" field.
func (u *HPAmebloPostUpsertOne) ClearReblogs() *HPAmebloPostUpsertOne {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.ClearReblogs()
	})
}

// SetOwnerArtistID sets the "owner_artist_id" field.
func (u *HPAmebloPostUpsertOne) SetOwnerArtistID(v int) *HPAmebloPostUpsertOne {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.SetOwnerArtistID(v)
	})
}

// UpdateOwnerArtistID sets the "owner_artist_id" field to the value that was provided on create.
func (u *HPAmebloPostUpsertOne) UpdateOwnerArtistID() *HPAmebloPostUpsertOne {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.UpdateOwnerArtistID()
	})
}

// ClearOwnerArtistID clears the value of the "owner_artist_id" field.
func (u *HPAmebloPostUpsertOne) ClearOwnerArtistID() *HPAmebloPostUpsertOne {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.ClearOwnerArtistID()
	})
}

// SetOwnerMemberID sets the "owner_member_id" field.
func (u *HPAmebloPostUpsertOne) SetOwnerMemberID(v int) *HPAmebloPostUpsertOne {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.SetOwnerMemberID(v)
	})
}

// UpdateOwnerMemberID sets the "owner_member_id" field to the value that was provided on create.
func (u *HPAmebloPostUpsertOne) UpdateOwnerMemberID() *HPAmebloPostUpsertOne {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.UpdateOwnerMemberID()
	})
}

// ClearOwnerMemberID clears the value of the "owner_member_id" field.
func (u *HPAmebloPostUpsertOne) ClearOwnerMemberID() *HPAmebloPostUpsertOne {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.ClearOwnerMemberID()
	})
}

// Exec executes the query.
func (u *HPAmebloPostUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for HPAmebloPostCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *HPAmebloPostUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *HPAmebloPostUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *HPAmebloPostUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// HPAmebloPostCreateBulk is the builder for creating many HPAmebloPost entities in bulk.
type HPAmebloPostCreateBulk struct {
	config
	builders []*HPAmebloPostCreate
	conflict []sql.ConflictOption
}

// Save creates the HPAmebloPost entities in the database.
func (hapcb *HPAmebloPostCreateBulk) Save(ctx context.Context) ([]*HPAmebloPost, error) {
	specs := make([]*sqlgraph.CreateSpec, len(hapcb.builders))
	nodes := make([]*HPAmebloPost, len(hapcb.builders))
	mutators := make([]Mutator, len(hapcb.builders))
	for i := range hapcb.builders {
		func(i int, root context.Context) {
			builder := hapcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HPAmebloPostMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hapcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = hapcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hapcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hapcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hapcb *HPAmebloPostCreateBulk) SaveX(ctx context.Context) []*HPAmebloPost {
	v, err := hapcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hapcb *HPAmebloPostCreateBulk) Exec(ctx context.Context) error {
	_, err := hapcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hapcb *HPAmebloPostCreateBulk) ExecX(ctx context.Context) {
	if err := hapcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.HPAmebloPost.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.HPAmebloPostUpsert) {
//			SetCrawledAt(v+v).
//		}).
//		Exec(ctx)
func (hapcb *HPAmebloPostCreateBulk) OnConflict(opts ...sql.ConflictOption) *HPAmebloPostUpsertBulk {
	hapcb.conflict = opts
	return &HPAmebloPostUpsertBulk{
		create: hapcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.HPAmebloPost.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (hapcb *HPAmebloPostCreateBulk) OnConflictColumns(columns ...string) *HPAmebloPostUpsertBulk {
	hapcb.conflict = append(hapcb.conflict, sql.ConflictColumns(columns...))
	return &HPAmebloPostUpsertBulk{
		create: hapcb,
	}
}

// HPAmebloPostUpsertBulk is the builder for "upsert"-ing
// a bulk of HPAmebloPost nodes.
type HPAmebloPostUpsertBulk struct {
	create *HPAmebloPostCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.HPAmebloPost.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *HPAmebloPostUpsertBulk) UpdateNewValues() *HPAmebloPostUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(hpameblopost.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.HPAmebloPost.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *HPAmebloPostUpsertBulk) Ignore() *HPAmebloPostUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *HPAmebloPostUpsertBulk) DoNothing() *HPAmebloPostUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the HPAmebloPostCreateBulk.OnConflict
// documentation for more info.
func (u *HPAmebloPostUpsertBulk) Update(set func(*HPAmebloPostUpsert)) *HPAmebloPostUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&HPAmebloPostUpsert{UpdateSet: update})
	}))
	return u
}

// SetCrawledAt sets the "crawled_at" field.
func (u *HPAmebloPostUpsertBulk) SetCrawledAt(v time.Time) *HPAmebloPostUpsertBulk {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.SetCrawledAt(v)
	})
}

// UpdateCrawledAt sets the "crawled_at" field to the value that was provided on create.
func (u *HPAmebloPostUpsertBulk) UpdateCrawledAt() *HPAmebloPostUpsertBulk {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.UpdateCrawledAt()
	})
}

// ClearCrawledAt clears the value of the "crawled_at" field.
func (u *HPAmebloPostUpsertBulk) ClearCrawledAt() *HPAmebloPostUpsertBulk {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.ClearCrawledAt()
	})
}

// SetErrorCount sets the "error_count" field.
func (u *HPAmebloPostUpsertBulk) SetErrorCount(v int) *HPAmebloPostUpsertBulk {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.SetErrorCount(v)
	})
}

// AddErrorCount adds v to the "error_count" field.
func (u *HPAmebloPostUpsertBulk) AddErrorCount(v int) *HPAmebloPostUpsertBulk {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.AddErrorCount(v)
	})
}

// UpdateErrorCount sets the "error_count" field to the value that was provided on create.
func (u *HPAmebloPostUpsertBulk) UpdateErrorCount() *HPAmebloPostUpsertBulk {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.UpdateErrorCount()
	})
}

// SetManuallyModified sets the "manually_modified" field.
func (u *HPAmebloPostUpsertBulk) SetManuallyModified(v *jsonfields.ManuallyModified) *HPAmebloPostUpsertBulk {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.SetManuallyModified(v)
	})
}

// UpdateManuallyModified sets the "manually_modified" field to the value that was provided on create.
func (u *HPAmebloPostUpsertBulk) UpdateManuallyModified() *HPAmebloPostUpsertBulk {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.UpdateManuallyModified()
	})
}

// ClearManuallyModified clears the value of the "manually_modified" field.
func (u *HPAmebloPostUpsertBulk) ClearManuallyModified() *HPAmebloPostUpsertBulk {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.ClearManuallyModified()
	})
}

// SetLastErrorMessage sets the "last_error_message" field.
func (u *HPAmebloPostUpsertBulk) SetLastErrorMessage(v string) *HPAmebloPostUpsertBulk {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.SetLastErrorMessage(v)
	})
}

// UpdateLastErrorMessage sets the "last_error_message" field to the value that was provided on create.
func (u *HPAmebloPostUpsertBulk) UpdateLastErrorMessage() *HPAmebloPostUpsertBulk {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.UpdateLastErrorMessage()
	})
}

// ClearLastErrorMessage clears the value of the "last_error_message" field.
func (u *HPAmebloPostUpsertBulk) ClearLastErrorMessage() *HPAmebloPostUpsertBulk {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.ClearLastErrorMessage()
	})
}

// SetRecrawlRequired sets the "recrawl_required" field.
func (u *HPAmebloPostUpsertBulk) SetRecrawlRequired(v bool) *HPAmebloPostUpsertBulk {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.SetRecrawlRequired(v)
	})
}

// UpdateRecrawlRequired sets the "recrawl_required" field to the value that was provided on create.
func (u *HPAmebloPostUpsertBulk) UpdateRecrawlRequired() *HPAmebloPostUpsertBulk {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.UpdateRecrawlRequired()
	})
}

// ClearRecrawlRequired clears the value of the "recrawl_required" field.
func (u *HPAmebloPostUpsertBulk) ClearRecrawlRequired() *HPAmebloPostUpsertBulk {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.ClearRecrawlRequired()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *HPAmebloPostUpsertBulk) SetUpdatedAt(v time.Time) *HPAmebloPostUpsertBulk {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *HPAmebloPostUpsertBulk) UpdateUpdatedAt() *HPAmebloPostUpsertBulk {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *HPAmebloPostUpsertBulk) ClearUpdatedAt() *HPAmebloPostUpsertBulk {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetPath sets the "path" field.
func (u *HPAmebloPostUpsertBulk) SetPath(v string) *HPAmebloPostUpsertBulk {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.SetPath(v)
	})
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *HPAmebloPostUpsertBulk) UpdatePath() *HPAmebloPostUpsertBulk {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.UpdatePath()
	})
}

// SetNextPath sets the "next_path" field.
func (u *HPAmebloPostUpsertBulk) SetNextPath(v string) *HPAmebloPostUpsertBulk {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.SetNextPath(v)
	})
}

// UpdateNextPath sets the "next_path" field to the value that was provided on create.
func (u *HPAmebloPostUpsertBulk) UpdateNextPath() *HPAmebloPostUpsertBulk {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.UpdateNextPath()
	})
}

// ClearNextPath clears the value of the "next_path" field.
func (u *HPAmebloPostUpsertBulk) ClearNextPath() *HPAmebloPostUpsertBulk {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.ClearNextPath()
	})
}

// SetPrevPath sets the "prev_path" field.
func (u *HPAmebloPostUpsertBulk) SetPrevPath(v string) *HPAmebloPostUpsertBulk {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.SetPrevPath(v)
	})
}

// UpdatePrevPath sets the "prev_path" field to the value that was provided on create.
func (u *HPAmebloPostUpsertBulk) UpdatePrevPath() *HPAmebloPostUpsertBulk {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.UpdatePrevPath()
	})
}

// ClearPrevPath clears the value of the "prev_path" field.
func (u *HPAmebloPostUpsertBulk) ClearPrevPath() *HPAmebloPostUpsertBulk {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.ClearPrevPath()
	})
}

// SetArtistKey sets the "artist_key" field.
func (u *HPAmebloPostUpsertBulk) SetArtistKey(v string) *HPAmebloPostUpsertBulk {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.SetArtistKey(v)
	})
}

// UpdateArtistKey sets the "artist_key" field to the value that was provided on create.
func (u *HPAmebloPostUpsertBulk) UpdateArtistKey() *HPAmebloPostUpsertBulk {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.UpdateArtistKey()
	})
}

// SetMemberKey sets the "member_key" field.
func (u *HPAmebloPostUpsertBulk) SetMemberKey(v string) *HPAmebloPostUpsertBulk {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.SetMemberKey(v)
	})
}

// UpdateMemberKey sets the "member_key" field to the value that was provided on create.
func (u *HPAmebloPostUpsertBulk) UpdateMemberKey() *HPAmebloPostUpsertBulk {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.UpdateMemberKey()
	})
}

// ClearMemberKey clears the value of the "member_key" field.
func (u *HPAmebloPostUpsertBulk) ClearMemberKey() *HPAmebloPostUpsertBulk {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.ClearMemberKey()
	})
}

// SetTitle sets the "title" field.
func (u *HPAmebloPostUpsertBulk) SetTitle(v string) *HPAmebloPostUpsertBulk {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *HPAmebloPostUpsertBulk) UpdateTitle() *HPAmebloPostUpsertBulk {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *HPAmebloPostUpsertBulk) SetDescription(v string) *HPAmebloPostUpsertBulk {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *HPAmebloPostUpsertBulk) UpdateDescription() *HPAmebloPostUpsertBulk {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.UpdateDescription()
	})
}

// SetTheme sets the "theme" field.
func (u *HPAmebloPostUpsertBulk) SetTheme(v string) *HPAmebloPostUpsertBulk {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.SetTheme(v)
	})
}

// UpdateTheme sets the "theme" field to the value that was provided on create.
func (u *HPAmebloPostUpsertBulk) UpdateTheme() *HPAmebloPostUpsertBulk {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.UpdateTheme()
	})
}

// ClearTheme clears the value of the "theme" field.
func (u *HPAmebloPostUpsertBulk) ClearTheme() *HPAmebloPostUpsertBulk {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.ClearTheme()
	})
}

// SetPostAt sets the "post_at" field.
func (u *HPAmebloPostUpsertBulk) SetPostAt(v time.Time) *HPAmebloPostUpsertBulk {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.SetPostAt(v)
	})
}

// UpdatePostAt sets the "post_at" field to the value that was provided on create.
func (u *HPAmebloPostUpsertBulk) UpdatePostAt() *HPAmebloPostUpsertBulk {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.UpdatePostAt()
	})
}

// SetSource sets the "source" field.
func (u *HPAmebloPostUpsertBulk) SetSource(v hpameblopost.Source) *HPAmebloPostUpsertBulk {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.SetSource(v)
	})
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *HPAmebloPostUpsertBulk) UpdateSource() *HPAmebloPostUpsertBulk {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.UpdateSource()
	})
}

// SetImages sets the "images" field.
func (u *HPAmebloPostUpsertBulk) SetImages(v []jsonfields.Media) *HPAmebloPostUpsertBulk {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.SetImages(v)
	})
}

// UpdateImages sets the "images" field to the value that was provided on create.
func (u *HPAmebloPostUpsertBulk) UpdateImages() *HPAmebloPostUpsertBulk {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.UpdateImages()
	})
}

// ClearImages clears the value of the "images" field.
func (u *HPAmebloPostUpsertBulk) ClearImages() *HPAmebloPostUpsertBulk {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.ClearImages()
	})
}

// SetLikes sets the "likes" field.
func (u *HPAmebloPostUpsertBulk) SetLikes(v int) *HPAmebloPostUpsertBulk {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.SetLikes(v)
	})
}

// AddLikes adds v to the "likes" field.
func (u *HPAmebloPostUpsertBulk) AddLikes(v int) *HPAmebloPostUpsertBulk {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.AddLikes(v)
	})
}

// UpdateLikes sets the "likes" field to the value that was provided on create.
func (u *HPAmebloPostUpsertBulk) UpdateLikes() *HPAmebloPostUpsertBulk {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.UpdateLikes()
	})
}

// ClearLikes clears the value of the "likes" field.
func (u *HPAmebloPostUpsertBulk) ClearLikes() *HPAmebloPostUpsertBulk {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.ClearLikes()
	})
}

// SetComments sets the "comments" field.
func (u *HPAmebloPostUpsertBulk) SetComments(v int) *HPAmebloPostUpsertBulk {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.SetComments(v)
	})
}

// AddComments adds v to the "comments" field.
func (u *HPAmebloPostUpsertBulk) AddComments(v int) *HPAmebloPostUpsertBulk {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.AddComments(v)
	})
}

// UpdateComments sets the "comments" field to the value that was provided on create.
func (u *HPAmebloPostUpsertBulk) UpdateComments() *HPAmebloPostUpsertBulk {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.UpdateComments()
	})
}

// ClearComments clears the value of the "comments" field.
func (u *HPAmebloPostUpsertBulk) ClearComments() *HPAmebloPostUpsertBulk {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.ClearComments()
	})
}

// SetReblogs sets the "reblogs" field.
func (u *HPAmebloPostUpsertBulk) SetReblogs(v int) *HPAmebloPostUpsertBulk {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.SetReblogs(v)
	})
}

// AddReblogs adds v to the "reblogs" field.
func (u *HPAmebloPostUpsertBulk) AddReblogs(v int) *HPAmebloPostUpsertBulk {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.AddReblogs(v)
	})
}

// UpdateReblogs sets the "reblogs" field to the value that was provided on create.
func (u *HPAmebloPostUpsertBulk) UpdateReblogs() *HPAmebloPostUpsertBulk {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.UpdateReblogs()
	})
}

// ClearReblogs clears the value of the "reblogs" field.
func (u *HPAmebloPostUpsertBulk) ClearReblogs() *HPAmebloPostUpsertBulk {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.ClearReblogs()
	})
}

// SetOwnerArtistID sets the "owner_artist_id" field.
func (u *HPAmebloPostUpsertBulk) SetOwnerArtistID(v int) *HPAmebloPostUpsertBulk {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.SetOwnerArtistID(v)
	})
}

// UpdateOwnerArtistID sets the "owner_artist_id" field to the value that was provided on create.
func (u *HPAmebloPostUpsertBulk) UpdateOwnerArtistID() *HPAmebloPostUpsertBulk {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.UpdateOwnerArtistID()
	})
}

// ClearOwnerArtistID clears the value of the "owner_artist_id" field.
func (u *HPAmebloPostUpsertBulk) ClearOwnerArtistID() *HPAmebloPostUpsertBulk {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.ClearOwnerArtistID()
	})
}

// SetOwnerMemberID sets the "owner_member_id" field.
func (u *HPAmebloPostUpsertBulk) SetOwnerMemberID(v int) *HPAmebloPostUpsertBulk {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.SetOwnerMemberID(v)
	})
}

// UpdateOwnerMemberID sets the "owner_member_id" field to the value that was provided on create.
func (u *HPAmebloPostUpsertBulk) UpdateOwnerMemberID() *HPAmebloPostUpsertBulk {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.UpdateOwnerMemberID()
	})
}

// ClearOwnerMemberID clears the value of the "owner_member_id" field.
func (u *HPAmebloPostUpsertBulk) ClearOwnerMemberID() *HPAmebloPostUpsertBulk {
	return u.Update(func(s *HPAmebloPostUpsert) {
		s.ClearOwnerMemberID()
	})
}

// Exec executes the query.
func (u *HPAmebloPostUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the HPAmebloPostCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for HPAmebloPostCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *HPAmebloPostUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
