// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"hpapp.yssk22.dev/go/service/ent/predicate"
	"hpapp.yssk22.dev/go/service/ent/testent"
	"hpapp.yssk22.dev/go/service/schema/enums"
	"hpapp.yssk22.dev/go/service/schema/jsonfields"
)

// TestEntUpdate is the builder for updating TestEnt entities.
type TestEntUpdate struct {
	config
	hooks    []Hook
	mutation *TestEntMutation
}

// Where appends a list predicates to the TestEntUpdate builder.
func (teu *TestEntUpdate) Where(ps ...predicate.TestEnt) *TestEntUpdate {
	teu.mutation.Where(ps...)
	return teu
}

// SetStringField sets the "string_field" field.
func (teu *TestEntUpdate) SetStringField(s string) *TestEntUpdate {
	teu.mutation.SetStringField(s)
	return teu
}

// SetNillableStringField sets the "string_field" field if the given value is not nil.
func (teu *TestEntUpdate) SetNillableStringField(s *string) *TestEntUpdate {
	if s != nil {
		teu.SetStringField(*s)
	}
	return teu
}

// ClearStringField clears the value of the "string_field" field.
func (teu *TestEntUpdate) ClearStringField() *TestEntUpdate {
	teu.mutation.ClearStringField()
	return teu
}

// SetTextField sets the "text_field" field.
func (teu *TestEntUpdate) SetTextField(s string) *TestEntUpdate {
	teu.mutation.SetTextField(s)
	return teu
}

// SetNillableTextField sets the "text_field" field if the given value is not nil.
func (teu *TestEntUpdate) SetNillableTextField(s *string) *TestEntUpdate {
	if s != nil {
		teu.SetTextField(*s)
	}
	return teu
}

// ClearTextField clears the value of the "text_field" field.
func (teu *TestEntUpdate) ClearTextField() *TestEntUpdate {
	teu.mutation.ClearTextField()
	return teu
}

// SetBytesField sets the "bytes_field" field.
func (teu *TestEntUpdate) SetBytesField(b []byte) *TestEntUpdate {
	teu.mutation.SetBytesField(b)
	return teu
}

// ClearBytesField clears the value of the "bytes_field" field.
func (teu *TestEntUpdate) ClearBytesField() *TestEntUpdate {
	teu.mutation.ClearBytesField()
	return teu
}

// SetBoolField sets the "bool_field" field.
func (teu *TestEntUpdate) SetBoolField(b bool) *TestEntUpdate {
	teu.mutation.SetBoolField(b)
	return teu
}

// SetNillableBoolField sets the "bool_field" field if the given value is not nil.
func (teu *TestEntUpdate) SetNillableBoolField(b *bool) *TestEntUpdate {
	if b != nil {
		teu.SetBoolField(*b)
	}
	return teu
}

// ClearBoolField clears the value of the "bool_field" field.
func (teu *TestEntUpdate) ClearBoolField() *TestEntUpdate {
	teu.mutation.ClearBoolField()
	return teu
}

// SetTimeField sets the "time_field" field.
func (teu *TestEntUpdate) SetTimeField(t time.Time) *TestEntUpdate {
	teu.mutation.SetTimeField(t)
	return teu
}

// SetNillableTimeField sets the "time_field" field if the given value is not nil.
func (teu *TestEntUpdate) SetNillableTimeField(t *time.Time) *TestEntUpdate {
	if t != nil {
		teu.SetTimeField(*t)
	}
	return teu
}

// ClearTimeField clears the value of the "time_field" field.
func (teu *TestEntUpdate) ClearTimeField() *TestEntUpdate {
	teu.mutation.ClearTimeField()
	return teu
}

// SetIntField sets the "int_field" field.
func (teu *TestEntUpdate) SetIntField(i int) *TestEntUpdate {
	teu.mutation.ResetIntField()
	teu.mutation.SetIntField(i)
	return teu
}

// SetNillableIntField sets the "int_field" field if the given value is not nil.
func (teu *TestEntUpdate) SetNillableIntField(i *int) *TestEntUpdate {
	if i != nil {
		teu.SetIntField(*i)
	}
	return teu
}

// AddIntField adds i to the "int_field" field.
func (teu *TestEntUpdate) AddIntField(i int) *TestEntUpdate {
	teu.mutation.AddIntField(i)
	return teu
}

// ClearIntField clears the value of the "int_field" field.
func (teu *TestEntUpdate) ClearIntField() *TestEntUpdate {
	teu.mutation.ClearIntField()
	return teu
}

// SetInt64Field sets the "int64_field" field.
func (teu *TestEntUpdate) SetInt64Field(i int64) *TestEntUpdate {
	teu.mutation.ResetInt64Field()
	teu.mutation.SetInt64Field(i)
	return teu
}

// SetNillableInt64Field sets the "int64_field" field if the given value is not nil.
func (teu *TestEntUpdate) SetNillableInt64Field(i *int64) *TestEntUpdate {
	if i != nil {
		teu.SetInt64Field(*i)
	}
	return teu
}

// AddInt64Field adds i to the "int64_field" field.
func (teu *TestEntUpdate) AddInt64Field(i int64) *TestEntUpdate {
	teu.mutation.AddInt64Field(i)
	return teu
}

// ClearInt64Field clears the value of the "int64_field" field.
func (teu *TestEntUpdate) ClearInt64Field() *TestEntUpdate {
	teu.mutation.ClearInt64Field()
	return teu
}

// SetFloatField sets the "float_field" field.
func (teu *TestEntUpdate) SetFloatField(f float64) *TestEntUpdate {
	teu.mutation.ResetFloatField()
	teu.mutation.SetFloatField(f)
	return teu
}

// SetNillableFloatField sets the "float_field" field if the given value is not nil.
func (teu *TestEntUpdate) SetNillableFloatField(f *float64) *TestEntUpdate {
	if f != nil {
		teu.SetFloatField(*f)
	}
	return teu
}

// AddFloatField adds f to the "float_field" field.
func (teu *TestEntUpdate) AddFloatField(f float64) *TestEntUpdate {
	teu.mutation.AddFloatField(f)
	return teu
}

// ClearFloatField clears the value of the "float_field" field.
func (teu *TestEntUpdate) ClearFloatField() *TestEntUpdate {
	teu.mutation.ClearFloatField()
	return teu
}

// SetJSONField sets the "json_field" field.
func (teu *TestEntUpdate) SetJSONField(jj *jsonfields.TestJSON) *TestEntUpdate {
	teu.mutation.SetJSONField(jj)
	return teu
}

// ClearJSONField clears the value of the "json_field" field.
func (teu *TestEntUpdate) ClearJSONField() *TestEntUpdate {
	teu.mutation.ClearJSONField()
	return teu
}

// SetEnumField sets the "enum_field" field.
func (teu *TestEntUpdate) SetEnumField(ee enums.TestEnum) *TestEntUpdate {
	teu.mutation.SetEnumField(ee)
	return teu
}

// SetNillableEnumField sets the "enum_field" field if the given value is not nil.
func (teu *TestEntUpdate) SetNillableEnumField(ee *enums.TestEnum) *TestEntUpdate {
	if ee != nil {
		teu.SetEnumField(*ee)
	}
	return teu
}

// ClearEnumField clears the value of the "enum_field" field.
func (teu *TestEntUpdate) ClearEnumField() *TestEntUpdate {
	teu.mutation.ClearEnumField()
	return teu
}

// Mutation returns the TestEntMutation object of the builder.
func (teu *TestEntUpdate) Mutation() *TestEntMutation {
	return teu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (teu *TestEntUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, TestEntMutation](ctx, teu.sqlSave, teu.mutation, teu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (teu *TestEntUpdate) SaveX(ctx context.Context) int {
	affected, err := teu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (teu *TestEntUpdate) Exec(ctx context.Context) error {
	_, err := teu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (teu *TestEntUpdate) ExecX(ctx context.Context) {
	if err := teu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (teu *TestEntUpdate) check() error {
	if v, ok := teu.mutation.EnumField(); ok {
		if err := testent.EnumFieldValidator(v); err != nil {
			return &ValidationError{Name: "enum_field", err: fmt.Errorf(`ent: validator failed for field "TestEnt.enum_field": %w`, err)}
		}
	}
	return nil
}

func (teu *TestEntUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := teu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(testent.Table, testent.Columns, sqlgraph.NewFieldSpec(testent.FieldID, field.TypeInt))
	if ps := teu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := teu.mutation.StringField(); ok {
		_spec.SetField(testent.FieldStringField, field.TypeString, value)
	}
	if teu.mutation.StringFieldCleared() {
		_spec.ClearField(testent.FieldStringField, field.TypeString)
	}
	if value, ok := teu.mutation.TextField(); ok {
		_spec.SetField(testent.FieldTextField, field.TypeString, value)
	}
	if teu.mutation.TextFieldCleared() {
		_spec.ClearField(testent.FieldTextField, field.TypeString)
	}
	if value, ok := teu.mutation.BytesField(); ok {
		_spec.SetField(testent.FieldBytesField, field.TypeBytes, value)
	}
	if teu.mutation.BytesFieldCleared() {
		_spec.ClearField(testent.FieldBytesField, field.TypeBytes)
	}
	if value, ok := teu.mutation.BoolField(); ok {
		_spec.SetField(testent.FieldBoolField, field.TypeBool, value)
	}
	if teu.mutation.BoolFieldCleared() {
		_spec.ClearField(testent.FieldBoolField, field.TypeBool)
	}
	if value, ok := teu.mutation.TimeField(); ok {
		_spec.SetField(testent.FieldTimeField, field.TypeTime, value)
	}
	if teu.mutation.TimeFieldCleared() {
		_spec.ClearField(testent.FieldTimeField, field.TypeTime)
	}
	if value, ok := teu.mutation.IntField(); ok {
		_spec.SetField(testent.FieldIntField, field.TypeInt, value)
	}
	if value, ok := teu.mutation.AddedIntField(); ok {
		_spec.AddField(testent.FieldIntField, field.TypeInt, value)
	}
	if teu.mutation.IntFieldCleared() {
		_spec.ClearField(testent.FieldIntField, field.TypeInt)
	}
	if value, ok := teu.mutation.Int64Field(); ok {
		_spec.SetField(testent.FieldInt64Field, field.TypeInt64, value)
	}
	if value, ok := teu.mutation.AddedInt64Field(); ok {
		_spec.AddField(testent.FieldInt64Field, field.TypeInt64, value)
	}
	if teu.mutation.Int64FieldCleared() {
		_spec.ClearField(testent.FieldInt64Field, field.TypeInt64)
	}
	if value, ok := teu.mutation.FloatField(); ok {
		_spec.SetField(testent.FieldFloatField, field.TypeFloat64, value)
	}
	if value, ok := teu.mutation.AddedFloatField(); ok {
		_spec.AddField(testent.FieldFloatField, field.TypeFloat64, value)
	}
	if teu.mutation.FloatFieldCleared() {
		_spec.ClearField(testent.FieldFloatField, field.TypeFloat64)
	}
	if value, ok := teu.mutation.JSONField(); ok {
		_spec.SetField(testent.FieldJSONField, field.TypeJSON, value)
	}
	if teu.mutation.JSONFieldCleared() {
		_spec.ClearField(testent.FieldJSONField, field.TypeJSON)
	}
	if value, ok := teu.mutation.EnumField(); ok {
		_spec.SetField(testent.FieldEnumField, field.TypeEnum, value)
	}
	if teu.mutation.EnumFieldCleared() {
		_spec.ClearField(testent.FieldEnumField, field.TypeEnum)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, teu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{testent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	teu.mutation.done = true
	return n, nil
}

// TestEntUpdateOne is the builder for updating a single TestEnt entity.
type TestEntUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TestEntMutation
}

// SetStringField sets the "string_field" field.
func (teuo *TestEntUpdateOne) SetStringField(s string) *TestEntUpdateOne {
	teuo.mutation.SetStringField(s)
	return teuo
}

// SetNillableStringField sets the "string_field" field if the given value is not nil.
func (teuo *TestEntUpdateOne) SetNillableStringField(s *string) *TestEntUpdateOne {
	if s != nil {
		teuo.SetStringField(*s)
	}
	return teuo
}

// ClearStringField clears the value of the "string_field" field.
func (teuo *TestEntUpdateOne) ClearStringField() *TestEntUpdateOne {
	teuo.mutation.ClearStringField()
	return teuo
}

// SetTextField sets the "text_field" field.
func (teuo *TestEntUpdateOne) SetTextField(s string) *TestEntUpdateOne {
	teuo.mutation.SetTextField(s)
	return teuo
}

// SetNillableTextField sets the "text_field" field if the given value is not nil.
func (teuo *TestEntUpdateOne) SetNillableTextField(s *string) *TestEntUpdateOne {
	if s != nil {
		teuo.SetTextField(*s)
	}
	return teuo
}

// ClearTextField clears the value of the "text_field" field.
func (teuo *TestEntUpdateOne) ClearTextField() *TestEntUpdateOne {
	teuo.mutation.ClearTextField()
	return teuo
}

// SetBytesField sets the "bytes_field" field.
func (teuo *TestEntUpdateOne) SetBytesField(b []byte) *TestEntUpdateOne {
	teuo.mutation.SetBytesField(b)
	return teuo
}

// ClearBytesField clears the value of the "bytes_field" field.
func (teuo *TestEntUpdateOne) ClearBytesField() *TestEntUpdateOne {
	teuo.mutation.ClearBytesField()
	return teuo
}

// SetBoolField sets the "bool_field" field.
func (teuo *TestEntUpdateOne) SetBoolField(b bool) *TestEntUpdateOne {
	teuo.mutation.SetBoolField(b)
	return teuo
}

// SetNillableBoolField sets the "bool_field" field if the given value is not nil.
func (teuo *TestEntUpdateOne) SetNillableBoolField(b *bool) *TestEntUpdateOne {
	if b != nil {
		teuo.SetBoolField(*b)
	}
	return teuo
}

// ClearBoolField clears the value of the "bool_field" field.
func (teuo *TestEntUpdateOne) ClearBoolField() *TestEntUpdateOne {
	teuo.mutation.ClearBoolField()
	return teuo
}

// SetTimeField sets the "time_field" field.
func (teuo *TestEntUpdateOne) SetTimeField(t time.Time) *TestEntUpdateOne {
	teuo.mutation.SetTimeField(t)
	return teuo
}

// SetNillableTimeField sets the "time_field" field if the given value is not nil.
func (teuo *TestEntUpdateOne) SetNillableTimeField(t *time.Time) *TestEntUpdateOne {
	if t != nil {
		teuo.SetTimeField(*t)
	}
	return teuo
}

// ClearTimeField clears the value of the "time_field" field.
func (teuo *TestEntUpdateOne) ClearTimeField() *TestEntUpdateOne {
	teuo.mutation.ClearTimeField()
	return teuo
}

// SetIntField sets the "int_field" field.
func (teuo *TestEntUpdateOne) SetIntField(i int) *TestEntUpdateOne {
	teuo.mutation.ResetIntField()
	teuo.mutation.SetIntField(i)
	return teuo
}

// SetNillableIntField sets the "int_field" field if the given value is not nil.
func (teuo *TestEntUpdateOne) SetNillableIntField(i *int) *TestEntUpdateOne {
	if i != nil {
		teuo.SetIntField(*i)
	}
	return teuo
}

// AddIntField adds i to the "int_field" field.
func (teuo *TestEntUpdateOne) AddIntField(i int) *TestEntUpdateOne {
	teuo.mutation.AddIntField(i)
	return teuo
}

// ClearIntField clears the value of the "int_field" field.
func (teuo *TestEntUpdateOne) ClearIntField() *TestEntUpdateOne {
	teuo.mutation.ClearIntField()
	return teuo
}

// SetInt64Field sets the "int64_field" field.
func (teuo *TestEntUpdateOne) SetInt64Field(i int64) *TestEntUpdateOne {
	teuo.mutation.ResetInt64Field()
	teuo.mutation.SetInt64Field(i)
	return teuo
}

// SetNillableInt64Field sets the "int64_field" field if the given value is not nil.
func (teuo *TestEntUpdateOne) SetNillableInt64Field(i *int64) *TestEntUpdateOne {
	if i != nil {
		teuo.SetInt64Field(*i)
	}
	return teuo
}

// AddInt64Field adds i to the "int64_field" field.
func (teuo *TestEntUpdateOne) AddInt64Field(i int64) *TestEntUpdateOne {
	teuo.mutation.AddInt64Field(i)
	return teuo
}

// ClearInt64Field clears the value of the "int64_field" field.
func (teuo *TestEntUpdateOne) ClearInt64Field() *TestEntUpdateOne {
	teuo.mutation.ClearInt64Field()
	return teuo
}

// SetFloatField sets the "float_field" field.
func (teuo *TestEntUpdateOne) SetFloatField(f float64) *TestEntUpdateOne {
	teuo.mutation.ResetFloatField()
	teuo.mutation.SetFloatField(f)
	return teuo
}

// SetNillableFloatField sets the "float_field" field if the given value is not nil.
func (teuo *TestEntUpdateOne) SetNillableFloatField(f *float64) *TestEntUpdateOne {
	if f != nil {
		teuo.SetFloatField(*f)
	}
	return teuo
}

// AddFloatField adds f to the "float_field" field.
func (teuo *TestEntUpdateOne) AddFloatField(f float64) *TestEntUpdateOne {
	teuo.mutation.AddFloatField(f)
	return teuo
}

// ClearFloatField clears the value of the "float_field" field.
func (teuo *TestEntUpdateOne) ClearFloatField() *TestEntUpdateOne {
	teuo.mutation.ClearFloatField()
	return teuo
}

// SetJSONField sets the "json_field" field.
func (teuo *TestEntUpdateOne) SetJSONField(jj *jsonfields.TestJSON) *TestEntUpdateOne {
	teuo.mutation.SetJSONField(jj)
	return teuo
}

// ClearJSONField clears the value of the "json_field" field.
func (teuo *TestEntUpdateOne) ClearJSONField() *TestEntUpdateOne {
	teuo.mutation.ClearJSONField()
	return teuo
}

// SetEnumField sets the "enum_field" field.
func (teuo *TestEntUpdateOne) SetEnumField(ee enums.TestEnum) *TestEntUpdateOne {
	teuo.mutation.SetEnumField(ee)
	return teuo
}

// SetNillableEnumField sets the "enum_field" field if the given value is not nil.
func (teuo *TestEntUpdateOne) SetNillableEnumField(ee *enums.TestEnum) *TestEntUpdateOne {
	if ee != nil {
		teuo.SetEnumField(*ee)
	}
	return teuo
}

// ClearEnumField clears the value of the "enum_field" field.
func (teuo *TestEntUpdateOne) ClearEnumField() *TestEntUpdateOne {
	teuo.mutation.ClearEnumField()
	return teuo
}

// Mutation returns the TestEntMutation object of the builder.
func (teuo *TestEntUpdateOne) Mutation() *TestEntMutation {
	return teuo.mutation
}

// Where appends a list predicates to the TestEntUpdate builder.
func (teuo *TestEntUpdateOne) Where(ps ...predicate.TestEnt) *TestEntUpdateOne {
	teuo.mutation.Where(ps...)
	return teuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (teuo *TestEntUpdateOne) Select(field string, fields ...string) *TestEntUpdateOne {
	teuo.fields = append([]string{field}, fields...)
	return teuo
}

// Save executes the query and returns the updated TestEnt entity.
func (teuo *TestEntUpdateOne) Save(ctx context.Context) (*TestEnt, error) {
	return withHooks[*TestEnt, TestEntMutation](ctx, teuo.sqlSave, teuo.mutation, teuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (teuo *TestEntUpdateOne) SaveX(ctx context.Context) *TestEnt {
	node, err := teuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (teuo *TestEntUpdateOne) Exec(ctx context.Context) error {
	_, err := teuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (teuo *TestEntUpdateOne) ExecX(ctx context.Context) {
	if err := teuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (teuo *TestEntUpdateOne) check() error {
	if v, ok := teuo.mutation.EnumField(); ok {
		if err := testent.EnumFieldValidator(v); err != nil {
			return &ValidationError{Name: "enum_field", err: fmt.Errorf(`ent: validator failed for field "TestEnt.enum_field": %w`, err)}
		}
	}
	return nil
}

func (teuo *TestEntUpdateOne) sqlSave(ctx context.Context) (_node *TestEnt, err error) {
	if err := teuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(testent.Table, testent.Columns, sqlgraph.NewFieldSpec(testent.FieldID, field.TypeInt))
	id, ok := teuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TestEnt.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := teuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, testent.FieldID)
		for _, f := range fields {
			if !testent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != testent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := teuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := teuo.mutation.StringField(); ok {
		_spec.SetField(testent.FieldStringField, field.TypeString, value)
	}
	if teuo.mutation.StringFieldCleared() {
		_spec.ClearField(testent.FieldStringField, field.TypeString)
	}
	if value, ok := teuo.mutation.TextField(); ok {
		_spec.SetField(testent.FieldTextField, field.TypeString, value)
	}
	if teuo.mutation.TextFieldCleared() {
		_spec.ClearField(testent.FieldTextField, field.TypeString)
	}
	if value, ok := teuo.mutation.BytesField(); ok {
		_spec.SetField(testent.FieldBytesField, field.TypeBytes, value)
	}
	if teuo.mutation.BytesFieldCleared() {
		_spec.ClearField(testent.FieldBytesField, field.TypeBytes)
	}
	if value, ok := teuo.mutation.BoolField(); ok {
		_spec.SetField(testent.FieldBoolField, field.TypeBool, value)
	}
	if teuo.mutation.BoolFieldCleared() {
		_spec.ClearField(testent.FieldBoolField, field.TypeBool)
	}
	if value, ok := teuo.mutation.TimeField(); ok {
		_spec.SetField(testent.FieldTimeField, field.TypeTime, value)
	}
	if teuo.mutation.TimeFieldCleared() {
		_spec.ClearField(testent.FieldTimeField, field.TypeTime)
	}
	if value, ok := teuo.mutation.IntField(); ok {
		_spec.SetField(testent.FieldIntField, field.TypeInt, value)
	}
	if value, ok := teuo.mutation.AddedIntField(); ok {
		_spec.AddField(testent.FieldIntField, field.TypeInt, value)
	}
	if teuo.mutation.IntFieldCleared() {
		_spec.ClearField(testent.FieldIntField, field.TypeInt)
	}
	if value, ok := teuo.mutation.Int64Field(); ok {
		_spec.SetField(testent.FieldInt64Field, field.TypeInt64, value)
	}
	if value, ok := teuo.mutation.AddedInt64Field(); ok {
		_spec.AddField(testent.FieldInt64Field, field.TypeInt64, value)
	}
	if teuo.mutation.Int64FieldCleared() {
		_spec.ClearField(testent.FieldInt64Field, field.TypeInt64)
	}
	if value, ok := teuo.mutation.FloatField(); ok {
		_spec.SetField(testent.FieldFloatField, field.TypeFloat64, value)
	}
	if value, ok := teuo.mutation.AddedFloatField(); ok {
		_spec.AddField(testent.FieldFloatField, field.TypeFloat64, value)
	}
	if teuo.mutation.FloatFieldCleared() {
		_spec.ClearField(testent.FieldFloatField, field.TypeFloat64)
	}
	if value, ok := teuo.mutation.JSONField(); ok {
		_spec.SetField(testent.FieldJSONField, field.TypeJSON, value)
	}
	if teuo.mutation.JSONFieldCleared() {
		_spec.ClearField(testent.FieldJSONField, field.TypeJSON)
	}
	if value, ok := teuo.mutation.EnumField(); ok {
		_spec.SetField(testent.FieldEnumField, field.TypeEnum, value)
	}
	if teuo.mutation.EnumFieldCleared() {
		_spec.ClearField(testent.FieldEnumField, field.TypeEnum)
	}
	_node = &TestEnt{config: teuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, teuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{testent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	teuo.mutation.done = true
	return _node, nil
}
