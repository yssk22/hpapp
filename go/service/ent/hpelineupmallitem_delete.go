// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yssk22/hpapp/go/service/ent/hpelineupmallitem"
	"github.com/yssk22/hpapp/go/service/ent/predicate"
)

// HPElineupMallItemDelete is the builder for deleting a HPElineupMallItem entity.
type HPElineupMallItemDelete struct {
	config
	hooks    []Hook
	mutation *HPElineupMallItemMutation
}

// Where appends a list predicates to the HPElineupMallItemDelete builder.
func (hemid *HPElineupMallItemDelete) Where(ps ...predicate.HPElineupMallItem) *HPElineupMallItemDelete {
	hemid.mutation.Where(ps...)
	return hemid
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (hemid *HPElineupMallItemDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, HPElineupMallItemMutation](ctx, hemid.sqlExec, hemid.mutation, hemid.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (hemid *HPElineupMallItemDelete) ExecX(ctx context.Context) int {
	n, err := hemid.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (hemid *HPElineupMallItemDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(hpelineupmallitem.Table, sqlgraph.NewFieldSpec(hpelineupmallitem.FieldID, field.TypeInt))
	if ps := hemid.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, hemid.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	hemid.mutation.done = true
	return affected, err
}

// HPElineupMallItemDeleteOne is the builder for deleting a single HPElineupMallItem entity.
type HPElineupMallItemDeleteOne struct {
	hemid *HPElineupMallItemDelete
}

// Where appends a list predicates to the HPElineupMallItemDelete builder.
func (hemido *HPElineupMallItemDeleteOne) Where(ps ...predicate.HPElineupMallItem) *HPElineupMallItemDeleteOne {
	hemido.hemid.mutation.Where(ps...)
	return hemido
}

// Exec executes the deletion query.
func (hemido *HPElineupMallItemDeleteOne) Exec(ctx context.Context) error {
	n, err := hemido.hemid.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{hpelineupmallitem.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (hemido *HPElineupMallItemDeleteOne) ExecX(ctx context.Context) {
	if err := hemido.Exec(ctx); err != nil {
		panic(err)
	}
}
