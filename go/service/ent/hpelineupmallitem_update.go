// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/yssk22/hpapp/go/service/ent/hpartist"
	"github.com/yssk22/hpapp/go/service/ent/hpelineupmallitem"
	"github.com/yssk22/hpapp/go/service/ent/hpelineupmallitempurchasehistory"
	"github.com/yssk22/hpapp/go/service/ent/hpmember"
	"github.com/yssk22/hpapp/go/service/ent/predicate"
	"github.com/yssk22/hpapp/go/service/schema/enums"
	"github.com/yssk22/hpapp/go/service/schema/jsonfields"
)

// HPElineupMallItemUpdate is the builder for updating HPElineupMallItem entities.
type HPElineupMallItemUpdate struct {
	config
	hooks    []Hook
	mutation *HPElineupMallItemMutation
}

// Where appends a list predicates to the HPElineupMallItemUpdate builder.
func (hemiu *HPElineupMallItemUpdate) Where(ps ...predicate.HPElineupMallItem) *HPElineupMallItemUpdate {
	hemiu.mutation.Where(ps...)
	return hemiu
}

// SetCrawledAt sets the "crawled_at" field.
func (hemiu *HPElineupMallItemUpdate) SetCrawledAt(t time.Time) *HPElineupMallItemUpdate {
	hemiu.mutation.SetCrawledAt(t)
	return hemiu
}

// SetNillableCrawledAt sets the "crawled_at" field if the given value is not nil.
func (hemiu *HPElineupMallItemUpdate) SetNillableCrawledAt(t *time.Time) *HPElineupMallItemUpdate {
	if t != nil {
		hemiu.SetCrawledAt(*t)
	}
	return hemiu
}

// ClearCrawledAt clears the value of the "crawled_at" field.
func (hemiu *HPElineupMallItemUpdate) ClearCrawledAt() *HPElineupMallItemUpdate {
	hemiu.mutation.ClearCrawledAt()
	return hemiu
}

// SetErrorCount sets the "error_count" field.
func (hemiu *HPElineupMallItemUpdate) SetErrorCount(i int) *HPElineupMallItemUpdate {
	hemiu.mutation.ResetErrorCount()
	hemiu.mutation.SetErrorCount(i)
	return hemiu
}

// SetNillableErrorCount sets the "error_count" field if the given value is not nil.
func (hemiu *HPElineupMallItemUpdate) SetNillableErrorCount(i *int) *HPElineupMallItemUpdate {
	if i != nil {
		hemiu.SetErrorCount(*i)
	}
	return hemiu
}

// AddErrorCount adds i to the "error_count" field.
func (hemiu *HPElineupMallItemUpdate) AddErrorCount(i int) *HPElineupMallItemUpdate {
	hemiu.mutation.AddErrorCount(i)
	return hemiu
}

// SetManuallyModified sets the "manually_modified" field.
func (hemiu *HPElineupMallItemUpdate) SetManuallyModified(jm *jsonfields.ManuallyModified) *HPElineupMallItemUpdate {
	hemiu.mutation.SetManuallyModified(jm)
	return hemiu
}

// ClearManuallyModified clears the value of the "manually_modified" field.
func (hemiu *HPElineupMallItemUpdate) ClearManuallyModified() *HPElineupMallItemUpdate {
	hemiu.mutation.ClearManuallyModified()
	return hemiu
}

// SetLastErrorMessage sets the "last_error_message" field.
func (hemiu *HPElineupMallItemUpdate) SetLastErrorMessage(s string) *HPElineupMallItemUpdate {
	hemiu.mutation.SetLastErrorMessage(s)
	return hemiu
}

// SetNillableLastErrorMessage sets the "last_error_message" field if the given value is not nil.
func (hemiu *HPElineupMallItemUpdate) SetNillableLastErrorMessage(s *string) *HPElineupMallItemUpdate {
	if s != nil {
		hemiu.SetLastErrorMessage(*s)
	}
	return hemiu
}

// ClearLastErrorMessage clears the value of the "last_error_message" field.
func (hemiu *HPElineupMallItemUpdate) ClearLastErrorMessage() *HPElineupMallItemUpdate {
	hemiu.mutation.ClearLastErrorMessage()
	return hemiu
}

// SetRecrawlRequired sets the "recrawl_required" field.
func (hemiu *HPElineupMallItemUpdate) SetRecrawlRequired(b bool) *HPElineupMallItemUpdate {
	hemiu.mutation.SetRecrawlRequired(b)
	return hemiu
}

// SetNillableRecrawlRequired sets the "recrawl_required" field if the given value is not nil.
func (hemiu *HPElineupMallItemUpdate) SetNillableRecrawlRequired(b *bool) *HPElineupMallItemUpdate {
	if b != nil {
		hemiu.SetRecrawlRequired(*b)
	}
	return hemiu
}

// ClearRecrawlRequired clears the value of the "recrawl_required" field.
func (hemiu *HPElineupMallItemUpdate) ClearRecrawlRequired() *HPElineupMallItemUpdate {
	hemiu.mutation.ClearRecrawlRequired()
	return hemiu
}

// SetUpdatedAt sets the "updated_at" field.
func (hemiu *HPElineupMallItemUpdate) SetUpdatedAt(t time.Time) *HPElineupMallItemUpdate {
	hemiu.mutation.SetUpdatedAt(t)
	return hemiu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (hemiu *HPElineupMallItemUpdate) SetNillableUpdatedAt(t *time.Time) *HPElineupMallItemUpdate {
	if t != nil {
		hemiu.SetUpdatedAt(*t)
	}
	return hemiu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (hemiu *HPElineupMallItemUpdate) ClearUpdatedAt() *HPElineupMallItemUpdate {
	hemiu.mutation.ClearUpdatedAt()
	return hemiu
}

// SetPermalink sets the "permalink" field.
func (hemiu *HPElineupMallItemUpdate) SetPermalink(s string) *HPElineupMallItemUpdate {
	hemiu.mutation.SetPermalink(s)
	return hemiu
}

// SetName sets the "name" field.
func (hemiu *HPElineupMallItemUpdate) SetName(s string) *HPElineupMallItemUpdate {
	hemiu.mutation.SetName(s)
	return hemiu
}

// SetDescription sets the "description" field.
func (hemiu *HPElineupMallItemUpdate) SetDescription(s string) *HPElineupMallItemUpdate {
	hemiu.mutation.SetDescription(s)
	return hemiu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (hemiu *HPElineupMallItemUpdate) SetNillableDescription(s *string) *HPElineupMallItemUpdate {
	if s != nil {
		hemiu.SetDescription(*s)
	}
	return hemiu
}

// SetSupplier sets the "supplier" field.
func (hemiu *HPElineupMallItemUpdate) SetSupplier(s string) *HPElineupMallItemUpdate {
	hemiu.mutation.SetSupplier(s)
	return hemiu
}

// SetPrice sets the "price" field.
func (hemiu *HPElineupMallItemUpdate) SetPrice(i int) *HPElineupMallItemUpdate {
	hemiu.mutation.ResetPrice()
	hemiu.mutation.SetPrice(i)
	return hemiu
}

// AddPrice adds i to the "price" field.
func (hemiu *HPElineupMallItemUpdate) AddPrice(i int) *HPElineupMallItemUpdate {
	hemiu.mutation.AddPrice(i)
	return hemiu
}

// SetIsLimitedToFc sets the "is_limited_to_fc" field.
func (hemiu *HPElineupMallItemUpdate) SetIsLimitedToFc(b bool) *HPElineupMallItemUpdate {
	hemiu.mutation.SetIsLimitedToFc(b)
	return hemiu
}

// SetIsOutOfStock sets the "is_out_of_stock" field.
func (hemiu *HPElineupMallItemUpdate) SetIsOutOfStock(b bool) *HPElineupMallItemUpdate {
	hemiu.mutation.SetIsOutOfStock(b)
	return hemiu
}

// SetImages sets the "images" field.
func (hemiu *HPElineupMallItemUpdate) SetImages(j []jsonfields.Media) *HPElineupMallItemUpdate {
	hemiu.mutation.SetImages(j)
	return hemiu
}

// AppendImages appends j to the "images" field.
func (hemiu *HPElineupMallItemUpdate) AppendImages(j []jsonfields.Media) *HPElineupMallItemUpdate {
	hemiu.mutation.AppendImages(j)
	return hemiu
}

// SetCategory sets the "category" field.
func (hemiu *HPElineupMallItemUpdate) SetCategory(eemic enums.HPElineupMallItemCategory) *HPElineupMallItemUpdate {
	hemiu.mutation.SetCategory(eemic)
	return hemiu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (hemiu *HPElineupMallItemUpdate) SetNillableCategory(eemic *enums.HPElineupMallItemCategory) *HPElineupMallItemUpdate {
	if eemic != nil {
		hemiu.SetCategory(*eemic)
	}
	return hemiu
}

// SetOrderStartAt sets the "order_start_at" field.
func (hemiu *HPElineupMallItemUpdate) SetOrderStartAt(t time.Time) *HPElineupMallItemUpdate {
	hemiu.mutation.SetOrderStartAt(t)
	return hemiu
}

// SetNillableOrderStartAt sets the "order_start_at" field if the given value is not nil.
func (hemiu *HPElineupMallItemUpdate) SetNillableOrderStartAt(t *time.Time) *HPElineupMallItemUpdate {
	if t != nil {
		hemiu.SetOrderStartAt(*t)
	}
	return hemiu
}

// ClearOrderStartAt clears the value of the "order_start_at" field.
func (hemiu *HPElineupMallItemUpdate) ClearOrderStartAt() *HPElineupMallItemUpdate {
	hemiu.mutation.ClearOrderStartAt()
	return hemiu
}

// SetOrderEndAt sets the "order_end_at" field.
func (hemiu *HPElineupMallItemUpdate) SetOrderEndAt(t time.Time) *HPElineupMallItemUpdate {
	hemiu.mutation.SetOrderEndAt(t)
	return hemiu
}

// SetNillableOrderEndAt sets the "order_end_at" field if the given value is not nil.
func (hemiu *HPElineupMallItemUpdate) SetNillableOrderEndAt(t *time.Time) *HPElineupMallItemUpdate {
	if t != nil {
		hemiu.SetOrderEndAt(*t)
	}
	return hemiu
}

// ClearOrderEndAt clears the value of the "order_end_at" field.
func (hemiu *HPElineupMallItemUpdate) ClearOrderEndAt() *HPElineupMallItemUpdate {
	hemiu.mutation.ClearOrderEndAt()
	return hemiu
}

// AddTaggedArtistIDs adds the "tagged_artists" edge to the HPArtist entity by IDs.
func (hemiu *HPElineupMallItemUpdate) AddTaggedArtistIDs(ids ...int) *HPElineupMallItemUpdate {
	hemiu.mutation.AddTaggedArtistIDs(ids...)
	return hemiu
}

// AddTaggedArtists adds the "tagged_artists" edges to the HPArtist entity.
func (hemiu *HPElineupMallItemUpdate) AddTaggedArtists(h ...*HPArtist) *HPElineupMallItemUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hemiu.AddTaggedArtistIDs(ids...)
}

// AddTaggedMemberIDs adds the "tagged_members" edge to the HPMember entity by IDs.
func (hemiu *HPElineupMallItemUpdate) AddTaggedMemberIDs(ids ...int) *HPElineupMallItemUpdate {
	hemiu.mutation.AddTaggedMemberIDs(ids...)
	return hemiu
}

// AddTaggedMembers adds the "tagged_members" edges to the HPMember entity.
func (hemiu *HPElineupMallItemUpdate) AddTaggedMembers(h ...*HPMember) *HPElineupMallItemUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hemiu.AddTaggedMemberIDs(ids...)
}

// AddPurchaseHistoryIDs adds the "purchase_histories" edge to the HPElineupMallItemPurchaseHistory entity by IDs.
func (hemiu *HPElineupMallItemUpdate) AddPurchaseHistoryIDs(ids ...int) *HPElineupMallItemUpdate {
	hemiu.mutation.AddPurchaseHistoryIDs(ids...)
	return hemiu
}

// AddPurchaseHistories adds the "purchase_histories" edges to the HPElineupMallItemPurchaseHistory entity.
func (hemiu *HPElineupMallItemUpdate) AddPurchaseHistories(h ...*HPElineupMallItemPurchaseHistory) *HPElineupMallItemUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hemiu.AddPurchaseHistoryIDs(ids...)
}

// Mutation returns the HPElineupMallItemMutation object of the builder.
func (hemiu *HPElineupMallItemUpdate) Mutation() *HPElineupMallItemMutation {
	return hemiu.mutation
}

// ClearTaggedArtists clears all "tagged_artists" edges to the HPArtist entity.
func (hemiu *HPElineupMallItemUpdate) ClearTaggedArtists() *HPElineupMallItemUpdate {
	hemiu.mutation.ClearTaggedArtists()
	return hemiu
}

// RemoveTaggedArtistIDs removes the "tagged_artists" edge to HPArtist entities by IDs.
func (hemiu *HPElineupMallItemUpdate) RemoveTaggedArtistIDs(ids ...int) *HPElineupMallItemUpdate {
	hemiu.mutation.RemoveTaggedArtistIDs(ids...)
	return hemiu
}

// RemoveTaggedArtists removes "tagged_artists" edges to HPArtist entities.
func (hemiu *HPElineupMallItemUpdate) RemoveTaggedArtists(h ...*HPArtist) *HPElineupMallItemUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hemiu.RemoveTaggedArtistIDs(ids...)
}

// ClearTaggedMembers clears all "tagged_members" edges to the HPMember entity.
func (hemiu *HPElineupMallItemUpdate) ClearTaggedMembers() *HPElineupMallItemUpdate {
	hemiu.mutation.ClearTaggedMembers()
	return hemiu
}

// RemoveTaggedMemberIDs removes the "tagged_members" edge to HPMember entities by IDs.
func (hemiu *HPElineupMallItemUpdate) RemoveTaggedMemberIDs(ids ...int) *HPElineupMallItemUpdate {
	hemiu.mutation.RemoveTaggedMemberIDs(ids...)
	return hemiu
}

// RemoveTaggedMembers removes "tagged_members" edges to HPMember entities.
func (hemiu *HPElineupMallItemUpdate) RemoveTaggedMembers(h ...*HPMember) *HPElineupMallItemUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hemiu.RemoveTaggedMemberIDs(ids...)
}

// ClearPurchaseHistories clears all "purchase_histories" edges to the HPElineupMallItemPurchaseHistory entity.
func (hemiu *HPElineupMallItemUpdate) ClearPurchaseHistories() *HPElineupMallItemUpdate {
	hemiu.mutation.ClearPurchaseHistories()
	return hemiu
}

// RemovePurchaseHistoryIDs removes the "purchase_histories" edge to HPElineupMallItemPurchaseHistory entities by IDs.
func (hemiu *HPElineupMallItemUpdate) RemovePurchaseHistoryIDs(ids ...int) *HPElineupMallItemUpdate {
	hemiu.mutation.RemovePurchaseHistoryIDs(ids...)
	return hemiu
}

// RemovePurchaseHistories removes "purchase_histories" edges to HPElineupMallItemPurchaseHistory entities.
func (hemiu *HPElineupMallItemUpdate) RemovePurchaseHistories(h ...*HPElineupMallItemPurchaseHistory) *HPElineupMallItemUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hemiu.RemovePurchaseHistoryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hemiu *HPElineupMallItemUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, HPElineupMallItemMutation](ctx, hemiu.sqlSave, hemiu.mutation, hemiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hemiu *HPElineupMallItemUpdate) SaveX(ctx context.Context) int {
	affected, err := hemiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hemiu *HPElineupMallItemUpdate) Exec(ctx context.Context) error {
	_, err := hemiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hemiu *HPElineupMallItemUpdate) ExecX(ctx context.Context) {
	if err := hemiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hemiu *HPElineupMallItemUpdate) check() error {
	if v, ok := hemiu.mutation.Category(); ok {
		if err := hpelineupmallitem.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "HPElineupMallItem.category": %w`, err)}
		}
	}
	return nil
}

func (hemiu *HPElineupMallItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := hemiu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(hpelineupmallitem.Table, hpelineupmallitem.Columns, sqlgraph.NewFieldSpec(hpelineupmallitem.FieldID, field.TypeInt))
	if ps := hemiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hemiu.mutation.CrawledAt(); ok {
		_spec.SetField(hpelineupmallitem.FieldCrawledAt, field.TypeTime, value)
	}
	if hemiu.mutation.CrawledAtCleared() {
		_spec.ClearField(hpelineupmallitem.FieldCrawledAt, field.TypeTime)
	}
	if value, ok := hemiu.mutation.ErrorCount(); ok {
		_spec.SetField(hpelineupmallitem.FieldErrorCount, field.TypeInt, value)
	}
	if value, ok := hemiu.mutation.AddedErrorCount(); ok {
		_spec.AddField(hpelineupmallitem.FieldErrorCount, field.TypeInt, value)
	}
	if value, ok := hemiu.mutation.ManuallyModified(); ok {
		_spec.SetField(hpelineupmallitem.FieldManuallyModified, field.TypeJSON, value)
	}
	if hemiu.mutation.ManuallyModifiedCleared() {
		_spec.ClearField(hpelineupmallitem.FieldManuallyModified, field.TypeJSON)
	}
	if value, ok := hemiu.mutation.LastErrorMessage(); ok {
		_spec.SetField(hpelineupmallitem.FieldLastErrorMessage, field.TypeString, value)
	}
	if hemiu.mutation.LastErrorMessageCleared() {
		_spec.ClearField(hpelineupmallitem.FieldLastErrorMessage, field.TypeString)
	}
	if value, ok := hemiu.mutation.RecrawlRequired(); ok {
		_spec.SetField(hpelineupmallitem.FieldRecrawlRequired, field.TypeBool, value)
	}
	if hemiu.mutation.RecrawlRequiredCleared() {
		_spec.ClearField(hpelineupmallitem.FieldRecrawlRequired, field.TypeBool)
	}
	if hemiu.mutation.CreatedAtCleared() {
		_spec.ClearField(hpelineupmallitem.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := hemiu.mutation.UpdatedAt(); ok {
		_spec.SetField(hpelineupmallitem.FieldUpdatedAt, field.TypeTime, value)
	}
	if hemiu.mutation.UpdatedAtCleared() {
		_spec.ClearField(hpelineupmallitem.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := hemiu.mutation.Permalink(); ok {
		_spec.SetField(hpelineupmallitem.FieldPermalink, field.TypeString, value)
	}
	if value, ok := hemiu.mutation.Name(); ok {
		_spec.SetField(hpelineupmallitem.FieldName, field.TypeString, value)
	}
	if value, ok := hemiu.mutation.Description(); ok {
		_spec.SetField(hpelineupmallitem.FieldDescription, field.TypeString, value)
	}
	if value, ok := hemiu.mutation.Supplier(); ok {
		_spec.SetField(hpelineupmallitem.FieldSupplier, field.TypeString, value)
	}
	if value, ok := hemiu.mutation.Price(); ok {
		_spec.SetField(hpelineupmallitem.FieldPrice, field.TypeInt, value)
	}
	if value, ok := hemiu.mutation.AddedPrice(); ok {
		_spec.AddField(hpelineupmallitem.FieldPrice, field.TypeInt, value)
	}
	if value, ok := hemiu.mutation.IsLimitedToFc(); ok {
		_spec.SetField(hpelineupmallitem.FieldIsLimitedToFc, field.TypeBool, value)
	}
	if value, ok := hemiu.mutation.IsOutOfStock(); ok {
		_spec.SetField(hpelineupmallitem.FieldIsOutOfStock, field.TypeBool, value)
	}
	if value, ok := hemiu.mutation.Images(); ok {
		_spec.SetField(hpelineupmallitem.FieldImages, field.TypeJSON, value)
	}
	if value, ok := hemiu.mutation.AppendedImages(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, hpelineupmallitem.FieldImages, value)
		})
	}
	if value, ok := hemiu.mutation.Category(); ok {
		_spec.SetField(hpelineupmallitem.FieldCategory, field.TypeEnum, value)
	}
	if value, ok := hemiu.mutation.OrderStartAt(); ok {
		_spec.SetField(hpelineupmallitem.FieldOrderStartAt, field.TypeTime, value)
	}
	if hemiu.mutation.OrderStartAtCleared() {
		_spec.ClearField(hpelineupmallitem.FieldOrderStartAt, field.TypeTime)
	}
	if value, ok := hemiu.mutation.OrderEndAt(); ok {
		_spec.SetField(hpelineupmallitem.FieldOrderEndAt, field.TypeTime, value)
	}
	if hemiu.mutation.OrderEndAtCleared() {
		_spec.ClearField(hpelineupmallitem.FieldOrderEndAt, field.TypeTime)
	}
	if hemiu.mutation.TaggedArtistsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpelineupmallitem.TaggedArtistsTable,
			Columns: hpelineupmallitem.TaggedArtistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpartist.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hemiu.mutation.RemovedTaggedArtistsIDs(); len(nodes) > 0 && !hemiu.mutation.TaggedArtistsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpelineupmallitem.TaggedArtistsTable,
			Columns: hpelineupmallitem.TaggedArtistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpartist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hemiu.mutation.TaggedArtistsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpelineupmallitem.TaggedArtistsTable,
			Columns: hpelineupmallitem.TaggedArtistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpartist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hemiu.mutation.TaggedMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpelineupmallitem.TaggedMembersTable,
			Columns: hpelineupmallitem.TaggedMembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpmember.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hemiu.mutation.RemovedTaggedMembersIDs(); len(nodes) > 0 && !hemiu.mutation.TaggedMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpelineupmallitem.TaggedMembersTable,
			Columns: hpelineupmallitem.TaggedMembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hemiu.mutation.TaggedMembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpelineupmallitem.TaggedMembersTable,
			Columns: hpelineupmallitem.TaggedMembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hemiu.mutation.PurchaseHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpelineupmallitem.PurchaseHistoriesTable,
			Columns: []string{hpelineupmallitem.PurchaseHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpelineupmallitempurchasehistory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hemiu.mutation.RemovedPurchaseHistoriesIDs(); len(nodes) > 0 && !hemiu.mutation.PurchaseHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpelineupmallitem.PurchaseHistoriesTable,
			Columns: []string{hpelineupmallitem.PurchaseHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpelineupmallitempurchasehistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hemiu.mutation.PurchaseHistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpelineupmallitem.PurchaseHistoriesTable,
			Columns: []string{hpelineupmallitem.PurchaseHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpelineupmallitempurchasehistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hemiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hpelineupmallitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	hemiu.mutation.done = true
	return n, nil
}

// HPElineupMallItemUpdateOne is the builder for updating a single HPElineupMallItem entity.
type HPElineupMallItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HPElineupMallItemMutation
}

// SetCrawledAt sets the "crawled_at" field.
func (hemiuo *HPElineupMallItemUpdateOne) SetCrawledAt(t time.Time) *HPElineupMallItemUpdateOne {
	hemiuo.mutation.SetCrawledAt(t)
	return hemiuo
}

// SetNillableCrawledAt sets the "crawled_at" field if the given value is not nil.
func (hemiuo *HPElineupMallItemUpdateOne) SetNillableCrawledAt(t *time.Time) *HPElineupMallItemUpdateOne {
	if t != nil {
		hemiuo.SetCrawledAt(*t)
	}
	return hemiuo
}

// ClearCrawledAt clears the value of the "crawled_at" field.
func (hemiuo *HPElineupMallItemUpdateOne) ClearCrawledAt() *HPElineupMallItemUpdateOne {
	hemiuo.mutation.ClearCrawledAt()
	return hemiuo
}

// SetErrorCount sets the "error_count" field.
func (hemiuo *HPElineupMallItemUpdateOne) SetErrorCount(i int) *HPElineupMallItemUpdateOne {
	hemiuo.mutation.ResetErrorCount()
	hemiuo.mutation.SetErrorCount(i)
	return hemiuo
}

// SetNillableErrorCount sets the "error_count" field if the given value is not nil.
func (hemiuo *HPElineupMallItemUpdateOne) SetNillableErrorCount(i *int) *HPElineupMallItemUpdateOne {
	if i != nil {
		hemiuo.SetErrorCount(*i)
	}
	return hemiuo
}

// AddErrorCount adds i to the "error_count" field.
func (hemiuo *HPElineupMallItemUpdateOne) AddErrorCount(i int) *HPElineupMallItemUpdateOne {
	hemiuo.mutation.AddErrorCount(i)
	return hemiuo
}

// SetManuallyModified sets the "manually_modified" field.
func (hemiuo *HPElineupMallItemUpdateOne) SetManuallyModified(jm *jsonfields.ManuallyModified) *HPElineupMallItemUpdateOne {
	hemiuo.mutation.SetManuallyModified(jm)
	return hemiuo
}

// ClearManuallyModified clears the value of the "manually_modified" field.
func (hemiuo *HPElineupMallItemUpdateOne) ClearManuallyModified() *HPElineupMallItemUpdateOne {
	hemiuo.mutation.ClearManuallyModified()
	return hemiuo
}

// SetLastErrorMessage sets the "last_error_message" field.
func (hemiuo *HPElineupMallItemUpdateOne) SetLastErrorMessage(s string) *HPElineupMallItemUpdateOne {
	hemiuo.mutation.SetLastErrorMessage(s)
	return hemiuo
}

// SetNillableLastErrorMessage sets the "last_error_message" field if the given value is not nil.
func (hemiuo *HPElineupMallItemUpdateOne) SetNillableLastErrorMessage(s *string) *HPElineupMallItemUpdateOne {
	if s != nil {
		hemiuo.SetLastErrorMessage(*s)
	}
	return hemiuo
}

// ClearLastErrorMessage clears the value of the "last_error_message" field.
func (hemiuo *HPElineupMallItemUpdateOne) ClearLastErrorMessage() *HPElineupMallItemUpdateOne {
	hemiuo.mutation.ClearLastErrorMessage()
	return hemiuo
}

// SetRecrawlRequired sets the "recrawl_required" field.
func (hemiuo *HPElineupMallItemUpdateOne) SetRecrawlRequired(b bool) *HPElineupMallItemUpdateOne {
	hemiuo.mutation.SetRecrawlRequired(b)
	return hemiuo
}

// SetNillableRecrawlRequired sets the "recrawl_required" field if the given value is not nil.
func (hemiuo *HPElineupMallItemUpdateOne) SetNillableRecrawlRequired(b *bool) *HPElineupMallItemUpdateOne {
	if b != nil {
		hemiuo.SetRecrawlRequired(*b)
	}
	return hemiuo
}

// ClearRecrawlRequired clears the value of the "recrawl_required" field.
func (hemiuo *HPElineupMallItemUpdateOne) ClearRecrawlRequired() *HPElineupMallItemUpdateOne {
	hemiuo.mutation.ClearRecrawlRequired()
	return hemiuo
}

// SetUpdatedAt sets the "updated_at" field.
func (hemiuo *HPElineupMallItemUpdateOne) SetUpdatedAt(t time.Time) *HPElineupMallItemUpdateOne {
	hemiuo.mutation.SetUpdatedAt(t)
	return hemiuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (hemiuo *HPElineupMallItemUpdateOne) SetNillableUpdatedAt(t *time.Time) *HPElineupMallItemUpdateOne {
	if t != nil {
		hemiuo.SetUpdatedAt(*t)
	}
	return hemiuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (hemiuo *HPElineupMallItemUpdateOne) ClearUpdatedAt() *HPElineupMallItemUpdateOne {
	hemiuo.mutation.ClearUpdatedAt()
	return hemiuo
}

// SetPermalink sets the "permalink" field.
func (hemiuo *HPElineupMallItemUpdateOne) SetPermalink(s string) *HPElineupMallItemUpdateOne {
	hemiuo.mutation.SetPermalink(s)
	return hemiuo
}

// SetName sets the "name" field.
func (hemiuo *HPElineupMallItemUpdateOne) SetName(s string) *HPElineupMallItemUpdateOne {
	hemiuo.mutation.SetName(s)
	return hemiuo
}

// SetDescription sets the "description" field.
func (hemiuo *HPElineupMallItemUpdateOne) SetDescription(s string) *HPElineupMallItemUpdateOne {
	hemiuo.mutation.SetDescription(s)
	return hemiuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (hemiuo *HPElineupMallItemUpdateOne) SetNillableDescription(s *string) *HPElineupMallItemUpdateOne {
	if s != nil {
		hemiuo.SetDescription(*s)
	}
	return hemiuo
}

// SetSupplier sets the "supplier" field.
func (hemiuo *HPElineupMallItemUpdateOne) SetSupplier(s string) *HPElineupMallItemUpdateOne {
	hemiuo.mutation.SetSupplier(s)
	return hemiuo
}

// SetPrice sets the "price" field.
func (hemiuo *HPElineupMallItemUpdateOne) SetPrice(i int) *HPElineupMallItemUpdateOne {
	hemiuo.mutation.ResetPrice()
	hemiuo.mutation.SetPrice(i)
	return hemiuo
}

// AddPrice adds i to the "price" field.
func (hemiuo *HPElineupMallItemUpdateOne) AddPrice(i int) *HPElineupMallItemUpdateOne {
	hemiuo.mutation.AddPrice(i)
	return hemiuo
}

// SetIsLimitedToFc sets the "is_limited_to_fc" field.
func (hemiuo *HPElineupMallItemUpdateOne) SetIsLimitedToFc(b bool) *HPElineupMallItemUpdateOne {
	hemiuo.mutation.SetIsLimitedToFc(b)
	return hemiuo
}

// SetIsOutOfStock sets the "is_out_of_stock" field.
func (hemiuo *HPElineupMallItemUpdateOne) SetIsOutOfStock(b bool) *HPElineupMallItemUpdateOne {
	hemiuo.mutation.SetIsOutOfStock(b)
	return hemiuo
}

// SetImages sets the "images" field.
func (hemiuo *HPElineupMallItemUpdateOne) SetImages(j []jsonfields.Media) *HPElineupMallItemUpdateOne {
	hemiuo.mutation.SetImages(j)
	return hemiuo
}

// AppendImages appends j to the "images" field.
func (hemiuo *HPElineupMallItemUpdateOne) AppendImages(j []jsonfields.Media) *HPElineupMallItemUpdateOne {
	hemiuo.mutation.AppendImages(j)
	return hemiuo
}

// SetCategory sets the "category" field.
func (hemiuo *HPElineupMallItemUpdateOne) SetCategory(eemic enums.HPElineupMallItemCategory) *HPElineupMallItemUpdateOne {
	hemiuo.mutation.SetCategory(eemic)
	return hemiuo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (hemiuo *HPElineupMallItemUpdateOne) SetNillableCategory(eemic *enums.HPElineupMallItemCategory) *HPElineupMallItemUpdateOne {
	if eemic != nil {
		hemiuo.SetCategory(*eemic)
	}
	return hemiuo
}

// SetOrderStartAt sets the "order_start_at" field.
func (hemiuo *HPElineupMallItemUpdateOne) SetOrderStartAt(t time.Time) *HPElineupMallItemUpdateOne {
	hemiuo.mutation.SetOrderStartAt(t)
	return hemiuo
}

// SetNillableOrderStartAt sets the "order_start_at" field if the given value is not nil.
func (hemiuo *HPElineupMallItemUpdateOne) SetNillableOrderStartAt(t *time.Time) *HPElineupMallItemUpdateOne {
	if t != nil {
		hemiuo.SetOrderStartAt(*t)
	}
	return hemiuo
}

// ClearOrderStartAt clears the value of the "order_start_at" field.
func (hemiuo *HPElineupMallItemUpdateOne) ClearOrderStartAt() *HPElineupMallItemUpdateOne {
	hemiuo.mutation.ClearOrderStartAt()
	return hemiuo
}

// SetOrderEndAt sets the "order_end_at" field.
func (hemiuo *HPElineupMallItemUpdateOne) SetOrderEndAt(t time.Time) *HPElineupMallItemUpdateOne {
	hemiuo.mutation.SetOrderEndAt(t)
	return hemiuo
}

// SetNillableOrderEndAt sets the "order_end_at" field if the given value is not nil.
func (hemiuo *HPElineupMallItemUpdateOne) SetNillableOrderEndAt(t *time.Time) *HPElineupMallItemUpdateOne {
	if t != nil {
		hemiuo.SetOrderEndAt(*t)
	}
	return hemiuo
}

// ClearOrderEndAt clears the value of the "order_end_at" field.
func (hemiuo *HPElineupMallItemUpdateOne) ClearOrderEndAt() *HPElineupMallItemUpdateOne {
	hemiuo.mutation.ClearOrderEndAt()
	return hemiuo
}

// AddTaggedArtistIDs adds the "tagged_artists" edge to the HPArtist entity by IDs.
func (hemiuo *HPElineupMallItemUpdateOne) AddTaggedArtistIDs(ids ...int) *HPElineupMallItemUpdateOne {
	hemiuo.mutation.AddTaggedArtistIDs(ids...)
	return hemiuo
}

// AddTaggedArtists adds the "tagged_artists" edges to the HPArtist entity.
func (hemiuo *HPElineupMallItemUpdateOne) AddTaggedArtists(h ...*HPArtist) *HPElineupMallItemUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hemiuo.AddTaggedArtistIDs(ids...)
}

// AddTaggedMemberIDs adds the "tagged_members" edge to the HPMember entity by IDs.
func (hemiuo *HPElineupMallItemUpdateOne) AddTaggedMemberIDs(ids ...int) *HPElineupMallItemUpdateOne {
	hemiuo.mutation.AddTaggedMemberIDs(ids...)
	return hemiuo
}

// AddTaggedMembers adds the "tagged_members" edges to the HPMember entity.
func (hemiuo *HPElineupMallItemUpdateOne) AddTaggedMembers(h ...*HPMember) *HPElineupMallItemUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hemiuo.AddTaggedMemberIDs(ids...)
}

// AddPurchaseHistoryIDs adds the "purchase_histories" edge to the HPElineupMallItemPurchaseHistory entity by IDs.
func (hemiuo *HPElineupMallItemUpdateOne) AddPurchaseHistoryIDs(ids ...int) *HPElineupMallItemUpdateOne {
	hemiuo.mutation.AddPurchaseHistoryIDs(ids...)
	return hemiuo
}

// AddPurchaseHistories adds the "purchase_histories" edges to the HPElineupMallItemPurchaseHistory entity.
func (hemiuo *HPElineupMallItemUpdateOne) AddPurchaseHistories(h ...*HPElineupMallItemPurchaseHistory) *HPElineupMallItemUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hemiuo.AddPurchaseHistoryIDs(ids...)
}

// Mutation returns the HPElineupMallItemMutation object of the builder.
func (hemiuo *HPElineupMallItemUpdateOne) Mutation() *HPElineupMallItemMutation {
	return hemiuo.mutation
}

// ClearTaggedArtists clears all "tagged_artists" edges to the HPArtist entity.
func (hemiuo *HPElineupMallItemUpdateOne) ClearTaggedArtists() *HPElineupMallItemUpdateOne {
	hemiuo.mutation.ClearTaggedArtists()
	return hemiuo
}

// RemoveTaggedArtistIDs removes the "tagged_artists" edge to HPArtist entities by IDs.
func (hemiuo *HPElineupMallItemUpdateOne) RemoveTaggedArtistIDs(ids ...int) *HPElineupMallItemUpdateOne {
	hemiuo.mutation.RemoveTaggedArtistIDs(ids...)
	return hemiuo
}

// RemoveTaggedArtists removes "tagged_artists" edges to HPArtist entities.
func (hemiuo *HPElineupMallItemUpdateOne) RemoveTaggedArtists(h ...*HPArtist) *HPElineupMallItemUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hemiuo.RemoveTaggedArtistIDs(ids...)
}

// ClearTaggedMembers clears all "tagged_members" edges to the HPMember entity.
func (hemiuo *HPElineupMallItemUpdateOne) ClearTaggedMembers() *HPElineupMallItemUpdateOne {
	hemiuo.mutation.ClearTaggedMembers()
	return hemiuo
}

// RemoveTaggedMemberIDs removes the "tagged_members" edge to HPMember entities by IDs.
func (hemiuo *HPElineupMallItemUpdateOne) RemoveTaggedMemberIDs(ids ...int) *HPElineupMallItemUpdateOne {
	hemiuo.mutation.RemoveTaggedMemberIDs(ids...)
	return hemiuo
}

// RemoveTaggedMembers removes "tagged_members" edges to HPMember entities.
func (hemiuo *HPElineupMallItemUpdateOne) RemoveTaggedMembers(h ...*HPMember) *HPElineupMallItemUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hemiuo.RemoveTaggedMemberIDs(ids...)
}

// ClearPurchaseHistories clears all "purchase_histories" edges to the HPElineupMallItemPurchaseHistory entity.
func (hemiuo *HPElineupMallItemUpdateOne) ClearPurchaseHistories() *HPElineupMallItemUpdateOne {
	hemiuo.mutation.ClearPurchaseHistories()
	return hemiuo
}

// RemovePurchaseHistoryIDs removes the "purchase_histories" edge to HPElineupMallItemPurchaseHistory entities by IDs.
func (hemiuo *HPElineupMallItemUpdateOne) RemovePurchaseHistoryIDs(ids ...int) *HPElineupMallItemUpdateOne {
	hemiuo.mutation.RemovePurchaseHistoryIDs(ids...)
	return hemiuo
}

// RemovePurchaseHistories removes "purchase_histories" edges to HPElineupMallItemPurchaseHistory entities.
func (hemiuo *HPElineupMallItemUpdateOne) RemovePurchaseHistories(h ...*HPElineupMallItemPurchaseHistory) *HPElineupMallItemUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hemiuo.RemovePurchaseHistoryIDs(ids...)
}

// Where appends a list predicates to the HPElineupMallItemUpdate builder.
func (hemiuo *HPElineupMallItemUpdateOne) Where(ps ...predicate.HPElineupMallItem) *HPElineupMallItemUpdateOne {
	hemiuo.mutation.Where(ps...)
	return hemiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (hemiuo *HPElineupMallItemUpdateOne) Select(field string, fields ...string) *HPElineupMallItemUpdateOne {
	hemiuo.fields = append([]string{field}, fields...)
	return hemiuo
}

// Save executes the query and returns the updated HPElineupMallItem entity.
func (hemiuo *HPElineupMallItemUpdateOne) Save(ctx context.Context) (*HPElineupMallItem, error) {
	return withHooks[*HPElineupMallItem, HPElineupMallItemMutation](ctx, hemiuo.sqlSave, hemiuo.mutation, hemiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hemiuo *HPElineupMallItemUpdateOne) SaveX(ctx context.Context) *HPElineupMallItem {
	node, err := hemiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (hemiuo *HPElineupMallItemUpdateOne) Exec(ctx context.Context) error {
	_, err := hemiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hemiuo *HPElineupMallItemUpdateOne) ExecX(ctx context.Context) {
	if err := hemiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hemiuo *HPElineupMallItemUpdateOne) check() error {
	if v, ok := hemiuo.mutation.Category(); ok {
		if err := hpelineupmallitem.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "HPElineupMallItem.category": %w`, err)}
		}
	}
	return nil
}

func (hemiuo *HPElineupMallItemUpdateOne) sqlSave(ctx context.Context) (_node *HPElineupMallItem, err error) {
	if err := hemiuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(hpelineupmallitem.Table, hpelineupmallitem.Columns, sqlgraph.NewFieldSpec(hpelineupmallitem.FieldID, field.TypeInt))
	id, ok := hemiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "HPElineupMallItem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := hemiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hpelineupmallitem.FieldID)
		for _, f := range fields {
			if !hpelineupmallitem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != hpelineupmallitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := hemiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hemiuo.mutation.CrawledAt(); ok {
		_spec.SetField(hpelineupmallitem.FieldCrawledAt, field.TypeTime, value)
	}
	if hemiuo.mutation.CrawledAtCleared() {
		_spec.ClearField(hpelineupmallitem.FieldCrawledAt, field.TypeTime)
	}
	if value, ok := hemiuo.mutation.ErrorCount(); ok {
		_spec.SetField(hpelineupmallitem.FieldErrorCount, field.TypeInt, value)
	}
	if value, ok := hemiuo.mutation.AddedErrorCount(); ok {
		_spec.AddField(hpelineupmallitem.FieldErrorCount, field.TypeInt, value)
	}
	if value, ok := hemiuo.mutation.ManuallyModified(); ok {
		_spec.SetField(hpelineupmallitem.FieldManuallyModified, field.TypeJSON, value)
	}
	if hemiuo.mutation.ManuallyModifiedCleared() {
		_spec.ClearField(hpelineupmallitem.FieldManuallyModified, field.TypeJSON)
	}
	if value, ok := hemiuo.mutation.LastErrorMessage(); ok {
		_spec.SetField(hpelineupmallitem.FieldLastErrorMessage, field.TypeString, value)
	}
	if hemiuo.mutation.LastErrorMessageCleared() {
		_spec.ClearField(hpelineupmallitem.FieldLastErrorMessage, field.TypeString)
	}
	if value, ok := hemiuo.mutation.RecrawlRequired(); ok {
		_spec.SetField(hpelineupmallitem.FieldRecrawlRequired, field.TypeBool, value)
	}
	if hemiuo.mutation.RecrawlRequiredCleared() {
		_spec.ClearField(hpelineupmallitem.FieldRecrawlRequired, field.TypeBool)
	}
	if hemiuo.mutation.CreatedAtCleared() {
		_spec.ClearField(hpelineupmallitem.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := hemiuo.mutation.UpdatedAt(); ok {
		_spec.SetField(hpelineupmallitem.FieldUpdatedAt, field.TypeTime, value)
	}
	if hemiuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(hpelineupmallitem.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := hemiuo.mutation.Permalink(); ok {
		_spec.SetField(hpelineupmallitem.FieldPermalink, field.TypeString, value)
	}
	if value, ok := hemiuo.mutation.Name(); ok {
		_spec.SetField(hpelineupmallitem.FieldName, field.TypeString, value)
	}
	if value, ok := hemiuo.mutation.Description(); ok {
		_spec.SetField(hpelineupmallitem.FieldDescription, field.TypeString, value)
	}
	if value, ok := hemiuo.mutation.Supplier(); ok {
		_spec.SetField(hpelineupmallitem.FieldSupplier, field.TypeString, value)
	}
	if value, ok := hemiuo.mutation.Price(); ok {
		_spec.SetField(hpelineupmallitem.FieldPrice, field.TypeInt, value)
	}
	if value, ok := hemiuo.mutation.AddedPrice(); ok {
		_spec.AddField(hpelineupmallitem.FieldPrice, field.TypeInt, value)
	}
	if value, ok := hemiuo.mutation.IsLimitedToFc(); ok {
		_spec.SetField(hpelineupmallitem.FieldIsLimitedToFc, field.TypeBool, value)
	}
	if value, ok := hemiuo.mutation.IsOutOfStock(); ok {
		_spec.SetField(hpelineupmallitem.FieldIsOutOfStock, field.TypeBool, value)
	}
	if value, ok := hemiuo.mutation.Images(); ok {
		_spec.SetField(hpelineupmallitem.FieldImages, field.TypeJSON, value)
	}
	if value, ok := hemiuo.mutation.AppendedImages(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, hpelineupmallitem.FieldImages, value)
		})
	}
	if value, ok := hemiuo.mutation.Category(); ok {
		_spec.SetField(hpelineupmallitem.FieldCategory, field.TypeEnum, value)
	}
	if value, ok := hemiuo.mutation.OrderStartAt(); ok {
		_spec.SetField(hpelineupmallitem.FieldOrderStartAt, field.TypeTime, value)
	}
	if hemiuo.mutation.OrderStartAtCleared() {
		_spec.ClearField(hpelineupmallitem.FieldOrderStartAt, field.TypeTime)
	}
	if value, ok := hemiuo.mutation.OrderEndAt(); ok {
		_spec.SetField(hpelineupmallitem.FieldOrderEndAt, field.TypeTime, value)
	}
	if hemiuo.mutation.OrderEndAtCleared() {
		_spec.ClearField(hpelineupmallitem.FieldOrderEndAt, field.TypeTime)
	}
	if hemiuo.mutation.TaggedArtistsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpelineupmallitem.TaggedArtistsTable,
			Columns: hpelineupmallitem.TaggedArtistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpartist.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hemiuo.mutation.RemovedTaggedArtistsIDs(); len(nodes) > 0 && !hemiuo.mutation.TaggedArtistsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpelineupmallitem.TaggedArtistsTable,
			Columns: hpelineupmallitem.TaggedArtistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpartist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hemiuo.mutation.TaggedArtistsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpelineupmallitem.TaggedArtistsTable,
			Columns: hpelineupmallitem.TaggedArtistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpartist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hemiuo.mutation.TaggedMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpelineupmallitem.TaggedMembersTable,
			Columns: hpelineupmallitem.TaggedMembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpmember.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hemiuo.mutation.RemovedTaggedMembersIDs(); len(nodes) > 0 && !hemiuo.mutation.TaggedMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpelineupmallitem.TaggedMembersTable,
			Columns: hpelineupmallitem.TaggedMembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hemiuo.mutation.TaggedMembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpelineupmallitem.TaggedMembersTable,
			Columns: hpelineupmallitem.TaggedMembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hemiuo.mutation.PurchaseHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpelineupmallitem.PurchaseHistoriesTable,
			Columns: []string{hpelineupmallitem.PurchaseHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpelineupmallitempurchasehistory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hemiuo.mutation.RemovedPurchaseHistoriesIDs(); len(nodes) > 0 && !hemiuo.mutation.PurchaseHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpelineupmallitem.PurchaseHistoriesTable,
			Columns: []string{hpelineupmallitem.PurchaseHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpelineupmallitempurchasehistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hemiuo.mutation.PurchaseHistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpelineupmallitem.PurchaseHistoriesTable,
			Columns: []string{hpelineupmallitem.PurchaseHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpelineupmallitempurchasehistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &HPElineupMallItem{config: hemiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, hemiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hpelineupmallitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	hemiuo.mutation.done = true
	return _node, nil
}
