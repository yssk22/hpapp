// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/yssk22/hpapp/go/service/ent/hpartist"
	"github.com/yssk22/hpapp/go/service/schema/jsonfields"
)

// HPArtist is the model entity for the HPArtist schema.
type HPArtist struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CrawledAt holds the value of the "crawled_at" field.
	CrawledAt *time.Time `json:"crawled_at,omitempty"`
	// ErrorCount holds the value of the "error_count" field.
	ErrorCount int `json:"error_count,omitempty"`
	// ManuallyModified holds the value of the "manually_modified" field.
	ManuallyModified *jsonfields.ManuallyModified `json:"manually_modified,omitempty"`
	// LastErrorMessage holds the value of the "last_error_message" field.
	LastErrorMessage *string `json:"last_error_message,omitempty"`
	// RecrawlRequired holds the value of the "recrawl_required" field.
	RecrawlRequired bool `json:"recrawl_required,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Key holds the value of the "key" field.
	Key string `json:"key,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// ThumbnailURL holds the value of the "thumbnail_url" field.
	ThumbnailURL string `json:"thumbnail_url,omitempty"`
	// Index holds the value of the "index" field.
	Index int `json:"index,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HPArtistQuery when eager-loading is set.
	Edges            HPArtistEdges `json:"edges"`
	hp_event_artists *int
	selectValues     sql.SelectValues
}

// HPArtistEdges holds the relations/edges for other nodes in the graph.
type HPArtistEdges struct {
	// Members holds the value of the members edge.
	Members []*HPMember `json:"members,omitempty"`
	// Assets holds the value of the assets edge.
	Assets []*HPAsset `json:"assets,omitempty"`
	// OwningFeed holds the value of the owning_feed edge.
	OwningFeed []*HPFeedItem `json:"owning_feed,omitempty"`
	// TaggedFeed holds the value of the tagged_feed edge.
	TaggedFeed []*HPFeedItem `json:"tagged_feed,omitempty"`
	// OwningIgPosts holds the value of the owning_ig_posts edge.
	OwningIgPosts []*HPIgPost `json:"owning_ig_posts,omitempty"`
	// TaggedIgPosts holds the value of the tagged_ig_posts edge.
	TaggedIgPosts []*HPIgPost `json:"tagged_ig_posts,omitempty"`
	// OwningAmebloPosts holds the value of the owning_ameblo_posts edge.
	OwningAmebloPosts []*HPAmebloPost `json:"owning_ameblo_posts,omitempty"`
	// TaggedAmebloPosts holds the value of the tagged_ameblo_posts edge.
	TaggedAmebloPosts []*HPAmebloPost `json:"tagged_ameblo_posts,omitempty"`
	// TaggedElineupMallItems holds the value of the tagged_elineup_mall_items edge.
	TaggedElineupMallItems []*HPElineupMallItem `json:"tagged_elineup_mall_items,omitempty"`
	// FollowedBy holds the value of the followed_by edge.
	FollowedBy []*HPFollow `json:"followed_by,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [10]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedMembers                map[string][]*HPMember
	namedAssets                 map[string][]*HPAsset
	namedOwningFeed             map[string][]*HPFeedItem
	namedTaggedFeed             map[string][]*HPFeedItem
	namedOwningIgPosts          map[string][]*HPIgPost
	namedTaggedIgPosts          map[string][]*HPIgPost
	namedOwningAmebloPosts      map[string][]*HPAmebloPost
	namedTaggedAmebloPosts      map[string][]*HPAmebloPost
	namedTaggedElineupMallItems map[string][]*HPElineupMallItem
	namedFollowedBy             map[string][]*HPFollow
}

// MembersOrErr returns the Members value or an error if the edge
// was not loaded in eager-loading.
func (e HPArtistEdges) MembersOrErr() ([]*HPMember, error) {
	if e.loadedTypes[0] {
		return e.Members, nil
	}
	return nil, &NotLoadedError{edge: "members"}
}

// AssetsOrErr returns the Assets value or an error if the edge
// was not loaded in eager-loading.
func (e HPArtistEdges) AssetsOrErr() ([]*HPAsset, error) {
	if e.loadedTypes[1] {
		return e.Assets, nil
	}
	return nil, &NotLoadedError{edge: "assets"}
}

// OwningFeedOrErr returns the OwningFeed value or an error if the edge
// was not loaded in eager-loading.
func (e HPArtistEdges) OwningFeedOrErr() ([]*HPFeedItem, error) {
	if e.loadedTypes[2] {
		return e.OwningFeed, nil
	}
	return nil, &NotLoadedError{edge: "owning_feed"}
}

// TaggedFeedOrErr returns the TaggedFeed value or an error if the edge
// was not loaded in eager-loading.
func (e HPArtistEdges) TaggedFeedOrErr() ([]*HPFeedItem, error) {
	if e.loadedTypes[3] {
		return e.TaggedFeed, nil
	}
	return nil, &NotLoadedError{edge: "tagged_feed"}
}

// OwningIgPostsOrErr returns the OwningIgPosts value or an error if the edge
// was not loaded in eager-loading.
func (e HPArtistEdges) OwningIgPostsOrErr() ([]*HPIgPost, error) {
	if e.loadedTypes[4] {
		return e.OwningIgPosts, nil
	}
	return nil, &NotLoadedError{edge: "owning_ig_posts"}
}

// TaggedIgPostsOrErr returns the TaggedIgPosts value or an error if the edge
// was not loaded in eager-loading.
func (e HPArtistEdges) TaggedIgPostsOrErr() ([]*HPIgPost, error) {
	if e.loadedTypes[5] {
		return e.TaggedIgPosts, nil
	}
	return nil, &NotLoadedError{edge: "tagged_ig_posts"}
}

// OwningAmebloPostsOrErr returns the OwningAmebloPosts value or an error if the edge
// was not loaded in eager-loading.
func (e HPArtistEdges) OwningAmebloPostsOrErr() ([]*HPAmebloPost, error) {
	if e.loadedTypes[6] {
		return e.OwningAmebloPosts, nil
	}
	return nil, &NotLoadedError{edge: "owning_ameblo_posts"}
}

// TaggedAmebloPostsOrErr returns the TaggedAmebloPosts value or an error if the edge
// was not loaded in eager-loading.
func (e HPArtistEdges) TaggedAmebloPostsOrErr() ([]*HPAmebloPost, error) {
	if e.loadedTypes[7] {
		return e.TaggedAmebloPosts, nil
	}
	return nil, &NotLoadedError{edge: "tagged_ameblo_posts"}
}

// TaggedElineupMallItemsOrErr returns the TaggedElineupMallItems value or an error if the edge
// was not loaded in eager-loading.
func (e HPArtistEdges) TaggedElineupMallItemsOrErr() ([]*HPElineupMallItem, error) {
	if e.loadedTypes[8] {
		return e.TaggedElineupMallItems, nil
	}
	return nil, &NotLoadedError{edge: "tagged_elineup_mall_items"}
}

// FollowedByOrErr returns the FollowedBy value or an error if the edge
// was not loaded in eager-loading.
func (e HPArtistEdges) FollowedByOrErr() ([]*HPFollow, error) {
	if e.loadedTypes[9] {
		return e.FollowedBy, nil
	}
	return nil, &NotLoadedError{edge: "followed_by"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*HPArtist) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case hpartist.FieldManuallyModified:
			values[i] = new([]byte)
		case hpartist.FieldRecrawlRequired:
			values[i] = new(sql.NullBool)
		case hpartist.FieldID, hpartist.FieldErrorCount, hpartist.FieldIndex:
			values[i] = new(sql.NullInt64)
		case hpartist.FieldLastErrorMessage, hpartist.FieldKey, hpartist.FieldName, hpartist.FieldThumbnailURL:
			values[i] = new(sql.NullString)
		case hpartist.FieldCrawledAt, hpartist.FieldCreatedAt, hpartist.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case hpartist.ForeignKeys[0]: // hp_event_artists
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the HPArtist fields.
func (ha *HPArtist) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case hpartist.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ha.ID = int(value.Int64)
		case hpartist.FieldCrawledAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field crawled_at", values[i])
			} else if value.Valid {
				ha.CrawledAt = new(time.Time)
				*ha.CrawledAt = value.Time
			}
		case hpartist.FieldErrorCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field error_count", values[i])
			} else if value.Valid {
				ha.ErrorCount = int(value.Int64)
			}
		case hpartist.FieldManuallyModified:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field manually_modified", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ha.ManuallyModified); err != nil {
					return fmt.Errorf("unmarshal field manually_modified: %w", err)
				}
			}
		case hpartist.FieldLastErrorMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_error_message", values[i])
			} else if value.Valid {
				ha.LastErrorMessage = new(string)
				*ha.LastErrorMessage = value.String
			}
		case hpartist.FieldRecrawlRequired:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field recrawl_required", values[i])
			} else if value.Valid {
				ha.RecrawlRequired = value.Bool
			}
		case hpartist.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ha.CreatedAt = value.Time
			}
		case hpartist.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ha.UpdatedAt = value.Time
			}
		case hpartist.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				ha.Key = value.String
			}
		case hpartist.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ha.Name = value.String
			}
		case hpartist.FieldThumbnailURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field thumbnail_url", values[i])
			} else if value.Valid {
				ha.ThumbnailURL = value.String
			}
		case hpartist.FieldIndex:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field index", values[i])
			} else if value.Valid {
				ha.Index = int(value.Int64)
			}
		case hpartist.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field hp_event_artists", value)
			} else if value.Valid {
				ha.hp_event_artists = new(int)
				*ha.hp_event_artists = int(value.Int64)
			}
		default:
			ha.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the HPArtist.
// This includes values selected through modifiers, order, etc.
func (ha *HPArtist) Value(name string) (ent.Value, error) {
	return ha.selectValues.Get(name)
}

// QueryMembers queries the "members" edge of the HPArtist entity.
func (ha *HPArtist) QueryMembers() *HPMemberQuery {
	return NewHPArtistClient(ha.config).QueryMembers(ha)
}

// QueryAssets queries the "assets" edge of the HPArtist entity.
func (ha *HPArtist) QueryAssets() *HPAssetQuery {
	return NewHPArtistClient(ha.config).QueryAssets(ha)
}

// QueryOwningFeed queries the "owning_feed" edge of the HPArtist entity.
func (ha *HPArtist) QueryOwningFeed() *HPFeedItemQuery {
	return NewHPArtistClient(ha.config).QueryOwningFeed(ha)
}

// QueryTaggedFeed queries the "tagged_feed" edge of the HPArtist entity.
func (ha *HPArtist) QueryTaggedFeed() *HPFeedItemQuery {
	return NewHPArtistClient(ha.config).QueryTaggedFeed(ha)
}

// QueryOwningIgPosts queries the "owning_ig_posts" edge of the HPArtist entity.
func (ha *HPArtist) QueryOwningIgPosts() *HPIgPostQuery {
	return NewHPArtistClient(ha.config).QueryOwningIgPosts(ha)
}

// QueryTaggedIgPosts queries the "tagged_ig_posts" edge of the HPArtist entity.
func (ha *HPArtist) QueryTaggedIgPosts() *HPIgPostQuery {
	return NewHPArtistClient(ha.config).QueryTaggedIgPosts(ha)
}

// QueryOwningAmebloPosts queries the "owning_ameblo_posts" edge of the HPArtist entity.
func (ha *HPArtist) QueryOwningAmebloPosts() *HPAmebloPostQuery {
	return NewHPArtistClient(ha.config).QueryOwningAmebloPosts(ha)
}

// QueryTaggedAmebloPosts queries the "tagged_ameblo_posts" edge of the HPArtist entity.
func (ha *HPArtist) QueryTaggedAmebloPosts() *HPAmebloPostQuery {
	return NewHPArtistClient(ha.config).QueryTaggedAmebloPosts(ha)
}

// QueryTaggedElineupMallItems queries the "tagged_elineup_mall_items" edge of the HPArtist entity.
func (ha *HPArtist) QueryTaggedElineupMallItems() *HPElineupMallItemQuery {
	return NewHPArtistClient(ha.config).QueryTaggedElineupMallItems(ha)
}

// QueryFollowedBy queries the "followed_by" edge of the HPArtist entity.
func (ha *HPArtist) QueryFollowedBy() *HPFollowQuery {
	return NewHPArtistClient(ha.config).QueryFollowedBy(ha)
}

// Update returns a builder for updating this HPArtist.
// Note that you need to call HPArtist.Unwrap() before calling this method if this HPArtist
// was returned from a transaction, and the transaction was committed or rolled back.
func (ha *HPArtist) Update() *HPArtistUpdateOne {
	return NewHPArtistClient(ha.config).UpdateOne(ha)
}

// Unwrap unwraps the HPArtist entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ha *HPArtist) Unwrap() *HPArtist {
	_tx, ok := ha.config.driver.(*txDriver)
	if !ok {
		panic("ent: HPArtist is not a transactional entity")
	}
	ha.config.driver = _tx.drv
	return ha
}

// String implements the fmt.Stringer.
func (ha *HPArtist) String() string {
	var builder strings.Builder
	builder.WriteString("HPArtist(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ha.ID))
	if v := ha.CrawledAt; v != nil {
		builder.WriteString("crawled_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("error_count=")
	builder.WriteString(fmt.Sprintf("%v", ha.ErrorCount))
	builder.WriteString(", ")
	builder.WriteString("manually_modified=")
	builder.WriteString(fmt.Sprintf("%v", ha.ManuallyModified))
	builder.WriteString(", ")
	if v := ha.LastErrorMessage; v != nil {
		builder.WriteString("last_error_message=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("recrawl_required=")
	builder.WriteString(fmt.Sprintf("%v", ha.RecrawlRequired))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ha.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ha.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("key=")
	builder.WriteString(ha.Key)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ha.Name)
	builder.WriteString(", ")
	builder.WriteString("thumbnail_url=")
	builder.WriteString(ha.ThumbnailURL)
	builder.WriteString(", ")
	builder.WriteString("index=")
	builder.WriteString(fmt.Sprintf("%v", ha.Index))
	builder.WriteByte(')')
	return builder.String()
}

// NamedMembers returns the Members named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ha *HPArtist) NamedMembers(name string) ([]*HPMember, error) {
	if ha.Edges.namedMembers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ha.Edges.namedMembers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ha *HPArtist) appendNamedMembers(name string, edges ...*HPMember) {
	if ha.Edges.namedMembers == nil {
		ha.Edges.namedMembers = make(map[string][]*HPMember)
	}
	if len(edges) == 0 {
		ha.Edges.namedMembers[name] = []*HPMember{}
	} else {
		ha.Edges.namedMembers[name] = append(ha.Edges.namedMembers[name], edges...)
	}
}

// NamedAssets returns the Assets named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ha *HPArtist) NamedAssets(name string) ([]*HPAsset, error) {
	if ha.Edges.namedAssets == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ha.Edges.namedAssets[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ha *HPArtist) appendNamedAssets(name string, edges ...*HPAsset) {
	if ha.Edges.namedAssets == nil {
		ha.Edges.namedAssets = make(map[string][]*HPAsset)
	}
	if len(edges) == 0 {
		ha.Edges.namedAssets[name] = []*HPAsset{}
	} else {
		ha.Edges.namedAssets[name] = append(ha.Edges.namedAssets[name], edges...)
	}
}

// NamedOwningFeed returns the OwningFeed named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ha *HPArtist) NamedOwningFeed(name string) ([]*HPFeedItem, error) {
	if ha.Edges.namedOwningFeed == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ha.Edges.namedOwningFeed[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ha *HPArtist) appendNamedOwningFeed(name string, edges ...*HPFeedItem) {
	if ha.Edges.namedOwningFeed == nil {
		ha.Edges.namedOwningFeed = make(map[string][]*HPFeedItem)
	}
	if len(edges) == 0 {
		ha.Edges.namedOwningFeed[name] = []*HPFeedItem{}
	} else {
		ha.Edges.namedOwningFeed[name] = append(ha.Edges.namedOwningFeed[name], edges...)
	}
}

// NamedTaggedFeed returns the TaggedFeed named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ha *HPArtist) NamedTaggedFeed(name string) ([]*HPFeedItem, error) {
	if ha.Edges.namedTaggedFeed == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ha.Edges.namedTaggedFeed[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ha *HPArtist) appendNamedTaggedFeed(name string, edges ...*HPFeedItem) {
	if ha.Edges.namedTaggedFeed == nil {
		ha.Edges.namedTaggedFeed = make(map[string][]*HPFeedItem)
	}
	if len(edges) == 0 {
		ha.Edges.namedTaggedFeed[name] = []*HPFeedItem{}
	} else {
		ha.Edges.namedTaggedFeed[name] = append(ha.Edges.namedTaggedFeed[name], edges...)
	}
}

// NamedOwningIgPosts returns the OwningIgPosts named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ha *HPArtist) NamedOwningIgPosts(name string) ([]*HPIgPost, error) {
	if ha.Edges.namedOwningIgPosts == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ha.Edges.namedOwningIgPosts[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ha *HPArtist) appendNamedOwningIgPosts(name string, edges ...*HPIgPost) {
	if ha.Edges.namedOwningIgPosts == nil {
		ha.Edges.namedOwningIgPosts = make(map[string][]*HPIgPost)
	}
	if len(edges) == 0 {
		ha.Edges.namedOwningIgPosts[name] = []*HPIgPost{}
	} else {
		ha.Edges.namedOwningIgPosts[name] = append(ha.Edges.namedOwningIgPosts[name], edges...)
	}
}

// NamedTaggedIgPosts returns the TaggedIgPosts named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ha *HPArtist) NamedTaggedIgPosts(name string) ([]*HPIgPost, error) {
	if ha.Edges.namedTaggedIgPosts == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ha.Edges.namedTaggedIgPosts[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ha *HPArtist) appendNamedTaggedIgPosts(name string, edges ...*HPIgPost) {
	if ha.Edges.namedTaggedIgPosts == nil {
		ha.Edges.namedTaggedIgPosts = make(map[string][]*HPIgPost)
	}
	if len(edges) == 0 {
		ha.Edges.namedTaggedIgPosts[name] = []*HPIgPost{}
	} else {
		ha.Edges.namedTaggedIgPosts[name] = append(ha.Edges.namedTaggedIgPosts[name], edges...)
	}
}

// NamedOwningAmebloPosts returns the OwningAmebloPosts named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ha *HPArtist) NamedOwningAmebloPosts(name string) ([]*HPAmebloPost, error) {
	if ha.Edges.namedOwningAmebloPosts == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ha.Edges.namedOwningAmebloPosts[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ha *HPArtist) appendNamedOwningAmebloPosts(name string, edges ...*HPAmebloPost) {
	if ha.Edges.namedOwningAmebloPosts == nil {
		ha.Edges.namedOwningAmebloPosts = make(map[string][]*HPAmebloPost)
	}
	if len(edges) == 0 {
		ha.Edges.namedOwningAmebloPosts[name] = []*HPAmebloPost{}
	} else {
		ha.Edges.namedOwningAmebloPosts[name] = append(ha.Edges.namedOwningAmebloPosts[name], edges...)
	}
}

// NamedTaggedAmebloPosts returns the TaggedAmebloPosts named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ha *HPArtist) NamedTaggedAmebloPosts(name string) ([]*HPAmebloPost, error) {
	if ha.Edges.namedTaggedAmebloPosts == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ha.Edges.namedTaggedAmebloPosts[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ha *HPArtist) appendNamedTaggedAmebloPosts(name string, edges ...*HPAmebloPost) {
	if ha.Edges.namedTaggedAmebloPosts == nil {
		ha.Edges.namedTaggedAmebloPosts = make(map[string][]*HPAmebloPost)
	}
	if len(edges) == 0 {
		ha.Edges.namedTaggedAmebloPosts[name] = []*HPAmebloPost{}
	} else {
		ha.Edges.namedTaggedAmebloPosts[name] = append(ha.Edges.namedTaggedAmebloPosts[name], edges...)
	}
}

// NamedTaggedElineupMallItems returns the TaggedElineupMallItems named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ha *HPArtist) NamedTaggedElineupMallItems(name string) ([]*HPElineupMallItem, error) {
	if ha.Edges.namedTaggedElineupMallItems == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ha.Edges.namedTaggedElineupMallItems[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ha *HPArtist) appendNamedTaggedElineupMallItems(name string, edges ...*HPElineupMallItem) {
	if ha.Edges.namedTaggedElineupMallItems == nil {
		ha.Edges.namedTaggedElineupMallItems = make(map[string][]*HPElineupMallItem)
	}
	if len(edges) == 0 {
		ha.Edges.namedTaggedElineupMallItems[name] = []*HPElineupMallItem{}
	} else {
		ha.Edges.namedTaggedElineupMallItems[name] = append(ha.Edges.namedTaggedElineupMallItems[name], edges...)
	}
}

// NamedFollowedBy returns the FollowedBy named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ha *HPArtist) NamedFollowedBy(name string) ([]*HPFollow, error) {
	if ha.Edges.namedFollowedBy == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ha.Edges.namedFollowedBy[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ha *HPArtist) appendNamedFollowedBy(name string, edges ...*HPFollow) {
	if ha.Edges.namedFollowedBy == nil {
		ha.Edges.namedFollowedBy = make(map[string][]*HPFollow)
	}
	if len(edges) == 0 {
		ha.Edges.namedFollowedBy[name] = []*HPFollow{}
	} else {
		ha.Edges.namedFollowedBy[name] = append(ha.Edges.namedFollowedBy[name], edges...)
	}
}

// HPArtists is a parsable slice of HPArtist.
type HPArtists []*HPArtist
