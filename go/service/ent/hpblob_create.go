// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yssk22/hpapp/go/service/ent/hpameblopost"
	"github.com/yssk22/hpapp/go/service/ent/hpartist"
	"github.com/yssk22/hpapp/go/service/ent/hpblob"
	"github.com/yssk22/hpapp/go/service/ent/hpigpost"
	"github.com/yssk22/hpapp/go/service/ent/hpmember"
	"github.com/yssk22/hpapp/go/service/schema/enums"
	"github.com/yssk22/hpapp/go/service/schema/jsonfields"
)

// HPBlobCreate is the builder for creating a HPBlob entity.
type HPBlobCreate struct {
	config
	mutation *HPBlobMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (hbc *HPBlobCreate) SetCreatedAt(t time.Time) *HPBlobCreate {
	hbc.mutation.SetCreatedAt(t)
	return hbc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (hbc *HPBlobCreate) SetNillableCreatedAt(t *time.Time) *HPBlobCreate {
	if t != nil {
		hbc.SetCreatedAt(*t)
	}
	return hbc
}

// SetUpdatedAt sets the "updated_at" field.
func (hbc *HPBlobCreate) SetUpdatedAt(t time.Time) *HPBlobCreate {
	hbc.mutation.SetUpdatedAt(t)
	return hbc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (hbc *HPBlobCreate) SetNillableUpdatedAt(t *time.Time) *HPBlobCreate {
	if t != nil {
		hbc.SetUpdatedAt(*t)
	}
	return hbc
}

// SetStoragePath sets the "storage_path" field.
func (hbc *HPBlobCreate) SetStoragePath(s string) *HPBlobCreate {
	hbc.mutation.SetStoragePath(s)
	return hbc
}

// SetSourceURL sets the "source_url" field.
func (hbc *HPBlobCreate) SetSourceURL(s string) *HPBlobCreate {
	hbc.mutation.SetSourceURL(s)
	return hbc
}

// SetSourceHTMLURL sets the "source_html_url" field.
func (hbc *HPBlobCreate) SetSourceHTMLURL(s string) *HPBlobCreate {
	hbc.mutation.SetSourceHTMLURL(s)
	return hbc
}

// SetStatus sets the "status" field.
func (hbc *HPBlobCreate) SetStatus(ebs enums.HPBlobStatus) *HPBlobCreate {
	hbc.mutation.SetStatus(ebs)
	return hbc
}

// SetStatusMessage sets the "status_message" field.
func (hbc *HPBlobCreate) SetStatusMessage(s string) *HPBlobCreate {
	hbc.mutation.SetStatusMessage(s)
	return hbc
}

// SetNillableStatusMessage sets the "status_message" field if the given value is not nil.
func (hbc *HPBlobCreate) SetNillableStatusMessage(s *string) *HPBlobCreate {
	if s != nil {
		hbc.SetStatusMessage(*s)
	}
	return hbc
}

// SetStatusErrorCount sets the "status_error_count" field.
func (hbc *HPBlobCreate) SetStatusErrorCount(i int) *HPBlobCreate {
	hbc.mutation.SetStatusErrorCount(i)
	return hbc
}

// SetNillableStatusErrorCount sets the "status_error_count" field if the given value is not nil.
func (hbc *HPBlobCreate) SetNillableStatusErrorCount(i *int) *HPBlobCreate {
	if i != nil {
		hbc.SetStatusErrorCount(*i)
	}
	return hbc
}

// SetType sets the "type" field.
func (hbc *HPBlobCreate) SetType(ebt enums.HPBlobType) *HPBlobCreate {
	hbc.mutation.SetType(ebt)
	return hbc
}

// SetSubType sets the "sub_type" field.
func (hbc *HPBlobCreate) SetSubType(ebst enums.HPBlobSubType) *HPBlobCreate {
	hbc.mutation.SetSubType(ebst)
	return hbc
}

// SetWidth sets the "width" field.
func (hbc *HPBlobCreate) SetWidth(i int) *HPBlobCreate {
	hbc.mutation.SetWidth(i)
	return hbc
}

// SetNillableWidth sets the "width" field if the given value is not nil.
func (hbc *HPBlobCreate) SetNillableWidth(i *int) *HPBlobCreate {
	if i != nil {
		hbc.SetWidth(*i)
	}
	return hbc
}

// SetHeight sets the "height" field.
func (hbc *HPBlobCreate) SetHeight(i int) *HPBlobCreate {
	hbc.mutation.SetHeight(i)
	return hbc
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (hbc *HPBlobCreate) SetNillableHeight(i *int) *HPBlobCreate {
	if i != nil {
		hbc.SetHeight(*i)
	}
	return hbc
}

// SetSize sets the "size" field.
func (hbc *HPBlobCreate) SetSize(i int64) *HPBlobCreate {
	hbc.mutation.SetSize(i)
	return hbc
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (hbc *HPBlobCreate) SetNillableSize(i *int64) *HPBlobCreate {
	if i != nil {
		hbc.SetSize(*i)
	}
	return hbc
}

// SetOwnerArtistID sets the "owner_artist_id" field.
func (hbc *HPBlobCreate) SetOwnerArtistID(i int) *HPBlobCreate {
	hbc.mutation.SetOwnerArtistID(i)
	return hbc
}

// SetNillableOwnerArtistID sets the "owner_artist_id" field if the given value is not nil.
func (hbc *HPBlobCreate) SetNillableOwnerArtistID(i *int) *HPBlobCreate {
	if i != nil {
		hbc.SetOwnerArtistID(*i)
	}
	return hbc
}

// SetOwnerMemberID sets the "owner_member_id" field.
func (hbc *HPBlobCreate) SetOwnerMemberID(i int) *HPBlobCreate {
	hbc.mutation.SetOwnerMemberID(i)
	return hbc
}

// SetNillableOwnerMemberID sets the "owner_member_id" field if the given value is not nil.
func (hbc *HPBlobCreate) SetNillableOwnerMemberID(i *int) *HPBlobCreate {
	if i != nil {
		hbc.SetOwnerMemberID(*i)
	}
	return hbc
}

// SetNumFaces sets the "num_faces" field.
func (hbc *HPBlobCreate) SetNumFaces(i int) *HPBlobCreate {
	hbc.mutation.SetNumFaces(i)
	return hbc
}

// SetNillableNumFaces sets the "num_faces" field if the given value is not nil.
func (hbc *HPBlobCreate) SetNillableNumFaces(i *int) *HPBlobCreate {
	if i != nil {
		hbc.SetNumFaces(*i)
	}
	return hbc
}

// SetFaces sets the "faces" field.
func (hbc *HPBlobCreate) SetFaces(jbif jsonfields.HPBlobImageFace) *HPBlobCreate {
	hbc.mutation.SetFaces(jbif)
	return hbc
}

// SetNillableFaces sets the "faces" field if the given value is not nil.
func (hbc *HPBlobCreate) SetNillableFaces(jbif *jsonfields.HPBlobImageFace) *HPBlobCreate {
	if jbif != nil {
		hbc.SetFaces(*jbif)
	}
	return hbc
}

// SetFaceRecognitionStatus sets the "face_recognition_status" field.
func (hbc *HPBlobCreate) SetFaceRecognitionStatus(ebfrs enums.HPBlobFaceRecognitionStatus) *HPBlobCreate {
	hbc.mutation.SetFaceRecognitionStatus(ebfrs)
	return hbc
}

// SetNillableFaceRecognitionStatus sets the "face_recognition_status" field if the given value is not nil.
func (hbc *HPBlobCreate) SetNillableFaceRecognitionStatus(ebfrs *enums.HPBlobFaceRecognitionStatus) *HPBlobCreate {
	if ebfrs != nil {
		hbc.SetFaceRecognitionStatus(*ebfrs)
	}
	return hbc
}

// SetThumbnail sets the "thumbnail" field.
func (hbc *HPBlobCreate) SetThumbnail(jbt *jsonfields.HPBlobThumbnail) *HPBlobCreate {
	hbc.mutation.SetThumbnail(jbt)
	return hbc
}

// SetDurationSeconds sets the "duration_seconds" field.
func (hbc *HPBlobCreate) SetDurationSeconds(f float64) *HPBlobCreate {
	hbc.mutation.SetDurationSeconds(f)
	return hbc
}

// SetNillableDurationSeconds sets the "duration_seconds" field if the given value is not nil.
func (hbc *HPBlobCreate) SetNillableDurationSeconds(f *float64) *HPBlobCreate {
	if f != nil {
		hbc.SetDurationSeconds(*f)
	}
	return hbc
}

// SetOwnerArtist sets the "owner_artist" edge to the HPArtist entity.
func (hbc *HPBlobCreate) SetOwnerArtist(h *HPArtist) *HPBlobCreate {
	return hbc.SetOwnerArtistID(h.ID)
}

// SetOwnerMember sets the "owner_member" edge to the HPMember entity.
func (hbc *HPBlobCreate) SetOwnerMember(h *HPMember) *HPBlobCreate {
	return hbc.SetOwnerMemberID(h.ID)
}

// AddAmebloPostIDs adds the "ameblo_posts" edge to the HPAmebloPost entity by IDs.
func (hbc *HPBlobCreate) AddAmebloPostIDs(ids ...int) *HPBlobCreate {
	hbc.mutation.AddAmebloPostIDs(ids...)
	return hbc
}

// AddAmebloPosts adds the "ameblo_posts" edges to the HPAmebloPost entity.
func (hbc *HPBlobCreate) AddAmebloPosts(h ...*HPAmebloPost) *HPBlobCreate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hbc.AddAmebloPostIDs(ids...)
}

// AddIgPostIDs adds the "ig_posts" edge to the HPIgPost entity by IDs.
func (hbc *HPBlobCreate) AddIgPostIDs(ids ...int) *HPBlobCreate {
	hbc.mutation.AddIgPostIDs(ids...)
	return hbc
}

// AddIgPosts adds the "ig_posts" edges to the HPIgPost entity.
func (hbc *HPBlobCreate) AddIgPosts(h ...*HPIgPost) *HPBlobCreate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hbc.AddIgPostIDs(ids...)
}

// Mutation returns the HPBlobMutation object of the builder.
func (hbc *HPBlobCreate) Mutation() *HPBlobMutation {
	return hbc.mutation
}

// Save creates the HPBlob in the database.
func (hbc *HPBlobCreate) Save(ctx context.Context) (*HPBlob, error) {
	if err := hbc.defaults(); err != nil {
		return nil, err
	}
	return withHooks[*HPBlob, HPBlobMutation](ctx, hbc.sqlSave, hbc.mutation, hbc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (hbc *HPBlobCreate) SaveX(ctx context.Context) *HPBlob {
	v, err := hbc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hbc *HPBlobCreate) Exec(ctx context.Context) error {
	_, err := hbc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hbc *HPBlobCreate) ExecX(ctx context.Context) {
	if err := hbc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hbc *HPBlobCreate) defaults() error {
	if _, ok := hbc.mutation.FaceRecognitionStatus(); !ok {
		v := hpblob.DefaultFaceRecognitionStatus
		hbc.mutation.SetFaceRecognitionStatus(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (hbc *HPBlobCreate) check() error {
	if _, ok := hbc.mutation.StoragePath(); !ok {
		return &ValidationError{Name: "storage_path", err: errors.New(`ent: missing required field "HPBlob.storage_path"`)}
	}
	if v, ok := hbc.mutation.StoragePath(); ok {
		if err := hpblob.StoragePathValidator(v); err != nil {
			return &ValidationError{Name: "storage_path", err: fmt.Errorf(`ent: validator failed for field "HPBlob.storage_path": %w`, err)}
		}
	}
	if _, ok := hbc.mutation.SourceURL(); !ok {
		return &ValidationError{Name: "source_url", err: errors.New(`ent: missing required field "HPBlob.source_url"`)}
	}
	if v, ok := hbc.mutation.SourceURL(); ok {
		if err := hpblob.SourceURLValidator(v); err != nil {
			return &ValidationError{Name: "source_url", err: fmt.Errorf(`ent: validator failed for field "HPBlob.source_url": %w`, err)}
		}
	}
	if _, ok := hbc.mutation.SourceHTMLURL(); !ok {
		return &ValidationError{Name: "source_html_url", err: errors.New(`ent: missing required field "HPBlob.source_html_url"`)}
	}
	if v, ok := hbc.mutation.SourceHTMLURL(); ok {
		if err := hpblob.SourceHTMLURLValidator(v); err != nil {
			return &ValidationError{Name: "source_html_url", err: fmt.Errorf(`ent: validator failed for field "HPBlob.source_html_url": %w`, err)}
		}
	}
	if _, ok := hbc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "HPBlob.status"`)}
	}
	if v, ok := hbc.mutation.Status(); ok {
		if err := hpblob.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "HPBlob.status": %w`, err)}
		}
	}
	if _, ok := hbc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "HPBlob.type"`)}
	}
	if v, ok := hbc.mutation.GetType(); ok {
		if err := hpblob.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "HPBlob.type": %w`, err)}
		}
	}
	if _, ok := hbc.mutation.SubType(); !ok {
		return &ValidationError{Name: "sub_type", err: errors.New(`ent: missing required field "HPBlob.sub_type"`)}
	}
	if v, ok := hbc.mutation.SubType(); ok {
		if err := hpblob.SubTypeValidator(v); err != nil {
			return &ValidationError{Name: "sub_type", err: fmt.Errorf(`ent: validator failed for field "HPBlob.sub_type": %w`, err)}
		}
	}
	if v, ok := hbc.mutation.FaceRecognitionStatus(); ok {
		if err := hpblob.FaceRecognitionStatusValidator(v); err != nil {
			return &ValidationError{Name: "face_recognition_status", err: fmt.Errorf(`ent: validator failed for field "HPBlob.face_recognition_status": %w`, err)}
		}
	}
	return nil
}

func (hbc *HPBlobCreate) sqlSave(ctx context.Context) (*HPBlob, error) {
	if err := hbc.check(); err != nil {
		return nil, err
	}
	_node, _spec := hbc.createSpec()
	if err := sqlgraph.CreateNode(ctx, hbc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	hbc.mutation.id = &_node.ID
	hbc.mutation.done = true
	return _node, nil
}

func (hbc *HPBlobCreate) createSpec() (*HPBlob, *sqlgraph.CreateSpec) {
	var (
		_node = &HPBlob{config: hbc.config}
		_spec = sqlgraph.NewCreateSpec(hpblob.Table, sqlgraph.NewFieldSpec(hpblob.FieldID, field.TypeInt))
	)
	_spec.OnConflict = hbc.conflict
	if value, ok := hbc.mutation.CreatedAt(); ok {
		_spec.SetField(hpblob.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := hbc.mutation.UpdatedAt(); ok {
		_spec.SetField(hpblob.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := hbc.mutation.StoragePath(); ok {
		_spec.SetField(hpblob.FieldStoragePath, field.TypeString, value)
		_node.StoragePath = value
	}
	if value, ok := hbc.mutation.SourceURL(); ok {
		_spec.SetField(hpblob.FieldSourceURL, field.TypeString, value)
		_node.SourceURL = value
	}
	if value, ok := hbc.mutation.SourceHTMLURL(); ok {
		_spec.SetField(hpblob.FieldSourceHTMLURL, field.TypeString, value)
		_node.SourceHTMLURL = value
	}
	if value, ok := hbc.mutation.Status(); ok {
		_spec.SetField(hpblob.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := hbc.mutation.StatusMessage(); ok {
		_spec.SetField(hpblob.FieldStatusMessage, field.TypeString, value)
		_node.StatusMessage = value
	}
	if value, ok := hbc.mutation.StatusErrorCount(); ok {
		_spec.SetField(hpblob.FieldStatusErrorCount, field.TypeInt, value)
		_node.StatusErrorCount = value
	}
	if value, ok := hbc.mutation.GetType(); ok {
		_spec.SetField(hpblob.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := hbc.mutation.SubType(); ok {
		_spec.SetField(hpblob.FieldSubType, field.TypeEnum, value)
		_node.SubType = value
	}
	if value, ok := hbc.mutation.Width(); ok {
		_spec.SetField(hpblob.FieldWidth, field.TypeInt, value)
		_node.Width = value
	}
	if value, ok := hbc.mutation.Height(); ok {
		_spec.SetField(hpblob.FieldHeight, field.TypeInt, value)
		_node.Height = value
	}
	if value, ok := hbc.mutation.Size(); ok {
		_spec.SetField(hpblob.FieldSize, field.TypeInt64, value)
		_node.Size = value
	}
	if value, ok := hbc.mutation.NumFaces(); ok {
		_spec.SetField(hpblob.FieldNumFaces, field.TypeInt, value)
		_node.NumFaces = value
	}
	if value, ok := hbc.mutation.Faces(); ok {
		_spec.SetField(hpblob.FieldFaces, field.TypeJSON, value)
		_node.Faces = value
	}
	if value, ok := hbc.mutation.FaceRecognitionStatus(); ok {
		_spec.SetField(hpblob.FieldFaceRecognitionStatus, field.TypeEnum, value)
		_node.FaceRecognitionStatus = value
	}
	if value, ok := hbc.mutation.Thumbnail(); ok {
		_spec.SetField(hpblob.FieldThumbnail, field.TypeJSON, value)
		_node.Thumbnail = value
	}
	if value, ok := hbc.mutation.DurationSeconds(); ok {
		_spec.SetField(hpblob.FieldDurationSeconds, field.TypeFloat64, value)
		_node.DurationSeconds = value
	}
	if nodes := hbc.mutation.OwnerArtistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hpblob.OwnerArtistTable,
			Columns: []string{hpblob.OwnerArtistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpartist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerArtistID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hbc.mutation.OwnerMemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hpblob.OwnerMemberTable,
			Columns: []string{hpblob.OwnerMemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerMemberID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hbc.mutation.AmebloPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpblob.AmebloPostsTable,
			Columns: hpblob.AmebloPostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpameblopost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hbc.mutation.IgPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpblob.IgPostsTable,
			Columns: hpblob.IgPostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpigpost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.HPBlob.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.HPBlobUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (hbc *HPBlobCreate) OnConflict(opts ...sql.ConflictOption) *HPBlobUpsertOne {
	hbc.conflict = opts
	return &HPBlobUpsertOne{
		create: hbc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.HPBlob.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (hbc *HPBlobCreate) OnConflictColumns(columns ...string) *HPBlobUpsertOne {
	hbc.conflict = append(hbc.conflict, sql.ConflictColumns(columns...))
	return &HPBlobUpsertOne{
		create: hbc,
	}
}

type (
	// HPBlobUpsertOne is the builder for "upsert"-ing
	//  one HPBlob node.
	HPBlobUpsertOne struct {
		create *HPBlobCreate
	}

	// HPBlobUpsert is the "OnConflict" setter.
	HPBlobUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *HPBlobUpsert) SetUpdatedAt(v time.Time) *HPBlobUpsert {
	u.Set(hpblob.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *HPBlobUpsert) UpdateUpdatedAt() *HPBlobUpsert {
	u.SetExcluded(hpblob.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *HPBlobUpsert) ClearUpdatedAt() *HPBlobUpsert {
	u.SetNull(hpblob.FieldUpdatedAt)
	return u
}

// SetStoragePath sets the "storage_path" field.
func (u *HPBlobUpsert) SetStoragePath(v string) *HPBlobUpsert {
	u.Set(hpblob.FieldStoragePath, v)
	return u
}

// UpdateStoragePath sets the "storage_path" field to the value that was provided on create.
func (u *HPBlobUpsert) UpdateStoragePath() *HPBlobUpsert {
	u.SetExcluded(hpblob.FieldStoragePath)
	return u
}

// SetSourceURL sets the "source_url" field.
func (u *HPBlobUpsert) SetSourceURL(v string) *HPBlobUpsert {
	u.Set(hpblob.FieldSourceURL, v)
	return u
}

// UpdateSourceURL sets the "source_url" field to the value that was provided on create.
func (u *HPBlobUpsert) UpdateSourceURL() *HPBlobUpsert {
	u.SetExcluded(hpblob.FieldSourceURL)
	return u
}

// SetSourceHTMLURL sets the "source_html_url" field.
func (u *HPBlobUpsert) SetSourceHTMLURL(v string) *HPBlobUpsert {
	u.Set(hpblob.FieldSourceHTMLURL, v)
	return u
}

// UpdateSourceHTMLURL sets the "source_html_url" field to the value that was provided on create.
func (u *HPBlobUpsert) UpdateSourceHTMLURL() *HPBlobUpsert {
	u.SetExcluded(hpblob.FieldSourceHTMLURL)
	return u
}

// SetStatus sets the "status" field.
func (u *HPBlobUpsert) SetStatus(v enums.HPBlobStatus) *HPBlobUpsert {
	u.Set(hpblob.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *HPBlobUpsert) UpdateStatus() *HPBlobUpsert {
	u.SetExcluded(hpblob.FieldStatus)
	return u
}

// SetStatusMessage sets the "status_message" field.
func (u *HPBlobUpsert) SetStatusMessage(v string) *HPBlobUpsert {
	u.Set(hpblob.FieldStatusMessage, v)
	return u
}

// UpdateStatusMessage sets the "status_message" field to the value that was provided on create.
func (u *HPBlobUpsert) UpdateStatusMessage() *HPBlobUpsert {
	u.SetExcluded(hpblob.FieldStatusMessage)
	return u
}

// ClearStatusMessage clears the value of the "status_message" field.
func (u *HPBlobUpsert) ClearStatusMessage() *HPBlobUpsert {
	u.SetNull(hpblob.FieldStatusMessage)
	return u
}

// SetStatusErrorCount sets the "status_error_count" field.
func (u *HPBlobUpsert) SetStatusErrorCount(v int) *HPBlobUpsert {
	u.Set(hpblob.FieldStatusErrorCount, v)
	return u
}

// UpdateStatusErrorCount sets the "status_error_count" field to the value that was provided on create.
func (u *HPBlobUpsert) UpdateStatusErrorCount() *HPBlobUpsert {
	u.SetExcluded(hpblob.FieldStatusErrorCount)
	return u
}

// AddStatusErrorCount adds v to the "status_error_count" field.
func (u *HPBlobUpsert) AddStatusErrorCount(v int) *HPBlobUpsert {
	u.Add(hpblob.FieldStatusErrorCount, v)
	return u
}

// ClearStatusErrorCount clears the value of the "status_error_count" field.
func (u *HPBlobUpsert) ClearStatusErrorCount() *HPBlobUpsert {
	u.SetNull(hpblob.FieldStatusErrorCount)
	return u
}

// SetType sets the "type" field.
func (u *HPBlobUpsert) SetType(v enums.HPBlobType) *HPBlobUpsert {
	u.Set(hpblob.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *HPBlobUpsert) UpdateType() *HPBlobUpsert {
	u.SetExcluded(hpblob.FieldType)
	return u
}

// SetSubType sets the "sub_type" field.
func (u *HPBlobUpsert) SetSubType(v enums.HPBlobSubType) *HPBlobUpsert {
	u.Set(hpblob.FieldSubType, v)
	return u
}

// UpdateSubType sets the "sub_type" field to the value that was provided on create.
func (u *HPBlobUpsert) UpdateSubType() *HPBlobUpsert {
	u.SetExcluded(hpblob.FieldSubType)
	return u
}

// SetWidth sets the "width" field.
func (u *HPBlobUpsert) SetWidth(v int) *HPBlobUpsert {
	u.Set(hpblob.FieldWidth, v)
	return u
}

// UpdateWidth sets the "width" field to the value that was provided on create.
func (u *HPBlobUpsert) UpdateWidth() *HPBlobUpsert {
	u.SetExcluded(hpblob.FieldWidth)
	return u
}

// AddWidth adds v to the "width" field.
func (u *HPBlobUpsert) AddWidth(v int) *HPBlobUpsert {
	u.Add(hpblob.FieldWidth, v)
	return u
}

// ClearWidth clears the value of the "width" field.
func (u *HPBlobUpsert) ClearWidth() *HPBlobUpsert {
	u.SetNull(hpblob.FieldWidth)
	return u
}

// SetHeight sets the "height" field.
func (u *HPBlobUpsert) SetHeight(v int) *HPBlobUpsert {
	u.Set(hpblob.FieldHeight, v)
	return u
}

// UpdateHeight sets the "height" field to the value that was provided on create.
func (u *HPBlobUpsert) UpdateHeight() *HPBlobUpsert {
	u.SetExcluded(hpblob.FieldHeight)
	return u
}

// AddHeight adds v to the "height" field.
func (u *HPBlobUpsert) AddHeight(v int) *HPBlobUpsert {
	u.Add(hpblob.FieldHeight, v)
	return u
}

// ClearHeight clears the value of the "height" field.
func (u *HPBlobUpsert) ClearHeight() *HPBlobUpsert {
	u.SetNull(hpblob.FieldHeight)
	return u
}

// SetSize sets the "size" field.
func (u *HPBlobUpsert) SetSize(v int64) *HPBlobUpsert {
	u.Set(hpblob.FieldSize, v)
	return u
}

// UpdateSize sets the "size" field to the value that was provided on create.
func (u *HPBlobUpsert) UpdateSize() *HPBlobUpsert {
	u.SetExcluded(hpblob.FieldSize)
	return u
}

// AddSize adds v to the "size" field.
func (u *HPBlobUpsert) AddSize(v int64) *HPBlobUpsert {
	u.Add(hpblob.FieldSize, v)
	return u
}

// ClearSize clears the value of the "size" field.
func (u *HPBlobUpsert) ClearSize() *HPBlobUpsert {
	u.SetNull(hpblob.FieldSize)
	return u
}

// SetOwnerArtistID sets the "owner_artist_id" field.
func (u *HPBlobUpsert) SetOwnerArtistID(v int) *HPBlobUpsert {
	u.Set(hpblob.FieldOwnerArtistID, v)
	return u
}

// UpdateOwnerArtistID sets the "owner_artist_id" field to the value that was provided on create.
func (u *HPBlobUpsert) UpdateOwnerArtistID() *HPBlobUpsert {
	u.SetExcluded(hpblob.FieldOwnerArtistID)
	return u
}

// ClearOwnerArtistID clears the value of the "owner_artist_id" field.
func (u *HPBlobUpsert) ClearOwnerArtistID() *HPBlobUpsert {
	u.SetNull(hpblob.FieldOwnerArtistID)
	return u
}

// SetOwnerMemberID sets the "owner_member_id" field.
func (u *HPBlobUpsert) SetOwnerMemberID(v int) *HPBlobUpsert {
	u.Set(hpblob.FieldOwnerMemberID, v)
	return u
}

// UpdateOwnerMemberID sets the "owner_member_id" field to the value that was provided on create.
func (u *HPBlobUpsert) UpdateOwnerMemberID() *HPBlobUpsert {
	u.SetExcluded(hpblob.FieldOwnerMemberID)
	return u
}

// ClearOwnerMemberID clears the value of the "owner_member_id" field.
func (u *HPBlobUpsert) ClearOwnerMemberID() *HPBlobUpsert {
	u.SetNull(hpblob.FieldOwnerMemberID)
	return u
}

// SetNumFaces sets the "num_faces" field.
func (u *HPBlobUpsert) SetNumFaces(v int) *HPBlobUpsert {
	u.Set(hpblob.FieldNumFaces, v)
	return u
}

// UpdateNumFaces sets the "num_faces" field to the value that was provided on create.
func (u *HPBlobUpsert) UpdateNumFaces() *HPBlobUpsert {
	u.SetExcluded(hpblob.FieldNumFaces)
	return u
}

// AddNumFaces adds v to the "num_faces" field.
func (u *HPBlobUpsert) AddNumFaces(v int) *HPBlobUpsert {
	u.Add(hpblob.FieldNumFaces, v)
	return u
}

// ClearNumFaces clears the value of the "num_faces" field.
func (u *HPBlobUpsert) ClearNumFaces() *HPBlobUpsert {
	u.SetNull(hpblob.FieldNumFaces)
	return u
}

// SetFaces sets the "faces" field.
func (u *HPBlobUpsert) SetFaces(v jsonfields.HPBlobImageFace) *HPBlobUpsert {
	u.Set(hpblob.FieldFaces, v)
	return u
}

// UpdateFaces sets the "faces" field to the value that was provided on create.
func (u *HPBlobUpsert) UpdateFaces() *HPBlobUpsert {
	u.SetExcluded(hpblob.FieldFaces)
	return u
}

// ClearFaces clears the value of the "faces" field.
func (u *HPBlobUpsert) ClearFaces() *HPBlobUpsert {
	u.SetNull(hpblob.FieldFaces)
	return u
}

// SetFaceRecognitionStatus sets the "face_recognition_status" field.
func (u *HPBlobUpsert) SetFaceRecognitionStatus(v enums.HPBlobFaceRecognitionStatus) *HPBlobUpsert {
	u.Set(hpblob.FieldFaceRecognitionStatus, v)
	return u
}

// UpdateFaceRecognitionStatus sets the "face_recognition_status" field to the value that was provided on create.
func (u *HPBlobUpsert) UpdateFaceRecognitionStatus() *HPBlobUpsert {
	u.SetExcluded(hpblob.FieldFaceRecognitionStatus)
	return u
}

// ClearFaceRecognitionStatus clears the value of the "face_recognition_status" field.
func (u *HPBlobUpsert) ClearFaceRecognitionStatus() *HPBlobUpsert {
	u.SetNull(hpblob.FieldFaceRecognitionStatus)
	return u
}

// SetThumbnail sets the "thumbnail" field.
func (u *HPBlobUpsert) SetThumbnail(v *jsonfields.HPBlobThumbnail) *HPBlobUpsert {
	u.Set(hpblob.FieldThumbnail, v)
	return u
}

// UpdateThumbnail sets the "thumbnail" field to the value that was provided on create.
func (u *HPBlobUpsert) UpdateThumbnail() *HPBlobUpsert {
	u.SetExcluded(hpblob.FieldThumbnail)
	return u
}

// ClearThumbnail clears the value of the "thumbnail" field.
func (u *HPBlobUpsert) ClearThumbnail() *HPBlobUpsert {
	u.SetNull(hpblob.FieldThumbnail)
	return u
}

// SetDurationSeconds sets the "duration_seconds" field.
func (u *HPBlobUpsert) SetDurationSeconds(v float64) *HPBlobUpsert {
	u.Set(hpblob.FieldDurationSeconds, v)
	return u
}

// UpdateDurationSeconds sets the "duration_seconds" field to the value that was provided on create.
func (u *HPBlobUpsert) UpdateDurationSeconds() *HPBlobUpsert {
	u.SetExcluded(hpblob.FieldDurationSeconds)
	return u
}

// AddDurationSeconds adds v to the "duration_seconds" field.
func (u *HPBlobUpsert) AddDurationSeconds(v float64) *HPBlobUpsert {
	u.Add(hpblob.FieldDurationSeconds, v)
	return u
}

// ClearDurationSeconds clears the value of the "duration_seconds" field.
func (u *HPBlobUpsert) ClearDurationSeconds() *HPBlobUpsert {
	u.SetNull(hpblob.FieldDurationSeconds)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.HPBlob.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *HPBlobUpsertOne) UpdateNewValues() *HPBlobUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(hpblob.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.HPBlob.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *HPBlobUpsertOne) Ignore() *HPBlobUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *HPBlobUpsertOne) DoNothing() *HPBlobUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the HPBlobCreate.OnConflict
// documentation for more info.
func (u *HPBlobUpsertOne) Update(set func(*HPBlobUpsert)) *HPBlobUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&HPBlobUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *HPBlobUpsertOne) SetUpdatedAt(v time.Time) *HPBlobUpsertOne {
	return u.Update(func(s *HPBlobUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *HPBlobUpsertOne) UpdateUpdatedAt() *HPBlobUpsertOne {
	return u.Update(func(s *HPBlobUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *HPBlobUpsertOne) ClearUpdatedAt() *HPBlobUpsertOne {
	return u.Update(func(s *HPBlobUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetStoragePath sets the "storage_path" field.
func (u *HPBlobUpsertOne) SetStoragePath(v string) *HPBlobUpsertOne {
	return u.Update(func(s *HPBlobUpsert) {
		s.SetStoragePath(v)
	})
}

// UpdateStoragePath sets the "storage_path" field to the value that was provided on create.
func (u *HPBlobUpsertOne) UpdateStoragePath() *HPBlobUpsertOne {
	return u.Update(func(s *HPBlobUpsert) {
		s.UpdateStoragePath()
	})
}

// SetSourceURL sets the "source_url" field.
func (u *HPBlobUpsertOne) SetSourceURL(v string) *HPBlobUpsertOne {
	return u.Update(func(s *HPBlobUpsert) {
		s.SetSourceURL(v)
	})
}

// UpdateSourceURL sets the "source_url" field to the value that was provided on create.
func (u *HPBlobUpsertOne) UpdateSourceURL() *HPBlobUpsertOne {
	return u.Update(func(s *HPBlobUpsert) {
		s.UpdateSourceURL()
	})
}

// SetSourceHTMLURL sets the "source_html_url" field.
func (u *HPBlobUpsertOne) SetSourceHTMLURL(v string) *HPBlobUpsertOne {
	return u.Update(func(s *HPBlobUpsert) {
		s.SetSourceHTMLURL(v)
	})
}

// UpdateSourceHTMLURL sets the "source_html_url" field to the value that was provided on create.
func (u *HPBlobUpsertOne) UpdateSourceHTMLURL() *HPBlobUpsertOne {
	return u.Update(func(s *HPBlobUpsert) {
		s.UpdateSourceHTMLURL()
	})
}

// SetStatus sets the "status" field.
func (u *HPBlobUpsertOne) SetStatus(v enums.HPBlobStatus) *HPBlobUpsertOne {
	return u.Update(func(s *HPBlobUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *HPBlobUpsertOne) UpdateStatus() *HPBlobUpsertOne {
	return u.Update(func(s *HPBlobUpsert) {
		s.UpdateStatus()
	})
}

// SetStatusMessage sets the "status_message" field.
func (u *HPBlobUpsertOne) SetStatusMessage(v string) *HPBlobUpsertOne {
	return u.Update(func(s *HPBlobUpsert) {
		s.SetStatusMessage(v)
	})
}

// UpdateStatusMessage sets the "status_message" field to the value that was provided on create.
func (u *HPBlobUpsertOne) UpdateStatusMessage() *HPBlobUpsertOne {
	return u.Update(func(s *HPBlobUpsert) {
		s.UpdateStatusMessage()
	})
}

// ClearStatusMessage clears the value of the "status_message" field.
func (u *HPBlobUpsertOne) ClearStatusMessage() *HPBlobUpsertOne {
	return u.Update(func(s *HPBlobUpsert) {
		s.ClearStatusMessage()
	})
}

// SetStatusErrorCount sets the "status_error_count" field.
func (u *HPBlobUpsertOne) SetStatusErrorCount(v int) *HPBlobUpsertOne {
	return u.Update(func(s *HPBlobUpsert) {
		s.SetStatusErrorCount(v)
	})
}

// AddStatusErrorCount adds v to the "status_error_count" field.
func (u *HPBlobUpsertOne) AddStatusErrorCount(v int) *HPBlobUpsertOne {
	return u.Update(func(s *HPBlobUpsert) {
		s.AddStatusErrorCount(v)
	})
}

// UpdateStatusErrorCount sets the "status_error_count" field to the value that was provided on create.
func (u *HPBlobUpsertOne) UpdateStatusErrorCount() *HPBlobUpsertOne {
	return u.Update(func(s *HPBlobUpsert) {
		s.UpdateStatusErrorCount()
	})
}

// ClearStatusErrorCount clears the value of the "status_error_count" field.
func (u *HPBlobUpsertOne) ClearStatusErrorCount() *HPBlobUpsertOne {
	return u.Update(func(s *HPBlobUpsert) {
		s.ClearStatusErrorCount()
	})
}

// SetType sets the "type" field.
func (u *HPBlobUpsertOne) SetType(v enums.HPBlobType) *HPBlobUpsertOne {
	return u.Update(func(s *HPBlobUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *HPBlobUpsertOne) UpdateType() *HPBlobUpsertOne {
	return u.Update(func(s *HPBlobUpsert) {
		s.UpdateType()
	})
}

// SetSubType sets the "sub_type" field.
func (u *HPBlobUpsertOne) SetSubType(v enums.HPBlobSubType) *HPBlobUpsertOne {
	return u.Update(func(s *HPBlobUpsert) {
		s.SetSubType(v)
	})
}

// UpdateSubType sets the "sub_type" field to the value that was provided on create.
func (u *HPBlobUpsertOne) UpdateSubType() *HPBlobUpsertOne {
	return u.Update(func(s *HPBlobUpsert) {
		s.UpdateSubType()
	})
}

// SetWidth sets the "width" field.
func (u *HPBlobUpsertOne) SetWidth(v int) *HPBlobUpsertOne {
	return u.Update(func(s *HPBlobUpsert) {
		s.SetWidth(v)
	})
}

// AddWidth adds v to the "width" field.
func (u *HPBlobUpsertOne) AddWidth(v int) *HPBlobUpsertOne {
	return u.Update(func(s *HPBlobUpsert) {
		s.AddWidth(v)
	})
}

// UpdateWidth sets the "width" field to the value that was provided on create.
func (u *HPBlobUpsertOne) UpdateWidth() *HPBlobUpsertOne {
	return u.Update(func(s *HPBlobUpsert) {
		s.UpdateWidth()
	})
}

// ClearWidth clears the value of the "width" field.
func (u *HPBlobUpsertOne) ClearWidth() *HPBlobUpsertOne {
	return u.Update(func(s *HPBlobUpsert) {
		s.ClearWidth()
	})
}

// SetHeight sets the "height" field.
func (u *HPBlobUpsertOne) SetHeight(v int) *HPBlobUpsertOne {
	return u.Update(func(s *HPBlobUpsert) {
		s.SetHeight(v)
	})
}

// AddHeight adds v to the "height" field.
func (u *HPBlobUpsertOne) AddHeight(v int) *HPBlobUpsertOne {
	return u.Update(func(s *HPBlobUpsert) {
		s.AddHeight(v)
	})
}

// UpdateHeight sets the "height" field to the value that was provided on create.
func (u *HPBlobUpsertOne) UpdateHeight() *HPBlobUpsertOne {
	return u.Update(func(s *HPBlobUpsert) {
		s.UpdateHeight()
	})
}

// ClearHeight clears the value of the "height" field.
func (u *HPBlobUpsertOne) ClearHeight() *HPBlobUpsertOne {
	return u.Update(func(s *HPBlobUpsert) {
		s.ClearHeight()
	})
}

// SetSize sets the "size" field.
func (u *HPBlobUpsertOne) SetSize(v int64) *HPBlobUpsertOne {
	return u.Update(func(s *HPBlobUpsert) {
		s.SetSize(v)
	})
}

// AddSize adds v to the "size" field.
func (u *HPBlobUpsertOne) AddSize(v int64) *HPBlobUpsertOne {
	return u.Update(func(s *HPBlobUpsert) {
		s.AddSize(v)
	})
}

// UpdateSize sets the "size" field to the value that was provided on create.
func (u *HPBlobUpsertOne) UpdateSize() *HPBlobUpsertOne {
	return u.Update(func(s *HPBlobUpsert) {
		s.UpdateSize()
	})
}

// ClearSize clears the value of the "size" field.
func (u *HPBlobUpsertOne) ClearSize() *HPBlobUpsertOne {
	return u.Update(func(s *HPBlobUpsert) {
		s.ClearSize()
	})
}

// SetOwnerArtistID sets the "owner_artist_id" field.
func (u *HPBlobUpsertOne) SetOwnerArtistID(v int) *HPBlobUpsertOne {
	return u.Update(func(s *HPBlobUpsert) {
		s.SetOwnerArtistID(v)
	})
}

// UpdateOwnerArtistID sets the "owner_artist_id" field to the value that was provided on create.
func (u *HPBlobUpsertOne) UpdateOwnerArtistID() *HPBlobUpsertOne {
	return u.Update(func(s *HPBlobUpsert) {
		s.UpdateOwnerArtistID()
	})
}

// ClearOwnerArtistID clears the value of the "owner_artist_id" field.
func (u *HPBlobUpsertOne) ClearOwnerArtistID() *HPBlobUpsertOne {
	return u.Update(func(s *HPBlobUpsert) {
		s.ClearOwnerArtistID()
	})
}

// SetOwnerMemberID sets the "owner_member_id" field.
func (u *HPBlobUpsertOne) SetOwnerMemberID(v int) *HPBlobUpsertOne {
	return u.Update(func(s *HPBlobUpsert) {
		s.SetOwnerMemberID(v)
	})
}

// UpdateOwnerMemberID sets the "owner_member_id" field to the value that was provided on create.
func (u *HPBlobUpsertOne) UpdateOwnerMemberID() *HPBlobUpsertOne {
	return u.Update(func(s *HPBlobUpsert) {
		s.UpdateOwnerMemberID()
	})
}

// ClearOwnerMemberID clears the value of the "owner_member_id" field.
func (u *HPBlobUpsertOne) ClearOwnerMemberID() *HPBlobUpsertOne {
	return u.Update(func(s *HPBlobUpsert) {
		s.ClearOwnerMemberID()
	})
}

// SetNumFaces sets the "num_faces" field.
func (u *HPBlobUpsertOne) SetNumFaces(v int) *HPBlobUpsertOne {
	return u.Update(func(s *HPBlobUpsert) {
		s.SetNumFaces(v)
	})
}

// AddNumFaces adds v to the "num_faces" field.
func (u *HPBlobUpsertOne) AddNumFaces(v int) *HPBlobUpsertOne {
	return u.Update(func(s *HPBlobUpsert) {
		s.AddNumFaces(v)
	})
}

// UpdateNumFaces sets the "num_faces" field to the value that was provided on create.
func (u *HPBlobUpsertOne) UpdateNumFaces() *HPBlobUpsertOne {
	return u.Update(func(s *HPBlobUpsert) {
		s.UpdateNumFaces()
	})
}

// ClearNumFaces clears the value of the "num_faces" field.
func (u *HPBlobUpsertOne) ClearNumFaces() *HPBlobUpsertOne {
	return u.Update(func(s *HPBlobUpsert) {
		s.ClearNumFaces()
	})
}

// SetFaces sets the "faces" field.
func (u *HPBlobUpsertOne) SetFaces(v jsonfields.HPBlobImageFace) *HPBlobUpsertOne {
	return u.Update(func(s *HPBlobUpsert) {
		s.SetFaces(v)
	})
}

// UpdateFaces sets the "faces" field to the value that was provided on create.
func (u *HPBlobUpsertOne) UpdateFaces() *HPBlobUpsertOne {
	return u.Update(func(s *HPBlobUpsert) {
		s.UpdateFaces()
	})
}

// ClearFaces clears the value of the "faces" field.
func (u *HPBlobUpsertOne) ClearFaces() *HPBlobUpsertOne {
	return u.Update(func(s *HPBlobUpsert) {
		s.ClearFaces()
	})
}

// SetFaceRecognitionStatus sets the "face_recognition_status" field.
func (u *HPBlobUpsertOne) SetFaceRecognitionStatus(v enums.HPBlobFaceRecognitionStatus) *HPBlobUpsertOne {
	return u.Update(func(s *HPBlobUpsert) {
		s.SetFaceRecognitionStatus(v)
	})
}

// UpdateFaceRecognitionStatus sets the "face_recognition_status" field to the value that was provided on create.
func (u *HPBlobUpsertOne) UpdateFaceRecognitionStatus() *HPBlobUpsertOne {
	return u.Update(func(s *HPBlobUpsert) {
		s.UpdateFaceRecognitionStatus()
	})
}

// ClearFaceRecognitionStatus clears the value of the "face_recognition_status" field.
func (u *HPBlobUpsertOne) ClearFaceRecognitionStatus() *HPBlobUpsertOne {
	return u.Update(func(s *HPBlobUpsert) {
		s.ClearFaceRecognitionStatus()
	})
}

// SetThumbnail sets the "thumbnail" field.
func (u *HPBlobUpsertOne) SetThumbnail(v *jsonfields.HPBlobThumbnail) *HPBlobUpsertOne {
	return u.Update(func(s *HPBlobUpsert) {
		s.SetThumbnail(v)
	})
}

// UpdateThumbnail sets the "thumbnail" field to the value that was provided on create.
func (u *HPBlobUpsertOne) UpdateThumbnail() *HPBlobUpsertOne {
	return u.Update(func(s *HPBlobUpsert) {
		s.UpdateThumbnail()
	})
}

// ClearThumbnail clears the value of the "thumbnail" field.
func (u *HPBlobUpsertOne) ClearThumbnail() *HPBlobUpsertOne {
	return u.Update(func(s *HPBlobUpsert) {
		s.ClearThumbnail()
	})
}

// SetDurationSeconds sets the "duration_seconds" field.
func (u *HPBlobUpsertOne) SetDurationSeconds(v float64) *HPBlobUpsertOne {
	return u.Update(func(s *HPBlobUpsert) {
		s.SetDurationSeconds(v)
	})
}

// AddDurationSeconds adds v to the "duration_seconds" field.
func (u *HPBlobUpsertOne) AddDurationSeconds(v float64) *HPBlobUpsertOne {
	return u.Update(func(s *HPBlobUpsert) {
		s.AddDurationSeconds(v)
	})
}

// UpdateDurationSeconds sets the "duration_seconds" field to the value that was provided on create.
func (u *HPBlobUpsertOne) UpdateDurationSeconds() *HPBlobUpsertOne {
	return u.Update(func(s *HPBlobUpsert) {
		s.UpdateDurationSeconds()
	})
}

// ClearDurationSeconds clears the value of the "duration_seconds" field.
func (u *HPBlobUpsertOne) ClearDurationSeconds() *HPBlobUpsertOne {
	return u.Update(func(s *HPBlobUpsert) {
		s.ClearDurationSeconds()
	})
}

// Exec executes the query.
func (u *HPBlobUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for HPBlobCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *HPBlobUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *HPBlobUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *HPBlobUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// HPBlobCreateBulk is the builder for creating many HPBlob entities in bulk.
type HPBlobCreateBulk struct {
	config
	builders []*HPBlobCreate
	conflict []sql.ConflictOption
}

// Save creates the HPBlob entities in the database.
func (hbcb *HPBlobCreateBulk) Save(ctx context.Context) ([]*HPBlob, error) {
	specs := make([]*sqlgraph.CreateSpec, len(hbcb.builders))
	nodes := make([]*HPBlob, len(hbcb.builders))
	mutators := make([]Mutator, len(hbcb.builders))
	for i := range hbcb.builders {
		func(i int, root context.Context) {
			builder := hbcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HPBlobMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hbcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = hbcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hbcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hbcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hbcb *HPBlobCreateBulk) SaveX(ctx context.Context) []*HPBlob {
	v, err := hbcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hbcb *HPBlobCreateBulk) Exec(ctx context.Context) error {
	_, err := hbcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hbcb *HPBlobCreateBulk) ExecX(ctx context.Context) {
	if err := hbcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.HPBlob.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.HPBlobUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (hbcb *HPBlobCreateBulk) OnConflict(opts ...sql.ConflictOption) *HPBlobUpsertBulk {
	hbcb.conflict = opts
	return &HPBlobUpsertBulk{
		create: hbcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.HPBlob.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (hbcb *HPBlobCreateBulk) OnConflictColumns(columns ...string) *HPBlobUpsertBulk {
	hbcb.conflict = append(hbcb.conflict, sql.ConflictColumns(columns...))
	return &HPBlobUpsertBulk{
		create: hbcb,
	}
}

// HPBlobUpsertBulk is the builder for "upsert"-ing
// a bulk of HPBlob nodes.
type HPBlobUpsertBulk struct {
	create *HPBlobCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.HPBlob.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *HPBlobUpsertBulk) UpdateNewValues() *HPBlobUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(hpblob.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.HPBlob.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *HPBlobUpsertBulk) Ignore() *HPBlobUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *HPBlobUpsertBulk) DoNothing() *HPBlobUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the HPBlobCreateBulk.OnConflict
// documentation for more info.
func (u *HPBlobUpsertBulk) Update(set func(*HPBlobUpsert)) *HPBlobUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&HPBlobUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *HPBlobUpsertBulk) SetUpdatedAt(v time.Time) *HPBlobUpsertBulk {
	return u.Update(func(s *HPBlobUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *HPBlobUpsertBulk) UpdateUpdatedAt() *HPBlobUpsertBulk {
	return u.Update(func(s *HPBlobUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *HPBlobUpsertBulk) ClearUpdatedAt() *HPBlobUpsertBulk {
	return u.Update(func(s *HPBlobUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetStoragePath sets the "storage_path" field.
func (u *HPBlobUpsertBulk) SetStoragePath(v string) *HPBlobUpsertBulk {
	return u.Update(func(s *HPBlobUpsert) {
		s.SetStoragePath(v)
	})
}

// UpdateStoragePath sets the "storage_path" field to the value that was provided on create.
func (u *HPBlobUpsertBulk) UpdateStoragePath() *HPBlobUpsertBulk {
	return u.Update(func(s *HPBlobUpsert) {
		s.UpdateStoragePath()
	})
}

// SetSourceURL sets the "source_url" field.
func (u *HPBlobUpsertBulk) SetSourceURL(v string) *HPBlobUpsertBulk {
	return u.Update(func(s *HPBlobUpsert) {
		s.SetSourceURL(v)
	})
}

// UpdateSourceURL sets the "source_url" field to the value that was provided on create.
func (u *HPBlobUpsertBulk) UpdateSourceURL() *HPBlobUpsertBulk {
	return u.Update(func(s *HPBlobUpsert) {
		s.UpdateSourceURL()
	})
}

// SetSourceHTMLURL sets the "source_html_url" field.
func (u *HPBlobUpsertBulk) SetSourceHTMLURL(v string) *HPBlobUpsertBulk {
	return u.Update(func(s *HPBlobUpsert) {
		s.SetSourceHTMLURL(v)
	})
}

// UpdateSourceHTMLURL sets the "source_html_url" field to the value that was provided on create.
func (u *HPBlobUpsertBulk) UpdateSourceHTMLURL() *HPBlobUpsertBulk {
	return u.Update(func(s *HPBlobUpsert) {
		s.UpdateSourceHTMLURL()
	})
}

// SetStatus sets the "status" field.
func (u *HPBlobUpsertBulk) SetStatus(v enums.HPBlobStatus) *HPBlobUpsertBulk {
	return u.Update(func(s *HPBlobUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *HPBlobUpsertBulk) UpdateStatus() *HPBlobUpsertBulk {
	return u.Update(func(s *HPBlobUpsert) {
		s.UpdateStatus()
	})
}

// SetStatusMessage sets the "status_message" field.
func (u *HPBlobUpsertBulk) SetStatusMessage(v string) *HPBlobUpsertBulk {
	return u.Update(func(s *HPBlobUpsert) {
		s.SetStatusMessage(v)
	})
}

// UpdateStatusMessage sets the "status_message" field to the value that was provided on create.
func (u *HPBlobUpsertBulk) UpdateStatusMessage() *HPBlobUpsertBulk {
	return u.Update(func(s *HPBlobUpsert) {
		s.UpdateStatusMessage()
	})
}

// ClearStatusMessage clears the value of the "status_message" field.
func (u *HPBlobUpsertBulk) ClearStatusMessage() *HPBlobUpsertBulk {
	return u.Update(func(s *HPBlobUpsert) {
		s.ClearStatusMessage()
	})
}

// SetStatusErrorCount sets the "status_error_count" field.
func (u *HPBlobUpsertBulk) SetStatusErrorCount(v int) *HPBlobUpsertBulk {
	return u.Update(func(s *HPBlobUpsert) {
		s.SetStatusErrorCount(v)
	})
}

// AddStatusErrorCount adds v to the "status_error_count" field.
func (u *HPBlobUpsertBulk) AddStatusErrorCount(v int) *HPBlobUpsertBulk {
	return u.Update(func(s *HPBlobUpsert) {
		s.AddStatusErrorCount(v)
	})
}

// UpdateStatusErrorCount sets the "status_error_count" field to the value that was provided on create.
func (u *HPBlobUpsertBulk) UpdateStatusErrorCount() *HPBlobUpsertBulk {
	return u.Update(func(s *HPBlobUpsert) {
		s.UpdateStatusErrorCount()
	})
}

// ClearStatusErrorCount clears the value of the "status_error_count" field.
func (u *HPBlobUpsertBulk) ClearStatusErrorCount() *HPBlobUpsertBulk {
	return u.Update(func(s *HPBlobUpsert) {
		s.ClearStatusErrorCount()
	})
}

// SetType sets the "type" field.
func (u *HPBlobUpsertBulk) SetType(v enums.HPBlobType) *HPBlobUpsertBulk {
	return u.Update(func(s *HPBlobUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *HPBlobUpsertBulk) UpdateType() *HPBlobUpsertBulk {
	return u.Update(func(s *HPBlobUpsert) {
		s.UpdateType()
	})
}

// SetSubType sets the "sub_type" field.
func (u *HPBlobUpsertBulk) SetSubType(v enums.HPBlobSubType) *HPBlobUpsertBulk {
	return u.Update(func(s *HPBlobUpsert) {
		s.SetSubType(v)
	})
}

// UpdateSubType sets the "sub_type" field to the value that was provided on create.
func (u *HPBlobUpsertBulk) UpdateSubType() *HPBlobUpsertBulk {
	return u.Update(func(s *HPBlobUpsert) {
		s.UpdateSubType()
	})
}

// SetWidth sets the "width" field.
func (u *HPBlobUpsertBulk) SetWidth(v int) *HPBlobUpsertBulk {
	return u.Update(func(s *HPBlobUpsert) {
		s.SetWidth(v)
	})
}

// AddWidth adds v to the "width" field.
func (u *HPBlobUpsertBulk) AddWidth(v int) *HPBlobUpsertBulk {
	return u.Update(func(s *HPBlobUpsert) {
		s.AddWidth(v)
	})
}

// UpdateWidth sets the "width" field to the value that was provided on create.
func (u *HPBlobUpsertBulk) UpdateWidth() *HPBlobUpsertBulk {
	return u.Update(func(s *HPBlobUpsert) {
		s.UpdateWidth()
	})
}

// ClearWidth clears the value of the "width" field.
func (u *HPBlobUpsertBulk) ClearWidth() *HPBlobUpsertBulk {
	return u.Update(func(s *HPBlobUpsert) {
		s.ClearWidth()
	})
}

// SetHeight sets the "height" field.
func (u *HPBlobUpsertBulk) SetHeight(v int) *HPBlobUpsertBulk {
	return u.Update(func(s *HPBlobUpsert) {
		s.SetHeight(v)
	})
}

// AddHeight adds v to the "height" field.
func (u *HPBlobUpsertBulk) AddHeight(v int) *HPBlobUpsertBulk {
	return u.Update(func(s *HPBlobUpsert) {
		s.AddHeight(v)
	})
}

// UpdateHeight sets the "height" field to the value that was provided on create.
func (u *HPBlobUpsertBulk) UpdateHeight() *HPBlobUpsertBulk {
	return u.Update(func(s *HPBlobUpsert) {
		s.UpdateHeight()
	})
}

// ClearHeight clears the value of the "height" field.
func (u *HPBlobUpsertBulk) ClearHeight() *HPBlobUpsertBulk {
	return u.Update(func(s *HPBlobUpsert) {
		s.ClearHeight()
	})
}

// SetSize sets the "size" field.
func (u *HPBlobUpsertBulk) SetSize(v int64) *HPBlobUpsertBulk {
	return u.Update(func(s *HPBlobUpsert) {
		s.SetSize(v)
	})
}

// AddSize adds v to the "size" field.
func (u *HPBlobUpsertBulk) AddSize(v int64) *HPBlobUpsertBulk {
	return u.Update(func(s *HPBlobUpsert) {
		s.AddSize(v)
	})
}

// UpdateSize sets the "size" field to the value that was provided on create.
func (u *HPBlobUpsertBulk) UpdateSize() *HPBlobUpsertBulk {
	return u.Update(func(s *HPBlobUpsert) {
		s.UpdateSize()
	})
}

// ClearSize clears the value of the "size" field.
func (u *HPBlobUpsertBulk) ClearSize() *HPBlobUpsertBulk {
	return u.Update(func(s *HPBlobUpsert) {
		s.ClearSize()
	})
}

// SetOwnerArtistID sets the "owner_artist_id" field.
func (u *HPBlobUpsertBulk) SetOwnerArtistID(v int) *HPBlobUpsertBulk {
	return u.Update(func(s *HPBlobUpsert) {
		s.SetOwnerArtistID(v)
	})
}

// UpdateOwnerArtistID sets the "owner_artist_id" field to the value that was provided on create.
func (u *HPBlobUpsertBulk) UpdateOwnerArtistID() *HPBlobUpsertBulk {
	return u.Update(func(s *HPBlobUpsert) {
		s.UpdateOwnerArtistID()
	})
}

// ClearOwnerArtistID clears the value of the "owner_artist_id" field.
func (u *HPBlobUpsertBulk) ClearOwnerArtistID() *HPBlobUpsertBulk {
	return u.Update(func(s *HPBlobUpsert) {
		s.ClearOwnerArtistID()
	})
}

// SetOwnerMemberID sets the "owner_member_id" field.
func (u *HPBlobUpsertBulk) SetOwnerMemberID(v int) *HPBlobUpsertBulk {
	return u.Update(func(s *HPBlobUpsert) {
		s.SetOwnerMemberID(v)
	})
}

// UpdateOwnerMemberID sets the "owner_member_id" field to the value that was provided on create.
func (u *HPBlobUpsertBulk) UpdateOwnerMemberID() *HPBlobUpsertBulk {
	return u.Update(func(s *HPBlobUpsert) {
		s.UpdateOwnerMemberID()
	})
}

// ClearOwnerMemberID clears the value of the "owner_member_id" field.
func (u *HPBlobUpsertBulk) ClearOwnerMemberID() *HPBlobUpsertBulk {
	return u.Update(func(s *HPBlobUpsert) {
		s.ClearOwnerMemberID()
	})
}

// SetNumFaces sets the "num_faces" field.
func (u *HPBlobUpsertBulk) SetNumFaces(v int) *HPBlobUpsertBulk {
	return u.Update(func(s *HPBlobUpsert) {
		s.SetNumFaces(v)
	})
}

// AddNumFaces adds v to the "num_faces" field.
func (u *HPBlobUpsertBulk) AddNumFaces(v int) *HPBlobUpsertBulk {
	return u.Update(func(s *HPBlobUpsert) {
		s.AddNumFaces(v)
	})
}

// UpdateNumFaces sets the "num_faces" field to the value that was provided on create.
func (u *HPBlobUpsertBulk) UpdateNumFaces() *HPBlobUpsertBulk {
	return u.Update(func(s *HPBlobUpsert) {
		s.UpdateNumFaces()
	})
}

// ClearNumFaces clears the value of the "num_faces" field.
func (u *HPBlobUpsertBulk) ClearNumFaces() *HPBlobUpsertBulk {
	return u.Update(func(s *HPBlobUpsert) {
		s.ClearNumFaces()
	})
}

// SetFaces sets the "faces" field.
func (u *HPBlobUpsertBulk) SetFaces(v jsonfields.HPBlobImageFace) *HPBlobUpsertBulk {
	return u.Update(func(s *HPBlobUpsert) {
		s.SetFaces(v)
	})
}

// UpdateFaces sets the "faces" field to the value that was provided on create.
func (u *HPBlobUpsertBulk) UpdateFaces() *HPBlobUpsertBulk {
	return u.Update(func(s *HPBlobUpsert) {
		s.UpdateFaces()
	})
}

// ClearFaces clears the value of the "faces" field.
func (u *HPBlobUpsertBulk) ClearFaces() *HPBlobUpsertBulk {
	return u.Update(func(s *HPBlobUpsert) {
		s.ClearFaces()
	})
}

// SetFaceRecognitionStatus sets the "face_recognition_status" field.
func (u *HPBlobUpsertBulk) SetFaceRecognitionStatus(v enums.HPBlobFaceRecognitionStatus) *HPBlobUpsertBulk {
	return u.Update(func(s *HPBlobUpsert) {
		s.SetFaceRecognitionStatus(v)
	})
}

// UpdateFaceRecognitionStatus sets the "face_recognition_status" field to the value that was provided on create.
func (u *HPBlobUpsertBulk) UpdateFaceRecognitionStatus() *HPBlobUpsertBulk {
	return u.Update(func(s *HPBlobUpsert) {
		s.UpdateFaceRecognitionStatus()
	})
}

// ClearFaceRecognitionStatus clears the value of the "face_recognition_status" field.
func (u *HPBlobUpsertBulk) ClearFaceRecognitionStatus() *HPBlobUpsertBulk {
	return u.Update(func(s *HPBlobUpsert) {
		s.ClearFaceRecognitionStatus()
	})
}

// SetThumbnail sets the "thumbnail" field.
func (u *HPBlobUpsertBulk) SetThumbnail(v *jsonfields.HPBlobThumbnail) *HPBlobUpsertBulk {
	return u.Update(func(s *HPBlobUpsert) {
		s.SetThumbnail(v)
	})
}

// UpdateThumbnail sets the "thumbnail" field to the value that was provided on create.
func (u *HPBlobUpsertBulk) UpdateThumbnail() *HPBlobUpsertBulk {
	return u.Update(func(s *HPBlobUpsert) {
		s.UpdateThumbnail()
	})
}

// ClearThumbnail clears the value of the "thumbnail" field.
func (u *HPBlobUpsertBulk) ClearThumbnail() *HPBlobUpsertBulk {
	return u.Update(func(s *HPBlobUpsert) {
		s.ClearThumbnail()
	})
}

// SetDurationSeconds sets the "duration_seconds" field.
func (u *HPBlobUpsertBulk) SetDurationSeconds(v float64) *HPBlobUpsertBulk {
	return u.Update(func(s *HPBlobUpsert) {
		s.SetDurationSeconds(v)
	})
}

// AddDurationSeconds adds v to the "duration_seconds" field.
func (u *HPBlobUpsertBulk) AddDurationSeconds(v float64) *HPBlobUpsertBulk {
	return u.Update(func(s *HPBlobUpsert) {
		s.AddDurationSeconds(v)
	})
}

// UpdateDurationSeconds sets the "duration_seconds" field to the value that was provided on create.
func (u *HPBlobUpsertBulk) UpdateDurationSeconds() *HPBlobUpsertBulk {
	return u.Update(func(s *HPBlobUpsert) {
		s.UpdateDurationSeconds()
	})
}

// ClearDurationSeconds clears the value of the "duration_seconds" field.
func (u *HPBlobUpsertBulk) ClearDurationSeconds() *HPBlobUpsertBulk {
	return u.Update(func(s *HPBlobUpsert) {
		s.ClearDurationSeconds()
	})
}

// Exec executes the query.
func (u *HPBlobUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the HPBlobCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for HPBlobCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *HPBlobUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
