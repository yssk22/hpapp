// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"hpapp.yssk22.dev/go/service/ent/hpameblopost"
	"hpapp.yssk22.dev/go/service/ent/hpartist"
	"hpapp.yssk22.dev/go/service/ent/hpasset"
	"hpapp.yssk22.dev/go/service/ent/hpmember"
	"hpapp.yssk22.dev/go/service/schema/jsonfields"
)

// HPAmebloPost is the model entity for the HPAmebloPost schema.
type HPAmebloPost struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CrawledAt holds the value of the "crawled_at" field.
	CrawledAt *time.Time `json:"crawled_at,omitempty"`
	// ErrorCount holds the value of the "error_count" field.
	ErrorCount int `json:"error_count,omitempty"`
	// ManuallyModified holds the value of the "manually_modified" field.
	ManuallyModified *jsonfields.ManuallyModified `json:"manually_modified,omitempty"`
	// LastErrorMessage holds the value of the "last_error_message" field.
	LastErrorMessage *string `json:"last_error_message,omitempty"`
	// RecrawlRequired holds the value of the "recrawl_required" field.
	RecrawlRequired bool `json:"recrawl_required,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Path holds the value of the "path" field.
	Path string `json:"path,omitempty"`
	// NextPath holds the value of the "next_path" field.
	NextPath *string `json:"next_path,omitempty"`
	// PrevPath holds the value of the "prev_path" field.
	PrevPath *string `json:"prev_path,omitempty"`
	// ArtistKey holds the value of the "artist_key" field.
	ArtistKey string `json:"artist_key,omitempty"`
	// MemberKey holds the value of the "member_key" field.
	MemberKey *string `json:"member_key,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Theme holds the value of the "theme" field.
	Theme *string `json:"theme,omitempty"`
	// PostAt holds the value of the "post_at" field.
	PostAt time.Time `json:"post_at,omitempty"`
	// Source holds the value of the "source" field.
	Source hpameblopost.Source `json:"source,omitempty"`
	// Images holds the value of the "images" field.
	Images []jsonfields.Media `json:"images,omitempty"`
	// Likes holds the value of the "likes" field.
	Likes *int `json:"likes,omitempty"`
	// Comments holds the value of the "comments" field.
	Comments *int `json:"comments,omitempty"`
	// Reblogs holds the value of the "reblogs" field.
	Reblogs *int `json:"reblogs,omitempty"`
	// OwnerArtistID holds the value of the "owner_artist_id" field.
	OwnerArtistID *int `json:"owner_artist_id,omitempty"`
	// OwnerMemberID holds the value of the "owner_member_id" field.
	OwnerMemberID *int `json:"owner_member_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HPAmebloPostQuery when eager-loading is set.
	Edges                 HPAmebloPostEdges `json:"edges"`
	hp_asset_ameblo_posts *int
	selectValues          sql.SelectValues
}

// HPAmebloPostEdges holds the relations/edges for other nodes in the graph.
type HPAmebloPostEdges struct {
	// OwnerArtist holds the value of the owner_artist edge.
	OwnerArtist *HPArtist `json:"owner_artist,omitempty"`
	// OwnerMember holds the value of the owner_member edge.
	OwnerMember *HPMember `json:"owner_member,omitempty"`
	// TaggedArtists holds the value of the tagged_artists edge.
	TaggedArtists []*HPArtist `json:"tagged_artists,omitempty"`
	// TaggedMembers holds the value of the tagged_members edge.
	TaggedMembers []*HPMember `json:"tagged_members,omitempty"`
	// Asset holds the value of the asset edge.
	Asset *HPAsset `json:"asset,omitempty"`
	// Blobs holds the value of the blobs edge.
	Blobs []*HPBlob `json:"blobs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
	// totalCount holds the count of the edges above.
	totalCount [5]map[string]int

	namedTaggedArtists map[string][]*HPArtist
	namedTaggedMembers map[string][]*HPMember
	namedBlobs         map[string][]*HPBlob
}

// OwnerArtistOrErr returns the OwnerArtist value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HPAmebloPostEdges) OwnerArtistOrErr() (*HPArtist, error) {
	if e.loadedTypes[0] {
		if e.OwnerArtist == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: hpartist.Label}
		}
		return e.OwnerArtist, nil
	}
	return nil, &NotLoadedError{edge: "owner_artist"}
}

// OwnerMemberOrErr returns the OwnerMember value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HPAmebloPostEdges) OwnerMemberOrErr() (*HPMember, error) {
	if e.loadedTypes[1] {
		if e.OwnerMember == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: hpmember.Label}
		}
		return e.OwnerMember, nil
	}
	return nil, &NotLoadedError{edge: "owner_member"}
}

// TaggedArtistsOrErr returns the TaggedArtists value or an error if the edge
// was not loaded in eager-loading.
func (e HPAmebloPostEdges) TaggedArtistsOrErr() ([]*HPArtist, error) {
	if e.loadedTypes[2] {
		return e.TaggedArtists, nil
	}
	return nil, &NotLoadedError{edge: "tagged_artists"}
}

// TaggedMembersOrErr returns the TaggedMembers value or an error if the edge
// was not loaded in eager-loading.
func (e HPAmebloPostEdges) TaggedMembersOrErr() ([]*HPMember, error) {
	if e.loadedTypes[3] {
		return e.TaggedMembers, nil
	}
	return nil, &NotLoadedError{edge: "tagged_members"}
}

// AssetOrErr returns the Asset value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HPAmebloPostEdges) AssetOrErr() (*HPAsset, error) {
	if e.loadedTypes[4] {
		if e.Asset == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: hpasset.Label}
		}
		return e.Asset, nil
	}
	return nil, &NotLoadedError{edge: "asset"}
}

// BlobsOrErr returns the Blobs value or an error if the edge
// was not loaded in eager-loading.
func (e HPAmebloPostEdges) BlobsOrErr() ([]*HPBlob, error) {
	if e.loadedTypes[5] {
		return e.Blobs, nil
	}
	return nil, &NotLoadedError{edge: "blobs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*HPAmebloPost) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case hpameblopost.FieldManuallyModified, hpameblopost.FieldImages:
			values[i] = new([]byte)
		case hpameblopost.FieldRecrawlRequired:
			values[i] = new(sql.NullBool)
		case hpameblopost.FieldID, hpameblopost.FieldErrorCount, hpameblopost.FieldLikes, hpameblopost.FieldComments, hpameblopost.FieldReblogs, hpameblopost.FieldOwnerArtistID, hpameblopost.FieldOwnerMemberID:
			values[i] = new(sql.NullInt64)
		case hpameblopost.FieldLastErrorMessage, hpameblopost.FieldPath, hpameblopost.FieldNextPath, hpameblopost.FieldPrevPath, hpameblopost.FieldArtistKey, hpameblopost.FieldMemberKey, hpameblopost.FieldTitle, hpameblopost.FieldDescription, hpameblopost.FieldTheme, hpameblopost.FieldSource:
			values[i] = new(sql.NullString)
		case hpameblopost.FieldCrawledAt, hpameblopost.FieldCreatedAt, hpameblopost.FieldUpdatedAt, hpameblopost.FieldPostAt:
			values[i] = new(sql.NullTime)
		case hpameblopost.ForeignKeys[0]: // hp_asset_ameblo_posts
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the HPAmebloPost fields.
func (hap *HPAmebloPost) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case hpameblopost.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			hap.ID = int(value.Int64)
		case hpameblopost.FieldCrawledAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field crawled_at", values[i])
			} else if value.Valid {
				hap.CrawledAt = new(time.Time)
				*hap.CrawledAt = value.Time
			}
		case hpameblopost.FieldErrorCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field error_count", values[i])
			} else if value.Valid {
				hap.ErrorCount = int(value.Int64)
			}
		case hpameblopost.FieldManuallyModified:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field manually_modified", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &hap.ManuallyModified); err != nil {
					return fmt.Errorf("unmarshal field manually_modified: %w", err)
				}
			}
		case hpameblopost.FieldLastErrorMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_error_message", values[i])
			} else if value.Valid {
				hap.LastErrorMessage = new(string)
				*hap.LastErrorMessage = value.String
			}
		case hpameblopost.FieldRecrawlRequired:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field recrawl_required", values[i])
			} else if value.Valid {
				hap.RecrawlRequired = value.Bool
			}
		case hpameblopost.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				hap.CreatedAt = value.Time
			}
		case hpameblopost.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				hap.UpdatedAt = value.Time
			}
		case hpameblopost.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				hap.Path = value.String
			}
		case hpameblopost.FieldNextPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field next_path", values[i])
			} else if value.Valid {
				hap.NextPath = new(string)
				*hap.NextPath = value.String
			}
		case hpameblopost.FieldPrevPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field prev_path", values[i])
			} else if value.Valid {
				hap.PrevPath = new(string)
				*hap.PrevPath = value.String
			}
		case hpameblopost.FieldArtistKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field artist_key", values[i])
			} else if value.Valid {
				hap.ArtistKey = value.String
			}
		case hpameblopost.FieldMemberKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field member_key", values[i])
			} else if value.Valid {
				hap.MemberKey = new(string)
				*hap.MemberKey = value.String
			}
		case hpameblopost.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				hap.Title = value.String
			}
		case hpameblopost.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				hap.Description = value.String
			}
		case hpameblopost.FieldTheme:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field theme", values[i])
			} else if value.Valid {
				hap.Theme = new(string)
				*hap.Theme = value.String
			}
		case hpameblopost.FieldPostAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field post_at", values[i])
			} else if value.Valid {
				hap.PostAt = value.Time
			}
		case hpameblopost.FieldSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source", values[i])
			} else if value.Valid {
				hap.Source = hpameblopost.Source(value.String)
			}
		case hpameblopost.FieldImages:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field images", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &hap.Images); err != nil {
					return fmt.Errorf("unmarshal field images: %w", err)
				}
			}
		case hpameblopost.FieldLikes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field likes", values[i])
			} else if value.Valid {
				hap.Likes = new(int)
				*hap.Likes = int(value.Int64)
			}
		case hpameblopost.FieldComments:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field comments", values[i])
			} else if value.Valid {
				hap.Comments = new(int)
				*hap.Comments = int(value.Int64)
			}
		case hpameblopost.FieldReblogs:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field reblogs", values[i])
			} else if value.Valid {
				hap.Reblogs = new(int)
				*hap.Reblogs = int(value.Int64)
			}
		case hpameblopost.FieldOwnerArtistID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field owner_artist_id", values[i])
			} else if value.Valid {
				hap.OwnerArtistID = new(int)
				*hap.OwnerArtistID = int(value.Int64)
			}
		case hpameblopost.FieldOwnerMemberID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field owner_member_id", values[i])
			} else if value.Valid {
				hap.OwnerMemberID = new(int)
				*hap.OwnerMemberID = int(value.Int64)
			}
		case hpameblopost.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field hp_asset_ameblo_posts", value)
			} else if value.Valid {
				hap.hp_asset_ameblo_posts = new(int)
				*hap.hp_asset_ameblo_posts = int(value.Int64)
			}
		default:
			hap.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the HPAmebloPost.
// This includes values selected through modifiers, order, etc.
func (hap *HPAmebloPost) Value(name string) (ent.Value, error) {
	return hap.selectValues.Get(name)
}

// QueryOwnerArtist queries the "owner_artist" edge of the HPAmebloPost entity.
func (hap *HPAmebloPost) QueryOwnerArtist() *HPArtistQuery {
	return NewHPAmebloPostClient(hap.config).QueryOwnerArtist(hap)
}

// QueryOwnerMember queries the "owner_member" edge of the HPAmebloPost entity.
func (hap *HPAmebloPost) QueryOwnerMember() *HPMemberQuery {
	return NewHPAmebloPostClient(hap.config).QueryOwnerMember(hap)
}

// QueryTaggedArtists queries the "tagged_artists" edge of the HPAmebloPost entity.
func (hap *HPAmebloPost) QueryTaggedArtists() *HPArtistQuery {
	return NewHPAmebloPostClient(hap.config).QueryTaggedArtists(hap)
}

// QueryTaggedMembers queries the "tagged_members" edge of the HPAmebloPost entity.
func (hap *HPAmebloPost) QueryTaggedMembers() *HPMemberQuery {
	return NewHPAmebloPostClient(hap.config).QueryTaggedMembers(hap)
}

// QueryAsset queries the "asset" edge of the HPAmebloPost entity.
func (hap *HPAmebloPost) QueryAsset() *HPAssetQuery {
	return NewHPAmebloPostClient(hap.config).QueryAsset(hap)
}

// QueryBlobs queries the "blobs" edge of the HPAmebloPost entity.
func (hap *HPAmebloPost) QueryBlobs() *HPBlobQuery {
	return NewHPAmebloPostClient(hap.config).QueryBlobs(hap)
}

// Update returns a builder for updating this HPAmebloPost.
// Note that you need to call HPAmebloPost.Unwrap() before calling this method if this HPAmebloPost
// was returned from a transaction, and the transaction was committed or rolled back.
func (hap *HPAmebloPost) Update() *HPAmebloPostUpdateOne {
	return NewHPAmebloPostClient(hap.config).UpdateOne(hap)
}

// Unwrap unwraps the HPAmebloPost entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (hap *HPAmebloPost) Unwrap() *HPAmebloPost {
	_tx, ok := hap.config.driver.(*txDriver)
	if !ok {
		panic("ent: HPAmebloPost is not a transactional entity")
	}
	hap.config.driver = _tx.drv
	return hap
}

// String implements the fmt.Stringer.
func (hap *HPAmebloPost) String() string {
	var builder strings.Builder
	builder.WriteString("HPAmebloPost(")
	builder.WriteString(fmt.Sprintf("id=%v, ", hap.ID))
	if v := hap.CrawledAt; v != nil {
		builder.WriteString("crawled_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("error_count=")
	builder.WriteString(fmt.Sprintf("%v", hap.ErrorCount))
	builder.WriteString(", ")
	builder.WriteString("manually_modified=")
	builder.WriteString(fmt.Sprintf("%v", hap.ManuallyModified))
	builder.WriteString(", ")
	if v := hap.LastErrorMessage; v != nil {
		builder.WriteString("last_error_message=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("recrawl_required=")
	builder.WriteString(fmt.Sprintf("%v", hap.RecrawlRequired))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(hap.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(hap.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("path=")
	builder.WriteString(hap.Path)
	builder.WriteString(", ")
	if v := hap.NextPath; v != nil {
		builder.WriteString("next_path=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := hap.PrevPath; v != nil {
		builder.WriteString("prev_path=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("artist_key=")
	builder.WriteString(hap.ArtistKey)
	builder.WriteString(", ")
	if v := hap.MemberKey; v != nil {
		builder.WriteString("member_key=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(hap.Title)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(hap.Description)
	builder.WriteString(", ")
	if v := hap.Theme; v != nil {
		builder.WriteString("theme=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("post_at=")
	builder.WriteString(hap.PostAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("source=")
	builder.WriteString(fmt.Sprintf("%v", hap.Source))
	builder.WriteString(", ")
	builder.WriteString("images=")
	builder.WriteString(fmt.Sprintf("%v", hap.Images))
	builder.WriteString(", ")
	if v := hap.Likes; v != nil {
		builder.WriteString("likes=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := hap.Comments; v != nil {
		builder.WriteString("comments=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := hap.Reblogs; v != nil {
		builder.WriteString("reblogs=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := hap.OwnerArtistID; v != nil {
		builder.WriteString("owner_artist_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := hap.OwnerMemberID; v != nil {
		builder.WriteString("owner_member_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// NamedTaggedArtists returns the TaggedArtists named value or an error if the edge was not
// loaded in eager-loading with this name.
func (hap *HPAmebloPost) NamedTaggedArtists(name string) ([]*HPArtist, error) {
	if hap.Edges.namedTaggedArtists == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := hap.Edges.namedTaggedArtists[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (hap *HPAmebloPost) appendNamedTaggedArtists(name string, edges ...*HPArtist) {
	if hap.Edges.namedTaggedArtists == nil {
		hap.Edges.namedTaggedArtists = make(map[string][]*HPArtist)
	}
	if len(edges) == 0 {
		hap.Edges.namedTaggedArtists[name] = []*HPArtist{}
	} else {
		hap.Edges.namedTaggedArtists[name] = append(hap.Edges.namedTaggedArtists[name], edges...)
	}
}

// NamedTaggedMembers returns the TaggedMembers named value or an error if the edge was not
// loaded in eager-loading with this name.
func (hap *HPAmebloPost) NamedTaggedMembers(name string) ([]*HPMember, error) {
	if hap.Edges.namedTaggedMembers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := hap.Edges.namedTaggedMembers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (hap *HPAmebloPost) appendNamedTaggedMembers(name string, edges ...*HPMember) {
	if hap.Edges.namedTaggedMembers == nil {
		hap.Edges.namedTaggedMembers = make(map[string][]*HPMember)
	}
	if len(edges) == 0 {
		hap.Edges.namedTaggedMembers[name] = []*HPMember{}
	} else {
		hap.Edges.namedTaggedMembers[name] = append(hap.Edges.namedTaggedMembers[name], edges...)
	}
}

// NamedBlobs returns the Blobs named value or an error if the edge was not
// loaded in eager-loading with this name.
func (hap *HPAmebloPost) NamedBlobs(name string) ([]*HPBlob, error) {
	if hap.Edges.namedBlobs == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := hap.Edges.namedBlobs[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (hap *HPAmebloPost) appendNamedBlobs(name string, edges ...*HPBlob) {
	if hap.Edges.namedBlobs == nil {
		hap.Edges.namedBlobs = make(map[string][]*HPBlob)
	}
	if len(edges) == 0 {
		hap.Edges.namedBlobs[name] = []*HPBlob{}
	} else {
		hap.Edges.namedBlobs[name] = append(hap.Edges.namedBlobs[name], edges...)
	}
}

// HPAmebloPosts is a parsable slice of HPAmebloPost.
type HPAmebloPosts []*HPAmebloPost
