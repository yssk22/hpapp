// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"hpapp.yssk22.dev/go/service/ent/user"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// unique identifier with [a-z0-9][a-z0-9_.]+
	Username string `json:"username,omitempty"`
	// access token for the first party clients to access
	AccessToken string `json:"access_token,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges        UserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Auth holds the value of the auth edge.
	Auth []*Auth `json:"auth,omitempty"`
	// NotificationSettings holds the value of the notification_settings edge.
	NotificationSettings []*UserNotificationSetting `json:"notification_settings,omitempty"`
	// HpviewHistory holds the value of the hpview_history edge.
	HpviewHistory []*HPViewHistory `json:"hpview_history,omitempty"`
	// HpmemberFollowing holds the value of the hpmember_following edge.
	HpmemberFollowing []*HPFollow `json:"hpmember_following,omitempty"`
	// HpsortHistory holds the value of the hpsort_history edge.
	HpsortHistory []*HPSortHistory `json:"hpsort_history,omitempty"`
	// HpfcEventTickets holds the value of the hpfc_event_tickets edge.
	HpfcEventTickets []*HPFCEventTicket `json:"hpfc_event_tickets,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
	// totalCount holds the count of the edges above.
	totalCount [6]map[string]int

	namedAuth                 map[string][]*Auth
	namedNotificationSettings map[string][]*UserNotificationSetting
	namedHpviewHistory        map[string][]*HPViewHistory
	namedHpmemberFollowing    map[string][]*HPFollow
	namedHpsortHistory        map[string][]*HPSortHistory
	namedHpfcEventTickets     map[string][]*HPFCEventTicket
}

// AuthOrErr returns the Auth value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) AuthOrErr() ([]*Auth, error) {
	if e.loadedTypes[0] {
		return e.Auth, nil
	}
	return nil, &NotLoadedError{edge: "auth"}
}

// NotificationSettingsOrErr returns the NotificationSettings value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) NotificationSettingsOrErr() ([]*UserNotificationSetting, error) {
	if e.loadedTypes[1] {
		return e.NotificationSettings, nil
	}
	return nil, &NotLoadedError{edge: "notification_settings"}
}

// HpviewHistoryOrErr returns the HpviewHistory value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) HpviewHistoryOrErr() ([]*HPViewHistory, error) {
	if e.loadedTypes[2] {
		return e.HpviewHistory, nil
	}
	return nil, &NotLoadedError{edge: "hpview_history"}
}

// HpmemberFollowingOrErr returns the HpmemberFollowing value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) HpmemberFollowingOrErr() ([]*HPFollow, error) {
	if e.loadedTypes[3] {
		return e.HpmemberFollowing, nil
	}
	return nil, &NotLoadedError{edge: "hpmember_following"}
}

// HpsortHistoryOrErr returns the HpsortHistory value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) HpsortHistoryOrErr() ([]*HPSortHistory, error) {
	if e.loadedTypes[4] {
		return e.HpsortHistory, nil
	}
	return nil, &NotLoadedError{edge: "hpsort_history"}
}

// HpfcEventTicketsOrErr returns the HpfcEventTickets value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) HpfcEventTicketsOrErr() ([]*HPFCEventTicket, error) {
	if e.loadedTypes[5] {
		return e.HpfcEventTickets, nil
	}
	return nil, &NotLoadedError{edge: "hpfc_event_tickets"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			values[i] = new(sql.NullInt64)
		case user.FieldUsername, user.FieldAccessToken:
			values[i] = new(sql.NullString)
		case user.FieldCreatedAt, user.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = int(value.Int64)
		case user.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				u.CreatedAt = value.Time
			}
		case user.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				u.UpdatedAt = value.Time
			}
		case user.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				u.Username = value.String
			}
		case user.FieldAccessToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field access_token", values[i])
			} else if value.Valid {
				u.AccessToken = value.String
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (u *User) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// QueryAuth queries the "auth" edge of the User entity.
func (u *User) QueryAuth() *AuthQuery {
	return NewUserClient(u.config).QueryAuth(u)
}

// QueryNotificationSettings queries the "notification_settings" edge of the User entity.
func (u *User) QueryNotificationSettings() *UserNotificationSettingQuery {
	return NewUserClient(u.config).QueryNotificationSettings(u)
}

// QueryHpviewHistory queries the "hpview_history" edge of the User entity.
func (u *User) QueryHpviewHistory() *HPViewHistoryQuery {
	return NewUserClient(u.config).QueryHpviewHistory(u)
}

// QueryHpmemberFollowing queries the "hpmember_following" edge of the User entity.
func (u *User) QueryHpmemberFollowing() *HPFollowQuery {
	return NewUserClient(u.config).QueryHpmemberFollowing(u)
}

// QueryHpsortHistory queries the "hpsort_history" edge of the User entity.
func (u *User) QueryHpsortHistory() *HPSortHistoryQuery {
	return NewUserClient(u.config).QueryHpsortHistory(u)
}

// QueryHpfcEventTickets queries the "hpfc_event_tickets" edge of the User entity.
func (u *User) QueryHpfcEventTickets() *HPFCEventTicketQuery {
	return NewUserClient(u.config).QueryHpfcEventTickets(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("created_at=")
	builder.WriteString(u.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(u.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("username=")
	builder.WriteString(u.Username)
	builder.WriteString(", ")
	builder.WriteString("access_token=")
	builder.WriteString(u.AccessToken)
	builder.WriteByte(')')
	return builder.String()
}

// NamedAuth returns the Auth named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedAuth(name string) ([]*Auth, error) {
	if u.Edges.namedAuth == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedAuth[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedAuth(name string, edges ...*Auth) {
	if u.Edges.namedAuth == nil {
		u.Edges.namedAuth = make(map[string][]*Auth)
	}
	if len(edges) == 0 {
		u.Edges.namedAuth[name] = []*Auth{}
	} else {
		u.Edges.namedAuth[name] = append(u.Edges.namedAuth[name], edges...)
	}
}

// NamedNotificationSettings returns the NotificationSettings named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedNotificationSettings(name string) ([]*UserNotificationSetting, error) {
	if u.Edges.namedNotificationSettings == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedNotificationSettings[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedNotificationSettings(name string, edges ...*UserNotificationSetting) {
	if u.Edges.namedNotificationSettings == nil {
		u.Edges.namedNotificationSettings = make(map[string][]*UserNotificationSetting)
	}
	if len(edges) == 0 {
		u.Edges.namedNotificationSettings[name] = []*UserNotificationSetting{}
	} else {
		u.Edges.namedNotificationSettings[name] = append(u.Edges.namedNotificationSettings[name], edges...)
	}
}

// NamedHpviewHistory returns the HpviewHistory named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedHpviewHistory(name string) ([]*HPViewHistory, error) {
	if u.Edges.namedHpviewHistory == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedHpviewHistory[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedHpviewHistory(name string, edges ...*HPViewHistory) {
	if u.Edges.namedHpviewHistory == nil {
		u.Edges.namedHpviewHistory = make(map[string][]*HPViewHistory)
	}
	if len(edges) == 0 {
		u.Edges.namedHpviewHistory[name] = []*HPViewHistory{}
	} else {
		u.Edges.namedHpviewHistory[name] = append(u.Edges.namedHpviewHistory[name], edges...)
	}
}

// NamedHpmemberFollowing returns the HpmemberFollowing named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedHpmemberFollowing(name string) ([]*HPFollow, error) {
	if u.Edges.namedHpmemberFollowing == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedHpmemberFollowing[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedHpmemberFollowing(name string, edges ...*HPFollow) {
	if u.Edges.namedHpmemberFollowing == nil {
		u.Edges.namedHpmemberFollowing = make(map[string][]*HPFollow)
	}
	if len(edges) == 0 {
		u.Edges.namedHpmemberFollowing[name] = []*HPFollow{}
	} else {
		u.Edges.namedHpmemberFollowing[name] = append(u.Edges.namedHpmemberFollowing[name], edges...)
	}
}

// NamedHpsortHistory returns the HpsortHistory named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedHpsortHistory(name string) ([]*HPSortHistory, error) {
	if u.Edges.namedHpsortHistory == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedHpsortHistory[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedHpsortHistory(name string, edges ...*HPSortHistory) {
	if u.Edges.namedHpsortHistory == nil {
		u.Edges.namedHpsortHistory = make(map[string][]*HPSortHistory)
	}
	if len(edges) == 0 {
		u.Edges.namedHpsortHistory[name] = []*HPSortHistory{}
	} else {
		u.Edges.namedHpsortHistory[name] = append(u.Edges.namedHpsortHistory[name], edges...)
	}
}

// NamedHpfcEventTickets returns the HpfcEventTickets named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedHpfcEventTickets(name string) ([]*HPFCEventTicket, error) {
	if u.Edges.namedHpfcEventTickets == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedHpfcEventTickets[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedHpfcEventTickets(name string, edges ...*HPFCEventTicket) {
	if u.Edges.namedHpfcEventTickets == nil {
		u.Edges.namedHpfcEventTickets = make(map[string][]*HPFCEventTicket)
	}
	if len(edges) == 0 {
		u.Edges.namedHpfcEventTickets[name] = []*HPFCEventTicket{}
	} else {
		u.Edges.namedHpfcEventTickets[name] = append(u.Edges.namedHpfcEventTickets[name], edges...)
	}
}

// Users is a parsable slice of User.
type Users []*User
