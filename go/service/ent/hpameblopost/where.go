// Code generated by ent, DO NOT EDIT.

package hpameblopost

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"hpapp.yssk22.dev/go/service/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldLTE(FieldID, id))
}

// CrawledAt applies equality check predicate on the "crawled_at" field. It's identical to CrawledAtEQ.
func CrawledAt(v time.Time) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldEQ(FieldCrawledAt, v))
}

// ErrorCount applies equality check predicate on the "error_count" field. It's identical to ErrorCountEQ.
func ErrorCount(v int) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldEQ(FieldErrorCount, v))
}

// LastErrorMessage applies equality check predicate on the "last_error_message" field. It's identical to LastErrorMessageEQ.
func LastErrorMessage(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldEQ(FieldLastErrorMessage, v))
}

// RecrawlRequired applies equality check predicate on the "recrawl_required" field. It's identical to RecrawlRequiredEQ.
func RecrawlRequired(v bool) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldEQ(FieldRecrawlRequired, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldEQ(FieldUpdatedAt, v))
}

// Path applies equality check predicate on the "path" field. It's identical to PathEQ.
func Path(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldEQ(FieldPath, v))
}

// NextPath applies equality check predicate on the "next_path" field. It's identical to NextPathEQ.
func NextPath(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldEQ(FieldNextPath, v))
}

// PrevPath applies equality check predicate on the "prev_path" field. It's identical to PrevPathEQ.
func PrevPath(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldEQ(FieldPrevPath, v))
}

// ArtistKey applies equality check predicate on the "artist_key" field. It's identical to ArtistKeyEQ.
func ArtistKey(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldEQ(FieldArtistKey, v))
}

// MemberKey applies equality check predicate on the "member_key" field. It's identical to MemberKeyEQ.
func MemberKey(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldEQ(FieldMemberKey, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldEQ(FieldTitle, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldEQ(FieldDescription, v))
}

// Theme applies equality check predicate on the "theme" field. It's identical to ThemeEQ.
func Theme(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldEQ(FieldTheme, v))
}

// PostAt applies equality check predicate on the "post_at" field. It's identical to PostAtEQ.
func PostAt(v time.Time) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldEQ(FieldPostAt, v))
}

// Likes applies equality check predicate on the "likes" field. It's identical to LikesEQ.
func Likes(v int) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldEQ(FieldLikes, v))
}

// Comments applies equality check predicate on the "comments" field. It's identical to CommentsEQ.
func Comments(v int) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldEQ(FieldComments, v))
}

// Reblogs applies equality check predicate on the "reblogs" field. It's identical to ReblogsEQ.
func Reblogs(v int) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldEQ(FieldReblogs, v))
}

// OwnerArtistID applies equality check predicate on the "owner_artist_id" field. It's identical to OwnerArtistIDEQ.
func OwnerArtistID(v int) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldEQ(FieldOwnerArtistID, v))
}

// OwnerMemberID applies equality check predicate on the "owner_member_id" field. It's identical to OwnerMemberIDEQ.
func OwnerMemberID(v int) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldEQ(FieldOwnerMemberID, v))
}

// CrawledAtEQ applies the EQ predicate on the "crawled_at" field.
func CrawledAtEQ(v time.Time) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldEQ(FieldCrawledAt, v))
}

// CrawledAtNEQ applies the NEQ predicate on the "crawled_at" field.
func CrawledAtNEQ(v time.Time) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldNEQ(FieldCrawledAt, v))
}

// CrawledAtIn applies the In predicate on the "crawled_at" field.
func CrawledAtIn(vs ...time.Time) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldIn(FieldCrawledAt, vs...))
}

// CrawledAtNotIn applies the NotIn predicate on the "crawled_at" field.
func CrawledAtNotIn(vs ...time.Time) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldNotIn(FieldCrawledAt, vs...))
}

// CrawledAtGT applies the GT predicate on the "crawled_at" field.
func CrawledAtGT(v time.Time) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldGT(FieldCrawledAt, v))
}

// CrawledAtGTE applies the GTE predicate on the "crawled_at" field.
func CrawledAtGTE(v time.Time) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldGTE(FieldCrawledAt, v))
}

// CrawledAtLT applies the LT predicate on the "crawled_at" field.
func CrawledAtLT(v time.Time) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldLT(FieldCrawledAt, v))
}

// CrawledAtLTE applies the LTE predicate on the "crawled_at" field.
func CrawledAtLTE(v time.Time) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldLTE(FieldCrawledAt, v))
}

// CrawledAtIsNil applies the IsNil predicate on the "crawled_at" field.
func CrawledAtIsNil() predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldIsNull(FieldCrawledAt))
}

// CrawledAtNotNil applies the NotNil predicate on the "crawled_at" field.
func CrawledAtNotNil() predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldNotNull(FieldCrawledAt))
}

// ErrorCountEQ applies the EQ predicate on the "error_count" field.
func ErrorCountEQ(v int) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldEQ(FieldErrorCount, v))
}

// ErrorCountNEQ applies the NEQ predicate on the "error_count" field.
func ErrorCountNEQ(v int) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldNEQ(FieldErrorCount, v))
}

// ErrorCountIn applies the In predicate on the "error_count" field.
func ErrorCountIn(vs ...int) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldIn(FieldErrorCount, vs...))
}

// ErrorCountNotIn applies the NotIn predicate on the "error_count" field.
func ErrorCountNotIn(vs ...int) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldNotIn(FieldErrorCount, vs...))
}

// ErrorCountGT applies the GT predicate on the "error_count" field.
func ErrorCountGT(v int) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldGT(FieldErrorCount, v))
}

// ErrorCountGTE applies the GTE predicate on the "error_count" field.
func ErrorCountGTE(v int) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldGTE(FieldErrorCount, v))
}

// ErrorCountLT applies the LT predicate on the "error_count" field.
func ErrorCountLT(v int) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldLT(FieldErrorCount, v))
}

// ErrorCountLTE applies the LTE predicate on the "error_count" field.
func ErrorCountLTE(v int) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldLTE(FieldErrorCount, v))
}

// ManuallyModifiedIsNil applies the IsNil predicate on the "manually_modified" field.
func ManuallyModifiedIsNil() predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldIsNull(FieldManuallyModified))
}

// ManuallyModifiedNotNil applies the NotNil predicate on the "manually_modified" field.
func ManuallyModifiedNotNil() predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldNotNull(FieldManuallyModified))
}

// LastErrorMessageEQ applies the EQ predicate on the "last_error_message" field.
func LastErrorMessageEQ(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldEQ(FieldLastErrorMessage, v))
}

// LastErrorMessageNEQ applies the NEQ predicate on the "last_error_message" field.
func LastErrorMessageNEQ(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldNEQ(FieldLastErrorMessage, v))
}

// LastErrorMessageIn applies the In predicate on the "last_error_message" field.
func LastErrorMessageIn(vs ...string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldIn(FieldLastErrorMessage, vs...))
}

// LastErrorMessageNotIn applies the NotIn predicate on the "last_error_message" field.
func LastErrorMessageNotIn(vs ...string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldNotIn(FieldLastErrorMessage, vs...))
}

// LastErrorMessageGT applies the GT predicate on the "last_error_message" field.
func LastErrorMessageGT(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldGT(FieldLastErrorMessage, v))
}

// LastErrorMessageGTE applies the GTE predicate on the "last_error_message" field.
func LastErrorMessageGTE(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldGTE(FieldLastErrorMessage, v))
}

// LastErrorMessageLT applies the LT predicate on the "last_error_message" field.
func LastErrorMessageLT(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldLT(FieldLastErrorMessage, v))
}

// LastErrorMessageLTE applies the LTE predicate on the "last_error_message" field.
func LastErrorMessageLTE(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldLTE(FieldLastErrorMessage, v))
}

// LastErrorMessageContains applies the Contains predicate on the "last_error_message" field.
func LastErrorMessageContains(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldContains(FieldLastErrorMessage, v))
}

// LastErrorMessageHasPrefix applies the HasPrefix predicate on the "last_error_message" field.
func LastErrorMessageHasPrefix(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldHasPrefix(FieldLastErrorMessage, v))
}

// LastErrorMessageHasSuffix applies the HasSuffix predicate on the "last_error_message" field.
func LastErrorMessageHasSuffix(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldHasSuffix(FieldLastErrorMessage, v))
}

// LastErrorMessageIsNil applies the IsNil predicate on the "last_error_message" field.
func LastErrorMessageIsNil() predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldIsNull(FieldLastErrorMessage))
}

// LastErrorMessageNotNil applies the NotNil predicate on the "last_error_message" field.
func LastErrorMessageNotNil() predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldNotNull(FieldLastErrorMessage))
}

// LastErrorMessageEqualFold applies the EqualFold predicate on the "last_error_message" field.
func LastErrorMessageEqualFold(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldEqualFold(FieldLastErrorMessage, v))
}

// LastErrorMessageContainsFold applies the ContainsFold predicate on the "last_error_message" field.
func LastErrorMessageContainsFold(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldContainsFold(FieldLastErrorMessage, v))
}

// RecrawlRequiredEQ applies the EQ predicate on the "recrawl_required" field.
func RecrawlRequiredEQ(v bool) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldEQ(FieldRecrawlRequired, v))
}

// RecrawlRequiredNEQ applies the NEQ predicate on the "recrawl_required" field.
func RecrawlRequiredNEQ(v bool) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldNEQ(FieldRecrawlRequired, v))
}

// RecrawlRequiredIsNil applies the IsNil predicate on the "recrawl_required" field.
func RecrawlRequiredIsNil() predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldIsNull(FieldRecrawlRequired))
}

// RecrawlRequiredNotNil applies the NotNil predicate on the "recrawl_required" field.
func RecrawlRequiredNotNil() predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldNotNull(FieldRecrawlRequired))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldNotNull(FieldUpdatedAt))
}

// PathEQ applies the EQ predicate on the "path" field.
func PathEQ(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldEQ(FieldPath, v))
}

// PathNEQ applies the NEQ predicate on the "path" field.
func PathNEQ(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldNEQ(FieldPath, v))
}

// PathIn applies the In predicate on the "path" field.
func PathIn(vs ...string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldIn(FieldPath, vs...))
}

// PathNotIn applies the NotIn predicate on the "path" field.
func PathNotIn(vs ...string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldNotIn(FieldPath, vs...))
}

// PathGT applies the GT predicate on the "path" field.
func PathGT(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldGT(FieldPath, v))
}

// PathGTE applies the GTE predicate on the "path" field.
func PathGTE(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldGTE(FieldPath, v))
}

// PathLT applies the LT predicate on the "path" field.
func PathLT(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldLT(FieldPath, v))
}

// PathLTE applies the LTE predicate on the "path" field.
func PathLTE(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldLTE(FieldPath, v))
}

// PathContains applies the Contains predicate on the "path" field.
func PathContains(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldContains(FieldPath, v))
}

// PathHasPrefix applies the HasPrefix predicate on the "path" field.
func PathHasPrefix(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldHasPrefix(FieldPath, v))
}

// PathHasSuffix applies the HasSuffix predicate on the "path" field.
func PathHasSuffix(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldHasSuffix(FieldPath, v))
}

// PathEqualFold applies the EqualFold predicate on the "path" field.
func PathEqualFold(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldEqualFold(FieldPath, v))
}

// PathContainsFold applies the ContainsFold predicate on the "path" field.
func PathContainsFold(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldContainsFold(FieldPath, v))
}

// NextPathEQ applies the EQ predicate on the "next_path" field.
func NextPathEQ(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldEQ(FieldNextPath, v))
}

// NextPathNEQ applies the NEQ predicate on the "next_path" field.
func NextPathNEQ(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldNEQ(FieldNextPath, v))
}

// NextPathIn applies the In predicate on the "next_path" field.
func NextPathIn(vs ...string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldIn(FieldNextPath, vs...))
}

// NextPathNotIn applies the NotIn predicate on the "next_path" field.
func NextPathNotIn(vs ...string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldNotIn(FieldNextPath, vs...))
}

// NextPathGT applies the GT predicate on the "next_path" field.
func NextPathGT(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldGT(FieldNextPath, v))
}

// NextPathGTE applies the GTE predicate on the "next_path" field.
func NextPathGTE(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldGTE(FieldNextPath, v))
}

// NextPathLT applies the LT predicate on the "next_path" field.
func NextPathLT(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldLT(FieldNextPath, v))
}

// NextPathLTE applies the LTE predicate on the "next_path" field.
func NextPathLTE(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldLTE(FieldNextPath, v))
}

// NextPathContains applies the Contains predicate on the "next_path" field.
func NextPathContains(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldContains(FieldNextPath, v))
}

// NextPathHasPrefix applies the HasPrefix predicate on the "next_path" field.
func NextPathHasPrefix(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldHasPrefix(FieldNextPath, v))
}

// NextPathHasSuffix applies the HasSuffix predicate on the "next_path" field.
func NextPathHasSuffix(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldHasSuffix(FieldNextPath, v))
}

// NextPathIsNil applies the IsNil predicate on the "next_path" field.
func NextPathIsNil() predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldIsNull(FieldNextPath))
}

// NextPathNotNil applies the NotNil predicate on the "next_path" field.
func NextPathNotNil() predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldNotNull(FieldNextPath))
}

// NextPathEqualFold applies the EqualFold predicate on the "next_path" field.
func NextPathEqualFold(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldEqualFold(FieldNextPath, v))
}

// NextPathContainsFold applies the ContainsFold predicate on the "next_path" field.
func NextPathContainsFold(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldContainsFold(FieldNextPath, v))
}

// PrevPathEQ applies the EQ predicate on the "prev_path" field.
func PrevPathEQ(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldEQ(FieldPrevPath, v))
}

// PrevPathNEQ applies the NEQ predicate on the "prev_path" field.
func PrevPathNEQ(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldNEQ(FieldPrevPath, v))
}

// PrevPathIn applies the In predicate on the "prev_path" field.
func PrevPathIn(vs ...string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldIn(FieldPrevPath, vs...))
}

// PrevPathNotIn applies the NotIn predicate on the "prev_path" field.
func PrevPathNotIn(vs ...string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldNotIn(FieldPrevPath, vs...))
}

// PrevPathGT applies the GT predicate on the "prev_path" field.
func PrevPathGT(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldGT(FieldPrevPath, v))
}

// PrevPathGTE applies the GTE predicate on the "prev_path" field.
func PrevPathGTE(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldGTE(FieldPrevPath, v))
}

// PrevPathLT applies the LT predicate on the "prev_path" field.
func PrevPathLT(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldLT(FieldPrevPath, v))
}

// PrevPathLTE applies the LTE predicate on the "prev_path" field.
func PrevPathLTE(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldLTE(FieldPrevPath, v))
}

// PrevPathContains applies the Contains predicate on the "prev_path" field.
func PrevPathContains(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldContains(FieldPrevPath, v))
}

// PrevPathHasPrefix applies the HasPrefix predicate on the "prev_path" field.
func PrevPathHasPrefix(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldHasPrefix(FieldPrevPath, v))
}

// PrevPathHasSuffix applies the HasSuffix predicate on the "prev_path" field.
func PrevPathHasSuffix(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldHasSuffix(FieldPrevPath, v))
}

// PrevPathIsNil applies the IsNil predicate on the "prev_path" field.
func PrevPathIsNil() predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldIsNull(FieldPrevPath))
}

// PrevPathNotNil applies the NotNil predicate on the "prev_path" field.
func PrevPathNotNil() predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldNotNull(FieldPrevPath))
}

// PrevPathEqualFold applies the EqualFold predicate on the "prev_path" field.
func PrevPathEqualFold(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldEqualFold(FieldPrevPath, v))
}

// PrevPathContainsFold applies the ContainsFold predicate on the "prev_path" field.
func PrevPathContainsFold(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldContainsFold(FieldPrevPath, v))
}

// ArtistKeyEQ applies the EQ predicate on the "artist_key" field.
func ArtistKeyEQ(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldEQ(FieldArtistKey, v))
}

// ArtistKeyNEQ applies the NEQ predicate on the "artist_key" field.
func ArtistKeyNEQ(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldNEQ(FieldArtistKey, v))
}

// ArtistKeyIn applies the In predicate on the "artist_key" field.
func ArtistKeyIn(vs ...string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldIn(FieldArtistKey, vs...))
}

// ArtistKeyNotIn applies the NotIn predicate on the "artist_key" field.
func ArtistKeyNotIn(vs ...string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldNotIn(FieldArtistKey, vs...))
}

// ArtistKeyGT applies the GT predicate on the "artist_key" field.
func ArtistKeyGT(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldGT(FieldArtistKey, v))
}

// ArtistKeyGTE applies the GTE predicate on the "artist_key" field.
func ArtistKeyGTE(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldGTE(FieldArtistKey, v))
}

// ArtistKeyLT applies the LT predicate on the "artist_key" field.
func ArtistKeyLT(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldLT(FieldArtistKey, v))
}

// ArtistKeyLTE applies the LTE predicate on the "artist_key" field.
func ArtistKeyLTE(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldLTE(FieldArtistKey, v))
}

// ArtistKeyContains applies the Contains predicate on the "artist_key" field.
func ArtistKeyContains(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldContains(FieldArtistKey, v))
}

// ArtistKeyHasPrefix applies the HasPrefix predicate on the "artist_key" field.
func ArtistKeyHasPrefix(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldHasPrefix(FieldArtistKey, v))
}

// ArtistKeyHasSuffix applies the HasSuffix predicate on the "artist_key" field.
func ArtistKeyHasSuffix(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldHasSuffix(FieldArtistKey, v))
}

// ArtistKeyEqualFold applies the EqualFold predicate on the "artist_key" field.
func ArtistKeyEqualFold(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldEqualFold(FieldArtistKey, v))
}

// ArtistKeyContainsFold applies the ContainsFold predicate on the "artist_key" field.
func ArtistKeyContainsFold(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldContainsFold(FieldArtistKey, v))
}

// MemberKeyEQ applies the EQ predicate on the "member_key" field.
func MemberKeyEQ(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldEQ(FieldMemberKey, v))
}

// MemberKeyNEQ applies the NEQ predicate on the "member_key" field.
func MemberKeyNEQ(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldNEQ(FieldMemberKey, v))
}

// MemberKeyIn applies the In predicate on the "member_key" field.
func MemberKeyIn(vs ...string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldIn(FieldMemberKey, vs...))
}

// MemberKeyNotIn applies the NotIn predicate on the "member_key" field.
func MemberKeyNotIn(vs ...string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldNotIn(FieldMemberKey, vs...))
}

// MemberKeyGT applies the GT predicate on the "member_key" field.
func MemberKeyGT(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldGT(FieldMemberKey, v))
}

// MemberKeyGTE applies the GTE predicate on the "member_key" field.
func MemberKeyGTE(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldGTE(FieldMemberKey, v))
}

// MemberKeyLT applies the LT predicate on the "member_key" field.
func MemberKeyLT(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldLT(FieldMemberKey, v))
}

// MemberKeyLTE applies the LTE predicate on the "member_key" field.
func MemberKeyLTE(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldLTE(FieldMemberKey, v))
}

// MemberKeyContains applies the Contains predicate on the "member_key" field.
func MemberKeyContains(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldContains(FieldMemberKey, v))
}

// MemberKeyHasPrefix applies the HasPrefix predicate on the "member_key" field.
func MemberKeyHasPrefix(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldHasPrefix(FieldMemberKey, v))
}

// MemberKeyHasSuffix applies the HasSuffix predicate on the "member_key" field.
func MemberKeyHasSuffix(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldHasSuffix(FieldMemberKey, v))
}

// MemberKeyIsNil applies the IsNil predicate on the "member_key" field.
func MemberKeyIsNil() predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldIsNull(FieldMemberKey))
}

// MemberKeyNotNil applies the NotNil predicate on the "member_key" field.
func MemberKeyNotNil() predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldNotNull(FieldMemberKey))
}

// MemberKeyEqualFold applies the EqualFold predicate on the "member_key" field.
func MemberKeyEqualFold(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldEqualFold(FieldMemberKey, v))
}

// MemberKeyContainsFold applies the ContainsFold predicate on the "member_key" field.
func MemberKeyContainsFold(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldContainsFold(FieldMemberKey, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldContainsFold(FieldTitle, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldContainsFold(FieldDescription, v))
}

// ThemeEQ applies the EQ predicate on the "theme" field.
func ThemeEQ(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldEQ(FieldTheme, v))
}

// ThemeNEQ applies the NEQ predicate on the "theme" field.
func ThemeNEQ(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldNEQ(FieldTheme, v))
}

// ThemeIn applies the In predicate on the "theme" field.
func ThemeIn(vs ...string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldIn(FieldTheme, vs...))
}

// ThemeNotIn applies the NotIn predicate on the "theme" field.
func ThemeNotIn(vs ...string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldNotIn(FieldTheme, vs...))
}

// ThemeGT applies the GT predicate on the "theme" field.
func ThemeGT(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldGT(FieldTheme, v))
}

// ThemeGTE applies the GTE predicate on the "theme" field.
func ThemeGTE(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldGTE(FieldTheme, v))
}

// ThemeLT applies the LT predicate on the "theme" field.
func ThemeLT(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldLT(FieldTheme, v))
}

// ThemeLTE applies the LTE predicate on the "theme" field.
func ThemeLTE(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldLTE(FieldTheme, v))
}

// ThemeContains applies the Contains predicate on the "theme" field.
func ThemeContains(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldContains(FieldTheme, v))
}

// ThemeHasPrefix applies the HasPrefix predicate on the "theme" field.
func ThemeHasPrefix(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldHasPrefix(FieldTheme, v))
}

// ThemeHasSuffix applies the HasSuffix predicate on the "theme" field.
func ThemeHasSuffix(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldHasSuffix(FieldTheme, v))
}

// ThemeIsNil applies the IsNil predicate on the "theme" field.
func ThemeIsNil() predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldIsNull(FieldTheme))
}

// ThemeNotNil applies the NotNil predicate on the "theme" field.
func ThemeNotNil() predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldNotNull(FieldTheme))
}

// ThemeEqualFold applies the EqualFold predicate on the "theme" field.
func ThemeEqualFold(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldEqualFold(FieldTheme, v))
}

// ThemeContainsFold applies the ContainsFold predicate on the "theme" field.
func ThemeContainsFold(v string) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldContainsFold(FieldTheme, v))
}

// PostAtEQ applies the EQ predicate on the "post_at" field.
func PostAtEQ(v time.Time) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldEQ(FieldPostAt, v))
}

// PostAtNEQ applies the NEQ predicate on the "post_at" field.
func PostAtNEQ(v time.Time) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldNEQ(FieldPostAt, v))
}

// PostAtIn applies the In predicate on the "post_at" field.
func PostAtIn(vs ...time.Time) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldIn(FieldPostAt, vs...))
}

// PostAtNotIn applies the NotIn predicate on the "post_at" field.
func PostAtNotIn(vs ...time.Time) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldNotIn(FieldPostAt, vs...))
}

// PostAtGT applies the GT predicate on the "post_at" field.
func PostAtGT(v time.Time) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldGT(FieldPostAt, v))
}

// PostAtGTE applies the GTE predicate on the "post_at" field.
func PostAtGTE(v time.Time) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldGTE(FieldPostAt, v))
}

// PostAtLT applies the LT predicate on the "post_at" field.
func PostAtLT(v time.Time) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldLT(FieldPostAt, v))
}

// PostAtLTE applies the LTE predicate on the "post_at" field.
func PostAtLTE(v time.Time) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldLTE(FieldPostAt, v))
}

// SourceEQ applies the EQ predicate on the "source" field.
func SourceEQ(v Source) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldEQ(FieldSource, v))
}

// SourceNEQ applies the NEQ predicate on the "source" field.
func SourceNEQ(v Source) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldNEQ(FieldSource, v))
}

// SourceIn applies the In predicate on the "source" field.
func SourceIn(vs ...Source) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldIn(FieldSource, vs...))
}

// SourceNotIn applies the NotIn predicate on the "source" field.
func SourceNotIn(vs ...Source) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldNotIn(FieldSource, vs...))
}

// ImagesIsNil applies the IsNil predicate on the "images" field.
func ImagesIsNil() predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldIsNull(FieldImages))
}

// ImagesNotNil applies the NotNil predicate on the "images" field.
func ImagesNotNil() predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldNotNull(FieldImages))
}

// LikesEQ applies the EQ predicate on the "likes" field.
func LikesEQ(v int) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldEQ(FieldLikes, v))
}

// LikesNEQ applies the NEQ predicate on the "likes" field.
func LikesNEQ(v int) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldNEQ(FieldLikes, v))
}

// LikesIn applies the In predicate on the "likes" field.
func LikesIn(vs ...int) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldIn(FieldLikes, vs...))
}

// LikesNotIn applies the NotIn predicate on the "likes" field.
func LikesNotIn(vs ...int) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldNotIn(FieldLikes, vs...))
}

// LikesGT applies the GT predicate on the "likes" field.
func LikesGT(v int) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldGT(FieldLikes, v))
}

// LikesGTE applies the GTE predicate on the "likes" field.
func LikesGTE(v int) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldGTE(FieldLikes, v))
}

// LikesLT applies the LT predicate on the "likes" field.
func LikesLT(v int) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldLT(FieldLikes, v))
}

// LikesLTE applies the LTE predicate on the "likes" field.
func LikesLTE(v int) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldLTE(FieldLikes, v))
}

// LikesIsNil applies the IsNil predicate on the "likes" field.
func LikesIsNil() predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldIsNull(FieldLikes))
}

// LikesNotNil applies the NotNil predicate on the "likes" field.
func LikesNotNil() predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldNotNull(FieldLikes))
}

// CommentsEQ applies the EQ predicate on the "comments" field.
func CommentsEQ(v int) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldEQ(FieldComments, v))
}

// CommentsNEQ applies the NEQ predicate on the "comments" field.
func CommentsNEQ(v int) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldNEQ(FieldComments, v))
}

// CommentsIn applies the In predicate on the "comments" field.
func CommentsIn(vs ...int) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldIn(FieldComments, vs...))
}

// CommentsNotIn applies the NotIn predicate on the "comments" field.
func CommentsNotIn(vs ...int) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldNotIn(FieldComments, vs...))
}

// CommentsGT applies the GT predicate on the "comments" field.
func CommentsGT(v int) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldGT(FieldComments, v))
}

// CommentsGTE applies the GTE predicate on the "comments" field.
func CommentsGTE(v int) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldGTE(FieldComments, v))
}

// CommentsLT applies the LT predicate on the "comments" field.
func CommentsLT(v int) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldLT(FieldComments, v))
}

// CommentsLTE applies the LTE predicate on the "comments" field.
func CommentsLTE(v int) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldLTE(FieldComments, v))
}

// CommentsIsNil applies the IsNil predicate on the "comments" field.
func CommentsIsNil() predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldIsNull(FieldComments))
}

// CommentsNotNil applies the NotNil predicate on the "comments" field.
func CommentsNotNil() predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldNotNull(FieldComments))
}

// ReblogsEQ applies the EQ predicate on the "reblogs" field.
func ReblogsEQ(v int) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldEQ(FieldReblogs, v))
}

// ReblogsNEQ applies the NEQ predicate on the "reblogs" field.
func ReblogsNEQ(v int) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldNEQ(FieldReblogs, v))
}

// ReblogsIn applies the In predicate on the "reblogs" field.
func ReblogsIn(vs ...int) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldIn(FieldReblogs, vs...))
}

// ReblogsNotIn applies the NotIn predicate on the "reblogs" field.
func ReblogsNotIn(vs ...int) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldNotIn(FieldReblogs, vs...))
}

// ReblogsGT applies the GT predicate on the "reblogs" field.
func ReblogsGT(v int) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldGT(FieldReblogs, v))
}

// ReblogsGTE applies the GTE predicate on the "reblogs" field.
func ReblogsGTE(v int) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldGTE(FieldReblogs, v))
}

// ReblogsLT applies the LT predicate on the "reblogs" field.
func ReblogsLT(v int) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldLT(FieldReblogs, v))
}

// ReblogsLTE applies the LTE predicate on the "reblogs" field.
func ReblogsLTE(v int) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldLTE(FieldReblogs, v))
}

// ReblogsIsNil applies the IsNil predicate on the "reblogs" field.
func ReblogsIsNil() predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldIsNull(FieldReblogs))
}

// ReblogsNotNil applies the NotNil predicate on the "reblogs" field.
func ReblogsNotNil() predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldNotNull(FieldReblogs))
}

// OwnerArtistIDEQ applies the EQ predicate on the "owner_artist_id" field.
func OwnerArtistIDEQ(v int) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldEQ(FieldOwnerArtistID, v))
}

// OwnerArtistIDNEQ applies the NEQ predicate on the "owner_artist_id" field.
func OwnerArtistIDNEQ(v int) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldNEQ(FieldOwnerArtistID, v))
}

// OwnerArtistIDIn applies the In predicate on the "owner_artist_id" field.
func OwnerArtistIDIn(vs ...int) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldIn(FieldOwnerArtistID, vs...))
}

// OwnerArtistIDNotIn applies the NotIn predicate on the "owner_artist_id" field.
func OwnerArtistIDNotIn(vs ...int) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldNotIn(FieldOwnerArtistID, vs...))
}

// OwnerArtistIDIsNil applies the IsNil predicate on the "owner_artist_id" field.
func OwnerArtistIDIsNil() predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldIsNull(FieldOwnerArtistID))
}

// OwnerArtistIDNotNil applies the NotNil predicate on the "owner_artist_id" field.
func OwnerArtistIDNotNil() predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldNotNull(FieldOwnerArtistID))
}

// OwnerMemberIDEQ applies the EQ predicate on the "owner_member_id" field.
func OwnerMemberIDEQ(v int) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldEQ(FieldOwnerMemberID, v))
}

// OwnerMemberIDNEQ applies the NEQ predicate on the "owner_member_id" field.
func OwnerMemberIDNEQ(v int) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldNEQ(FieldOwnerMemberID, v))
}

// OwnerMemberIDIn applies the In predicate on the "owner_member_id" field.
func OwnerMemberIDIn(vs ...int) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldIn(FieldOwnerMemberID, vs...))
}

// OwnerMemberIDNotIn applies the NotIn predicate on the "owner_member_id" field.
func OwnerMemberIDNotIn(vs ...int) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldNotIn(FieldOwnerMemberID, vs...))
}

// OwnerMemberIDIsNil applies the IsNil predicate on the "owner_member_id" field.
func OwnerMemberIDIsNil() predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldIsNull(FieldOwnerMemberID))
}

// OwnerMemberIDNotNil applies the NotNil predicate on the "owner_member_id" field.
func OwnerMemberIDNotNil() predicate.HPAmebloPost {
	return predicate.HPAmebloPost(sql.FieldNotNull(FieldOwnerMemberID))
}

// HasOwnerArtist applies the HasEdge predicate on the "owner_artist" edge.
func HasOwnerArtist() predicate.HPAmebloPost {
	return predicate.HPAmebloPost(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerArtistTable, OwnerArtistColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerArtistWith applies the HasEdge predicate on the "owner_artist" edge with a given conditions (other predicates).
func HasOwnerArtistWith(preds ...predicate.HPArtist) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(func(s *sql.Selector) {
		step := newOwnerArtistStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOwnerMember applies the HasEdge predicate on the "owner_member" edge.
func HasOwnerMember() predicate.HPAmebloPost {
	return predicate.HPAmebloPost(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerMemberTable, OwnerMemberColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerMemberWith applies the HasEdge predicate on the "owner_member" edge with a given conditions (other predicates).
func HasOwnerMemberWith(preds ...predicate.HPMember) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(func(s *sql.Selector) {
		step := newOwnerMemberStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTaggedArtists applies the HasEdge predicate on the "tagged_artists" edge.
func HasTaggedArtists() predicate.HPAmebloPost {
	return predicate.HPAmebloPost(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, TaggedArtistsTable, TaggedArtistsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTaggedArtistsWith applies the HasEdge predicate on the "tagged_artists" edge with a given conditions (other predicates).
func HasTaggedArtistsWith(preds ...predicate.HPArtist) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(func(s *sql.Selector) {
		step := newTaggedArtistsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTaggedMembers applies the HasEdge predicate on the "tagged_members" edge.
func HasTaggedMembers() predicate.HPAmebloPost {
	return predicate.HPAmebloPost(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, TaggedMembersTable, TaggedMembersPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTaggedMembersWith applies the HasEdge predicate on the "tagged_members" edge with a given conditions (other predicates).
func HasTaggedMembersWith(preds ...predicate.HPMember) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(func(s *sql.Selector) {
		step := newTaggedMembersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAsset applies the HasEdge predicate on the "asset" edge.
func HasAsset() predicate.HPAmebloPost {
	return predicate.HPAmebloPost(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AssetTable, AssetColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAssetWith applies the HasEdge predicate on the "asset" edge with a given conditions (other predicates).
func HasAssetWith(preds ...predicate.HPAsset) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(func(s *sql.Selector) {
		step := newAssetStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBlobs applies the HasEdge predicate on the "blobs" edge.
func HasBlobs() predicate.HPAmebloPost {
	return predicate.HPAmebloPost(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, BlobsTable, BlobsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBlobsWith applies the HasEdge predicate on the "blobs" edge with a given conditions (other predicates).
func HasBlobsWith(preds ...predicate.HPBlob) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(func(s *sql.Selector) {
		step := newBlobsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.HPAmebloPost) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.HPAmebloPost) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.HPAmebloPost) predicate.HPAmebloPost {
	return predicate.HPAmebloPost(func(s *sql.Selector) {
		p(s.Not())
	})
}
