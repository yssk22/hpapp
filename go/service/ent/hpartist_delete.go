// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"hpapp.yssk22.dev/go/service/ent/hpartist"
	"hpapp.yssk22.dev/go/service/ent/predicate"
)

// HPArtistDelete is the builder for deleting a HPArtist entity.
type HPArtistDelete struct {
	config
	hooks    []Hook
	mutation *HPArtistMutation
}

// Where appends a list predicates to the HPArtistDelete builder.
func (had *HPArtistDelete) Where(ps ...predicate.HPArtist) *HPArtistDelete {
	had.mutation.Where(ps...)
	return had
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (had *HPArtistDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, HPArtistMutation](ctx, had.sqlExec, had.mutation, had.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (had *HPArtistDelete) ExecX(ctx context.Context) int {
	n, err := had.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (had *HPArtistDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(hpartist.Table, sqlgraph.NewFieldSpec(hpartist.FieldID, field.TypeInt))
	if ps := had.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, had.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	had.mutation.done = true
	return affected, err
}

// HPArtistDeleteOne is the builder for deleting a single HPArtist entity.
type HPArtistDeleteOne struct {
	had *HPArtistDelete
}

// Where appends a list predicates to the HPArtistDelete builder.
func (hado *HPArtistDeleteOne) Where(ps ...predicate.HPArtist) *HPArtistDeleteOne {
	hado.had.mutation.Where(ps...)
	return hado
}

// Exec executes the deletion query.
func (hado *HPArtistDeleteOne) Exec(ctx context.Context) error {
	n, err := hado.had.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{hpartist.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (hado *HPArtistDeleteOne) ExecX(ctx context.Context) {
	if err := hado.Exec(ctx); err != nil {
		panic(err)
	}
}
