// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/yssk22/hpapp/go/service/ent/hpelineupmallitem"
	"github.com/yssk22/hpapp/go/service/schema/enums"
	"github.com/yssk22/hpapp/go/service/schema/jsonfields"
)

// HPElineupMallItem is the model entity for the HPElineupMallItem schema.
type HPElineupMallItem struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CrawledAt holds the value of the "crawled_at" field.
	CrawledAt *time.Time `json:"crawled_at,omitempty"`
	// ErrorCount holds the value of the "error_count" field.
	ErrorCount int `json:"error_count,omitempty"`
	// ManuallyModified holds the value of the "manually_modified" field.
	ManuallyModified *jsonfields.ManuallyModified `json:"manually_modified,omitempty"`
	// LastErrorMessage holds the value of the "last_error_message" field.
	LastErrorMessage *string `json:"last_error_message,omitempty"`
	// RecrawlRequired holds the value of the "recrawl_required" field.
	RecrawlRequired bool `json:"recrawl_required,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Permalink holds the value of the "permalink" field.
	Permalink string `json:"permalink,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Supplier holds the value of the "supplier" field.
	Supplier string `json:"supplier,omitempty"`
	// Price holds the value of the "price" field.
	Price int `json:"price,omitempty"`
	// IsLimitedToFc holds the value of the "is_limited_to_fc" field.
	IsLimitedToFc bool `json:"is_limited_to_fc,omitempty"`
	// IsOutOfStock holds the value of the "is_out_of_stock" field.
	IsOutOfStock bool `json:"is_out_of_stock,omitempty"`
	// Images holds the value of the "images" field.
	Images []jsonfields.Media `json:"images,omitempty"`
	// Category holds the value of the "category" field.
	Category enums.HPElineupMallItemCategory `json:"category,omitempty"`
	// OrderStartAt holds the value of the "order_start_at" field.
	OrderStartAt *time.Time `json:"order_start_at,omitempty"`
	// OrderEndAt holds the value of the "order_end_at" field.
	OrderEndAt *time.Time `json:"order_end_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HPElineupMallItemQuery when eager-loading is set.
	Edges        HPElineupMallItemEdges `json:"edges"`
	selectValues sql.SelectValues
}

// HPElineupMallItemEdges holds the relations/edges for other nodes in the graph.
type HPElineupMallItemEdges struct {
	// TaggedArtists holds the value of the tagged_artists edge.
	TaggedArtists []*HPArtist `json:"tagged_artists,omitempty"`
	// TaggedMembers holds the value of the tagged_members edge.
	TaggedMembers []*HPMember `json:"tagged_members,omitempty"`
	// PurchaseHistories holds the value of the purchase_histories edge.
	PurchaseHistories []*HPElineupMallItemPurchaseHistory `json:"purchase_histories,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedTaggedArtists     map[string][]*HPArtist
	namedTaggedMembers     map[string][]*HPMember
	namedPurchaseHistories map[string][]*HPElineupMallItemPurchaseHistory
}

// TaggedArtistsOrErr returns the TaggedArtists value or an error if the edge
// was not loaded in eager-loading.
func (e HPElineupMallItemEdges) TaggedArtistsOrErr() ([]*HPArtist, error) {
	if e.loadedTypes[0] {
		return e.TaggedArtists, nil
	}
	return nil, &NotLoadedError{edge: "tagged_artists"}
}

// TaggedMembersOrErr returns the TaggedMembers value or an error if the edge
// was not loaded in eager-loading.
func (e HPElineupMallItemEdges) TaggedMembersOrErr() ([]*HPMember, error) {
	if e.loadedTypes[1] {
		return e.TaggedMembers, nil
	}
	return nil, &NotLoadedError{edge: "tagged_members"}
}

// PurchaseHistoriesOrErr returns the PurchaseHistories value or an error if the edge
// was not loaded in eager-loading.
func (e HPElineupMallItemEdges) PurchaseHistoriesOrErr() ([]*HPElineupMallItemPurchaseHistory, error) {
	if e.loadedTypes[2] {
		return e.PurchaseHistories, nil
	}
	return nil, &NotLoadedError{edge: "purchase_histories"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*HPElineupMallItem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case hpelineupmallitem.FieldManuallyModified, hpelineupmallitem.FieldImages:
			values[i] = new([]byte)
		case hpelineupmallitem.FieldRecrawlRequired, hpelineupmallitem.FieldIsLimitedToFc, hpelineupmallitem.FieldIsOutOfStock:
			values[i] = new(sql.NullBool)
		case hpelineupmallitem.FieldID, hpelineupmallitem.FieldErrorCount, hpelineupmallitem.FieldPrice:
			values[i] = new(sql.NullInt64)
		case hpelineupmallitem.FieldLastErrorMessage, hpelineupmallitem.FieldPermalink, hpelineupmallitem.FieldName, hpelineupmallitem.FieldDescription, hpelineupmallitem.FieldSupplier, hpelineupmallitem.FieldCategory:
			values[i] = new(sql.NullString)
		case hpelineupmallitem.FieldCrawledAt, hpelineupmallitem.FieldCreatedAt, hpelineupmallitem.FieldUpdatedAt, hpelineupmallitem.FieldOrderStartAt, hpelineupmallitem.FieldOrderEndAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the HPElineupMallItem fields.
func (hemi *HPElineupMallItem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case hpelineupmallitem.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			hemi.ID = int(value.Int64)
		case hpelineupmallitem.FieldCrawledAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field crawled_at", values[i])
			} else if value.Valid {
				hemi.CrawledAt = new(time.Time)
				*hemi.CrawledAt = value.Time
			}
		case hpelineupmallitem.FieldErrorCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field error_count", values[i])
			} else if value.Valid {
				hemi.ErrorCount = int(value.Int64)
			}
		case hpelineupmallitem.FieldManuallyModified:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field manually_modified", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &hemi.ManuallyModified); err != nil {
					return fmt.Errorf("unmarshal field manually_modified: %w", err)
				}
			}
		case hpelineupmallitem.FieldLastErrorMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_error_message", values[i])
			} else if value.Valid {
				hemi.LastErrorMessage = new(string)
				*hemi.LastErrorMessage = value.String
			}
		case hpelineupmallitem.FieldRecrawlRequired:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field recrawl_required", values[i])
			} else if value.Valid {
				hemi.RecrawlRequired = value.Bool
			}
		case hpelineupmallitem.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				hemi.CreatedAt = value.Time
			}
		case hpelineupmallitem.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				hemi.UpdatedAt = value.Time
			}
		case hpelineupmallitem.FieldPermalink:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field permalink", values[i])
			} else if value.Valid {
				hemi.Permalink = value.String
			}
		case hpelineupmallitem.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				hemi.Name = value.String
			}
		case hpelineupmallitem.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				hemi.Description = value.String
			}
		case hpelineupmallitem.FieldSupplier:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field supplier", values[i])
			} else if value.Valid {
				hemi.Supplier = value.String
			}
		case hpelineupmallitem.FieldPrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				hemi.Price = int(value.Int64)
			}
		case hpelineupmallitem.FieldIsLimitedToFc:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_limited_to_fc", values[i])
			} else if value.Valid {
				hemi.IsLimitedToFc = value.Bool
			}
		case hpelineupmallitem.FieldIsOutOfStock:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_out_of_stock", values[i])
			} else if value.Valid {
				hemi.IsOutOfStock = value.Bool
			}
		case hpelineupmallitem.FieldImages:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field images", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &hemi.Images); err != nil {
					return fmt.Errorf("unmarshal field images: %w", err)
				}
			}
		case hpelineupmallitem.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				hemi.Category = enums.HPElineupMallItemCategory(value.String)
			}
		case hpelineupmallitem.FieldOrderStartAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field order_start_at", values[i])
			} else if value.Valid {
				hemi.OrderStartAt = new(time.Time)
				*hemi.OrderStartAt = value.Time
			}
		case hpelineupmallitem.FieldOrderEndAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field order_end_at", values[i])
			} else if value.Valid {
				hemi.OrderEndAt = new(time.Time)
				*hemi.OrderEndAt = value.Time
			}
		default:
			hemi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the HPElineupMallItem.
// This includes values selected through modifiers, order, etc.
func (hemi *HPElineupMallItem) Value(name string) (ent.Value, error) {
	return hemi.selectValues.Get(name)
}

// QueryTaggedArtists queries the "tagged_artists" edge of the HPElineupMallItem entity.
func (hemi *HPElineupMallItem) QueryTaggedArtists() *HPArtistQuery {
	return NewHPElineupMallItemClient(hemi.config).QueryTaggedArtists(hemi)
}

// QueryTaggedMembers queries the "tagged_members" edge of the HPElineupMallItem entity.
func (hemi *HPElineupMallItem) QueryTaggedMembers() *HPMemberQuery {
	return NewHPElineupMallItemClient(hemi.config).QueryTaggedMembers(hemi)
}

// QueryPurchaseHistories queries the "purchase_histories" edge of the HPElineupMallItem entity.
func (hemi *HPElineupMallItem) QueryPurchaseHistories() *HPElineupMallItemPurchaseHistoryQuery {
	return NewHPElineupMallItemClient(hemi.config).QueryPurchaseHistories(hemi)
}

// Update returns a builder for updating this HPElineupMallItem.
// Note that you need to call HPElineupMallItem.Unwrap() before calling this method if this HPElineupMallItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (hemi *HPElineupMallItem) Update() *HPElineupMallItemUpdateOne {
	return NewHPElineupMallItemClient(hemi.config).UpdateOne(hemi)
}

// Unwrap unwraps the HPElineupMallItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (hemi *HPElineupMallItem) Unwrap() *HPElineupMallItem {
	_tx, ok := hemi.config.driver.(*txDriver)
	if !ok {
		panic("ent: HPElineupMallItem is not a transactional entity")
	}
	hemi.config.driver = _tx.drv
	return hemi
}

// String implements the fmt.Stringer.
func (hemi *HPElineupMallItem) String() string {
	var builder strings.Builder
	builder.WriteString("HPElineupMallItem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", hemi.ID))
	if v := hemi.CrawledAt; v != nil {
		builder.WriteString("crawled_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("error_count=")
	builder.WriteString(fmt.Sprintf("%v", hemi.ErrorCount))
	builder.WriteString(", ")
	builder.WriteString("manually_modified=")
	builder.WriteString(fmt.Sprintf("%v", hemi.ManuallyModified))
	builder.WriteString(", ")
	if v := hemi.LastErrorMessage; v != nil {
		builder.WriteString("last_error_message=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("recrawl_required=")
	builder.WriteString(fmt.Sprintf("%v", hemi.RecrawlRequired))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(hemi.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(hemi.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("permalink=")
	builder.WriteString(hemi.Permalink)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(hemi.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(hemi.Description)
	builder.WriteString(", ")
	builder.WriteString("supplier=")
	builder.WriteString(hemi.Supplier)
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", hemi.Price))
	builder.WriteString(", ")
	builder.WriteString("is_limited_to_fc=")
	builder.WriteString(fmt.Sprintf("%v", hemi.IsLimitedToFc))
	builder.WriteString(", ")
	builder.WriteString("is_out_of_stock=")
	builder.WriteString(fmt.Sprintf("%v", hemi.IsOutOfStock))
	builder.WriteString(", ")
	builder.WriteString("images=")
	builder.WriteString(fmt.Sprintf("%v", hemi.Images))
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(fmt.Sprintf("%v", hemi.Category))
	builder.WriteString(", ")
	if v := hemi.OrderStartAt; v != nil {
		builder.WriteString("order_start_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := hemi.OrderEndAt; v != nil {
		builder.WriteString("order_end_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// NamedTaggedArtists returns the TaggedArtists named value or an error if the edge was not
// loaded in eager-loading with this name.
func (hemi *HPElineupMallItem) NamedTaggedArtists(name string) ([]*HPArtist, error) {
	if hemi.Edges.namedTaggedArtists == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := hemi.Edges.namedTaggedArtists[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (hemi *HPElineupMallItem) appendNamedTaggedArtists(name string, edges ...*HPArtist) {
	if hemi.Edges.namedTaggedArtists == nil {
		hemi.Edges.namedTaggedArtists = make(map[string][]*HPArtist)
	}
	if len(edges) == 0 {
		hemi.Edges.namedTaggedArtists[name] = []*HPArtist{}
	} else {
		hemi.Edges.namedTaggedArtists[name] = append(hemi.Edges.namedTaggedArtists[name], edges...)
	}
}

// NamedTaggedMembers returns the TaggedMembers named value or an error if the edge was not
// loaded in eager-loading with this name.
func (hemi *HPElineupMallItem) NamedTaggedMembers(name string) ([]*HPMember, error) {
	if hemi.Edges.namedTaggedMembers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := hemi.Edges.namedTaggedMembers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (hemi *HPElineupMallItem) appendNamedTaggedMembers(name string, edges ...*HPMember) {
	if hemi.Edges.namedTaggedMembers == nil {
		hemi.Edges.namedTaggedMembers = make(map[string][]*HPMember)
	}
	if len(edges) == 0 {
		hemi.Edges.namedTaggedMembers[name] = []*HPMember{}
	} else {
		hemi.Edges.namedTaggedMembers[name] = append(hemi.Edges.namedTaggedMembers[name], edges...)
	}
}

// NamedPurchaseHistories returns the PurchaseHistories named value or an error if the edge was not
// loaded in eager-loading with this name.
func (hemi *HPElineupMallItem) NamedPurchaseHistories(name string) ([]*HPElineupMallItemPurchaseHistory, error) {
	if hemi.Edges.namedPurchaseHistories == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := hemi.Edges.namedPurchaseHistories[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (hemi *HPElineupMallItem) appendNamedPurchaseHistories(name string, edges ...*HPElineupMallItemPurchaseHistory) {
	if hemi.Edges.namedPurchaseHistories == nil {
		hemi.Edges.namedPurchaseHistories = make(map[string][]*HPElineupMallItemPurchaseHistory)
	}
	if len(edges) == 0 {
		hemi.Edges.namedPurchaseHistories[name] = []*HPElineupMallItemPurchaseHistory{}
	} else {
		hemi.Edges.namedPurchaseHistories[name] = append(hemi.Edges.namedPurchaseHistories[name], edges...)
	}
}

// HPElineupMallItems is a parsable slice of HPElineupMallItem.
type HPElineupMallItems []*HPElineupMallItem
