// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/yssk22/hpapp/go/service/ent/hpelineupmallitem"
	"github.com/yssk22/hpapp/go/service/ent/hpelineupmallitempurchasehistory"
	"github.com/yssk22/hpapp/go/service/ent/user"
)

// HPElineupMallItemPurchaseHistory is the model entity for the HPElineupMallItemPurchaseHistory schema.
type HPElineupMallItemPurchaseHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// OrderID holds the value of the "order_id" field.
	OrderID string `json:"order_id,omitempty"`
	// Num holds the value of the "num" field.
	Num int `json:"num,omitempty"`
	// Price holds the value of the "price" field.
	Price int `json:"price,omitempty"`
	// OrderedAt holds the value of the "ordered_at" field.
	OrderedAt time.Time `json:"ordered_at,omitempty"`
	// Permalink holds the value of the "permalink" field.
	Permalink string `json:"permalink,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// PurchasedItemID holds the value of the "purchased_item_id" field.
	PurchasedItemID *int `json:"purchased_item_id,omitempty"`
	// OwnerUserID holds the value of the "owner_user_id" field.
	OwnerUserID int `json:"owner_user_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HPElineupMallItemPurchaseHistoryQuery when eager-loading is set.
	Edges        HPElineupMallItemPurchaseHistoryEdges `json:"edges"`
	selectValues sql.SelectValues
}

// HPElineupMallItemPurchaseHistoryEdges holds the relations/edges for other nodes in the graph.
type HPElineupMallItemPurchaseHistoryEdges struct {
	// ElineupMallItem holds the value of the elineup_mall_item edge.
	ElineupMallItem *HPElineupMallItem `json:"elineup_mall_item,omitempty"`
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// ElineupMallItemOrErr returns the ElineupMallItem value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HPElineupMallItemPurchaseHistoryEdges) ElineupMallItemOrErr() (*HPElineupMallItem, error) {
	if e.loadedTypes[0] {
		if e.ElineupMallItem == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: hpelineupmallitem.Label}
		}
		return e.ElineupMallItem, nil
	}
	return nil, &NotLoadedError{edge: "elineup_mall_item"}
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HPElineupMallItemPurchaseHistoryEdges) OwnerOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.Owner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*HPElineupMallItemPurchaseHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case hpelineupmallitempurchasehistory.FieldID, hpelineupmallitempurchasehistory.FieldNum, hpelineupmallitempurchasehistory.FieldPrice, hpelineupmallitempurchasehistory.FieldPurchasedItemID, hpelineupmallitempurchasehistory.FieldOwnerUserID:
			values[i] = new(sql.NullInt64)
		case hpelineupmallitempurchasehistory.FieldOrderID, hpelineupmallitempurchasehistory.FieldPermalink, hpelineupmallitempurchasehistory.FieldName:
			values[i] = new(sql.NullString)
		case hpelineupmallitempurchasehistory.FieldCreatedAt, hpelineupmallitempurchasehistory.FieldUpdatedAt, hpelineupmallitempurchasehistory.FieldOrderedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the HPElineupMallItemPurchaseHistory fields.
func (hemiph *HPElineupMallItemPurchaseHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case hpelineupmallitempurchasehistory.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			hemiph.ID = int(value.Int64)
		case hpelineupmallitempurchasehistory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				hemiph.CreatedAt = value.Time
			}
		case hpelineupmallitempurchasehistory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				hemiph.UpdatedAt = value.Time
			}
		case hpelineupmallitempurchasehistory.FieldOrderID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field order_id", values[i])
			} else if value.Valid {
				hemiph.OrderID = value.String
			}
		case hpelineupmallitempurchasehistory.FieldNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field num", values[i])
			} else if value.Valid {
				hemiph.Num = int(value.Int64)
			}
		case hpelineupmallitempurchasehistory.FieldPrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				hemiph.Price = int(value.Int64)
			}
		case hpelineupmallitempurchasehistory.FieldOrderedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ordered_at", values[i])
			} else if value.Valid {
				hemiph.OrderedAt = value.Time
			}
		case hpelineupmallitempurchasehistory.FieldPermalink:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field permalink", values[i])
			} else if value.Valid {
				hemiph.Permalink = value.String
			}
		case hpelineupmallitempurchasehistory.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				hemiph.Name = value.String
			}
		case hpelineupmallitempurchasehistory.FieldPurchasedItemID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field purchased_item_id", values[i])
			} else if value.Valid {
				hemiph.PurchasedItemID = new(int)
				*hemiph.PurchasedItemID = int(value.Int64)
			}
		case hpelineupmallitempurchasehistory.FieldOwnerUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field owner_user_id", values[i])
			} else if value.Valid {
				hemiph.OwnerUserID = int(value.Int64)
			}
		default:
			hemiph.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the HPElineupMallItemPurchaseHistory.
// This includes values selected through modifiers, order, etc.
func (hemiph *HPElineupMallItemPurchaseHistory) Value(name string) (ent.Value, error) {
	return hemiph.selectValues.Get(name)
}

// QueryElineupMallItem queries the "elineup_mall_item" edge of the HPElineupMallItemPurchaseHistory entity.
func (hemiph *HPElineupMallItemPurchaseHistory) QueryElineupMallItem() *HPElineupMallItemQuery {
	return NewHPElineupMallItemPurchaseHistoryClient(hemiph.config).QueryElineupMallItem(hemiph)
}

// QueryOwner queries the "owner" edge of the HPElineupMallItemPurchaseHistory entity.
func (hemiph *HPElineupMallItemPurchaseHistory) QueryOwner() *UserQuery {
	return NewHPElineupMallItemPurchaseHistoryClient(hemiph.config).QueryOwner(hemiph)
}

// Update returns a builder for updating this HPElineupMallItemPurchaseHistory.
// Note that you need to call HPElineupMallItemPurchaseHistory.Unwrap() before calling this method if this HPElineupMallItemPurchaseHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (hemiph *HPElineupMallItemPurchaseHistory) Update() *HPElineupMallItemPurchaseHistoryUpdateOne {
	return NewHPElineupMallItemPurchaseHistoryClient(hemiph.config).UpdateOne(hemiph)
}

// Unwrap unwraps the HPElineupMallItemPurchaseHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (hemiph *HPElineupMallItemPurchaseHistory) Unwrap() *HPElineupMallItemPurchaseHistory {
	_tx, ok := hemiph.config.driver.(*txDriver)
	if !ok {
		panic("ent: HPElineupMallItemPurchaseHistory is not a transactional entity")
	}
	hemiph.config.driver = _tx.drv
	return hemiph
}

// String implements the fmt.Stringer.
func (hemiph *HPElineupMallItemPurchaseHistory) String() string {
	var builder strings.Builder
	builder.WriteString("HPElineupMallItemPurchaseHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", hemiph.ID))
	builder.WriteString("created_at=")
	builder.WriteString(hemiph.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(hemiph.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("order_id=")
	builder.WriteString(hemiph.OrderID)
	builder.WriteString(", ")
	builder.WriteString("num=")
	builder.WriteString(fmt.Sprintf("%v", hemiph.Num))
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", hemiph.Price))
	builder.WriteString(", ")
	builder.WriteString("ordered_at=")
	builder.WriteString(hemiph.OrderedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("permalink=")
	builder.WriteString(hemiph.Permalink)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(hemiph.Name)
	builder.WriteString(", ")
	if v := hemiph.PurchasedItemID; v != nil {
		builder.WriteString("purchased_item_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("owner_user_id=")
	builder.WriteString(fmt.Sprintf("%v", hemiph.OwnerUserID))
	builder.WriteByte(')')
	return builder.String()
}

// HPElineupMallItemPurchaseHistories is a parsable slice of HPElineupMallItemPurchaseHistory.
type HPElineupMallItemPurchaseHistories []*HPElineupMallItemPurchaseHistory
