// Code generated by ent, DO NOT EDIT.

package hpfceventticket

import (
	"fmt"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/99designs/gqlgen/graphql"
	"github.com/yssk22/hpapp/go/service/schema/enums"
)

const (
	// Label holds the string label denoting the hpfceventticket type in the database.
	Label = "hpfc_event_ticket"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldNum holds the string denoting the num field in the database.
	FieldNum = "num"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldFcMemberSha256 holds the string denoting the fc_member_sha256 field in the database.
	FieldFcMemberSha256 = "fc_member_sha256"
	// FieldApplicationTitle holds the string denoting the application_title field in the database.
	FieldApplicationTitle = "application_title"
	// FieldApplicationID holds the string denoting the application_id field in the database.
	FieldApplicationID = "application_id"
	// FieldApplicationSite holds the string denoting the application_site field in the database.
	FieldApplicationSite = "application_site"
	// FieldApplicationStartDate holds the string denoting the application_start_date field in the database.
	FieldApplicationStartDate = "application_start_date"
	// FieldApplicationDueDate holds the string denoting the application_due_date field in the database.
	FieldApplicationDueDate = "application_due_date"
	// FieldPaymentStartDate holds the string denoting the payment_start_date field in the database.
	FieldPaymentStartDate = "payment_start_date"
	// FieldPaymentDueDate holds the string denoting the payment_due_date field in the database.
	FieldPaymentDueDate = "payment_due_date"
	// FieldOwnerUserID holds the string denoting the owner_user_id field in the database.
	FieldOwnerUserID = "user_hpfc_event_tickets"
	// EdgeEvent holds the string denoting the event edge name in mutations.
	EdgeEvent = "event"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the hpfceventticket in the database.
	Table = "hpfc_event_tickets"
	// EventTable is the table that holds the event relation/edge.
	EventTable = "hpfc_event_tickets"
	// EventInverseTable is the table name for the HPEvent entity.
	// It exists in this package in order to avoid circular dependency with the "hpevent" package.
	EventInverseTable = "hp_events"
	// EventColumn is the table column denoting the event relation/edge.
	EventColumn = "hp_event_hpfc_event_tickets"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "hpfc_event_tickets"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_hpfc_event_tickets"
)

// Columns holds all SQL columns for hpfceventticket fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldNum,
	FieldStatus,
	FieldFcMemberSha256,
	FieldApplicationTitle,
	FieldApplicationID,
	FieldApplicationSite,
	FieldApplicationStartDate,
	FieldApplicationDueDate,
	FieldPaymentStartDate,
	FieldPaymentDueDate,
	FieldOwnerUserID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "hpfc_event_tickets"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"hp_event_hpfc_event_tickets",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/yssk22/hpapp/go/service/ent/runtime"
var (
	Hooks  [2]ent.Hook
	Policy ent.Policy
)

const DefaultStatus enums.HPFCEventTicketApplicationStatus = "Submitted"

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s enums.HPFCEventTicketApplicationStatus) error {
	switch s {
	case "BeforeLottery", "Completed", "PaymentOverdue", "PendingPayment", "Rejected", "Submitted", "Unknown":
		return nil
	default:
		return fmt.Errorf("hpfceventticket: invalid enum value for status field: %q", s)
	}
}

const DefaultApplicationSite enums.HPFCEventTicketApplicationSite = "helloproject"

// ApplicationSiteValidator is a validator for the "application_site" field enum values. It is called by the builders before save.
func ApplicationSiteValidator(as enums.HPFCEventTicketApplicationSite) error {
	switch as {
	case "helloproject", "mline":
		return nil
	default:
		return fmt.Errorf("hpfceventticket: invalid enum value for application_site field: %q", as)
	}
}

// Order defines the ordering method for the HPFCEventTicket queries.
type Order func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByNum orders the results by the num field.
func ByNum(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldNum, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByFcMemberSha256 orders the results by the fc_member_sha256 field.
func ByFcMemberSha256(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldFcMemberSha256, opts...).ToFunc()
}

// ByApplicationTitle orders the results by the application_title field.
func ByApplicationTitle(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldApplicationTitle, opts...).ToFunc()
}

// ByApplicationID orders the results by the application_id field.
func ByApplicationID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldApplicationID, opts...).ToFunc()
}

// ByApplicationSite orders the results by the application_site field.
func ByApplicationSite(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldApplicationSite, opts...).ToFunc()
}

// ByApplicationStartDate orders the results by the application_start_date field.
func ByApplicationStartDate(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldApplicationStartDate, opts...).ToFunc()
}

// ByApplicationDueDate orders the results by the application_due_date field.
func ByApplicationDueDate(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldApplicationDueDate, opts...).ToFunc()
}

// ByPaymentStartDate orders the results by the payment_start_date field.
func ByPaymentStartDate(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldPaymentStartDate, opts...).ToFunc()
}

// ByPaymentDueDate orders the results by the payment_due_date field.
func ByPaymentDueDate(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldPaymentDueDate, opts...).ToFunc()
}

// ByOwnerUserID orders the results by the owner_user_id field.
func ByOwnerUserID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldOwnerUserID, opts...).ToFunc()
}

// ByEventField orders the results by event field.
func ByEventField(field string, opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEventStep(), sql.OrderByField(field, opts...))
	}
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}
func newEventStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EventInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, EventTable, EventColumn),
	)
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}

var (
	// enums.HPFCEventTicketApplicationStatus must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enums.HPFCEventTicketApplicationStatus)(nil)
	// enums.HPFCEventTicketApplicationStatus must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enums.HPFCEventTicketApplicationStatus)(nil)
)

var (
	// enums.HPFCEventTicketApplicationSite must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enums.HPFCEventTicketApplicationSite)(nil)
	// enums.HPFCEventTicketApplicationSite must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enums.HPFCEventTicketApplicationSite)(nil)
)
