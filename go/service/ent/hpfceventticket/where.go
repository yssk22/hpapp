// Code generated by ent, DO NOT EDIT.

package hpfceventticket

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/yssk22/hpapp/go/service/ent/predicate"
	"github.com/yssk22/hpapp/go/service/schema/enums"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldEQ(FieldUpdatedAt, v))
}

// Num applies equality check predicate on the "num" field. It's identical to NumEQ.
func Num(v int) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldEQ(FieldNum, v))
}

// FcMemberSha256 applies equality check predicate on the "fc_member_sha256" field. It's identical to FcMemberSha256EQ.
func FcMemberSha256(v string) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldEQ(FieldFcMemberSha256, v))
}

// ApplicationTitle applies equality check predicate on the "application_title" field. It's identical to ApplicationTitleEQ.
func ApplicationTitle(v string) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldEQ(FieldApplicationTitle, v))
}

// ApplicationID applies equality check predicate on the "application_id" field. It's identical to ApplicationIDEQ.
func ApplicationID(v string) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldEQ(FieldApplicationID, v))
}

// ApplicationStartDate applies equality check predicate on the "application_start_date" field. It's identical to ApplicationStartDateEQ.
func ApplicationStartDate(v time.Time) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldEQ(FieldApplicationStartDate, v))
}

// ApplicationDueDate applies equality check predicate on the "application_due_date" field. It's identical to ApplicationDueDateEQ.
func ApplicationDueDate(v time.Time) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldEQ(FieldApplicationDueDate, v))
}

// PaymentStartDate applies equality check predicate on the "payment_start_date" field. It's identical to PaymentStartDateEQ.
func PaymentStartDate(v time.Time) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldEQ(FieldPaymentStartDate, v))
}

// PaymentDueDate applies equality check predicate on the "payment_due_date" field. It's identical to PaymentDueDateEQ.
func PaymentDueDate(v time.Time) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldEQ(FieldPaymentDueDate, v))
}

// OwnerUserID applies equality check predicate on the "owner_user_id" field. It's identical to OwnerUserIDEQ.
func OwnerUserID(v int) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldEQ(FieldOwnerUserID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldNotNull(FieldUpdatedAt))
}

// NumEQ applies the EQ predicate on the "num" field.
func NumEQ(v int) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldEQ(FieldNum, v))
}

// NumNEQ applies the NEQ predicate on the "num" field.
func NumNEQ(v int) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldNEQ(FieldNum, v))
}

// NumIn applies the In predicate on the "num" field.
func NumIn(vs ...int) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldIn(FieldNum, vs...))
}

// NumNotIn applies the NotIn predicate on the "num" field.
func NumNotIn(vs ...int) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldNotIn(FieldNum, vs...))
}

// NumGT applies the GT predicate on the "num" field.
func NumGT(v int) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldGT(FieldNum, v))
}

// NumGTE applies the GTE predicate on the "num" field.
func NumGTE(v int) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldGTE(FieldNum, v))
}

// NumLT applies the LT predicate on the "num" field.
func NumLT(v int) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldLT(FieldNum, v))
}

// NumLTE applies the LTE predicate on the "num" field.
func NumLTE(v int) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldLTE(FieldNum, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v enums.HPEventFCTicketStatus) predicate.HPFCEventTicket {
	vc := v
	return predicate.HPFCEventTicket(sql.FieldEQ(FieldStatus, vc))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v enums.HPEventFCTicketStatus) predicate.HPFCEventTicket {
	vc := v
	return predicate.HPFCEventTicket(sql.FieldNEQ(FieldStatus, vc))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...enums.HPEventFCTicketStatus) predicate.HPFCEventTicket {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HPFCEventTicket(sql.FieldIn(FieldStatus, v...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...enums.HPEventFCTicketStatus) predicate.HPFCEventTicket {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HPFCEventTicket(sql.FieldNotIn(FieldStatus, v...))
}

// FcMemberSha256EQ applies the EQ predicate on the "fc_member_sha256" field.
func FcMemberSha256EQ(v string) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldEQ(FieldFcMemberSha256, v))
}

// FcMemberSha256NEQ applies the NEQ predicate on the "fc_member_sha256" field.
func FcMemberSha256NEQ(v string) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldNEQ(FieldFcMemberSha256, v))
}

// FcMemberSha256In applies the In predicate on the "fc_member_sha256" field.
func FcMemberSha256In(vs ...string) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldIn(FieldFcMemberSha256, vs...))
}

// FcMemberSha256NotIn applies the NotIn predicate on the "fc_member_sha256" field.
func FcMemberSha256NotIn(vs ...string) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldNotIn(FieldFcMemberSha256, vs...))
}

// FcMemberSha256GT applies the GT predicate on the "fc_member_sha256" field.
func FcMemberSha256GT(v string) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldGT(FieldFcMemberSha256, v))
}

// FcMemberSha256GTE applies the GTE predicate on the "fc_member_sha256" field.
func FcMemberSha256GTE(v string) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldGTE(FieldFcMemberSha256, v))
}

// FcMemberSha256LT applies the LT predicate on the "fc_member_sha256" field.
func FcMemberSha256LT(v string) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldLT(FieldFcMemberSha256, v))
}

// FcMemberSha256LTE applies the LTE predicate on the "fc_member_sha256" field.
func FcMemberSha256LTE(v string) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldLTE(FieldFcMemberSha256, v))
}

// FcMemberSha256Contains applies the Contains predicate on the "fc_member_sha256" field.
func FcMemberSha256Contains(v string) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldContains(FieldFcMemberSha256, v))
}

// FcMemberSha256HasPrefix applies the HasPrefix predicate on the "fc_member_sha256" field.
func FcMemberSha256HasPrefix(v string) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldHasPrefix(FieldFcMemberSha256, v))
}

// FcMemberSha256HasSuffix applies the HasSuffix predicate on the "fc_member_sha256" field.
func FcMemberSha256HasSuffix(v string) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldHasSuffix(FieldFcMemberSha256, v))
}

// FcMemberSha256EqualFold applies the EqualFold predicate on the "fc_member_sha256" field.
func FcMemberSha256EqualFold(v string) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldEqualFold(FieldFcMemberSha256, v))
}

// FcMemberSha256ContainsFold applies the ContainsFold predicate on the "fc_member_sha256" field.
func FcMemberSha256ContainsFold(v string) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldContainsFold(FieldFcMemberSha256, v))
}

// ApplicationTitleEQ applies the EQ predicate on the "application_title" field.
func ApplicationTitleEQ(v string) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldEQ(FieldApplicationTitle, v))
}

// ApplicationTitleNEQ applies the NEQ predicate on the "application_title" field.
func ApplicationTitleNEQ(v string) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldNEQ(FieldApplicationTitle, v))
}

// ApplicationTitleIn applies the In predicate on the "application_title" field.
func ApplicationTitleIn(vs ...string) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldIn(FieldApplicationTitle, vs...))
}

// ApplicationTitleNotIn applies the NotIn predicate on the "application_title" field.
func ApplicationTitleNotIn(vs ...string) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldNotIn(FieldApplicationTitle, vs...))
}

// ApplicationTitleGT applies the GT predicate on the "application_title" field.
func ApplicationTitleGT(v string) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldGT(FieldApplicationTitle, v))
}

// ApplicationTitleGTE applies the GTE predicate on the "application_title" field.
func ApplicationTitleGTE(v string) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldGTE(FieldApplicationTitle, v))
}

// ApplicationTitleLT applies the LT predicate on the "application_title" field.
func ApplicationTitleLT(v string) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldLT(FieldApplicationTitle, v))
}

// ApplicationTitleLTE applies the LTE predicate on the "application_title" field.
func ApplicationTitleLTE(v string) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldLTE(FieldApplicationTitle, v))
}

// ApplicationTitleContains applies the Contains predicate on the "application_title" field.
func ApplicationTitleContains(v string) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldContains(FieldApplicationTitle, v))
}

// ApplicationTitleHasPrefix applies the HasPrefix predicate on the "application_title" field.
func ApplicationTitleHasPrefix(v string) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldHasPrefix(FieldApplicationTitle, v))
}

// ApplicationTitleHasSuffix applies the HasSuffix predicate on the "application_title" field.
func ApplicationTitleHasSuffix(v string) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldHasSuffix(FieldApplicationTitle, v))
}

// ApplicationTitleEqualFold applies the EqualFold predicate on the "application_title" field.
func ApplicationTitleEqualFold(v string) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldEqualFold(FieldApplicationTitle, v))
}

// ApplicationTitleContainsFold applies the ContainsFold predicate on the "application_title" field.
func ApplicationTitleContainsFold(v string) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldContainsFold(FieldApplicationTitle, v))
}

// ApplicationIDEQ applies the EQ predicate on the "application_id" field.
func ApplicationIDEQ(v string) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldEQ(FieldApplicationID, v))
}

// ApplicationIDNEQ applies the NEQ predicate on the "application_id" field.
func ApplicationIDNEQ(v string) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldNEQ(FieldApplicationID, v))
}

// ApplicationIDIn applies the In predicate on the "application_id" field.
func ApplicationIDIn(vs ...string) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldIn(FieldApplicationID, vs...))
}

// ApplicationIDNotIn applies the NotIn predicate on the "application_id" field.
func ApplicationIDNotIn(vs ...string) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldNotIn(FieldApplicationID, vs...))
}

// ApplicationIDGT applies the GT predicate on the "application_id" field.
func ApplicationIDGT(v string) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldGT(FieldApplicationID, v))
}

// ApplicationIDGTE applies the GTE predicate on the "application_id" field.
func ApplicationIDGTE(v string) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldGTE(FieldApplicationID, v))
}

// ApplicationIDLT applies the LT predicate on the "application_id" field.
func ApplicationIDLT(v string) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldLT(FieldApplicationID, v))
}

// ApplicationIDLTE applies the LTE predicate on the "application_id" field.
func ApplicationIDLTE(v string) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldLTE(FieldApplicationID, v))
}

// ApplicationIDContains applies the Contains predicate on the "application_id" field.
func ApplicationIDContains(v string) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldContains(FieldApplicationID, v))
}

// ApplicationIDHasPrefix applies the HasPrefix predicate on the "application_id" field.
func ApplicationIDHasPrefix(v string) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldHasPrefix(FieldApplicationID, v))
}

// ApplicationIDHasSuffix applies the HasSuffix predicate on the "application_id" field.
func ApplicationIDHasSuffix(v string) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldHasSuffix(FieldApplicationID, v))
}

// ApplicationIDIsNil applies the IsNil predicate on the "application_id" field.
func ApplicationIDIsNil() predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldIsNull(FieldApplicationID))
}

// ApplicationIDNotNil applies the NotNil predicate on the "application_id" field.
func ApplicationIDNotNil() predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldNotNull(FieldApplicationID))
}

// ApplicationIDEqualFold applies the EqualFold predicate on the "application_id" field.
func ApplicationIDEqualFold(v string) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldEqualFold(FieldApplicationID, v))
}

// ApplicationIDContainsFold applies the ContainsFold predicate on the "application_id" field.
func ApplicationIDContainsFold(v string) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldContainsFold(FieldApplicationID, v))
}

// ApplicationSiteEQ applies the EQ predicate on the "application_site" field.
func ApplicationSiteEQ(v enums.HPEventFCTicketSite) predicate.HPFCEventTicket {
	vc := v
	return predicate.HPFCEventTicket(sql.FieldEQ(FieldApplicationSite, vc))
}

// ApplicationSiteNEQ applies the NEQ predicate on the "application_site" field.
func ApplicationSiteNEQ(v enums.HPEventFCTicketSite) predicate.HPFCEventTicket {
	vc := v
	return predicate.HPFCEventTicket(sql.FieldNEQ(FieldApplicationSite, vc))
}

// ApplicationSiteIn applies the In predicate on the "application_site" field.
func ApplicationSiteIn(vs ...enums.HPEventFCTicketSite) predicate.HPFCEventTicket {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HPFCEventTicket(sql.FieldIn(FieldApplicationSite, v...))
}

// ApplicationSiteNotIn applies the NotIn predicate on the "application_site" field.
func ApplicationSiteNotIn(vs ...enums.HPEventFCTicketSite) predicate.HPFCEventTicket {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HPFCEventTicket(sql.FieldNotIn(FieldApplicationSite, v...))
}

// ApplicationStartDateEQ applies the EQ predicate on the "application_start_date" field.
func ApplicationStartDateEQ(v time.Time) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldEQ(FieldApplicationStartDate, v))
}

// ApplicationStartDateNEQ applies the NEQ predicate on the "application_start_date" field.
func ApplicationStartDateNEQ(v time.Time) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldNEQ(FieldApplicationStartDate, v))
}

// ApplicationStartDateIn applies the In predicate on the "application_start_date" field.
func ApplicationStartDateIn(vs ...time.Time) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldIn(FieldApplicationStartDate, vs...))
}

// ApplicationStartDateNotIn applies the NotIn predicate on the "application_start_date" field.
func ApplicationStartDateNotIn(vs ...time.Time) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldNotIn(FieldApplicationStartDate, vs...))
}

// ApplicationStartDateGT applies the GT predicate on the "application_start_date" field.
func ApplicationStartDateGT(v time.Time) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldGT(FieldApplicationStartDate, v))
}

// ApplicationStartDateGTE applies the GTE predicate on the "application_start_date" field.
func ApplicationStartDateGTE(v time.Time) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldGTE(FieldApplicationStartDate, v))
}

// ApplicationStartDateLT applies the LT predicate on the "application_start_date" field.
func ApplicationStartDateLT(v time.Time) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldLT(FieldApplicationStartDate, v))
}

// ApplicationStartDateLTE applies the LTE predicate on the "application_start_date" field.
func ApplicationStartDateLTE(v time.Time) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldLTE(FieldApplicationStartDate, v))
}

// ApplicationStartDateIsNil applies the IsNil predicate on the "application_start_date" field.
func ApplicationStartDateIsNil() predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldIsNull(FieldApplicationStartDate))
}

// ApplicationStartDateNotNil applies the NotNil predicate on the "application_start_date" field.
func ApplicationStartDateNotNil() predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldNotNull(FieldApplicationStartDate))
}

// ApplicationDueDateEQ applies the EQ predicate on the "application_due_date" field.
func ApplicationDueDateEQ(v time.Time) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldEQ(FieldApplicationDueDate, v))
}

// ApplicationDueDateNEQ applies the NEQ predicate on the "application_due_date" field.
func ApplicationDueDateNEQ(v time.Time) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldNEQ(FieldApplicationDueDate, v))
}

// ApplicationDueDateIn applies the In predicate on the "application_due_date" field.
func ApplicationDueDateIn(vs ...time.Time) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldIn(FieldApplicationDueDate, vs...))
}

// ApplicationDueDateNotIn applies the NotIn predicate on the "application_due_date" field.
func ApplicationDueDateNotIn(vs ...time.Time) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldNotIn(FieldApplicationDueDate, vs...))
}

// ApplicationDueDateGT applies the GT predicate on the "application_due_date" field.
func ApplicationDueDateGT(v time.Time) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldGT(FieldApplicationDueDate, v))
}

// ApplicationDueDateGTE applies the GTE predicate on the "application_due_date" field.
func ApplicationDueDateGTE(v time.Time) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldGTE(FieldApplicationDueDate, v))
}

// ApplicationDueDateLT applies the LT predicate on the "application_due_date" field.
func ApplicationDueDateLT(v time.Time) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldLT(FieldApplicationDueDate, v))
}

// ApplicationDueDateLTE applies the LTE predicate on the "application_due_date" field.
func ApplicationDueDateLTE(v time.Time) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldLTE(FieldApplicationDueDate, v))
}

// ApplicationDueDateIsNil applies the IsNil predicate on the "application_due_date" field.
func ApplicationDueDateIsNil() predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldIsNull(FieldApplicationDueDate))
}

// ApplicationDueDateNotNil applies the NotNil predicate on the "application_due_date" field.
func ApplicationDueDateNotNil() predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldNotNull(FieldApplicationDueDate))
}

// PaymentStartDateEQ applies the EQ predicate on the "payment_start_date" field.
func PaymentStartDateEQ(v time.Time) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldEQ(FieldPaymentStartDate, v))
}

// PaymentStartDateNEQ applies the NEQ predicate on the "payment_start_date" field.
func PaymentStartDateNEQ(v time.Time) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldNEQ(FieldPaymentStartDate, v))
}

// PaymentStartDateIn applies the In predicate on the "payment_start_date" field.
func PaymentStartDateIn(vs ...time.Time) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldIn(FieldPaymentStartDate, vs...))
}

// PaymentStartDateNotIn applies the NotIn predicate on the "payment_start_date" field.
func PaymentStartDateNotIn(vs ...time.Time) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldNotIn(FieldPaymentStartDate, vs...))
}

// PaymentStartDateGT applies the GT predicate on the "payment_start_date" field.
func PaymentStartDateGT(v time.Time) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldGT(FieldPaymentStartDate, v))
}

// PaymentStartDateGTE applies the GTE predicate on the "payment_start_date" field.
func PaymentStartDateGTE(v time.Time) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldGTE(FieldPaymentStartDate, v))
}

// PaymentStartDateLT applies the LT predicate on the "payment_start_date" field.
func PaymentStartDateLT(v time.Time) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldLT(FieldPaymentStartDate, v))
}

// PaymentStartDateLTE applies the LTE predicate on the "payment_start_date" field.
func PaymentStartDateLTE(v time.Time) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldLTE(FieldPaymentStartDate, v))
}

// PaymentStartDateIsNil applies the IsNil predicate on the "payment_start_date" field.
func PaymentStartDateIsNil() predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldIsNull(FieldPaymentStartDate))
}

// PaymentStartDateNotNil applies the NotNil predicate on the "payment_start_date" field.
func PaymentStartDateNotNil() predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldNotNull(FieldPaymentStartDate))
}

// PaymentDueDateEQ applies the EQ predicate on the "payment_due_date" field.
func PaymentDueDateEQ(v time.Time) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldEQ(FieldPaymentDueDate, v))
}

// PaymentDueDateNEQ applies the NEQ predicate on the "payment_due_date" field.
func PaymentDueDateNEQ(v time.Time) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldNEQ(FieldPaymentDueDate, v))
}

// PaymentDueDateIn applies the In predicate on the "payment_due_date" field.
func PaymentDueDateIn(vs ...time.Time) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldIn(FieldPaymentDueDate, vs...))
}

// PaymentDueDateNotIn applies the NotIn predicate on the "payment_due_date" field.
func PaymentDueDateNotIn(vs ...time.Time) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldNotIn(FieldPaymentDueDate, vs...))
}

// PaymentDueDateGT applies the GT predicate on the "payment_due_date" field.
func PaymentDueDateGT(v time.Time) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldGT(FieldPaymentDueDate, v))
}

// PaymentDueDateGTE applies the GTE predicate on the "payment_due_date" field.
func PaymentDueDateGTE(v time.Time) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldGTE(FieldPaymentDueDate, v))
}

// PaymentDueDateLT applies the LT predicate on the "payment_due_date" field.
func PaymentDueDateLT(v time.Time) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldLT(FieldPaymentDueDate, v))
}

// PaymentDueDateLTE applies the LTE predicate on the "payment_due_date" field.
func PaymentDueDateLTE(v time.Time) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldLTE(FieldPaymentDueDate, v))
}

// PaymentDueDateIsNil applies the IsNil predicate on the "payment_due_date" field.
func PaymentDueDateIsNil() predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldIsNull(FieldPaymentDueDate))
}

// PaymentDueDateNotNil applies the NotNil predicate on the "payment_due_date" field.
func PaymentDueDateNotNil() predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldNotNull(FieldPaymentDueDate))
}

// OwnerUserIDEQ applies the EQ predicate on the "owner_user_id" field.
func OwnerUserIDEQ(v int) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldEQ(FieldOwnerUserID, v))
}

// OwnerUserIDNEQ applies the NEQ predicate on the "owner_user_id" field.
func OwnerUserIDNEQ(v int) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldNEQ(FieldOwnerUserID, v))
}

// OwnerUserIDIn applies the In predicate on the "owner_user_id" field.
func OwnerUserIDIn(vs ...int) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldIn(FieldOwnerUserID, vs...))
}

// OwnerUserIDNotIn applies the NotIn predicate on the "owner_user_id" field.
func OwnerUserIDNotIn(vs ...int) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(sql.FieldNotIn(FieldOwnerUserID, vs...))
}

// HasEvent applies the HasEdge predicate on the "event" edge.
func HasEvent() predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EventTable, EventColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEventWith applies the HasEdge predicate on the "event" edge with a given conditions (other predicates).
func HasEventWith(preds ...predicate.HPEvent) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(func(s *sql.Selector) {
		step := newEventStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.HPFCEventTicket) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.HPFCEventTicket) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.HPFCEventTicket) predicate.HPFCEventTicket {
	return predicate.HPFCEventTicket(func(s *sql.Selector) {
		p(s.Not())
	})
}
