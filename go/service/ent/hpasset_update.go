// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yssk22/hpapp/go/service/ent/hpameblopost"
	"github.com/yssk22/hpapp/go/service/ent/hpartist"
	"github.com/yssk22/hpapp/go/service/ent/hpasset"
	"github.com/yssk22/hpapp/go/service/ent/hpigpost"
	"github.com/yssk22/hpapp/go/service/ent/hpmember"
	"github.com/yssk22/hpapp/go/service/ent/predicate"
	"github.com/yssk22/hpapp/go/service/schema/enums"
)

// HPAssetUpdate is the builder for updating HPAsset entities.
type HPAssetUpdate struct {
	config
	hooks    []Hook
	mutation *HPAssetMutation
}

// Where appends a list predicates to the HPAssetUpdate builder.
func (hau *HPAssetUpdate) Where(ps ...predicate.HPAsset) *HPAssetUpdate {
	hau.mutation.Where(ps...)
	return hau
}

// SetKey sets the "key" field.
func (hau *HPAssetUpdate) SetKey(s string) *HPAssetUpdate {
	hau.mutation.SetKey(s)
	return hau
}

// SetAssetType sets the "asset_type" field.
func (hau *HPAssetUpdate) SetAssetType(eat enums.HPAssetType) *HPAssetUpdate {
	hau.mutation.SetAssetType(eat)
	return hau
}

// SetArtistID sets the "artist" edge to the HPArtist entity by ID.
func (hau *HPAssetUpdate) SetArtistID(id int) *HPAssetUpdate {
	hau.mutation.SetArtistID(id)
	return hau
}

// SetNillableArtistID sets the "artist" edge to the HPArtist entity by ID if the given value is not nil.
func (hau *HPAssetUpdate) SetNillableArtistID(id *int) *HPAssetUpdate {
	if id != nil {
		hau = hau.SetArtistID(*id)
	}
	return hau
}

// SetArtist sets the "artist" edge to the HPArtist entity.
func (hau *HPAssetUpdate) SetArtist(h *HPArtist) *HPAssetUpdate {
	return hau.SetArtistID(h.ID)
}

// AddMemberIDs adds the "members" edge to the HPMember entity by IDs.
func (hau *HPAssetUpdate) AddMemberIDs(ids ...int) *HPAssetUpdate {
	hau.mutation.AddMemberIDs(ids...)
	return hau
}

// AddMembers adds the "members" edges to the HPMember entity.
func (hau *HPAssetUpdate) AddMembers(h ...*HPMember) *HPAssetUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hau.AddMemberIDs(ids...)
}

// AddAmebloPostIDs adds the "ameblo_posts" edge to the HPAmebloPost entity by IDs.
func (hau *HPAssetUpdate) AddAmebloPostIDs(ids ...int) *HPAssetUpdate {
	hau.mutation.AddAmebloPostIDs(ids...)
	return hau
}

// AddAmebloPosts adds the "ameblo_posts" edges to the HPAmebloPost entity.
func (hau *HPAssetUpdate) AddAmebloPosts(h ...*HPAmebloPost) *HPAssetUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hau.AddAmebloPostIDs(ids...)
}

// AddIgPostIDs adds the "ig_posts" edge to the HPIgPost entity by IDs.
func (hau *HPAssetUpdate) AddIgPostIDs(ids ...int) *HPAssetUpdate {
	hau.mutation.AddIgPostIDs(ids...)
	return hau
}

// AddIgPosts adds the "ig_posts" edges to the HPIgPost entity.
func (hau *HPAssetUpdate) AddIgPosts(h ...*HPIgPost) *HPAssetUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hau.AddIgPostIDs(ids...)
}

// Mutation returns the HPAssetMutation object of the builder.
func (hau *HPAssetUpdate) Mutation() *HPAssetMutation {
	return hau.mutation
}

// ClearArtist clears the "artist" edge to the HPArtist entity.
func (hau *HPAssetUpdate) ClearArtist() *HPAssetUpdate {
	hau.mutation.ClearArtist()
	return hau
}

// ClearMembers clears all "members" edges to the HPMember entity.
func (hau *HPAssetUpdate) ClearMembers() *HPAssetUpdate {
	hau.mutation.ClearMembers()
	return hau
}

// RemoveMemberIDs removes the "members" edge to HPMember entities by IDs.
func (hau *HPAssetUpdate) RemoveMemberIDs(ids ...int) *HPAssetUpdate {
	hau.mutation.RemoveMemberIDs(ids...)
	return hau
}

// RemoveMembers removes "members" edges to HPMember entities.
func (hau *HPAssetUpdate) RemoveMembers(h ...*HPMember) *HPAssetUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hau.RemoveMemberIDs(ids...)
}

// ClearAmebloPosts clears all "ameblo_posts" edges to the HPAmebloPost entity.
func (hau *HPAssetUpdate) ClearAmebloPosts() *HPAssetUpdate {
	hau.mutation.ClearAmebloPosts()
	return hau
}

// RemoveAmebloPostIDs removes the "ameblo_posts" edge to HPAmebloPost entities by IDs.
func (hau *HPAssetUpdate) RemoveAmebloPostIDs(ids ...int) *HPAssetUpdate {
	hau.mutation.RemoveAmebloPostIDs(ids...)
	return hau
}

// RemoveAmebloPosts removes "ameblo_posts" edges to HPAmebloPost entities.
func (hau *HPAssetUpdate) RemoveAmebloPosts(h ...*HPAmebloPost) *HPAssetUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hau.RemoveAmebloPostIDs(ids...)
}

// ClearIgPosts clears all "ig_posts" edges to the HPIgPost entity.
func (hau *HPAssetUpdate) ClearIgPosts() *HPAssetUpdate {
	hau.mutation.ClearIgPosts()
	return hau
}

// RemoveIgPostIDs removes the "ig_posts" edge to HPIgPost entities by IDs.
func (hau *HPAssetUpdate) RemoveIgPostIDs(ids ...int) *HPAssetUpdate {
	hau.mutation.RemoveIgPostIDs(ids...)
	return hau
}

// RemoveIgPosts removes "ig_posts" edges to HPIgPost entities.
func (hau *HPAssetUpdate) RemoveIgPosts(h ...*HPIgPost) *HPAssetUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hau.RemoveIgPostIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hau *HPAssetUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, HPAssetMutation](ctx, hau.sqlSave, hau.mutation, hau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hau *HPAssetUpdate) SaveX(ctx context.Context) int {
	affected, err := hau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hau *HPAssetUpdate) Exec(ctx context.Context) error {
	_, err := hau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hau *HPAssetUpdate) ExecX(ctx context.Context) {
	if err := hau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hau *HPAssetUpdate) check() error {
	if v, ok := hau.mutation.AssetType(); ok {
		if err := hpasset.AssetTypeValidator(v); err != nil {
			return &ValidationError{Name: "asset_type", err: fmt.Errorf(`ent: validator failed for field "HPAsset.asset_type": %w`, err)}
		}
	}
	return nil
}

func (hau *HPAssetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := hau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(hpasset.Table, hpasset.Columns, sqlgraph.NewFieldSpec(hpasset.FieldID, field.TypeInt))
	if ps := hau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hau.mutation.Key(); ok {
		_spec.SetField(hpasset.FieldKey, field.TypeString, value)
	}
	if value, ok := hau.mutation.AssetType(); ok {
		_spec.SetField(hpasset.FieldAssetType, field.TypeEnum, value)
	}
	if hau.mutation.ArtistCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpasset.ArtistTable,
			Columns: []string{hpasset.ArtistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpartist.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hau.mutation.ArtistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpasset.ArtistTable,
			Columns: []string{hpasset.ArtistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpartist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hau.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpasset.MembersTable,
			Columns: hpasset.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpmember.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hau.mutation.RemovedMembersIDs(); len(nodes) > 0 && !hau.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpasset.MembersTable,
			Columns: hpasset.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hau.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpasset.MembersTable,
			Columns: hpasset.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hau.mutation.AmebloPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpasset.AmebloPostsTable,
			Columns: []string{hpasset.AmebloPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpameblopost.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hau.mutation.RemovedAmebloPostsIDs(); len(nodes) > 0 && !hau.mutation.AmebloPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpasset.AmebloPostsTable,
			Columns: []string{hpasset.AmebloPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpameblopost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hau.mutation.AmebloPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpasset.AmebloPostsTable,
			Columns: []string{hpasset.AmebloPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpameblopost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hau.mutation.IgPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpasset.IgPostsTable,
			Columns: []string{hpasset.IgPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpigpost.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hau.mutation.RemovedIgPostsIDs(); len(nodes) > 0 && !hau.mutation.IgPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpasset.IgPostsTable,
			Columns: []string{hpasset.IgPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpigpost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hau.mutation.IgPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpasset.IgPostsTable,
			Columns: []string{hpasset.IgPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpigpost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hpasset.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	hau.mutation.done = true
	return n, nil
}

// HPAssetUpdateOne is the builder for updating a single HPAsset entity.
type HPAssetUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HPAssetMutation
}

// SetKey sets the "key" field.
func (hauo *HPAssetUpdateOne) SetKey(s string) *HPAssetUpdateOne {
	hauo.mutation.SetKey(s)
	return hauo
}

// SetAssetType sets the "asset_type" field.
func (hauo *HPAssetUpdateOne) SetAssetType(eat enums.HPAssetType) *HPAssetUpdateOne {
	hauo.mutation.SetAssetType(eat)
	return hauo
}

// SetArtistID sets the "artist" edge to the HPArtist entity by ID.
func (hauo *HPAssetUpdateOne) SetArtistID(id int) *HPAssetUpdateOne {
	hauo.mutation.SetArtistID(id)
	return hauo
}

// SetNillableArtistID sets the "artist" edge to the HPArtist entity by ID if the given value is not nil.
func (hauo *HPAssetUpdateOne) SetNillableArtistID(id *int) *HPAssetUpdateOne {
	if id != nil {
		hauo = hauo.SetArtistID(*id)
	}
	return hauo
}

// SetArtist sets the "artist" edge to the HPArtist entity.
func (hauo *HPAssetUpdateOne) SetArtist(h *HPArtist) *HPAssetUpdateOne {
	return hauo.SetArtistID(h.ID)
}

// AddMemberIDs adds the "members" edge to the HPMember entity by IDs.
func (hauo *HPAssetUpdateOne) AddMemberIDs(ids ...int) *HPAssetUpdateOne {
	hauo.mutation.AddMemberIDs(ids...)
	return hauo
}

// AddMembers adds the "members" edges to the HPMember entity.
func (hauo *HPAssetUpdateOne) AddMembers(h ...*HPMember) *HPAssetUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hauo.AddMemberIDs(ids...)
}

// AddAmebloPostIDs adds the "ameblo_posts" edge to the HPAmebloPost entity by IDs.
func (hauo *HPAssetUpdateOne) AddAmebloPostIDs(ids ...int) *HPAssetUpdateOne {
	hauo.mutation.AddAmebloPostIDs(ids...)
	return hauo
}

// AddAmebloPosts adds the "ameblo_posts" edges to the HPAmebloPost entity.
func (hauo *HPAssetUpdateOne) AddAmebloPosts(h ...*HPAmebloPost) *HPAssetUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hauo.AddAmebloPostIDs(ids...)
}

// AddIgPostIDs adds the "ig_posts" edge to the HPIgPost entity by IDs.
func (hauo *HPAssetUpdateOne) AddIgPostIDs(ids ...int) *HPAssetUpdateOne {
	hauo.mutation.AddIgPostIDs(ids...)
	return hauo
}

// AddIgPosts adds the "ig_posts" edges to the HPIgPost entity.
func (hauo *HPAssetUpdateOne) AddIgPosts(h ...*HPIgPost) *HPAssetUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hauo.AddIgPostIDs(ids...)
}

// Mutation returns the HPAssetMutation object of the builder.
func (hauo *HPAssetUpdateOne) Mutation() *HPAssetMutation {
	return hauo.mutation
}

// ClearArtist clears the "artist" edge to the HPArtist entity.
func (hauo *HPAssetUpdateOne) ClearArtist() *HPAssetUpdateOne {
	hauo.mutation.ClearArtist()
	return hauo
}

// ClearMembers clears all "members" edges to the HPMember entity.
func (hauo *HPAssetUpdateOne) ClearMembers() *HPAssetUpdateOne {
	hauo.mutation.ClearMembers()
	return hauo
}

// RemoveMemberIDs removes the "members" edge to HPMember entities by IDs.
func (hauo *HPAssetUpdateOne) RemoveMemberIDs(ids ...int) *HPAssetUpdateOne {
	hauo.mutation.RemoveMemberIDs(ids...)
	return hauo
}

// RemoveMembers removes "members" edges to HPMember entities.
func (hauo *HPAssetUpdateOne) RemoveMembers(h ...*HPMember) *HPAssetUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hauo.RemoveMemberIDs(ids...)
}

// ClearAmebloPosts clears all "ameblo_posts" edges to the HPAmebloPost entity.
func (hauo *HPAssetUpdateOne) ClearAmebloPosts() *HPAssetUpdateOne {
	hauo.mutation.ClearAmebloPosts()
	return hauo
}

// RemoveAmebloPostIDs removes the "ameblo_posts" edge to HPAmebloPost entities by IDs.
func (hauo *HPAssetUpdateOne) RemoveAmebloPostIDs(ids ...int) *HPAssetUpdateOne {
	hauo.mutation.RemoveAmebloPostIDs(ids...)
	return hauo
}

// RemoveAmebloPosts removes "ameblo_posts" edges to HPAmebloPost entities.
func (hauo *HPAssetUpdateOne) RemoveAmebloPosts(h ...*HPAmebloPost) *HPAssetUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hauo.RemoveAmebloPostIDs(ids...)
}

// ClearIgPosts clears all "ig_posts" edges to the HPIgPost entity.
func (hauo *HPAssetUpdateOne) ClearIgPosts() *HPAssetUpdateOne {
	hauo.mutation.ClearIgPosts()
	return hauo
}

// RemoveIgPostIDs removes the "ig_posts" edge to HPIgPost entities by IDs.
func (hauo *HPAssetUpdateOne) RemoveIgPostIDs(ids ...int) *HPAssetUpdateOne {
	hauo.mutation.RemoveIgPostIDs(ids...)
	return hauo
}

// RemoveIgPosts removes "ig_posts" edges to HPIgPost entities.
func (hauo *HPAssetUpdateOne) RemoveIgPosts(h ...*HPIgPost) *HPAssetUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hauo.RemoveIgPostIDs(ids...)
}

// Where appends a list predicates to the HPAssetUpdate builder.
func (hauo *HPAssetUpdateOne) Where(ps ...predicate.HPAsset) *HPAssetUpdateOne {
	hauo.mutation.Where(ps...)
	return hauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (hauo *HPAssetUpdateOne) Select(field string, fields ...string) *HPAssetUpdateOne {
	hauo.fields = append([]string{field}, fields...)
	return hauo
}

// Save executes the query and returns the updated HPAsset entity.
func (hauo *HPAssetUpdateOne) Save(ctx context.Context) (*HPAsset, error) {
	return withHooks[*HPAsset, HPAssetMutation](ctx, hauo.sqlSave, hauo.mutation, hauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hauo *HPAssetUpdateOne) SaveX(ctx context.Context) *HPAsset {
	node, err := hauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (hauo *HPAssetUpdateOne) Exec(ctx context.Context) error {
	_, err := hauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hauo *HPAssetUpdateOne) ExecX(ctx context.Context) {
	if err := hauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hauo *HPAssetUpdateOne) check() error {
	if v, ok := hauo.mutation.AssetType(); ok {
		if err := hpasset.AssetTypeValidator(v); err != nil {
			return &ValidationError{Name: "asset_type", err: fmt.Errorf(`ent: validator failed for field "HPAsset.asset_type": %w`, err)}
		}
	}
	return nil
}

func (hauo *HPAssetUpdateOne) sqlSave(ctx context.Context) (_node *HPAsset, err error) {
	if err := hauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(hpasset.Table, hpasset.Columns, sqlgraph.NewFieldSpec(hpasset.FieldID, field.TypeInt))
	id, ok := hauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "HPAsset.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := hauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hpasset.FieldID)
		for _, f := range fields {
			if !hpasset.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != hpasset.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := hauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hauo.mutation.Key(); ok {
		_spec.SetField(hpasset.FieldKey, field.TypeString, value)
	}
	if value, ok := hauo.mutation.AssetType(); ok {
		_spec.SetField(hpasset.FieldAssetType, field.TypeEnum, value)
	}
	if hauo.mutation.ArtistCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpasset.ArtistTable,
			Columns: []string{hpasset.ArtistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpartist.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hauo.mutation.ArtistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpasset.ArtistTable,
			Columns: []string{hpasset.ArtistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpartist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hauo.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpasset.MembersTable,
			Columns: hpasset.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpmember.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hauo.mutation.RemovedMembersIDs(); len(nodes) > 0 && !hauo.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpasset.MembersTable,
			Columns: hpasset.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hauo.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpasset.MembersTable,
			Columns: hpasset.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hauo.mutation.AmebloPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpasset.AmebloPostsTable,
			Columns: []string{hpasset.AmebloPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpameblopost.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hauo.mutation.RemovedAmebloPostsIDs(); len(nodes) > 0 && !hauo.mutation.AmebloPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpasset.AmebloPostsTable,
			Columns: []string{hpasset.AmebloPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpameblopost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hauo.mutation.AmebloPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpasset.AmebloPostsTable,
			Columns: []string{hpasset.AmebloPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpameblopost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hauo.mutation.IgPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpasset.IgPostsTable,
			Columns: []string{hpasset.IgPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpigpost.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hauo.mutation.RemovedIgPostsIDs(); len(nodes) > 0 && !hauo.mutation.IgPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpasset.IgPostsTable,
			Columns: []string{hpasset.IgPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpigpost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hauo.mutation.IgPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpasset.IgPostsTable,
			Columns: []string{hpasset.IgPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpigpost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &HPAsset{config: hauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, hauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hpasset.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	hauo.mutation.done = true
	return _node, nil
}
