// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yssk22/hpapp/go/service/ent/hpartist"
	"github.com/yssk22/hpapp/go/service/ent/hpfollow"
	"github.com/yssk22/hpapp/go/service/ent/hpmember"
	"github.com/yssk22/hpapp/go/service/ent/predicate"
	"github.com/yssk22/hpapp/go/service/ent/user"
	"github.com/yssk22/hpapp/go/service/schema/enums"
)

// HPFollowUpdate is the builder for updating HPFollow entities.
type HPFollowUpdate struct {
	config
	hooks    []Hook
	mutation *HPFollowMutation
}

// Where appends a list predicates to the HPFollowUpdate builder.
func (hfu *HPFollowUpdate) Where(ps ...predicate.HPFollow) *HPFollowUpdate {
	hfu.mutation.Where(ps...)
	return hfu
}

// SetUpdatedAt sets the "updated_at" field.
func (hfu *HPFollowUpdate) SetUpdatedAt(t time.Time) *HPFollowUpdate {
	hfu.mutation.SetUpdatedAt(t)
	return hfu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (hfu *HPFollowUpdate) SetNillableUpdatedAt(t *time.Time) *HPFollowUpdate {
	if t != nil {
		hfu.SetUpdatedAt(*t)
	}
	return hfu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (hfu *HPFollowUpdate) ClearUpdatedAt() *HPFollowUpdate {
	hfu.mutation.ClearUpdatedAt()
	return hfu
}

// SetType sets the "type" field.
func (hfu *HPFollowUpdate) SetType(eft enums.HPFollowType) *HPFollowUpdate {
	hfu.mutation.SetType(eft)
	return hfu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (hfu *HPFollowUpdate) SetNillableType(eft *enums.HPFollowType) *HPFollowUpdate {
	if eft != nil {
		hfu.SetType(*eft)
	}
	return hfu
}

// SetElineupmallOther sets the "elineupmall_other" field.
func (hfu *HPFollowUpdate) SetElineupmallOther(eft enums.HPFollowType) *HPFollowUpdate {
	hfu.mutation.SetElineupmallOther(eft)
	return hfu
}

// SetNillableElineupmallOther sets the "elineupmall_other" field if the given value is not nil.
func (hfu *HPFollowUpdate) SetNillableElineupmallOther(eft *enums.HPFollowType) *HPFollowUpdate {
	if eft != nil {
		hfu.SetElineupmallOther(*eft)
	}
	return hfu
}

// SetElineupmallPhotoDaily sets the "elineupmall_photo_daily" field.
func (hfu *HPFollowUpdate) SetElineupmallPhotoDaily(eft enums.HPFollowType) *HPFollowUpdate {
	hfu.mutation.SetElineupmallPhotoDaily(eft)
	return hfu
}

// SetNillableElineupmallPhotoDaily sets the "elineupmall_photo_daily" field if the given value is not nil.
func (hfu *HPFollowUpdate) SetNillableElineupmallPhotoDaily(eft *enums.HPFollowType) *HPFollowUpdate {
	if eft != nil {
		hfu.SetElineupmallPhotoDaily(*eft)
	}
	return hfu
}

// SetElineupmallPhotoA4 sets the "elineupmall_photo_a4" field.
func (hfu *HPFollowUpdate) SetElineupmallPhotoA4(eft enums.HPFollowType) *HPFollowUpdate {
	hfu.mutation.SetElineupmallPhotoA4(eft)
	return hfu
}

// SetNillableElineupmallPhotoA4 sets the "elineupmall_photo_a4" field if the given value is not nil.
func (hfu *HPFollowUpdate) SetNillableElineupmallPhotoA4(eft *enums.HPFollowType) *HPFollowUpdate {
	if eft != nil {
		hfu.SetElineupmallPhotoA4(*eft)
	}
	return hfu
}

// SetElineupmallPhotoA5 sets the "elineupmall_photo_a5" field.
func (hfu *HPFollowUpdate) SetElineupmallPhotoA5(eft enums.HPFollowType) *HPFollowUpdate {
	hfu.mutation.SetElineupmallPhotoA5(eft)
	return hfu
}

// SetNillableElineupmallPhotoA5 sets the "elineupmall_photo_a5" field if the given value is not nil.
func (hfu *HPFollowUpdate) SetNillableElineupmallPhotoA5(eft *enums.HPFollowType) *HPFollowUpdate {
	if eft != nil {
		hfu.SetElineupmallPhotoA5(*eft)
	}
	return hfu
}

// SetElineupmallPhoto2l sets the "elineupmall_photo_2l" field.
func (hfu *HPFollowUpdate) SetElineupmallPhoto2l(eft enums.HPFollowType) *HPFollowUpdate {
	hfu.mutation.SetElineupmallPhoto2l(eft)
	return hfu
}

// SetNillableElineupmallPhoto2l sets the "elineupmall_photo_2l" field if the given value is not nil.
func (hfu *HPFollowUpdate) SetNillableElineupmallPhoto2l(eft *enums.HPFollowType) *HPFollowUpdate {
	if eft != nil {
		hfu.SetElineupmallPhoto2l(*eft)
	}
	return hfu
}

// SetElineupmallPhotoOther sets the "elineupmall_photo_other" field.
func (hfu *HPFollowUpdate) SetElineupmallPhotoOther(eft enums.HPFollowType) *HPFollowUpdate {
	hfu.mutation.SetElineupmallPhotoOther(eft)
	return hfu
}

// SetNillableElineupmallPhotoOther sets the "elineupmall_photo_other" field if the given value is not nil.
func (hfu *HPFollowUpdate) SetNillableElineupmallPhotoOther(eft *enums.HPFollowType) *HPFollowUpdate {
	if eft != nil {
		hfu.SetElineupmallPhotoOther(*eft)
	}
	return hfu
}

// SetElineupmallPhotoAlbum sets the "elineupmall_photo_album" field.
func (hfu *HPFollowUpdate) SetElineupmallPhotoAlbum(eft enums.HPFollowType) *HPFollowUpdate {
	hfu.mutation.SetElineupmallPhotoAlbum(eft)
	return hfu
}

// SetNillableElineupmallPhotoAlbum sets the "elineupmall_photo_album" field if the given value is not nil.
func (hfu *HPFollowUpdate) SetNillableElineupmallPhotoAlbum(eft *enums.HPFollowType) *HPFollowUpdate {
	if eft != nil {
		hfu.SetElineupmallPhotoAlbum(*eft)
	}
	return hfu
}

// SetElineupmallPhotoAlbumOther sets the "elineupmall_photo_album_other" field.
func (hfu *HPFollowUpdate) SetElineupmallPhotoAlbumOther(eft enums.HPFollowType) *HPFollowUpdate {
	hfu.mutation.SetElineupmallPhotoAlbumOther(eft)
	return hfu
}

// SetNillableElineupmallPhotoAlbumOther sets the "elineupmall_photo_album_other" field if the given value is not nil.
func (hfu *HPFollowUpdate) SetNillableElineupmallPhotoAlbumOther(eft *enums.HPFollowType) *HPFollowUpdate {
	if eft != nil {
		hfu.SetElineupmallPhotoAlbumOther(*eft)
	}
	return hfu
}

// SetElineupmallPhotoBook sets the "elineupmall_photo_book" field.
func (hfu *HPFollowUpdate) SetElineupmallPhotoBook(eft enums.HPFollowType) *HPFollowUpdate {
	hfu.mutation.SetElineupmallPhotoBook(eft)
	return hfu
}

// SetNillableElineupmallPhotoBook sets the "elineupmall_photo_book" field if the given value is not nil.
func (hfu *HPFollowUpdate) SetNillableElineupmallPhotoBook(eft *enums.HPFollowType) *HPFollowUpdate {
	if eft != nil {
		hfu.SetElineupmallPhotoBook(*eft)
	}
	return hfu
}

// SetElineupmallPhotoBookOther sets the "elineupmall_photo_book_other" field.
func (hfu *HPFollowUpdate) SetElineupmallPhotoBookOther(eft enums.HPFollowType) *HPFollowUpdate {
	hfu.mutation.SetElineupmallPhotoBookOther(eft)
	return hfu
}

// SetNillableElineupmallPhotoBookOther sets the "elineupmall_photo_book_other" field if the given value is not nil.
func (hfu *HPFollowUpdate) SetNillableElineupmallPhotoBookOther(eft *enums.HPFollowType) *HPFollowUpdate {
	if eft != nil {
		hfu.SetElineupmallPhotoBookOther(*eft)
	}
	return hfu
}

// SetElineupmallDvd sets the "elineupmall_dvd" field.
func (hfu *HPFollowUpdate) SetElineupmallDvd(eft enums.HPFollowType) *HPFollowUpdate {
	hfu.mutation.SetElineupmallDvd(eft)
	return hfu
}

// SetNillableElineupmallDvd sets the "elineupmall_dvd" field if the given value is not nil.
func (hfu *HPFollowUpdate) SetNillableElineupmallDvd(eft *enums.HPFollowType) *HPFollowUpdate {
	if eft != nil {
		hfu.SetElineupmallDvd(*eft)
	}
	return hfu
}

// SetElineupmallDvdMagazine sets the "elineupmall_dvd_magazine" field.
func (hfu *HPFollowUpdate) SetElineupmallDvdMagazine(eft enums.HPFollowType) *HPFollowUpdate {
	hfu.mutation.SetElineupmallDvdMagazine(eft)
	return hfu
}

// SetNillableElineupmallDvdMagazine sets the "elineupmall_dvd_magazine" field if the given value is not nil.
func (hfu *HPFollowUpdate) SetNillableElineupmallDvdMagazine(eft *enums.HPFollowType) *HPFollowUpdate {
	if eft != nil {
		hfu.SetElineupmallDvdMagazine(*eft)
	}
	return hfu
}

// SetElineupmallDvdMagazineOther sets the "elineupmall_dvd_magazine_other" field.
func (hfu *HPFollowUpdate) SetElineupmallDvdMagazineOther(eft enums.HPFollowType) *HPFollowUpdate {
	hfu.mutation.SetElineupmallDvdMagazineOther(eft)
	return hfu
}

// SetNillableElineupmallDvdMagazineOther sets the "elineupmall_dvd_magazine_other" field if the given value is not nil.
func (hfu *HPFollowUpdate) SetNillableElineupmallDvdMagazineOther(eft *enums.HPFollowType) *HPFollowUpdate {
	if eft != nil {
		hfu.SetElineupmallDvdMagazineOther(*eft)
	}
	return hfu
}

// SetElineupmallBlueray sets the "elineupmall_blueray" field.
func (hfu *HPFollowUpdate) SetElineupmallBlueray(eft enums.HPFollowType) *HPFollowUpdate {
	hfu.mutation.SetElineupmallBlueray(eft)
	return hfu
}

// SetNillableElineupmallBlueray sets the "elineupmall_blueray" field if the given value is not nil.
func (hfu *HPFollowUpdate) SetNillableElineupmallBlueray(eft *enums.HPFollowType) *HPFollowUpdate {
	if eft != nil {
		hfu.SetElineupmallBlueray(*eft)
	}
	return hfu
}

// SetElineupmallPenlight sets the "elineupmall_penlight" field.
func (hfu *HPFollowUpdate) SetElineupmallPenlight(eft enums.HPFollowType) *HPFollowUpdate {
	hfu.mutation.SetElineupmallPenlight(eft)
	return hfu
}

// SetNillableElineupmallPenlight sets the "elineupmall_penlight" field if the given value is not nil.
func (hfu *HPFollowUpdate) SetNillableElineupmallPenlight(eft *enums.HPFollowType) *HPFollowUpdate {
	if eft != nil {
		hfu.SetElineupmallPenlight(*eft)
	}
	return hfu
}

// SetElineupmallCollectionPinnapPoster sets the "elineupmall_collection_pinnap_poster" field.
func (hfu *HPFollowUpdate) SetElineupmallCollectionPinnapPoster(eft enums.HPFollowType) *HPFollowUpdate {
	hfu.mutation.SetElineupmallCollectionPinnapPoster(eft)
	return hfu
}

// SetNillableElineupmallCollectionPinnapPoster sets the "elineupmall_collection_pinnap_poster" field if the given value is not nil.
func (hfu *HPFollowUpdate) SetNillableElineupmallCollectionPinnapPoster(eft *enums.HPFollowType) *HPFollowUpdate {
	if eft != nil {
		hfu.SetElineupmallCollectionPinnapPoster(*eft)
	}
	return hfu
}

// SetElineupmallCollectionPhoto sets the "elineupmall_collection_photo" field.
func (hfu *HPFollowUpdate) SetElineupmallCollectionPhoto(eft enums.HPFollowType) *HPFollowUpdate {
	hfu.mutation.SetElineupmallCollectionPhoto(eft)
	return hfu
}

// SetNillableElineupmallCollectionPhoto sets the "elineupmall_collection_photo" field if the given value is not nil.
func (hfu *HPFollowUpdate) SetNillableElineupmallCollectionPhoto(eft *enums.HPFollowType) *HPFollowUpdate {
	if eft != nil {
		hfu.SetElineupmallCollectionPhoto(*eft)
	}
	return hfu
}

// SetElineupmallCollectionOther sets the "elineupmall_collection_other" field.
func (hfu *HPFollowUpdate) SetElineupmallCollectionOther(eft enums.HPFollowType) *HPFollowUpdate {
	hfu.mutation.SetElineupmallCollectionOther(eft)
	return hfu
}

// SetNillableElineupmallCollectionOther sets the "elineupmall_collection_other" field if the given value is not nil.
func (hfu *HPFollowUpdate) SetNillableElineupmallCollectionOther(eft *enums.HPFollowType) *HPFollowUpdate {
	if eft != nil {
		hfu.SetElineupmallCollectionOther(*eft)
	}
	return hfu
}

// SetElineupmallTshirt sets the "elineupmall_tshirt" field.
func (hfu *HPFollowUpdate) SetElineupmallTshirt(eft enums.HPFollowType) *HPFollowUpdate {
	hfu.mutation.SetElineupmallTshirt(eft)
	return hfu
}

// SetNillableElineupmallTshirt sets the "elineupmall_tshirt" field if the given value is not nil.
func (hfu *HPFollowUpdate) SetNillableElineupmallTshirt(eft *enums.HPFollowType) *HPFollowUpdate {
	if eft != nil {
		hfu.SetElineupmallTshirt(*eft)
	}
	return hfu
}

// SetElineupmallMicrofiberTowel sets the "elineupmall_microfiber_towel" field.
func (hfu *HPFollowUpdate) SetElineupmallMicrofiberTowel(eft enums.HPFollowType) *HPFollowUpdate {
	hfu.mutation.SetElineupmallMicrofiberTowel(eft)
	return hfu
}

// SetNillableElineupmallMicrofiberTowel sets the "elineupmall_microfiber_towel" field if the given value is not nil.
func (hfu *HPFollowUpdate) SetNillableElineupmallMicrofiberTowel(eft *enums.HPFollowType) *HPFollowUpdate {
	if eft != nil {
		hfu.SetElineupmallMicrofiberTowel(*eft)
	}
	return hfu
}

// SetElineupmallMufflerTowel sets the "elineupmall_muffler_towel" field.
func (hfu *HPFollowUpdate) SetElineupmallMufflerTowel(eft enums.HPFollowType) *HPFollowUpdate {
	hfu.mutation.SetElineupmallMufflerTowel(eft)
	return hfu
}

// SetNillableElineupmallMufflerTowel sets the "elineupmall_muffler_towel" field if the given value is not nil.
func (hfu *HPFollowUpdate) SetNillableElineupmallMufflerTowel(eft *enums.HPFollowType) *HPFollowUpdate {
	if eft != nil {
		hfu.SetElineupmallMufflerTowel(*eft)
	}
	return hfu
}

// SetElineupmallFsk sets the "elineupmall_fsk" field.
func (hfu *HPFollowUpdate) SetElineupmallFsk(eft enums.HPFollowType) *HPFollowUpdate {
	hfu.mutation.SetElineupmallFsk(eft)
	return hfu
}

// SetNillableElineupmallFsk sets the "elineupmall_fsk" field if the given value is not nil.
func (hfu *HPFollowUpdate) SetNillableElineupmallFsk(eft *enums.HPFollowType) *HPFollowUpdate {
	if eft != nil {
		hfu.SetElineupmallFsk(*eft)
	}
	return hfu
}

// SetElineupmallKeyringOther sets the "elineupmall_keyring_other" field.
func (hfu *HPFollowUpdate) SetElineupmallKeyringOther(eft enums.HPFollowType) *HPFollowUpdate {
	hfu.mutation.SetElineupmallKeyringOther(eft)
	return hfu
}

// SetNillableElineupmallKeyringOther sets the "elineupmall_keyring_other" field if the given value is not nil.
func (hfu *HPFollowUpdate) SetNillableElineupmallKeyringOther(eft *enums.HPFollowType) *HPFollowUpdate {
	if eft != nil {
		hfu.SetElineupmallKeyringOther(*eft)
	}
	return hfu
}

// SetElineupmallClearFile sets the "elineupmall_clear_file" field.
func (hfu *HPFollowUpdate) SetElineupmallClearFile(eft enums.HPFollowType) *HPFollowUpdate {
	hfu.mutation.SetElineupmallClearFile(eft)
	return hfu
}

// SetNillableElineupmallClearFile sets the "elineupmall_clear_file" field if the given value is not nil.
func (hfu *HPFollowUpdate) SetNillableElineupmallClearFile(eft *enums.HPFollowType) *HPFollowUpdate {
	if eft != nil {
		hfu.SetElineupmallClearFile(*eft)
	}
	return hfu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (hfu *HPFollowUpdate) SetUserID(id int) *HPFollowUpdate {
	hfu.mutation.SetUserID(id)
	return hfu
}

// SetUser sets the "user" edge to the User entity.
func (hfu *HPFollowUpdate) SetUser(u *User) *HPFollowUpdate {
	return hfu.SetUserID(u.ID)
}

// SetMemberID sets the "member" edge to the HPMember entity by ID.
func (hfu *HPFollowUpdate) SetMemberID(id int) *HPFollowUpdate {
	hfu.mutation.SetMemberID(id)
	return hfu
}

// SetNillableMemberID sets the "member" edge to the HPMember entity by ID if the given value is not nil.
func (hfu *HPFollowUpdate) SetNillableMemberID(id *int) *HPFollowUpdate {
	if id != nil {
		hfu = hfu.SetMemberID(*id)
	}
	return hfu
}

// SetMember sets the "member" edge to the HPMember entity.
func (hfu *HPFollowUpdate) SetMember(h *HPMember) *HPFollowUpdate {
	return hfu.SetMemberID(h.ID)
}

// SetArtistID sets the "artist" edge to the HPArtist entity by ID.
func (hfu *HPFollowUpdate) SetArtistID(id int) *HPFollowUpdate {
	hfu.mutation.SetArtistID(id)
	return hfu
}

// SetNillableArtistID sets the "artist" edge to the HPArtist entity by ID if the given value is not nil.
func (hfu *HPFollowUpdate) SetNillableArtistID(id *int) *HPFollowUpdate {
	if id != nil {
		hfu = hfu.SetArtistID(*id)
	}
	return hfu
}

// SetArtist sets the "artist" edge to the HPArtist entity.
func (hfu *HPFollowUpdate) SetArtist(h *HPArtist) *HPFollowUpdate {
	return hfu.SetArtistID(h.ID)
}

// Mutation returns the HPFollowMutation object of the builder.
func (hfu *HPFollowUpdate) Mutation() *HPFollowMutation {
	return hfu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (hfu *HPFollowUpdate) ClearUser() *HPFollowUpdate {
	hfu.mutation.ClearUser()
	return hfu
}

// ClearMember clears the "member" edge to the HPMember entity.
func (hfu *HPFollowUpdate) ClearMember() *HPFollowUpdate {
	hfu.mutation.ClearMember()
	return hfu
}

// ClearArtist clears the "artist" edge to the HPArtist entity.
func (hfu *HPFollowUpdate) ClearArtist() *HPFollowUpdate {
	hfu.mutation.ClearArtist()
	return hfu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hfu *HPFollowUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, HPFollowMutation](ctx, hfu.sqlSave, hfu.mutation, hfu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hfu *HPFollowUpdate) SaveX(ctx context.Context) int {
	affected, err := hfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hfu *HPFollowUpdate) Exec(ctx context.Context) error {
	_, err := hfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hfu *HPFollowUpdate) ExecX(ctx context.Context) {
	if err := hfu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hfu *HPFollowUpdate) check() error {
	if v, ok := hfu.mutation.GetType(); ok {
		if err := hpfollow.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "HPFollow.type": %w`, err)}
		}
	}
	if v, ok := hfu.mutation.ElineupmallOther(); ok {
		if err := hpfollow.ElineupmallOtherValidator(v); err != nil {
			return &ValidationError{Name: "elineupmall_other", err: fmt.Errorf(`ent: validator failed for field "HPFollow.elineupmall_other": %w`, err)}
		}
	}
	if v, ok := hfu.mutation.ElineupmallPhotoDaily(); ok {
		if err := hpfollow.ElineupmallPhotoDailyValidator(v); err != nil {
			return &ValidationError{Name: "elineupmall_photo_daily", err: fmt.Errorf(`ent: validator failed for field "HPFollow.elineupmall_photo_daily": %w`, err)}
		}
	}
	if v, ok := hfu.mutation.ElineupmallPhotoA4(); ok {
		if err := hpfollow.ElineupmallPhotoA4Validator(v); err != nil {
			return &ValidationError{Name: "elineupmall_photo_a4", err: fmt.Errorf(`ent: validator failed for field "HPFollow.elineupmall_photo_a4": %w`, err)}
		}
	}
	if v, ok := hfu.mutation.ElineupmallPhotoA5(); ok {
		if err := hpfollow.ElineupmallPhotoA5Validator(v); err != nil {
			return &ValidationError{Name: "elineupmall_photo_a5", err: fmt.Errorf(`ent: validator failed for field "HPFollow.elineupmall_photo_a5": %w`, err)}
		}
	}
	if v, ok := hfu.mutation.ElineupmallPhoto2l(); ok {
		if err := hpfollow.ElineupmallPhoto2lValidator(v); err != nil {
			return &ValidationError{Name: "elineupmall_photo_2l", err: fmt.Errorf(`ent: validator failed for field "HPFollow.elineupmall_photo_2l": %w`, err)}
		}
	}
	if v, ok := hfu.mutation.ElineupmallPhotoOther(); ok {
		if err := hpfollow.ElineupmallPhotoOtherValidator(v); err != nil {
			return &ValidationError{Name: "elineupmall_photo_other", err: fmt.Errorf(`ent: validator failed for field "HPFollow.elineupmall_photo_other": %w`, err)}
		}
	}
	if v, ok := hfu.mutation.ElineupmallPhotoAlbum(); ok {
		if err := hpfollow.ElineupmallPhotoAlbumValidator(v); err != nil {
			return &ValidationError{Name: "elineupmall_photo_album", err: fmt.Errorf(`ent: validator failed for field "HPFollow.elineupmall_photo_album": %w`, err)}
		}
	}
	if v, ok := hfu.mutation.ElineupmallPhotoAlbumOther(); ok {
		if err := hpfollow.ElineupmallPhotoAlbumOtherValidator(v); err != nil {
			return &ValidationError{Name: "elineupmall_photo_album_other", err: fmt.Errorf(`ent: validator failed for field "HPFollow.elineupmall_photo_album_other": %w`, err)}
		}
	}
	if v, ok := hfu.mutation.ElineupmallPhotoBook(); ok {
		if err := hpfollow.ElineupmallPhotoBookValidator(v); err != nil {
			return &ValidationError{Name: "elineupmall_photo_book", err: fmt.Errorf(`ent: validator failed for field "HPFollow.elineupmall_photo_book": %w`, err)}
		}
	}
	if v, ok := hfu.mutation.ElineupmallPhotoBookOther(); ok {
		if err := hpfollow.ElineupmallPhotoBookOtherValidator(v); err != nil {
			return &ValidationError{Name: "elineupmall_photo_book_other", err: fmt.Errorf(`ent: validator failed for field "HPFollow.elineupmall_photo_book_other": %w`, err)}
		}
	}
	if v, ok := hfu.mutation.ElineupmallDvd(); ok {
		if err := hpfollow.ElineupmallDvdValidator(v); err != nil {
			return &ValidationError{Name: "elineupmall_dvd", err: fmt.Errorf(`ent: validator failed for field "HPFollow.elineupmall_dvd": %w`, err)}
		}
	}
	if v, ok := hfu.mutation.ElineupmallDvdMagazine(); ok {
		if err := hpfollow.ElineupmallDvdMagazineValidator(v); err != nil {
			return &ValidationError{Name: "elineupmall_dvd_magazine", err: fmt.Errorf(`ent: validator failed for field "HPFollow.elineupmall_dvd_magazine": %w`, err)}
		}
	}
	if v, ok := hfu.mutation.ElineupmallDvdMagazineOther(); ok {
		if err := hpfollow.ElineupmallDvdMagazineOtherValidator(v); err != nil {
			return &ValidationError{Name: "elineupmall_dvd_magazine_other", err: fmt.Errorf(`ent: validator failed for field "HPFollow.elineupmall_dvd_magazine_other": %w`, err)}
		}
	}
	if v, ok := hfu.mutation.ElineupmallBlueray(); ok {
		if err := hpfollow.ElineupmallBluerayValidator(v); err != nil {
			return &ValidationError{Name: "elineupmall_blueray", err: fmt.Errorf(`ent: validator failed for field "HPFollow.elineupmall_blueray": %w`, err)}
		}
	}
	if v, ok := hfu.mutation.ElineupmallPenlight(); ok {
		if err := hpfollow.ElineupmallPenlightValidator(v); err != nil {
			return &ValidationError{Name: "elineupmall_penlight", err: fmt.Errorf(`ent: validator failed for field "HPFollow.elineupmall_penlight": %w`, err)}
		}
	}
	if v, ok := hfu.mutation.ElineupmallCollectionPinnapPoster(); ok {
		if err := hpfollow.ElineupmallCollectionPinnapPosterValidator(v); err != nil {
			return &ValidationError{Name: "elineupmall_collection_pinnap_poster", err: fmt.Errorf(`ent: validator failed for field "HPFollow.elineupmall_collection_pinnap_poster": %w`, err)}
		}
	}
	if v, ok := hfu.mutation.ElineupmallCollectionPhoto(); ok {
		if err := hpfollow.ElineupmallCollectionPhotoValidator(v); err != nil {
			return &ValidationError{Name: "elineupmall_collection_photo", err: fmt.Errorf(`ent: validator failed for field "HPFollow.elineupmall_collection_photo": %w`, err)}
		}
	}
	if v, ok := hfu.mutation.ElineupmallCollectionOther(); ok {
		if err := hpfollow.ElineupmallCollectionOtherValidator(v); err != nil {
			return &ValidationError{Name: "elineupmall_collection_other", err: fmt.Errorf(`ent: validator failed for field "HPFollow.elineupmall_collection_other": %w`, err)}
		}
	}
	if v, ok := hfu.mutation.ElineupmallTshirt(); ok {
		if err := hpfollow.ElineupmallTshirtValidator(v); err != nil {
			return &ValidationError{Name: "elineupmall_tshirt", err: fmt.Errorf(`ent: validator failed for field "HPFollow.elineupmall_tshirt": %w`, err)}
		}
	}
	if v, ok := hfu.mutation.ElineupmallMicrofiberTowel(); ok {
		if err := hpfollow.ElineupmallMicrofiberTowelValidator(v); err != nil {
			return &ValidationError{Name: "elineupmall_microfiber_towel", err: fmt.Errorf(`ent: validator failed for field "HPFollow.elineupmall_microfiber_towel": %w`, err)}
		}
	}
	if v, ok := hfu.mutation.ElineupmallMufflerTowel(); ok {
		if err := hpfollow.ElineupmallMufflerTowelValidator(v); err != nil {
			return &ValidationError{Name: "elineupmall_muffler_towel", err: fmt.Errorf(`ent: validator failed for field "HPFollow.elineupmall_muffler_towel": %w`, err)}
		}
	}
	if v, ok := hfu.mutation.ElineupmallFsk(); ok {
		if err := hpfollow.ElineupmallFskValidator(v); err != nil {
			return &ValidationError{Name: "elineupmall_fsk", err: fmt.Errorf(`ent: validator failed for field "HPFollow.elineupmall_fsk": %w`, err)}
		}
	}
	if v, ok := hfu.mutation.ElineupmallKeyringOther(); ok {
		if err := hpfollow.ElineupmallKeyringOtherValidator(v); err != nil {
			return &ValidationError{Name: "elineupmall_keyring_other", err: fmt.Errorf(`ent: validator failed for field "HPFollow.elineupmall_keyring_other": %w`, err)}
		}
	}
	if v, ok := hfu.mutation.ElineupmallClearFile(); ok {
		if err := hpfollow.ElineupmallClearFileValidator(v); err != nil {
			return &ValidationError{Name: "elineupmall_clear_file", err: fmt.Errorf(`ent: validator failed for field "HPFollow.elineupmall_clear_file": %w`, err)}
		}
	}
	if _, ok := hfu.mutation.UserID(); hfu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "HPFollow.user"`)
	}
	return nil
}

func (hfu *HPFollowUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := hfu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(hpfollow.Table, hpfollow.Columns, sqlgraph.NewFieldSpec(hpfollow.FieldID, field.TypeInt))
	if ps := hfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if hfu.mutation.CreatedAtCleared() {
		_spec.ClearField(hpfollow.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := hfu.mutation.UpdatedAt(); ok {
		_spec.SetField(hpfollow.FieldUpdatedAt, field.TypeTime, value)
	}
	if hfu.mutation.UpdatedAtCleared() {
		_spec.ClearField(hpfollow.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := hfu.mutation.GetType(); ok {
		_spec.SetField(hpfollow.FieldType, field.TypeEnum, value)
	}
	if value, ok := hfu.mutation.ElineupmallOther(); ok {
		_spec.SetField(hpfollow.FieldElineupmallOther, field.TypeEnum, value)
	}
	if value, ok := hfu.mutation.ElineupmallPhotoDaily(); ok {
		_spec.SetField(hpfollow.FieldElineupmallPhotoDaily, field.TypeEnum, value)
	}
	if value, ok := hfu.mutation.ElineupmallPhotoA4(); ok {
		_spec.SetField(hpfollow.FieldElineupmallPhotoA4, field.TypeEnum, value)
	}
	if value, ok := hfu.mutation.ElineupmallPhotoA5(); ok {
		_spec.SetField(hpfollow.FieldElineupmallPhotoA5, field.TypeEnum, value)
	}
	if value, ok := hfu.mutation.ElineupmallPhoto2l(); ok {
		_spec.SetField(hpfollow.FieldElineupmallPhoto2l, field.TypeEnum, value)
	}
	if value, ok := hfu.mutation.ElineupmallPhotoOther(); ok {
		_spec.SetField(hpfollow.FieldElineupmallPhotoOther, field.TypeEnum, value)
	}
	if value, ok := hfu.mutation.ElineupmallPhotoAlbum(); ok {
		_spec.SetField(hpfollow.FieldElineupmallPhotoAlbum, field.TypeEnum, value)
	}
	if value, ok := hfu.mutation.ElineupmallPhotoAlbumOther(); ok {
		_spec.SetField(hpfollow.FieldElineupmallPhotoAlbumOther, field.TypeEnum, value)
	}
	if value, ok := hfu.mutation.ElineupmallPhotoBook(); ok {
		_spec.SetField(hpfollow.FieldElineupmallPhotoBook, field.TypeEnum, value)
	}
	if value, ok := hfu.mutation.ElineupmallPhotoBookOther(); ok {
		_spec.SetField(hpfollow.FieldElineupmallPhotoBookOther, field.TypeEnum, value)
	}
	if value, ok := hfu.mutation.ElineupmallDvd(); ok {
		_spec.SetField(hpfollow.FieldElineupmallDvd, field.TypeEnum, value)
	}
	if value, ok := hfu.mutation.ElineupmallDvdMagazine(); ok {
		_spec.SetField(hpfollow.FieldElineupmallDvdMagazine, field.TypeEnum, value)
	}
	if value, ok := hfu.mutation.ElineupmallDvdMagazineOther(); ok {
		_spec.SetField(hpfollow.FieldElineupmallDvdMagazineOther, field.TypeEnum, value)
	}
	if value, ok := hfu.mutation.ElineupmallBlueray(); ok {
		_spec.SetField(hpfollow.FieldElineupmallBlueray, field.TypeEnum, value)
	}
	if value, ok := hfu.mutation.ElineupmallPenlight(); ok {
		_spec.SetField(hpfollow.FieldElineupmallPenlight, field.TypeEnum, value)
	}
	if value, ok := hfu.mutation.ElineupmallCollectionPinnapPoster(); ok {
		_spec.SetField(hpfollow.FieldElineupmallCollectionPinnapPoster, field.TypeEnum, value)
	}
	if value, ok := hfu.mutation.ElineupmallCollectionPhoto(); ok {
		_spec.SetField(hpfollow.FieldElineupmallCollectionPhoto, field.TypeEnum, value)
	}
	if value, ok := hfu.mutation.ElineupmallCollectionOther(); ok {
		_spec.SetField(hpfollow.FieldElineupmallCollectionOther, field.TypeEnum, value)
	}
	if value, ok := hfu.mutation.ElineupmallTshirt(); ok {
		_spec.SetField(hpfollow.FieldElineupmallTshirt, field.TypeEnum, value)
	}
	if value, ok := hfu.mutation.ElineupmallMicrofiberTowel(); ok {
		_spec.SetField(hpfollow.FieldElineupmallMicrofiberTowel, field.TypeEnum, value)
	}
	if value, ok := hfu.mutation.ElineupmallMufflerTowel(); ok {
		_spec.SetField(hpfollow.FieldElineupmallMufflerTowel, field.TypeEnum, value)
	}
	if value, ok := hfu.mutation.ElineupmallFsk(); ok {
		_spec.SetField(hpfollow.FieldElineupmallFsk, field.TypeEnum, value)
	}
	if value, ok := hfu.mutation.ElineupmallKeyringOther(); ok {
		_spec.SetField(hpfollow.FieldElineupmallKeyringOther, field.TypeEnum, value)
	}
	if value, ok := hfu.mutation.ElineupmallClearFile(); ok {
		_spec.SetField(hpfollow.FieldElineupmallClearFile, field.TypeEnum, value)
	}
	if hfu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpfollow.UserTable,
			Columns: []string{hpfollow.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hfu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpfollow.UserTable,
			Columns: []string{hpfollow.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hfu.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpfollow.MemberTable,
			Columns: []string{hpfollow.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpmember.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hfu.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpfollow.MemberTable,
			Columns: []string{hpfollow.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hfu.mutation.ArtistCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpfollow.ArtistTable,
			Columns: []string{hpfollow.ArtistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpartist.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hfu.mutation.ArtistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpfollow.ArtistTable,
			Columns: []string{hpfollow.ArtistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpartist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hpfollow.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	hfu.mutation.done = true
	return n, nil
}

// HPFollowUpdateOne is the builder for updating a single HPFollow entity.
type HPFollowUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HPFollowMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (hfuo *HPFollowUpdateOne) SetUpdatedAt(t time.Time) *HPFollowUpdateOne {
	hfuo.mutation.SetUpdatedAt(t)
	return hfuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (hfuo *HPFollowUpdateOne) SetNillableUpdatedAt(t *time.Time) *HPFollowUpdateOne {
	if t != nil {
		hfuo.SetUpdatedAt(*t)
	}
	return hfuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (hfuo *HPFollowUpdateOne) ClearUpdatedAt() *HPFollowUpdateOne {
	hfuo.mutation.ClearUpdatedAt()
	return hfuo
}

// SetType sets the "type" field.
func (hfuo *HPFollowUpdateOne) SetType(eft enums.HPFollowType) *HPFollowUpdateOne {
	hfuo.mutation.SetType(eft)
	return hfuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (hfuo *HPFollowUpdateOne) SetNillableType(eft *enums.HPFollowType) *HPFollowUpdateOne {
	if eft != nil {
		hfuo.SetType(*eft)
	}
	return hfuo
}

// SetElineupmallOther sets the "elineupmall_other" field.
func (hfuo *HPFollowUpdateOne) SetElineupmallOther(eft enums.HPFollowType) *HPFollowUpdateOne {
	hfuo.mutation.SetElineupmallOther(eft)
	return hfuo
}

// SetNillableElineupmallOther sets the "elineupmall_other" field if the given value is not nil.
func (hfuo *HPFollowUpdateOne) SetNillableElineupmallOther(eft *enums.HPFollowType) *HPFollowUpdateOne {
	if eft != nil {
		hfuo.SetElineupmallOther(*eft)
	}
	return hfuo
}

// SetElineupmallPhotoDaily sets the "elineupmall_photo_daily" field.
func (hfuo *HPFollowUpdateOne) SetElineupmallPhotoDaily(eft enums.HPFollowType) *HPFollowUpdateOne {
	hfuo.mutation.SetElineupmallPhotoDaily(eft)
	return hfuo
}

// SetNillableElineupmallPhotoDaily sets the "elineupmall_photo_daily" field if the given value is not nil.
func (hfuo *HPFollowUpdateOne) SetNillableElineupmallPhotoDaily(eft *enums.HPFollowType) *HPFollowUpdateOne {
	if eft != nil {
		hfuo.SetElineupmallPhotoDaily(*eft)
	}
	return hfuo
}

// SetElineupmallPhotoA4 sets the "elineupmall_photo_a4" field.
func (hfuo *HPFollowUpdateOne) SetElineupmallPhotoA4(eft enums.HPFollowType) *HPFollowUpdateOne {
	hfuo.mutation.SetElineupmallPhotoA4(eft)
	return hfuo
}

// SetNillableElineupmallPhotoA4 sets the "elineupmall_photo_a4" field if the given value is not nil.
func (hfuo *HPFollowUpdateOne) SetNillableElineupmallPhotoA4(eft *enums.HPFollowType) *HPFollowUpdateOne {
	if eft != nil {
		hfuo.SetElineupmallPhotoA4(*eft)
	}
	return hfuo
}

// SetElineupmallPhotoA5 sets the "elineupmall_photo_a5" field.
func (hfuo *HPFollowUpdateOne) SetElineupmallPhotoA5(eft enums.HPFollowType) *HPFollowUpdateOne {
	hfuo.mutation.SetElineupmallPhotoA5(eft)
	return hfuo
}

// SetNillableElineupmallPhotoA5 sets the "elineupmall_photo_a5" field if the given value is not nil.
func (hfuo *HPFollowUpdateOne) SetNillableElineupmallPhotoA5(eft *enums.HPFollowType) *HPFollowUpdateOne {
	if eft != nil {
		hfuo.SetElineupmallPhotoA5(*eft)
	}
	return hfuo
}

// SetElineupmallPhoto2l sets the "elineupmall_photo_2l" field.
func (hfuo *HPFollowUpdateOne) SetElineupmallPhoto2l(eft enums.HPFollowType) *HPFollowUpdateOne {
	hfuo.mutation.SetElineupmallPhoto2l(eft)
	return hfuo
}

// SetNillableElineupmallPhoto2l sets the "elineupmall_photo_2l" field if the given value is not nil.
func (hfuo *HPFollowUpdateOne) SetNillableElineupmallPhoto2l(eft *enums.HPFollowType) *HPFollowUpdateOne {
	if eft != nil {
		hfuo.SetElineupmallPhoto2l(*eft)
	}
	return hfuo
}

// SetElineupmallPhotoOther sets the "elineupmall_photo_other" field.
func (hfuo *HPFollowUpdateOne) SetElineupmallPhotoOther(eft enums.HPFollowType) *HPFollowUpdateOne {
	hfuo.mutation.SetElineupmallPhotoOther(eft)
	return hfuo
}

// SetNillableElineupmallPhotoOther sets the "elineupmall_photo_other" field if the given value is not nil.
func (hfuo *HPFollowUpdateOne) SetNillableElineupmallPhotoOther(eft *enums.HPFollowType) *HPFollowUpdateOne {
	if eft != nil {
		hfuo.SetElineupmallPhotoOther(*eft)
	}
	return hfuo
}

// SetElineupmallPhotoAlbum sets the "elineupmall_photo_album" field.
func (hfuo *HPFollowUpdateOne) SetElineupmallPhotoAlbum(eft enums.HPFollowType) *HPFollowUpdateOne {
	hfuo.mutation.SetElineupmallPhotoAlbum(eft)
	return hfuo
}

// SetNillableElineupmallPhotoAlbum sets the "elineupmall_photo_album" field if the given value is not nil.
func (hfuo *HPFollowUpdateOne) SetNillableElineupmallPhotoAlbum(eft *enums.HPFollowType) *HPFollowUpdateOne {
	if eft != nil {
		hfuo.SetElineupmallPhotoAlbum(*eft)
	}
	return hfuo
}

// SetElineupmallPhotoAlbumOther sets the "elineupmall_photo_album_other" field.
func (hfuo *HPFollowUpdateOne) SetElineupmallPhotoAlbumOther(eft enums.HPFollowType) *HPFollowUpdateOne {
	hfuo.mutation.SetElineupmallPhotoAlbumOther(eft)
	return hfuo
}

// SetNillableElineupmallPhotoAlbumOther sets the "elineupmall_photo_album_other" field if the given value is not nil.
func (hfuo *HPFollowUpdateOne) SetNillableElineupmallPhotoAlbumOther(eft *enums.HPFollowType) *HPFollowUpdateOne {
	if eft != nil {
		hfuo.SetElineupmallPhotoAlbumOther(*eft)
	}
	return hfuo
}

// SetElineupmallPhotoBook sets the "elineupmall_photo_book" field.
func (hfuo *HPFollowUpdateOne) SetElineupmallPhotoBook(eft enums.HPFollowType) *HPFollowUpdateOne {
	hfuo.mutation.SetElineupmallPhotoBook(eft)
	return hfuo
}

// SetNillableElineupmallPhotoBook sets the "elineupmall_photo_book" field if the given value is not nil.
func (hfuo *HPFollowUpdateOne) SetNillableElineupmallPhotoBook(eft *enums.HPFollowType) *HPFollowUpdateOne {
	if eft != nil {
		hfuo.SetElineupmallPhotoBook(*eft)
	}
	return hfuo
}

// SetElineupmallPhotoBookOther sets the "elineupmall_photo_book_other" field.
func (hfuo *HPFollowUpdateOne) SetElineupmallPhotoBookOther(eft enums.HPFollowType) *HPFollowUpdateOne {
	hfuo.mutation.SetElineupmallPhotoBookOther(eft)
	return hfuo
}

// SetNillableElineupmallPhotoBookOther sets the "elineupmall_photo_book_other" field if the given value is not nil.
func (hfuo *HPFollowUpdateOne) SetNillableElineupmallPhotoBookOther(eft *enums.HPFollowType) *HPFollowUpdateOne {
	if eft != nil {
		hfuo.SetElineupmallPhotoBookOther(*eft)
	}
	return hfuo
}

// SetElineupmallDvd sets the "elineupmall_dvd" field.
func (hfuo *HPFollowUpdateOne) SetElineupmallDvd(eft enums.HPFollowType) *HPFollowUpdateOne {
	hfuo.mutation.SetElineupmallDvd(eft)
	return hfuo
}

// SetNillableElineupmallDvd sets the "elineupmall_dvd" field if the given value is not nil.
func (hfuo *HPFollowUpdateOne) SetNillableElineupmallDvd(eft *enums.HPFollowType) *HPFollowUpdateOne {
	if eft != nil {
		hfuo.SetElineupmallDvd(*eft)
	}
	return hfuo
}

// SetElineupmallDvdMagazine sets the "elineupmall_dvd_magazine" field.
func (hfuo *HPFollowUpdateOne) SetElineupmallDvdMagazine(eft enums.HPFollowType) *HPFollowUpdateOne {
	hfuo.mutation.SetElineupmallDvdMagazine(eft)
	return hfuo
}

// SetNillableElineupmallDvdMagazine sets the "elineupmall_dvd_magazine" field if the given value is not nil.
func (hfuo *HPFollowUpdateOne) SetNillableElineupmallDvdMagazine(eft *enums.HPFollowType) *HPFollowUpdateOne {
	if eft != nil {
		hfuo.SetElineupmallDvdMagazine(*eft)
	}
	return hfuo
}

// SetElineupmallDvdMagazineOther sets the "elineupmall_dvd_magazine_other" field.
func (hfuo *HPFollowUpdateOne) SetElineupmallDvdMagazineOther(eft enums.HPFollowType) *HPFollowUpdateOne {
	hfuo.mutation.SetElineupmallDvdMagazineOther(eft)
	return hfuo
}

// SetNillableElineupmallDvdMagazineOther sets the "elineupmall_dvd_magazine_other" field if the given value is not nil.
func (hfuo *HPFollowUpdateOne) SetNillableElineupmallDvdMagazineOther(eft *enums.HPFollowType) *HPFollowUpdateOne {
	if eft != nil {
		hfuo.SetElineupmallDvdMagazineOther(*eft)
	}
	return hfuo
}

// SetElineupmallBlueray sets the "elineupmall_blueray" field.
func (hfuo *HPFollowUpdateOne) SetElineupmallBlueray(eft enums.HPFollowType) *HPFollowUpdateOne {
	hfuo.mutation.SetElineupmallBlueray(eft)
	return hfuo
}

// SetNillableElineupmallBlueray sets the "elineupmall_blueray" field if the given value is not nil.
func (hfuo *HPFollowUpdateOne) SetNillableElineupmallBlueray(eft *enums.HPFollowType) *HPFollowUpdateOne {
	if eft != nil {
		hfuo.SetElineupmallBlueray(*eft)
	}
	return hfuo
}

// SetElineupmallPenlight sets the "elineupmall_penlight" field.
func (hfuo *HPFollowUpdateOne) SetElineupmallPenlight(eft enums.HPFollowType) *HPFollowUpdateOne {
	hfuo.mutation.SetElineupmallPenlight(eft)
	return hfuo
}

// SetNillableElineupmallPenlight sets the "elineupmall_penlight" field if the given value is not nil.
func (hfuo *HPFollowUpdateOne) SetNillableElineupmallPenlight(eft *enums.HPFollowType) *HPFollowUpdateOne {
	if eft != nil {
		hfuo.SetElineupmallPenlight(*eft)
	}
	return hfuo
}

// SetElineupmallCollectionPinnapPoster sets the "elineupmall_collection_pinnap_poster" field.
func (hfuo *HPFollowUpdateOne) SetElineupmallCollectionPinnapPoster(eft enums.HPFollowType) *HPFollowUpdateOne {
	hfuo.mutation.SetElineupmallCollectionPinnapPoster(eft)
	return hfuo
}

// SetNillableElineupmallCollectionPinnapPoster sets the "elineupmall_collection_pinnap_poster" field if the given value is not nil.
func (hfuo *HPFollowUpdateOne) SetNillableElineupmallCollectionPinnapPoster(eft *enums.HPFollowType) *HPFollowUpdateOne {
	if eft != nil {
		hfuo.SetElineupmallCollectionPinnapPoster(*eft)
	}
	return hfuo
}

// SetElineupmallCollectionPhoto sets the "elineupmall_collection_photo" field.
func (hfuo *HPFollowUpdateOne) SetElineupmallCollectionPhoto(eft enums.HPFollowType) *HPFollowUpdateOne {
	hfuo.mutation.SetElineupmallCollectionPhoto(eft)
	return hfuo
}

// SetNillableElineupmallCollectionPhoto sets the "elineupmall_collection_photo" field if the given value is not nil.
func (hfuo *HPFollowUpdateOne) SetNillableElineupmallCollectionPhoto(eft *enums.HPFollowType) *HPFollowUpdateOne {
	if eft != nil {
		hfuo.SetElineupmallCollectionPhoto(*eft)
	}
	return hfuo
}

// SetElineupmallCollectionOther sets the "elineupmall_collection_other" field.
func (hfuo *HPFollowUpdateOne) SetElineupmallCollectionOther(eft enums.HPFollowType) *HPFollowUpdateOne {
	hfuo.mutation.SetElineupmallCollectionOther(eft)
	return hfuo
}

// SetNillableElineupmallCollectionOther sets the "elineupmall_collection_other" field if the given value is not nil.
func (hfuo *HPFollowUpdateOne) SetNillableElineupmallCollectionOther(eft *enums.HPFollowType) *HPFollowUpdateOne {
	if eft != nil {
		hfuo.SetElineupmallCollectionOther(*eft)
	}
	return hfuo
}

// SetElineupmallTshirt sets the "elineupmall_tshirt" field.
func (hfuo *HPFollowUpdateOne) SetElineupmallTshirt(eft enums.HPFollowType) *HPFollowUpdateOne {
	hfuo.mutation.SetElineupmallTshirt(eft)
	return hfuo
}

// SetNillableElineupmallTshirt sets the "elineupmall_tshirt" field if the given value is not nil.
func (hfuo *HPFollowUpdateOne) SetNillableElineupmallTshirt(eft *enums.HPFollowType) *HPFollowUpdateOne {
	if eft != nil {
		hfuo.SetElineupmallTshirt(*eft)
	}
	return hfuo
}

// SetElineupmallMicrofiberTowel sets the "elineupmall_microfiber_towel" field.
func (hfuo *HPFollowUpdateOne) SetElineupmallMicrofiberTowel(eft enums.HPFollowType) *HPFollowUpdateOne {
	hfuo.mutation.SetElineupmallMicrofiberTowel(eft)
	return hfuo
}

// SetNillableElineupmallMicrofiberTowel sets the "elineupmall_microfiber_towel" field if the given value is not nil.
func (hfuo *HPFollowUpdateOne) SetNillableElineupmallMicrofiberTowel(eft *enums.HPFollowType) *HPFollowUpdateOne {
	if eft != nil {
		hfuo.SetElineupmallMicrofiberTowel(*eft)
	}
	return hfuo
}

// SetElineupmallMufflerTowel sets the "elineupmall_muffler_towel" field.
func (hfuo *HPFollowUpdateOne) SetElineupmallMufflerTowel(eft enums.HPFollowType) *HPFollowUpdateOne {
	hfuo.mutation.SetElineupmallMufflerTowel(eft)
	return hfuo
}

// SetNillableElineupmallMufflerTowel sets the "elineupmall_muffler_towel" field if the given value is not nil.
func (hfuo *HPFollowUpdateOne) SetNillableElineupmallMufflerTowel(eft *enums.HPFollowType) *HPFollowUpdateOne {
	if eft != nil {
		hfuo.SetElineupmallMufflerTowel(*eft)
	}
	return hfuo
}

// SetElineupmallFsk sets the "elineupmall_fsk" field.
func (hfuo *HPFollowUpdateOne) SetElineupmallFsk(eft enums.HPFollowType) *HPFollowUpdateOne {
	hfuo.mutation.SetElineupmallFsk(eft)
	return hfuo
}

// SetNillableElineupmallFsk sets the "elineupmall_fsk" field if the given value is not nil.
func (hfuo *HPFollowUpdateOne) SetNillableElineupmallFsk(eft *enums.HPFollowType) *HPFollowUpdateOne {
	if eft != nil {
		hfuo.SetElineupmallFsk(*eft)
	}
	return hfuo
}

// SetElineupmallKeyringOther sets the "elineupmall_keyring_other" field.
func (hfuo *HPFollowUpdateOne) SetElineupmallKeyringOther(eft enums.HPFollowType) *HPFollowUpdateOne {
	hfuo.mutation.SetElineupmallKeyringOther(eft)
	return hfuo
}

// SetNillableElineupmallKeyringOther sets the "elineupmall_keyring_other" field if the given value is not nil.
func (hfuo *HPFollowUpdateOne) SetNillableElineupmallKeyringOther(eft *enums.HPFollowType) *HPFollowUpdateOne {
	if eft != nil {
		hfuo.SetElineupmallKeyringOther(*eft)
	}
	return hfuo
}

// SetElineupmallClearFile sets the "elineupmall_clear_file" field.
func (hfuo *HPFollowUpdateOne) SetElineupmallClearFile(eft enums.HPFollowType) *HPFollowUpdateOne {
	hfuo.mutation.SetElineupmallClearFile(eft)
	return hfuo
}

// SetNillableElineupmallClearFile sets the "elineupmall_clear_file" field if the given value is not nil.
func (hfuo *HPFollowUpdateOne) SetNillableElineupmallClearFile(eft *enums.HPFollowType) *HPFollowUpdateOne {
	if eft != nil {
		hfuo.SetElineupmallClearFile(*eft)
	}
	return hfuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (hfuo *HPFollowUpdateOne) SetUserID(id int) *HPFollowUpdateOne {
	hfuo.mutation.SetUserID(id)
	return hfuo
}

// SetUser sets the "user" edge to the User entity.
func (hfuo *HPFollowUpdateOne) SetUser(u *User) *HPFollowUpdateOne {
	return hfuo.SetUserID(u.ID)
}

// SetMemberID sets the "member" edge to the HPMember entity by ID.
func (hfuo *HPFollowUpdateOne) SetMemberID(id int) *HPFollowUpdateOne {
	hfuo.mutation.SetMemberID(id)
	return hfuo
}

// SetNillableMemberID sets the "member" edge to the HPMember entity by ID if the given value is not nil.
func (hfuo *HPFollowUpdateOne) SetNillableMemberID(id *int) *HPFollowUpdateOne {
	if id != nil {
		hfuo = hfuo.SetMemberID(*id)
	}
	return hfuo
}

// SetMember sets the "member" edge to the HPMember entity.
func (hfuo *HPFollowUpdateOne) SetMember(h *HPMember) *HPFollowUpdateOne {
	return hfuo.SetMemberID(h.ID)
}

// SetArtistID sets the "artist" edge to the HPArtist entity by ID.
func (hfuo *HPFollowUpdateOne) SetArtistID(id int) *HPFollowUpdateOne {
	hfuo.mutation.SetArtistID(id)
	return hfuo
}

// SetNillableArtistID sets the "artist" edge to the HPArtist entity by ID if the given value is not nil.
func (hfuo *HPFollowUpdateOne) SetNillableArtistID(id *int) *HPFollowUpdateOne {
	if id != nil {
		hfuo = hfuo.SetArtistID(*id)
	}
	return hfuo
}

// SetArtist sets the "artist" edge to the HPArtist entity.
func (hfuo *HPFollowUpdateOne) SetArtist(h *HPArtist) *HPFollowUpdateOne {
	return hfuo.SetArtistID(h.ID)
}

// Mutation returns the HPFollowMutation object of the builder.
func (hfuo *HPFollowUpdateOne) Mutation() *HPFollowMutation {
	return hfuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (hfuo *HPFollowUpdateOne) ClearUser() *HPFollowUpdateOne {
	hfuo.mutation.ClearUser()
	return hfuo
}

// ClearMember clears the "member" edge to the HPMember entity.
func (hfuo *HPFollowUpdateOne) ClearMember() *HPFollowUpdateOne {
	hfuo.mutation.ClearMember()
	return hfuo
}

// ClearArtist clears the "artist" edge to the HPArtist entity.
func (hfuo *HPFollowUpdateOne) ClearArtist() *HPFollowUpdateOne {
	hfuo.mutation.ClearArtist()
	return hfuo
}

// Where appends a list predicates to the HPFollowUpdate builder.
func (hfuo *HPFollowUpdateOne) Where(ps ...predicate.HPFollow) *HPFollowUpdateOne {
	hfuo.mutation.Where(ps...)
	return hfuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (hfuo *HPFollowUpdateOne) Select(field string, fields ...string) *HPFollowUpdateOne {
	hfuo.fields = append([]string{field}, fields...)
	return hfuo
}

// Save executes the query and returns the updated HPFollow entity.
func (hfuo *HPFollowUpdateOne) Save(ctx context.Context) (*HPFollow, error) {
	return withHooks[*HPFollow, HPFollowMutation](ctx, hfuo.sqlSave, hfuo.mutation, hfuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hfuo *HPFollowUpdateOne) SaveX(ctx context.Context) *HPFollow {
	node, err := hfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (hfuo *HPFollowUpdateOne) Exec(ctx context.Context) error {
	_, err := hfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hfuo *HPFollowUpdateOne) ExecX(ctx context.Context) {
	if err := hfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hfuo *HPFollowUpdateOne) check() error {
	if v, ok := hfuo.mutation.GetType(); ok {
		if err := hpfollow.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "HPFollow.type": %w`, err)}
		}
	}
	if v, ok := hfuo.mutation.ElineupmallOther(); ok {
		if err := hpfollow.ElineupmallOtherValidator(v); err != nil {
			return &ValidationError{Name: "elineupmall_other", err: fmt.Errorf(`ent: validator failed for field "HPFollow.elineupmall_other": %w`, err)}
		}
	}
	if v, ok := hfuo.mutation.ElineupmallPhotoDaily(); ok {
		if err := hpfollow.ElineupmallPhotoDailyValidator(v); err != nil {
			return &ValidationError{Name: "elineupmall_photo_daily", err: fmt.Errorf(`ent: validator failed for field "HPFollow.elineupmall_photo_daily": %w`, err)}
		}
	}
	if v, ok := hfuo.mutation.ElineupmallPhotoA4(); ok {
		if err := hpfollow.ElineupmallPhotoA4Validator(v); err != nil {
			return &ValidationError{Name: "elineupmall_photo_a4", err: fmt.Errorf(`ent: validator failed for field "HPFollow.elineupmall_photo_a4": %w`, err)}
		}
	}
	if v, ok := hfuo.mutation.ElineupmallPhotoA5(); ok {
		if err := hpfollow.ElineupmallPhotoA5Validator(v); err != nil {
			return &ValidationError{Name: "elineupmall_photo_a5", err: fmt.Errorf(`ent: validator failed for field "HPFollow.elineupmall_photo_a5": %w`, err)}
		}
	}
	if v, ok := hfuo.mutation.ElineupmallPhoto2l(); ok {
		if err := hpfollow.ElineupmallPhoto2lValidator(v); err != nil {
			return &ValidationError{Name: "elineupmall_photo_2l", err: fmt.Errorf(`ent: validator failed for field "HPFollow.elineupmall_photo_2l": %w`, err)}
		}
	}
	if v, ok := hfuo.mutation.ElineupmallPhotoOther(); ok {
		if err := hpfollow.ElineupmallPhotoOtherValidator(v); err != nil {
			return &ValidationError{Name: "elineupmall_photo_other", err: fmt.Errorf(`ent: validator failed for field "HPFollow.elineupmall_photo_other": %w`, err)}
		}
	}
	if v, ok := hfuo.mutation.ElineupmallPhotoAlbum(); ok {
		if err := hpfollow.ElineupmallPhotoAlbumValidator(v); err != nil {
			return &ValidationError{Name: "elineupmall_photo_album", err: fmt.Errorf(`ent: validator failed for field "HPFollow.elineupmall_photo_album": %w`, err)}
		}
	}
	if v, ok := hfuo.mutation.ElineupmallPhotoAlbumOther(); ok {
		if err := hpfollow.ElineupmallPhotoAlbumOtherValidator(v); err != nil {
			return &ValidationError{Name: "elineupmall_photo_album_other", err: fmt.Errorf(`ent: validator failed for field "HPFollow.elineupmall_photo_album_other": %w`, err)}
		}
	}
	if v, ok := hfuo.mutation.ElineupmallPhotoBook(); ok {
		if err := hpfollow.ElineupmallPhotoBookValidator(v); err != nil {
			return &ValidationError{Name: "elineupmall_photo_book", err: fmt.Errorf(`ent: validator failed for field "HPFollow.elineupmall_photo_book": %w`, err)}
		}
	}
	if v, ok := hfuo.mutation.ElineupmallPhotoBookOther(); ok {
		if err := hpfollow.ElineupmallPhotoBookOtherValidator(v); err != nil {
			return &ValidationError{Name: "elineupmall_photo_book_other", err: fmt.Errorf(`ent: validator failed for field "HPFollow.elineupmall_photo_book_other": %w`, err)}
		}
	}
	if v, ok := hfuo.mutation.ElineupmallDvd(); ok {
		if err := hpfollow.ElineupmallDvdValidator(v); err != nil {
			return &ValidationError{Name: "elineupmall_dvd", err: fmt.Errorf(`ent: validator failed for field "HPFollow.elineupmall_dvd": %w`, err)}
		}
	}
	if v, ok := hfuo.mutation.ElineupmallDvdMagazine(); ok {
		if err := hpfollow.ElineupmallDvdMagazineValidator(v); err != nil {
			return &ValidationError{Name: "elineupmall_dvd_magazine", err: fmt.Errorf(`ent: validator failed for field "HPFollow.elineupmall_dvd_magazine": %w`, err)}
		}
	}
	if v, ok := hfuo.mutation.ElineupmallDvdMagazineOther(); ok {
		if err := hpfollow.ElineupmallDvdMagazineOtherValidator(v); err != nil {
			return &ValidationError{Name: "elineupmall_dvd_magazine_other", err: fmt.Errorf(`ent: validator failed for field "HPFollow.elineupmall_dvd_magazine_other": %w`, err)}
		}
	}
	if v, ok := hfuo.mutation.ElineupmallBlueray(); ok {
		if err := hpfollow.ElineupmallBluerayValidator(v); err != nil {
			return &ValidationError{Name: "elineupmall_blueray", err: fmt.Errorf(`ent: validator failed for field "HPFollow.elineupmall_blueray": %w`, err)}
		}
	}
	if v, ok := hfuo.mutation.ElineupmallPenlight(); ok {
		if err := hpfollow.ElineupmallPenlightValidator(v); err != nil {
			return &ValidationError{Name: "elineupmall_penlight", err: fmt.Errorf(`ent: validator failed for field "HPFollow.elineupmall_penlight": %w`, err)}
		}
	}
	if v, ok := hfuo.mutation.ElineupmallCollectionPinnapPoster(); ok {
		if err := hpfollow.ElineupmallCollectionPinnapPosterValidator(v); err != nil {
			return &ValidationError{Name: "elineupmall_collection_pinnap_poster", err: fmt.Errorf(`ent: validator failed for field "HPFollow.elineupmall_collection_pinnap_poster": %w`, err)}
		}
	}
	if v, ok := hfuo.mutation.ElineupmallCollectionPhoto(); ok {
		if err := hpfollow.ElineupmallCollectionPhotoValidator(v); err != nil {
			return &ValidationError{Name: "elineupmall_collection_photo", err: fmt.Errorf(`ent: validator failed for field "HPFollow.elineupmall_collection_photo": %w`, err)}
		}
	}
	if v, ok := hfuo.mutation.ElineupmallCollectionOther(); ok {
		if err := hpfollow.ElineupmallCollectionOtherValidator(v); err != nil {
			return &ValidationError{Name: "elineupmall_collection_other", err: fmt.Errorf(`ent: validator failed for field "HPFollow.elineupmall_collection_other": %w`, err)}
		}
	}
	if v, ok := hfuo.mutation.ElineupmallTshirt(); ok {
		if err := hpfollow.ElineupmallTshirtValidator(v); err != nil {
			return &ValidationError{Name: "elineupmall_tshirt", err: fmt.Errorf(`ent: validator failed for field "HPFollow.elineupmall_tshirt": %w`, err)}
		}
	}
	if v, ok := hfuo.mutation.ElineupmallMicrofiberTowel(); ok {
		if err := hpfollow.ElineupmallMicrofiberTowelValidator(v); err != nil {
			return &ValidationError{Name: "elineupmall_microfiber_towel", err: fmt.Errorf(`ent: validator failed for field "HPFollow.elineupmall_microfiber_towel": %w`, err)}
		}
	}
	if v, ok := hfuo.mutation.ElineupmallMufflerTowel(); ok {
		if err := hpfollow.ElineupmallMufflerTowelValidator(v); err != nil {
			return &ValidationError{Name: "elineupmall_muffler_towel", err: fmt.Errorf(`ent: validator failed for field "HPFollow.elineupmall_muffler_towel": %w`, err)}
		}
	}
	if v, ok := hfuo.mutation.ElineupmallFsk(); ok {
		if err := hpfollow.ElineupmallFskValidator(v); err != nil {
			return &ValidationError{Name: "elineupmall_fsk", err: fmt.Errorf(`ent: validator failed for field "HPFollow.elineupmall_fsk": %w`, err)}
		}
	}
	if v, ok := hfuo.mutation.ElineupmallKeyringOther(); ok {
		if err := hpfollow.ElineupmallKeyringOtherValidator(v); err != nil {
			return &ValidationError{Name: "elineupmall_keyring_other", err: fmt.Errorf(`ent: validator failed for field "HPFollow.elineupmall_keyring_other": %w`, err)}
		}
	}
	if v, ok := hfuo.mutation.ElineupmallClearFile(); ok {
		if err := hpfollow.ElineupmallClearFileValidator(v); err != nil {
			return &ValidationError{Name: "elineupmall_clear_file", err: fmt.Errorf(`ent: validator failed for field "HPFollow.elineupmall_clear_file": %w`, err)}
		}
	}
	if _, ok := hfuo.mutation.UserID(); hfuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "HPFollow.user"`)
	}
	return nil
}

func (hfuo *HPFollowUpdateOne) sqlSave(ctx context.Context) (_node *HPFollow, err error) {
	if err := hfuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(hpfollow.Table, hpfollow.Columns, sqlgraph.NewFieldSpec(hpfollow.FieldID, field.TypeInt))
	id, ok := hfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "HPFollow.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := hfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hpfollow.FieldID)
		for _, f := range fields {
			if !hpfollow.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != hpfollow.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := hfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if hfuo.mutation.CreatedAtCleared() {
		_spec.ClearField(hpfollow.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := hfuo.mutation.UpdatedAt(); ok {
		_spec.SetField(hpfollow.FieldUpdatedAt, field.TypeTime, value)
	}
	if hfuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(hpfollow.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := hfuo.mutation.GetType(); ok {
		_spec.SetField(hpfollow.FieldType, field.TypeEnum, value)
	}
	if value, ok := hfuo.mutation.ElineupmallOther(); ok {
		_spec.SetField(hpfollow.FieldElineupmallOther, field.TypeEnum, value)
	}
	if value, ok := hfuo.mutation.ElineupmallPhotoDaily(); ok {
		_spec.SetField(hpfollow.FieldElineupmallPhotoDaily, field.TypeEnum, value)
	}
	if value, ok := hfuo.mutation.ElineupmallPhotoA4(); ok {
		_spec.SetField(hpfollow.FieldElineupmallPhotoA4, field.TypeEnum, value)
	}
	if value, ok := hfuo.mutation.ElineupmallPhotoA5(); ok {
		_spec.SetField(hpfollow.FieldElineupmallPhotoA5, field.TypeEnum, value)
	}
	if value, ok := hfuo.mutation.ElineupmallPhoto2l(); ok {
		_spec.SetField(hpfollow.FieldElineupmallPhoto2l, field.TypeEnum, value)
	}
	if value, ok := hfuo.mutation.ElineupmallPhotoOther(); ok {
		_spec.SetField(hpfollow.FieldElineupmallPhotoOther, field.TypeEnum, value)
	}
	if value, ok := hfuo.mutation.ElineupmallPhotoAlbum(); ok {
		_spec.SetField(hpfollow.FieldElineupmallPhotoAlbum, field.TypeEnum, value)
	}
	if value, ok := hfuo.mutation.ElineupmallPhotoAlbumOther(); ok {
		_spec.SetField(hpfollow.FieldElineupmallPhotoAlbumOther, field.TypeEnum, value)
	}
	if value, ok := hfuo.mutation.ElineupmallPhotoBook(); ok {
		_spec.SetField(hpfollow.FieldElineupmallPhotoBook, field.TypeEnum, value)
	}
	if value, ok := hfuo.mutation.ElineupmallPhotoBookOther(); ok {
		_spec.SetField(hpfollow.FieldElineupmallPhotoBookOther, field.TypeEnum, value)
	}
	if value, ok := hfuo.mutation.ElineupmallDvd(); ok {
		_spec.SetField(hpfollow.FieldElineupmallDvd, field.TypeEnum, value)
	}
	if value, ok := hfuo.mutation.ElineupmallDvdMagazine(); ok {
		_spec.SetField(hpfollow.FieldElineupmallDvdMagazine, field.TypeEnum, value)
	}
	if value, ok := hfuo.mutation.ElineupmallDvdMagazineOther(); ok {
		_spec.SetField(hpfollow.FieldElineupmallDvdMagazineOther, field.TypeEnum, value)
	}
	if value, ok := hfuo.mutation.ElineupmallBlueray(); ok {
		_spec.SetField(hpfollow.FieldElineupmallBlueray, field.TypeEnum, value)
	}
	if value, ok := hfuo.mutation.ElineupmallPenlight(); ok {
		_spec.SetField(hpfollow.FieldElineupmallPenlight, field.TypeEnum, value)
	}
	if value, ok := hfuo.mutation.ElineupmallCollectionPinnapPoster(); ok {
		_spec.SetField(hpfollow.FieldElineupmallCollectionPinnapPoster, field.TypeEnum, value)
	}
	if value, ok := hfuo.mutation.ElineupmallCollectionPhoto(); ok {
		_spec.SetField(hpfollow.FieldElineupmallCollectionPhoto, field.TypeEnum, value)
	}
	if value, ok := hfuo.mutation.ElineupmallCollectionOther(); ok {
		_spec.SetField(hpfollow.FieldElineupmallCollectionOther, field.TypeEnum, value)
	}
	if value, ok := hfuo.mutation.ElineupmallTshirt(); ok {
		_spec.SetField(hpfollow.FieldElineupmallTshirt, field.TypeEnum, value)
	}
	if value, ok := hfuo.mutation.ElineupmallMicrofiberTowel(); ok {
		_spec.SetField(hpfollow.FieldElineupmallMicrofiberTowel, field.TypeEnum, value)
	}
	if value, ok := hfuo.mutation.ElineupmallMufflerTowel(); ok {
		_spec.SetField(hpfollow.FieldElineupmallMufflerTowel, field.TypeEnum, value)
	}
	if value, ok := hfuo.mutation.ElineupmallFsk(); ok {
		_spec.SetField(hpfollow.FieldElineupmallFsk, field.TypeEnum, value)
	}
	if value, ok := hfuo.mutation.ElineupmallKeyringOther(); ok {
		_spec.SetField(hpfollow.FieldElineupmallKeyringOther, field.TypeEnum, value)
	}
	if value, ok := hfuo.mutation.ElineupmallClearFile(); ok {
		_spec.SetField(hpfollow.FieldElineupmallClearFile, field.TypeEnum, value)
	}
	if hfuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpfollow.UserTable,
			Columns: []string{hpfollow.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hfuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpfollow.UserTable,
			Columns: []string{hpfollow.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hfuo.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpfollow.MemberTable,
			Columns: []string{hpfollow.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpmember.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hfuo.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpfollow.MemberTable,
			Columns: []string{hpfollow.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hfuo.mutation.ArtistCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpfollow.ArtistTable,
			Columns: []string{hpfollow.ArtistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpartist.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hfuo.mutation.ArtistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpfollow.ArtistTable,
			Columns: []string{hpfollow.ArtistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpartist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &HPFollow{config: hfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, hfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hpfollow.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	hfuo.mutation.done = true
	return _node, nil
}
