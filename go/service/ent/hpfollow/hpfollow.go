// Code generated by ent, DO NOT EDIT.

package hpfollow

import (
	"fmt"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/99designs/gqlgen/graphql"
	"github.com/yssk22/hpapp/go/service/schema/enums"
)

const (
	// Label holds the string label denoting the hpfollow type in the database.
	Label = "hp_follow"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeMember holds the string denoting the member edge name in mutations.
	EdgeMember = "member"
	// Table holds the table name of the hpfollow in the database.
	Table = "hp_follows"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "hp_follows"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_hpmember_following"
	// MemberTable is the table that holds the member relation/edge.
	MemberTable = "hp_follows"
	// MemberInverseTable is the table name for the HPMember entity.
	// It exists in this package in order to avoid circular dependency with the "hpmember" package.
	MemberInverseTable = "hp_members"
	// MemberColumn is the table column denoting the member relation/edge.
	MemberColumn = "hp_follow_member"
)

// Columns holds all SQL columns for hpfollow fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldType,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "hp_follows"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"hp_follow_member",
	"user_hpmember_following",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/yssk22/hpapp/go/service/ent/runtime"
var (
	Hooks [1]ent.Hook
)

const DefaultType enums.HPFollowType = "follow_with_notification"

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type enums.HPFollowType) error {
	switch _type {
	case "follow", "follow_with_notification", "unfollow":
		return nil
	default:
		return fmt.Errorf("hpfollow: invalid enum value for type field: %q", _type)
	}
}

// Order defines the ordering method for the HPFollow queries.
type Order func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByMemberField orders the results by member field.
func ByMemberField(field string, opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMemberStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newMemberStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MemberInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, MemberTable, MemberColumn),
	)
}

var (
	// enums.HPFollowType must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enums.HPFollowType)(nil)
	// enums.HPFollowType must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enums.HPFollowType)(nil)
)
