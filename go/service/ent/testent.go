// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"hpapp.yssk22.dev/go/service/ent/testent"
	"hpapp.yssk22.dev/go/service/schema/enums"
	"hpapp.yssk22.dev/go/service/schema/jsonfields"
)

// TestEnt is the model entity for the TestEnt schema.
type TestEnt struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// StringField holds the value of the "string_field" field.
	StringField *string `json:"string_field,omitempty"`
	// TextField holds the value of the "text_field" field.
	TextField *string `json:"text_field,omitempty"`
	// BytesField holds the value of the "bytes_field" field.
	BytesField *[]byte `json:"bytes_field,omitempty"`
	// BoolField holds the value of the "bool_field" field.
	BoolField *bool `json:"bool_field,omitempty"`
	// TimeField holds the value of the "time_field" field.
	TimeField *time.Time `json:"time_field,omitempty"`
	// IntField holds the value of the "int_field" field.
	IntField *int `json:"int_field,omitempty"`
	// Int64Field holds the value of the "int64_field" field.
	Int64Field *int64 `json:"int64_field,omitempty"`
	// FloatField holds the value of the "float_field" field.
	FloatField *float64 `json:"float_field,omitempty"`
	// JSONField holds the value of the "json_field" field.
	JSONField *jsonfields.TestJSON `json:"json_field,omitempty"`
	// EnumField holds the value of the "enum_field" field.
	EnumField    enums.TestEnum `json:"enum_field,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TestEnt) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case testent.FieldBytesField, testent.FieldJSONField:
			values[i] = new([]byte)
		case testent.FieldBoolField:
			values[i] = new(sql.NullBool)
		case testent.FieldFloatField:
			values[i] = new(sql.NullFloat64)
		case testent.FieldID, testent.FieldIntField, testent.FieldInt64Field:
			values[i] = new(sql.NullInt64)
		case testent.FieldStringField, testent.FieldTextField, testent.FieldEnumField:
			values[i] = new(sql.NullString)
		case testent.FieldTimeField:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TestEnt fields.
func (te *TestEnt) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case testent.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			te.ID = int(value.Int64)
		case testent.FieldStringField:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field string_field", values[i])
			} else if value.Valid {
				te.StringField = new(string)
				*te.StringField = value.String
			}
		case testent.FieldTextField:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field text_field", values[i])
			} else if value.Valid {
				te.TextField = new(string)
				*te.TextField = value.String
			}
		case testent.FieldBytesField:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field bytes_field", values[i])
			} else if value != nil {
				te.BytesField = value
			}
		case testent.FieldBoolField:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field bool_field", values[i])
			} else if value.Valid {
				te.BoolField = new(bool)
				*te.BoolField = value.Bool
			}
		case testent.FieldTimeField:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field time_field", values[i])
			} else if value.Valid {
				te.TimeField = new(time.Time)
				*te.TimeField = value.Time
			}
		case testent.FieldIntField:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field int_field", values[i])
			} else if value.Valid {
				te.IntField = new(int)
				*te.IntField = int(value.Int64)
			}
		case testent.FieldInt64Field:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field int64_field", values[i])
			} else if value.Valid {
				te.Int64Field = new(int64)
				*te.Int64Field = value.Int64
			}
		case testent.FieldFloatField:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field float_field", values[i])
			} else if value.Valid {
				te.FloatField = new(float64)
				*te.FloatField = value.Float64
			}
		case testent.FieldJSONField:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field json_field", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &te.JSONField); err != nil {
					return fmt.Errorf("unmarshal field json_field: %w", err)
				}
			}
		case testent.FieldEnumField:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field enum_field", values[i])
			} else if value.Valid {
				te.EnumField = enums.TestEnum(value.String)
			}
		default:
			te.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TestEnt.
// This includes values selected through modifiers, order, etc.
func (te *TestEnt) Value(name string) (ent.Value, error) {
	return te.selectValues.Get(name)
}

// Update returns a builder for updating this TestEnt.
// Note that you need to call TestEnt.Unwrap() before calling this method if this TestEnt
// was returned from a transaction, and the transaction was committed or rolled back.
func (te *TestEnt) Update() *TestEntUpdateOne {
	return NewTestEntClient(te.config).UpdateOne(te)
}

// Unwrap unwraps the TestEnt entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (te *TestEnt) Unwrap() *TestEnt {
	_tx, ok := te.config.driver.(*txDriver)
	if !ok {
		panic("ent: TestEnt is not a transactional entity")
	}
	te.config.driver = _tx.drv
	return te
}

// String implements the fmt.Stringer.
func (te *TestEnt) String() string {
	var builder strings.Builder
	builder.WriteString("TestEnt(")
	builder.WriteString(fmt.Sprintf("id=%v, ", te.ID))
	if v := te.StringField; v != nil {
		builder.WriteString("string_field=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := te.TextField; v != nil {
		builder.WriteString("text_field=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := te.BytesField; v != nil {
		builder.WriteString("bytes_field=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := te.BoolField; v != nil {
		builder.WriteString("bool_field=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := te.TimeField; v != nil {
		builder.WriteString("time_field=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := te.IntField; v != nil {
		builder.WriteString("int_field=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := te.Int64Field; v != nil {
		builder.WriteString("int64_field=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := te.FloatField; v != nil {
		builder.WriteString("float_field=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("json_field=")
	builder.WriteString(fmt.Sprintf("%v", te.JSONField))
	builder.WriteString(", ")
	builder.WriteString("enum_field=")
	builder.WriteString(fmt.Sprintf("%v", te.EnumField))
	builder.WriteByte(')')
	return builder.String()
}

// TestEnts is a parsable slice of TestEnt.
type TestEnts []*TestEnt
