// Code generated by ent, DO NOT EDIT.

package hpblob

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/yssk22/hpapp/go/service/ent/predicate"
	"github.com/yssk22/hpapp/go/service/schema/enums"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldEQ(FieldUpdatedAt, v))
}

// StoragePath applies equality check predicate on the "storage_path" field. It's identical to StoragePathEQ.
func StoragePath(v string) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldEQ(FieldStoragePath, v))
}

// SourceURL applies equality check predicate on the "source_url" field. It's identical to SourceURLEQ.
func SourceURL(v string) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldEQ(FieldSourceURL, v))
}

// SourceHTMLURL applies equality check predicate on the "source_html_url" field. It's identical to SourceHTMLURLEQ.
func SourceHTMLURL(v string) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldEQ(FieldSourceHTMLURL, v))
}

// StatusMessage applies equality check predicate on the "status_message" field. It's identical to StatusMessageEQ.
func StatusMessage(v string) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldEQ(FieldStatusMessage, v))
}

// StatusErrorCount applies equality check predicate on the "status_error_count" field. It's identical to StatusErrorCountEQ.
func StatusErrorCount(v int) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldEQ(FieldStatusErrorCount, v))
}

// Width applies equality check predicate on the "width" field. It's identical to WidthEQ.
func Width(v int) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldEQ(FieldWidth, v))
}

// Height applies equality check predicate on the "height" field. It's identical to HeightEQ.
func Height(v int) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldEQ(FieldHeight, v))
}

// Size applies equality check predicate on the "size" field. It's identical to SizeEQ.
func Size(v int64) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldEQ(FieldSize, v))
}

// OwnerArtistID applies equality check predicate on the "owner_artist_id" field. It's identical to OwnerArtistIDEQ.
func OwnerArtistID(v int) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldEQ(FieldOwnerArtistID, v))
}

// OwnerMemberID applies equality check predicate on the "owner_member_id" field. It's identical to OwnerMemberIDEQ.
func OwnerMemberID(v int) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldEQ(FieldOwnerMemberID, v))
}

// NumFaces applies equality check predicate on the "num_faces" field. It's identical to NumFacesEQ.
func NumFaces(v int) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldEQ(FieldNumFaces, v))
}

// DurationSeconds applies equality check predicate on the "duration_seconds" field. It's identical to DurationSecondsEQ.
func DurationSeconds(v float64) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldEQ(FieldDurationSeconds, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.HPBlob {
	return predicate.HPBlob(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.HPBlob {
	return predicate.HPBlob(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.HPBlob {
	return predicate.HPBlob(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.HPBlob {
	return predicate.HPBlob(sql.FieldNotNull(FieldUpdatedAt))
}

// StoragePathEQ applies the EQ predicate on the "storage_path" field.
func StoragePathEQ(v string) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldEQ(FieldStoragePath, v))
}

// StoragePathNEQ applies the NEQ predicate on the "storage_path" field.
func StoragePathNEQ(v string) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldNEQ(FieldStoragePath, v))
}

// StoragePathIn applies the In predicate on the "storage_path" field.
func StoragePathIn(vs ...string) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldIn(FieldStoragePath, vs...))
}

// StoragePathNotIn applies the NotIn predicate on the "storage_path" field.
func StoragePathNotIn(vs ...string) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldNotIn(FieldStoragePath, vs...))
}

// StoragePathGT applies the GT predicate on the "storage_path" field.
func StoragePathGT(v string) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldGT(FieldStoragePath, v))
}

// StoragePathGTE applies the GTE predicate on the "storage_path" field.
func StoragePathGTE(v string) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldGTE(FieldStoragePath, v))
}

// StoragePathLT applies the LT predicate on the "storage_path" field.
func StoragePathLT(v string) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldLT(FieldStoragePath, v))
}

// StoragePathLTE applies the LTE predicate on the "storage_path" field.
func StoragePathLTE(v string) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldLTE(FieldStoragePath, v))
}

// StoragePathContains applies the Contains predicate on the "storage_path" field.
func StoragePathContains(v string) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldContains(FieldStoragePath, v))
}

// StoragePathHasPrefix applies the HasPrefix predicate on the "storage_path" field.
func StoragePathHasPrefix(v string) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldHasPrefix(FieldStoragePath, v))
}

// StoragePathHasSuffix applies the HasSuffix predicate on the "storage_path" field.
func StoragePathHasSuffix(v string) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldHasSuffix(FieldStoragePath, v))
}

// StoragePathEqualFold applies the EqualFold predicate on the "storage_path" field.
func StoragePathEqualFold(v string) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldEqualFold(FieldStoragePath, v))
}

// StoragePathContainsFold applies the ContainsFold predicate on the "storage_path" field.
func StoragePathContainsFold(v string) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldContainsFold(FieldStoragePath, v))
}

// SourceURLEQ applies the EQ predicate on the "source_url" field.
func SourceURLEQ(v string) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldEQ(FieldSourceURL, v))
}

// SourceURLNEQ applies the NEQ predicate on the "source_url" field.
func SourceURLNEQ(v string) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldNEQ(FieldSourceURL, v))
}

// SourceURLIn applies the In predicate on the "source_url" field.
func SourceURLIn(vs ...string) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldIn(FieldSourceURL, vs...))
}

// SourceURLNotIn applies the NotIn predicate on the "source_url" field.
func SourceURLNotIn(vs ...string) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldNotIn(FieldSourceURL, vs...))
}

// SourceURLGT applies the GT predicate on the "source_url" field.
func SourceURLGT(v string) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldGT(FieldSourceURL, v))
}

// SourceURLGTE applies the GTE predicate on the "source_url" field.
func SourceURLGTE(v string) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldGTE(FieldSourceURL, v))
}

// SourceURLLT applies the LT predicate on the "source_url" field.
func SourceURLLT(v string) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldLT(FieldSourceURL, v))
}

// SourceURLLTE applies the LTE predicate on the "source_url" field.
func SourceURLLTE(v string) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldLTE(FieldSourceURL, v))
}

// SourceURLContains applies the Contains predicate on the "source_url" field.
func SourceURLContains(v string) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldContains(FieldSourceURL, v))
}

// SourceURLHasPrefix applies the HasPrefix predicate on the "source_url" field.
func SourceURLHasPrefix(v string) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldHasPrefix(FieldSourceURL, v))
}

// SourceURLHasSuffix applies the HasSuffix predicate on the "source_url" field.
func SourceURLHasSuffix(v string) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldHasSuffix(FieldSourceURL, v))
}

// SourceURLEqualFold applies the EqualFold predicate on the "source_url" field.
func SourceURLEqualFold(v string) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldEqualFold(FieldSourceURL, v))
}

// SourceURLContainsFold applies the ContainsFold predicate on the "source_url" field.
func SourceURLContainsFold(v string) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldContainsFold(FieldSourceURL, v))
}

// SourceHTMLURLEQ applies the EQ predicate on the "source_html_url" field.
func SourceHTMLURLEQ(v string) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldEQ(FieldSourceHTMLURL, v))
}

// SourceHTMLURLNEQ applies the NEQ predicate on the "source_html_url" field.
func SourceHTMLURLNEQ(v string) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldNEQ(FieldSourceHTMLURL, v))
}

// SourceHTMLURLIn applies the In predicate on the "source_html_url" field.
func SourceHTMLURLIn(vs ...string) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldIn(FieldSourceHTMLURL, vs...))
}

// SourceHTMLURLNotIn applies the NotIn predicate on the "source_html_url" field.
func SourceHTMLURLNotIn(vs ...string) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldNotIn(FieldSourceHTMLURL, vs...))
}

// SourceHTMLURLGT applies the GT predicate on the "source_html_url" field.
func SourceHTMLURLGT(v string) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldGT(FieldSourceHTMLURL, v))
}

// SourceHTMLURLGTE applies the GTE predicate on the "source_html_url" field.
func SourceHTMLURLGTE(v string) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldGTE(FieldSourceHTMLURL, v))
}

// SourceHTMLURLLT applies the LT predicate on the "source_html_url" field.
func SourceHTMLURLLT(v string) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldLT(FieldSourceHTMLURL, v))
}

// SourceHTMLURLLTE applies the LTE predicate on the "source_html_url" field.
func SourceHTMLURLLTE(v string) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldLTE(FieldSourceHTMLURL, v))
}

// SourceHTMLURLContains applies the Contains predicate on the "source_html_url" field.
func SourceHTMLURLContains(v string) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldContains(FieldSourceHTMLURL, v))
}

// SourceHTMLURLHasPrefix applies the HasPrefix predicate on the "source_html_url" field.
func SourceHTMLURLHasPrefix(v string) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldHasPrefix(FieldSourceHTMLURL, v))
}

// SourceHTMLURLHasSuffix applies the HasSuffix predicate on the "source_html_url" field.
func SourceHTMLURLHasSuffix(v string) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldHasSuffix(FieldSourceHTMLURL, v))
}

// SourceHTMLURLEqualFold applies the EqualFold predicate on the "source_html_url" field.
func SourceHTMLURLEqualFold(v string) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldEqualFold(FieldSourceHTMLURL, v))
}

// SourceHTMLURLContainsFold applies the ContainsFold predicate on the "source_html_url" field.
func SourceHTMLURLContainsFold(v string) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldContainsFold(FieldSourceHTMLURL, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v enums.HPBlobStatus) predicate.HPBlob {
	vc := v
	return predicate.HPBlob(sql.FieldEQ(FieldStatus, vc))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v enums.HPBlobStatus) predicate.HPBlob {
	vc := v
	return predicate.HPBlob(sql.FieldNEQ(FieldStatus, vc))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...enums.HPBlobStatus) predicate.HPBlob {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HPBlob(sql.FieldIn(FieldStatus, v...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...enums.HPBlobStatus) predicate.HPBlob {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HPBlob(sql.FieldNotIn(FieldStatus, v...))
}

// StatusMessageEQ applies the EQ predicate on the "status_message" field.
func StatusMessageEQ(v string) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldEQ(FieldStatusMessage, v))
}

// StatusMessageNEQ applies the NEQ predicate on the "status_message" field.
func StatusMessageNEQ(v string) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldNEQ(FieldStatusMessage, v))
}

// StatusMessageIn applies the In predicate on the "status_message" field.
func StatusMessageIn(vs ...string) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldIn(FieldStatusMessage, vs...))
}

// StatusMessageNotIn applies the NotIn predicate on the "status_message" field.
func StatusMessageNotIn(vs ...string) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldNotIn(FieldStatusMessage, vs...))
}

// StatusMessageGT applies the GT predicate on the "status_message" field.
func StatusMessageGT(v string) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldGT(FieldStatusMessage, v))
}

// StatusMessageGTE applies the GTE predicate on the "status_message" field.
func StatusMessageGTE(v string) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldGTE(FieldStatusMessage, v))
}

// StatusMessageLT applies the LT predicate on the "status_message" field.
func StatusMessageLT(v string) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldLT(FieldStatusMessage, v))
}

// StatusMessageLTE applies the LTE predicate on the "status_message" field.
func StatusMessageLTE(v string) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldLTE(FieldStatusMessage, v))
}

// StatusMessageContains applies the Contains predicate on the "status_message" field.
func StatusMessageContains(v string) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldContains(FieldStatusMessage, v))
}

// StatusMessageHasPrefix applies the HasPrefix predicate on the "status_message" field.
func StatusMessageHasPrefix(v string) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldHasPrefix(FieldStatusMessage, v))
}

// StatusMessageHasSuffix applies the HasSuffix predicate on the "status_message" field.
func StatusMessageHasSuffix(v string) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldHasSuffix(FieldStatusMessage, v))
}

// StatusMessageIsNil applies the IsNil predicate on the "status_message" field.
func StatusMessageIsNil() predicate.HPBlob {
	return predicate.HPBlob(sql.FieldIsNull(FieldStatusMessage))
}

// StatusMessageNotNil applies the NotNil predicate on the "status_message" field.
func StatusMessageNotNil() predicate.HPBlob {
	return predicate.HPBlob(sql.FieldNotNull(FieldStatusMessage))
}

// StatusMessageEqualFold applies the EqualFold predicate on the "status_message" field.
func StatusMessageEqualFold(v string) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldEqualFold(FieldStatusMessage, v))
}

// StatusMessageContainsFold applies the ContainsFold predicate on the "status_message" field.
func StatusMessageContainsFold(v string) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldContainsFold(FieldStatusMessage, v))
}

// StatusErrorCountEQ applies the EQ predicate on the "status_error_count" field.
func StatusErrorCountEQ(v int) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldEQ(FieldStatusErrorCount, v))
}

// StatusErrorCountNEQ applies the NEQ predicate on the "status_error_count" field.
func StatusErrorCountNEQ(v int) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldNEQ(FieldStatusErrorCount, v))
}

// StatusErrorCountIn applies the In predicate on the "status_error_count" field.
func StatusErrorCountIn(vs ...int) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldIn(FieldStatusErrorCount, vs...))
}

// StatusErrorCountNotIn applies the NotIn predicate on the "status_error_count" field.
func StatusErrorCountNotIn(vs ...int) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldNotIn(FieldStatusErrorCount, vs...))
}

// StatusErrorCountGT applies the GT predicate on the "status_error_count" field.
func StatusErrorCountGT(v int) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldGT(FieldStatusErrorCount, v))
}

// StatusErrorCountGTE applies the GTE predicate on the "status_error_count" field.
func StatusErrorCountGTE(v int) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldGTE(FieldStatusErrorCount, v))
}

// StatusErrorCountLT applies the LT predicate on the "status_error_count" field.
func StatusErrorCountLT(v int) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldLT(FieldStatusErrorCount, v))
}

// StatusErrorCountLTE applies the LTE predicate on the "status_error_count" field.
func StatusErrorCountLTE(v int) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldLTE(FieldStatusErrorCount, v))
}

// StatusErrorCountIsNil applies the IsNil predicate on the "status_error_count" field.
func StatusErrorCountIsNil() predicate.HPBlob {
	return predicate.HPBlob(sql.FieldIsNull(FieldStatusErrorCount))
}

// StatusErrorCountNotNil applies the NotNil predicate on the "status_error_count" field.
func StatusErrorCountNotNil() predicate.HPBlob {
	return predicate.HPBlob(sql.FieldNotNull(FieldStatusErrorCount))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v enums.HPBlobType) predicate.HPBlob {
	vc := v
	return predicate.HPBlob(sql.FieldEQ(FieldType, vc))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v enums.HPBlobType) predicate.HPBlob {
	vc := v
	return predicate.HPBlob(sql.FieldNEQ(FieldType, vc))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...enums.HPBlobType) predicate.HPBlob {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HPBlob(sql.FieldIn(FieldType, v...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...enums.HPBlobType) predicate.HPBlob {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HPBlob(sql.FieldNotIn(FieldType, v...))
}

// SubTypeEQ applies the EQ predicate on the "sub_type" field.
func SubTypeEQ(v enums.HPBlobSubType) predicate.HPBlob {
	vc := v
	return predicate.HPBlob(sql.FieldEQ(FieldSubType, vc))
}

// SubTypeNEQ applies the NEQ predicate on the "sub_type" field.
func SubTypeNEQ(v enums.HPBlobSubType) predicate.HPBlob {
	vc := v
	return predicate.HPBlob(sql.FieldNEQ(FieldSubType, vc))
}

// SubTypeIn applies the In predicate on the "sub_type" field.
func SubTypeIn(vs ...enums.HPBlobSubType) predicate.HPBlob {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HPBlob(sql.FieldIn(FieldSubType, v...))
}

// SubTypeNotIn applies the NotIn predicate on the "sub_type" field.
func SubTypeNotIn(vs ...enums.HPBlobSubType) predicate.HPBlob {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HPBlob(sql.FieldNotIn(FieldSubType, v...))
}

// WidthEQ applies the EQ predicate on the "width" field.
func WidthEQ(v int) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldEQ(FieldWidth, v))
}

// WidthNEQ applies the NEQ predicate on the "width" field.
func WidthNEQ(v int) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldNEQ(FieldWidth, v))
}

// WidthIn applies the In predicate on the "width" field.
func WidthIn(vs ...int) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldIn(FieldWidth, vs...))
}

// WidthNotIn applies the NotIn predicate on the "width" field.
func WidthNotIn(vs ...int) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldNotIn(FieldWidth, vs...))
}

// WidthGT applies the GT predicate on the "width" field.
func WidthGT(v int) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldGT(FieldWidth, v))
}

// WidthGTE applies the GTE predicate on the "width" field.
func WidthGTE(v int) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldGTE(FieldWidth, v))
}

// WidthLT applies the LT predicate on the "width" field.
func WidthLT(v int) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldLT(FieldWidth, v))
}

// WidthLTE applies the LTE predicate on the "width" field.
func WidthLTE(v int) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldLTE(FieldWidth, v))
}

// WidthIsNil applies the IsNil predicate on the "width" field.
func WidthIsNil() predicate.HPBlob {
	return predicate.HPBlob(sql.FieldIsNull(FieldWidth))
}

// WidthNotNil applies the NotNil predicate on the "width" field.
func WidthNotNil() predicate.HPBlob {
	return predicate.HPBlob(sql.FieldNotNull(FieldWidth))
}

// HeightEQ applies the EQ predicate on the "height" field.
func HeightEQ(v int) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldEQ(FieldHeight, v))
}

// HeightNEQ applies the NEQ predicate on the "height" field.
func HeightNEQ(v int) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldNEQ(FieldHeight, v))
}

// HeightIn applies the In predicate on the "height" field.
func HeightIn(vs ...int) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldIn(FieldHeight, vs...))
}

// HeightNotIn applies the NotIn predicate on the "height" field.
func HeightNotIn(vs ...int) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldNotIn(FieldHeight, vs...))
}

// HeightGT applies the GT predicate on the "height" field.
func HeightGT(v int) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldGT(FieldHeight, v))
}

// HeightGTE applies the GTE predicate on the "height" field.
func HeightGTE(v int) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldGTE(FieldHeight, v))
}

// HeightLT applies the LT predicate on the "height" field.
func HeightLT(v int) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldLT(FieldHeight, v))
}

// HeightLTE applies the LTE predicate on the "height" field.
func HeightLTE(v int) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldLTE(FieldHeight, v))
}

// HeightIsNil applies the IsNil predicate on the "height" field.
func HeightIsNil() predicate.HPBlob {
	return predicate.HPBlob(sql.FieldIsNull(FieldHeight))
}

// HeightNotNil applies the NotNil predicate on the "height" field.
func HeightNotNil() predicate.HPBlob {
	return predicate.HPBlob(sql.FieldNotNull(FieldHeight))
}

// SizeEQ applies the EQ predicate on the "size" field.
func SizeEQ(v int64) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldEQ(FieldSize, v))
}

// SizeNEQ applies the NEQ predicate on the "size" field.
func SizeNEQ(v int64) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldNEQ(FieldSize, v))
}

// SizeIn applies the In predicate on the "size" field.
func SizeIn(vs ...int64) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldIn(FieldSize, vs...))
}

// SizeNotIn applies the NotIn predicate on the "size" field.
func SizeNotIn(vs ...int64) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldNotIn(FieldSize, vs...))
}

// SizeGT applies the GT predicate on the "size" field.
func SizeGT(v int64) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldGT(FieldSize, v))
}

// SizeGTE applies the GTE predicate on the "size" field.
func SizeGTE(v int64) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldGTE(FieldSize, v))
}

// SizeLT applies the LT predicate on the "size" field.
func SizeLT(v int64) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldLT(FieldSize, v))
}

// SizeLTE applies the LTE predicate on the "size" field.
func SizeLTE(v int64) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldLTE(FieldSize, v))
}

// SizeIsNil applies the IsNil predicate on the "size" field.
func SizeIsNil() predicate.HPBlob {
	return predicate.HPBlob(sql.FieldIsNull(FieldSize))
}

// SizeNotNil applies the NotNil predicate on the "size" field.
func SizeNotNil() predicate.HPBlob {
	return predicate.HPBlob(sql.FieldNotNull(FieldSize))
}

// OwnerArtistIDEQ applies the EQ predicate on the "owner_artist_id" field.
func OwnerArtistIDEQ(v int) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldEQ(FieldOwnerArtistID, v))
}

// OwnerArtistIDNEQ applies the NEQ predicate on the "owner_artist_id" field.
func OwnerArtistIDNEQ(v int) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldNEQ(FieldOwnerArtistID, v))
}

// OwnerArtistIDIn applies the In predicate on the "owner_artist_id" field.
func OwnerArtistIDIn(vs ...int) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldIn(FieldOwnerArtistID, vs...))
}

// OwnerArtistIDNotIn applies the NotIn predicate on the "owner_artist_id" field.
func OwnerArtistIDNotIn(vs ...int) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldNotIn(FieldOwnerArtistID, vs...))
}

// OwnerArtistIDIsNil applies the IsNil predicate on the "owner_artist_id" field.
func OwnerArtistIDIsNil() predicate.HPBlob {
	return predicate.HPBlob(sql.FieldIsNull(FieldOwnerArtistID))
}

// OwnerArtistIDNotNil applies the NotNil predicate on the "owner_artist_id" field.
func OwnerArtistIDNotNil() predicate.HPBlob {
	return predicate.HPBlob(sql.FieldNotNull(FieldOwnerArtistID))
}

// OwnerMemberIDEQ applies the EQ predicate on the "owner_member_id" field.
func OwnerMemberIDEQ(v int) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldEQ(FieldOwnerMemberID, v))
}

// OwnerMemberIDNEQ applies the NEQ predicate on the "owner_member_id" field.
func OwnerMemberIDNEQ(v int) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldNEQ(FieldOwnerMemberID, v))
}

// OwnerMemberIDIn applies the In predicate on the "owner_member_id" field.
func OwnerMemberIDIn(vs ...int) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldIn(FieldOwnerMemberID, vs...))
}

// OwnerMemberIDNotIn applies the NotIn predicate on the "owner_member_id" field.
func OwnerMemberIDNotIn(vs ...int) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldNotIn(FieldOwnerMemberID, vs...))
}

// OwnerMemberIDIsNil applies the IsNil predicate on the "owner_member_id" field.
func OwnerMemberIDIsNil() predicate.HPBlob {
	return predicate.HPBlob(sql.FieldIsNull(FieldOwnerMemberID))
}

// OwnerMemberIDNotNil applies the NotNil predicate on the "owner_member_id" field.
func OwnerMemberIDNotNil() predicate.HPBlob {
	return predicate.HPBlob(sql.FieldNotNull(FieldOwnerMemberID))
}

// NumFacesEQ applies the EQ predicate on the "num_faces" field.
func NumFacesEQ(v int) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldEQ(FieldNumFaces, v))
}

// NumFacesNEQ applies the NEQ predicate on the "num_faces" field.
func NumFacesNEQ(v int) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldNEQ(FieldNumFaces, v))
}

// NumFacesIn applies the In predicate on the "num_faces" field.
func NumFacesIn(vs ...int) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldIn(FieldNumFaces, vs...))
}

// NumFacesNotIn applies the NotIn predicate on the "num_faces" field.
func NumFacesNotIn(vs ...int) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldNotIn(FieldNumFaces, vs...))
}

// NumFacesGT applies the GT predicate on the "num_faces" field.
func NumFacesGT(v int) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldGT(FieldNumFaces, v))
}

// NumFacesGTE applies the GTE predicate on the "num_faces" field.
func NumFacesGTE(v int) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldGTE(FieldNumFaces, v))
}

// NumFacesLT applies the LT predicate on the "num_faces" field.
func NumFacesLT(v int) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldLT(FieldNumFaces, v))
}

// NumFacesLTE applies the LTE predicate on the "num_faces" field.
func NumFacesLTE(v int) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldLTE(FieldNumFaces, v))
}

// NumFacesIsNil applies the IsNil predicate on the "num_faces" field.
func NumFacesIsNil() predicate.HPBlob {
	return predicate.HPBlob(sql.FieldIsNull(FieldNumFaces))
}

// NumFacesNotNil applies the NotNil predicate on the "num_faces" field.
func NumFacesNotNil() predicate.HPBlob {
	return predicate.HPBlob(sql.FieldNotNull(FieldNumFaces))
}

// FacesIsNil applies the IsNil predicate on the "faces" field.
func FacesIsNil() predicate.HPBlob {
	return predicate.HPBlob(sql.FieldIsNull(FieldFaces))
}

// FacesNotNil applies the NotNil predicate on the "faces" field.
func FacesNotNil() predicate.HPBlob {
	return predicate.HPBlob(sql.FieldNotNull(FieldFaces))
}

// FaceRecognitionStatusEQ applies the EQ predicate on the "face_recognition_status" field.
func FaceRecognitionStatusEQ(v enums.HPBlobFaceRecognitionStatus) predicate.HPBlob {
	vc := v
	return predicate.HPBlob(sql.FieldEQ(FieldFaceRecognitionStatus, vc))
}

// FaceRecognitionStatusNEQ applies the NEQ predicate on the "face_recognition_status" field.
func FaceRecognitionStatusNEQ(v enums.HPBlobFaceRecognitionStatus) predicate.HPBlob {
	vc := v
	return predicate.HPBlob(sql.FieldNEQ(FieldFaceRecognitionStatus, vc))
}

// FaceRecognitionStatusIn applies the In predicate on the "face_recognition_status" field.
func FaceRecognitionStatusIn(vs ...enums.HPBlobFaceRecognitionStatus) predicate.HPBlob {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HPBlob(sql.FieldIn(FieldFaceRecognitionStatus, v...))
}

// FaceRecognitionStatusNotIn applies the NotIn predicate on the "face_recognition_status" field.
func FaceRecognitionStatusNotIn(vs ...enums.HPBlobFaceRecognitionStatus) predicate.HPBlob {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HPBlob(sql.FieldNotIn(FieldFaceRecognitionStatus, v...))
}

// FaceRecognitionStatusIsNil applies the IsNil predicate on the "face_recognition_status" field.
func FaceRecognitionStatusIsNil() predicate.HPBlob {
	return predicate.HPBlob(sql.FieldIsNull(FieldFaceRecognitionStatus))
}

// FaceRecognitionStatusNotNil applies the NotNil predicate on the "face_recognition_status" field.
func FaceRecognitionStatusNotNil() predicate.HPBlob {
	return predicate.HPBlob(sql.FieldNotNull(FieldFaceRecognitionStatus))
}

// ThumbnailIsNil applies the IsNil predicate on the "thumbnail" field.
func ThumbnailIsNil() predicate.HPBlob {
	return predicate.HPBlob(sql.FieldIsNull(FieldThumbnail))
}

// ThumbnailNotNil applies the NotNil predicate on the "thumbnail" field.
func ThumbnailNotNil() predicate.HPBlob {
	return predicate.HPBlob(sql.FieldNotNull(FieldThumbnail))
}

// DurationSecondsEQ applies the EQ predicate on the "duration_seconds" field.
func DurationSecondsEQ(v float64) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldEQ(FieldDurationSeconds, v))
}

// DurationSecondsNEQ applies the NEQ predicate on the "duration_seconds" field.
func DurationSecondsNEQ(v float64) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldNEQ(FieldDurationSeconds, v))
}

// DurationSecondsIn applies the In predicate on the "duration_seconds" field.
func DurationSecondsIn(vs ...float64) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldIn(FieldDurationSeconds, vs...))
}

// DurationSecondsNotIn applies the NotIn predicate on the "duration_seconds" field.
func DurationSecondsNotIn(vs ...float64) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldNotIn(FieldDurationSeconds, vs...))
}

// DurationSecondsGT applies the GT predicate on the "duration_seconds" field.
func DurationSecondsGT(v float64) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldGT(FieldDurationSeconds, v))
}

// DurationSecondsGTE applies the GTE predicate on the "duration_seconds" field.
func DurationSecondsGTE(v float64) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldGTE(FieldDurationSeconds, v))
}

// DurationSecondsLT applies the LT predicate on the "duration_seconds" field.
func DurationSecondsLT(v float64) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldLT(FieldDurationSeconds, v))
}

// DurationSecondsLTE applies the LTE predicate on the "duration_seconds" field.
func DurationSecondsLTE(v float64) predicate.HPBlob {
	return predicate.HPBlob(sql.FieldLTE(FieldDurationSeconds, v))
}

// DurationSecondsIsNil applies the IsNil predicate on the "duration_seconds" field.
func DurationSecondsIsNil() predicate.HPBlob {
	return predicate.HPBlob(sql.FieldIsNull(FieldDurationSeconds))
}

// DurationSecondsNotNil applies the NotNil predicate on the "duration_seconds" field.
func DurationSecondsNotNil() predicate.HPBlob {
	return predicate.HPBlob(sql.FieldNotNull(FieldDurationSeconds))
}

// HasOwnerArtist applies the HasEdge predicate on the "owner_artist" edge.
func HasOwnerArtist() predicate.HPBlob {
	return predicate.HPBlob(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, OwnerArtistTable, OwnerArtistColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerArtistWith applies the HasEdge predicate on the "owner_artist" edge with a given conditions (other predicates).
func HasOwnerArtistWith(preds ...predicate.HPArtist) predicate.HPBlob {
	return predicate.HPBlob(func(s *sql.Selector) {
		step := newOwnerArtistStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOwnerMember applies the HasEdge predicate on the "owner_member" edge.
func HasOwnerMember() predicate.HPBlob {
	return predicate.HPBlob(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, OwnerMemberTable, OwnerMemberColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerMemberWith applies the HasEdge predicate on the "owner_member" edge with a given conditions (other predicates).
func HasOwnerMemberWith(preds ...predicate.HPMember) predicate.HPBlob {
	return predicate.HPBlob(func(s *sql.Selector) {
		step := newOwnerMemberStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAmebloPosts applies the HasEdge predicate on the "ameblo_posts" edge.
func HasAmebloPosts() predicate.HPBlob {
	return predicate.HPBlob(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, AmebloPostsTable, AmebloPostsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAmebloPostsWith applies the HasEdge predicate on the "ameblo_posts" edge with a given conditions (other predicates).
func HasAmebloPostsWith(preds ...predicate.HPAmebloPost) predicate.HPBlob {
	return predicate.HPBlob(func(s *sql.Selector) {
		step := newAmebloPostsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasIgPosts applies the HasEdge predicate on the "ig_posts" edge.
func HasIgPosts() predicate.HPBlob {
	return predicate.HPBlob(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, IgPostsTable, IgPostsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIgPostsWith applies the HasEdge predicate on the "ig_posts" edge with a given conditions (other predicates).
func HasIgPostsWith(preds ...predicate.HPIgPost) predicate.HPBlob {
	return predicate.HPBlob(func(s *sql.Selector) {
		step := newIgPostsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.HPBlob) predicate.HPBlob {
	return predicate.HPBlob(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.HPBlob) predicate.HPBlob {
	return predicate.HPBlob(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.HPBlob) predicate.HPBlob {
	return predicate.HPBlob(func(s *sql.Selector) {
		p(s.Not())
	})
}
