// Code generated by ent, DO NOT EDIT.

package hpblob

import (
	"fmt"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/99designs/gqlgen/graphql"
	"github.com/yssk22/hpapp/go/service/schema/enums"
)

const (
	// Label holds the string label denoting the hpblob type in the database.
	Label = "hp_blob"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldStoragePath holds the string denoting the storage_path field in the database.
	FieldStoragePath = "storage_path"
	// FieldSourceURL holds the string denoting the source_url field in the database.
	FieldSourceURL = "source_url"
	// FieldSourceHTMLURL holds the string denoting the source_html_url field in the database.
	FieldSourceHTMLURL = "source_html_url"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldStatusMessage holds the string denoting the status_message field in the database.
	FieldStatusMessage = "status_message"
	// FieldStatusErrorCount holds the string denoting the status_error_count field in the database.
	FieldStatusErrorCount = "status_error_count"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldSubType holds the string denoting the sub_type field in the database.
	FieldSubType = "sub_type"
	// FieldWidth holds the string denoting the width field in the database.
	FieldWidth = "width"
	// FieldHeight holds the string denoting the height field in the database.
	FieldHeight = "height"
	// FieldSize holds the string denoting the size field in the database.
	FieldSize = "size"
	// FieldOwnerArtistID holds the string denoting the owner_artist_id field in the database.
	FieldOwnerArtistID = "owner_artist_id"
	// FieldOwnerMemberID holds the string denoting the owner_member_id field in the database.
	FieldOwnerMemberID = "owner_member_id"
	// FieldNumFaces holds the string denoting the num_faces field in the database.
	FieldNumFaces = "num_faces"
	// FieldFaces holds the string denoting the faces field in the database.
	FieldFaces = "faces"
	// FieldFaceRecognitionStatus holds the string denoting the face_recognition_status field in the database.
	FieldFaceRecognitionStatus = "face_recognition_status"
	// FieldThumbnail holds the string denoting the thumbnail field in the database.
	FieldThumbnail = "thumbnail"
	// FieldDurationSeconds holds the string denoting the duration_seconds field in the database.
	FieldDurationSeconds = "duration_seconds"
	// EdgeOwnerArtist holds the string denoting the owner_artist edge name in mutations.
	EdgeOwnerArtist = "owner_artist"
	// EdgeOwnerMember holds the string denoting the owner_member edge name in mutations.
	EdgeOwnerMember = "owner_member"
	// EdgeAmebloPosts holds the string denoting the ameblo_posts edge name in mutations.
	EdgeAmebloPosts = "ameblo_posts"
	// EdgeIgPosts holds the string denoting the ig_posts edge name in mutations.
	EdgeIgPosts = "ig_posts"
	// Table holds the table name of the hpblob in the database.
	Table = "hp_blobs"
	// OwnerArtistTable is the table that holds the owner_artist relation/edge.
	OwnerArtistTable = "hp_blobs"
	// OwnerArtistInverseTable is the table name for the HPArtist entity.
	// It exists in this package in order to avoid circular dependency with the "hpartist" package.
	OwnerArtistInverseTable = "hp_artists"
	// OwnerArtistColumn is the table column denoting the owner_artist relation/edge.
	OwnerArtistColumn = "owner_artist_id"
	// OwnerMemberTable is the table that holds the owner_member relation/edge.
	OwnerMemberTable = "hp_blobs"
	// OwnerMemberInverseTable is the table name for the HPMember entity.
	// It exists in this package in order to avoid circular dependency with the "hpmember" package.
	OwnerMemberInverseTable = "hp_members"
	// OwnerMemberColumn is the table column denoting the owner_member relation/edge.
	OwnerMemberColumn = "owner_member_id"
	// AmebloPostsTable is the table that holds the ameblo_posts relation/edge. The primary key declared below.
	AmebloPostsTable = "hp_ameblo_post_blobs"
	// AmebloPostsInverseTable is the table name for the HPAmebloPost entity.
	// It exists in this package in order to avoid circular dependency with the "hpameblopost" package.
	AmebloPostsInverseTable = "hp_ameblo_posts"
	// IgPostsTable is the table that holds the ig_posts relation/edge. The primary key declared below.
	IgPostsTable = "hp_ig_post_blobs"
	// IgPostsInverseTable is the table name for the HPIgPost entity.
	// It exists in this package in order to avoid circular dependency with the "hpigpost" package.
	IgPostsInverseTable = "hp_ig_posts"
)

// Columns holds all SQL columns for hpblob fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldStoragePath,
	FieldSourceURL,
	FieldSourceHTMLURL,
	FieldStatus,
	FieldStatusMessage,
	FieldStatusErrorCount,
	FieldType,
	FieldSubType,
	FieldWidth,
	FieldHeight,
	FieldSize,
	FieldOwnerArtistID,
	FieldOwnerMemberID,
	FieldNumFaces,
	FieldFaces,
	FieldFaceRecognitionStatus,
	FieldThumbnail,
	FieldDurationSeconds,
}

var (
	// AmebloPostsPrimaryKey and AmebloPostsColumn2 are the table columns denoting the
	// primary key for the ameblo_posts relation (M2M).
	AmebloPostsPrimaryKey = []string{"hp_ameblo_post_id", "hp_blob_id"}
	// IgPostsPrimaryKey and IgPostsColumn2 are the table columns denoting the
	// primary key for the ig_posts relation (M2M).
	IgPostsPrimaryKey = []string{"hp_ig_post_id", "hp_blob_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/yssk22/hpapp/go/service/ent/runtime"
//
var (
	Hooks [1]ent.Hook
	// StoragePathValidator is a validator for the "storage_path" field. It is called by the builders before save.
	StoragePathValidator func(string) error
	// SourceURLValidator is a validator for the "source_url" field. It is called by the builders before save.
	SourceURLValidator func(string) error
	// SourceHTMLURLValidator is a validator for the "source_html_url" field. It is called by the builders before save.
	SourceHTMLURLValidator func(string) error
)

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s enums.HPBlobStatus) error {
	switch s {
	case "error", "need_download", "ready_to_host", "unknown":
		return nil
	default:
		return fmt.Errorf("hpblob: invalid enum value for status field: %q", s)
	}
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type enums.HPBlobType) error {
	switch _type {
	case "image", "text", "unknown", "video":
		return nil
	default:
		return fmt.Errorf("hpblob: invalid enum value for type field: %q", _type)
	}
}

// SubTypeValidator is a validator for the "sub_type" field enum values. It is called by the builders before save.
func SubTypeValidator(st enums.HPBlobSubType) error {
	switch st {
	case "html", "jpeg", "mp4", "unknown":
		return nil
	default:
		return fmt.Errorf("hpblob: invalid enum value for sub_type field: %q", st)
	}
}

const DefaultFaceRecognitionStatus enums.HPBlobFaceRecognitionStatus = "unknown"

// FaceRecognitionStatusValidator is a validator for the "face_recognition_status" field enum values. It is called by the builders before save.
func FaceRecognitionStatusValidator(frs enums.HPBlobFaceRecognitionStatus) error {
	switch frs {
	case "error", "face_automatically_labeled", "face_detected", "face_manually_labeled", "unknown":
		return nil
	default:
		return fmt.Errorf("hpblob: invalid enum value for face_recognition_status field: %q", frs)
	}
}

// Order defines the ordering method for the HPBlob queries.
type Order func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByStoragePath orders the results by the storage_path field.
func ByStoragePath(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldStoragePath, opts...).ToFunc()
}

// BySourceURL orders the results by the source_url field.
func BySourceURL(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldSourceURL, opts...).ToFunc()
}

// BySourceHTMLURL orders the results by the source_html_url field.
func BySourceHTMLURL(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldSourceHTMLURL, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByStatusMessage orders the results by the status_message field.
func ByStatusMessage(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldStatusMessage, opts...).ToFunc()
}

// ByStatusErrorCount orders the results by the status_error_count field.
func ByStatusErrorCount(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldStatusErrorCount, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// BySubType orders the results by the sub_type field.
func BySubType(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldSubType, opts...).ToFunc()
}

// ByWidth orders the results by the width field.
func ByWidth(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldWidth, opts...).ToFunc()
}

// ByHeight orders the results by the height field.
func ByHeight(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldHeight, opts...).ToFunc()
}

// BySize orders the results by the size field.
func BySize(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldSize, opts...).ToFunc()
}

// ByOwnerArtistID orders the results by the owner_artist_id field.
func ByOwnerArtistID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldOwnerArtistID, opts...).ToFunc()
}

// ByOwnerMemberID orders the results by the owner_member_id field.
func ByOwnerMemberID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldOwnerMemberID, opts...).ToFunc()
}

// ByNumFaces orders the results by the num_faces field.
func ByNumFaces(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldNumFaces, opts...).ToFunc()
}

// ByFaceRecognitionStatus orders the results by the face_recognition_status field.
func ByFaceRecognitionStatus(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldFaceRecognitionStatus, opts...).ToFunc()
}

// ByDurationSeconds orders the results by the duration_seconds field.
func ByDurationSeconds(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldDurationSeconds, opts...).ToFunc()
}

// ByOwnerArtistField orders the results by owner_artist field.
func ByOwnerArtistField(field string, opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerArtistStep(), sql.OrderByField(field, opts...))
	}
}

// ByOwnerMemberField orders the results by owner_member field.
func ByOwnerMemberField(field string, opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerMemberStep(), sql.OrderByField(field, opts...))
	}
}

// ByAmebloPostsCount orders the results by ameblo_posts count.
func ByAmebloPostsCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAmebloPostsStep(), opts...)
	}
}

// ByAmebloPosts orders the results by ameblo_posts terms.
func ByAmebloPosts(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAmebloPostsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByIgPostsCount orders the results by ig_posts count.
func ByIgPostsCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newIgPostsStep(), opts...)
	}
}

// ByIgPosts orders the results by ig_posts terms.
func ByIgPosts(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIgPostsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newOwnerArtistStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerArtistInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, OwnerArtistTable, OwnerArtistColumn),
	)
}
func newOwnerMemberStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerMemberInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, OwnerMemberTable, OwnerMemberColumn),
	)
}
func newAmebloPostsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AmebloPostsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, AmebloPostsTable, AmebloPostsPrimaryKey...),
	)
}
func newIgPostsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IgPostsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, IgPostsTable, IgPostsPrimaryKey...),
	)
}

var (
	// enums.HPBlobStatus must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enums.HPBlobStatus)(nil)
	// enums.HPBlobStatus must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enums.HPBlobStatus)(nil)
)

var (
	// enums.HPBlobType must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enums.HPBlobType)(nil)
	// enums.HPBlobType must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enums.HPBlobType)(nil)
)

var (
	// enums.HPBlobSubType must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enums.HPBlobSubType)(nil)
	// enums.HPBlobSubType must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enums.HPBlobSubType)(nil)
)

var (
	// enums.HPBlobFaceRecognitionStatus must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enums.HPBlobFaceRecognitionStatus)(nil)
	// enums.HPBlobFaceRecognitionStatus must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enums.HPBlobFaceRecognitionStatus)(nil)
)
