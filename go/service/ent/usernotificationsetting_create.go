// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yssk22/hpapp/go/service/ent/user"
	"github.com/yssk22/hpapp/go/service/ent/usernotificationlog"
	"github.com/yssk22/hpapp/go/service/ent/usernotificationsetting"
)

// UserNotificationSettingCreate is the builder for creating a UserNotificationSetting entity.
type UserNotificationSettingCreate struct {
	config
	mutation *UserNotificationSettingMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (unsc *UserNotificationSettingCreate) SetCreatedAt(t time.Time) *UserNotificationSettingCreate {
	unsc.mutation.SetCreatedAt(t)
	return unsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (unsc *UserNotificationSettingCreate) SetNillableCreatedAt(t *time.Time) *UserNotificationSettingCreate {
	if t != nil {
		unsc.SetCreatedAt(*t)
	}
	return unsc
}

// SetUpdatedAt sets the "updated_at" field.
func (unsc *UserNotificationSettingCreate) SetUpdatedAt(t time.Time) *UserNotificationSettingCreate {
	unsc.mutation.SetUpdatedAt(t)
	return unsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (unsc *UserNotificationSettingCreate) SetNillableUpdatedAt(t *time.Time) *UserNotificationSettingCreate {
	if t != nil {
		unsc.SetUpdatedAt(*t)
	}
	return unsc
}

// SetToken sets the "token" field.
func (unsc *UserNotificationSettingCreate) SetToken(s string) *UserNotificationSettingCreate {
	unsc.mutation.SetToken(s)
	return unsc
}

// SetSlug sets the "slug" field.
func (unsc *UserNotificationSettingCreate) SetSlug(s string) *UserNotificationSettingCreate {
	unsc.mutation.SetSlug(s)
	return unsc
}

// SetName sets the "name" field.
func (unsc *UserNotificationSettingCreate) SetName(s string) *UserNotificationSettingCreate {
	unsc.mutation.SetName(s)
	return unsc
}

// SetEnableNewPosts sets the "enable_new_posts" field.
func (unsc *UserNotificationSettingCreate) SetEnableNewPosts(b bool) *UserNotificationSettingCreate {
	unsc.mutation.SetEnableNewPosts(b)
	return unsc
}

// SetEnablePaymentStart sets the "enable_payment_start" field.
func (unsc *UserNotificationSettingCreate) SetEnablePaymentStart(b bool) *UserNotificationSettingCreate {
	unsc.mutation.SetEnablePaymentStart(b)
	return unsc
}

// SetEnablePaymentDue sets the "enable_payment_due" field.
func (unsc *UserNotificationSettingCreate) SetEnablePaymentDue(b bool) *UserNotificationSettingCreate {
	unsc.mutation.SetEnablePaymentDue(b)
	return unsc
}

// SetOwnerUserID sets the "owner_user_id" field.
func (unsc *UserNotificationSettingCreate) SetOwnerUserID(i int) *UserNotificationSettingCreate {
	unsc.mutation.SetOwnerUserID(i)
	return unsc
}

// SetNillableOwnerUserID sets the "owner_user_id" field if the given value is not nil.
func (unsc *UserNotificationSettingCreate) SetNillableOwnerUserID(i *int) *UserNotificationSettingCreate {
	if i != nil {
		unsc.SetOwnerUserID(*i)
	}
	return unsc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (unsc *UserNotificationSettingCreate) SetUserID(id int) *UserNotificationSettingCreate {
	unsc.mutation.SetUserID(id)
	return unsc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (unsc *UserNotificationSettingCreate) SetNillableUserID(id *int) *UserNotificationSettingCreate {
	if id != nil {
		unsc = unsc.SetUserID(*id)
	}
	return unsc
}

// SetUser sets the "user" edge to the User entity.
func (unsc *UserNotificationSettingCreate) SetUser(u *User) *UserNotificationSettingCreate {
	return unsc.SetUserID(u.ID)
}

// AddNotificationLogIDs adds the "notification_logs" edge to the UserNotificationLog entity by IDs.
func (unsc *UserNotificationSettingCreate) AddNotificationLogIDs(ids ...int) *UserNotificationSettingCreate {
	unsc.mutation.AddNotificationLogIDs(ids...)
	return unsc
}

// AddNotificationLogs adds the "notification_logs" edges to the UserNotificationLog entity.
func (unsc *UserNotificationSettingCreate) AddNotificationLogs(u ...*UserNotificationLog) *UserNotificationSettingCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return unsc.AddNotificationLogIDs(ids...)
}

// Mutation returns the UserNotificationSettingMutation object of the builder.
func (unsc *UserNotificationSettingCreate) Mutation() *UserNotificationSettingMutation {
	return unsc.mutation
}

// Save creates the UserNotificationSetting in the database.
func (unsc *UserNotificationSettingCreate) Save(ctx context.Context) (*UserNotificationSetting, error) {
	return withHooks[*UserNotificationSetting, UserNotificationSettingMutation](ctx, unsc.sqlSave, unsc.mutation, unsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (unsc *UserNotificationSettingCreate) SaveX(ctx context.Context) *UserNotificationSetting {
	v, err := unsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (unsc *UserNotificationSettingCreate) Exec(ctx context.Context) error {
	_, err := unsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (unsc *UserNotificationSettingCreate) ExecX(ctx context.Context) {
	if err := unsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (unsc *UserNotificationSettingCreate) check() error {
	if _, ok := unsc.mutation.Token(); !ok {
		return &ValidationError{Name: "token", err: errors.New(`ent: missing required field "UserNotificationSetting.token"`)}
	}
	if _, ok := unsc.mutation.Slug(); !ok {
		return &ValidationError{Name: "slug", err: errors.New(`ent: missing required field "UserNotificationSetting.slug"`)}
	}
	if _, ok := unsc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "UserNotificationSetting.name"`)}
	}
	if _, ok := unsc.mutation.EnableNewPosts(); !ok {
		return &ValidationError{Name: "enable_new_posts", err: errors.New(`ent: missing required field "UserNotificationSetting.enable_new_posts"`)}
	}
	if _, ok := unsc.mutation.EnablePaymentStart(); !ok {
		return &ValidationError{Name: "enable_payment_start", err: errors.New(`ent: missing required field "UserNotificationSetting.enable_payment_start"`)}
	}
	if _, ok := unsc.mutation.EnablePaymentDue(); !ok {
		return &ValidationError{Name: "enable_payment_due", err: errors.New(`ent: missing required field "UserNotificationSetting.enable_payment_due"`)}
	}
	return nil
}

func (unsc *UserNotificationSettingCreate) sqlSave(ctx context.Context) (*UserNotificationSetting, error) {
	if err := unsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := unsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, unsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	unsc.mutation.id = &_node.ID
	unsc.mutation.done = true
	return _node, nil
}

func (unsc *UserNotificationSettingCreate) createSpec() (*UserNotificationSetting, *sqlgraph.CreateSpec) {
	var (
		_node = &UserNotificationSetting{config: unsc.config}
		_spec = sqlgraph.NewCreateSpec(usernotificationsetting.Table, sqlgraph.NewFieldSpec(usernotificationsetting.FieldID, field.TypeInt))
	)
	_spec.OnConflict = unsc.conflict
	if value, ok := unsc.mutation.CreatedAt(); ok {
		_spec.SetField(usernotificationsetting.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := unsc.mutation.UpdatedAt(); ok {
		_spec.SetField(usernotificationsetting.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := unsc.mutation.Token(); ok {
		_spec.SetField(usernotificationsetting.FieldToken, field.TypeString, value)
		_node.Token = value
	}
	if value, ok := unsc.mutation.Slug(); ok {
		_spec.SetField(usernotificationsetting.FieldSlug, field.TypeString, value)
		_node.Slug = value
	}
	if value, ok := unsc.mutation.Name(); ok {
		_spec.SetField(usernotificationsetting.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := unsc.mutation.EnableNewPosts(); ok {
		_spec.SetField(usernotificationsetting.FieldEnableNewPosts, field.TypeBool, value)
		_node.EnableNewPosts = value
	}
	if value, ok := unsc.mutation.EnablePaymentStart(); ok {
		_spec.SetField(usernotificationsetting.FieldEnablePaymentStart, field.TypeBool, value)
		_node.EnablePaymentStart = value
	}
	if value, ok := unsc.mutation.EnablePaymentDue(); ok {
		_spec.SetField(usernotificationsetting.FieldEnablePaymentDue, field.TypeBool, value)
		_node.EnablePaymentDue = value
	}
	if nodes := unsc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usernotificationsetting.UserTable,
			Columns: []string{usernotificationsetting.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerUserID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := unsc.mutation.NotificationLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   usernotificationsetting.NotificationLogsTable,
			Columns: usernotificationsetting.NotificationLogsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usernotificationlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserNotificationSetting.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserNotificationSettingUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (unsc *UserNotificationSettingCreate) OnConflict(opts ...sql.ConflictOption) *UserNotificationSettingUpsertOne {
	unsc.conflict = opts
	return &UserNotificationSettingUpsertOne{
		create: unsc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserNotificationSetting.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (unsc *UserNotificationSettingCreate) OnConflictColumns(columns ...string) *UserNotificationSettingUpsertOne {
	unsc.conflict = append(unsc.conflict, sql.ConflictColumns(columns...))
	return &UserNotificationSettingUpsertOne{
		create: unsc,
	}
}

type (
	// UserNotificationSettingUpsertOne is the builder for "upsert"-ing
	//  one UserNotificationSetting node.
	UserNotificationSettingUpsertOne struct {
		create *UserNotificationSettingCreate
	}

	// UserNotificationSettingUpsert is the "OnConflict" setter.
	UserNotificationSettingUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *UserNotificationSettingUpsert) SetUpdatedAt(v time.Time) *UserNotificationSettingUpsert {
	u.Set(usernotificationsetting.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserNotificationSettingUpsert) UpdateUpdatedAt() *UserNotificationSettingUpsert {
	u.SetExcluded(usernotificationsetting.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *UserNotificationSettingUpsert) ClearUpdatedAt() *UserNotificationSettingUpsert {
	u.SetNull(usernotificationsetting.FieldUpdatedAt)
	return u
}

// SetToken sets the "token" field.
func (u *UserNotificationSettingUpsert) SetToken(v string) *UserNotificationSettingUpsert {
	u.Set(usernotificationsetting.FieldToken, v)
	return u
}

// UpdateToken sets the "token" field to the value that was provided on create.
func (u *UserNotificationSettingUpsert) UpdateToken() *UserNotificationSettingUpsert {
	u.SetExcluded(usernotificationsetting.FieldToken)
	return u
}

// SetSlug sets the "slug" field.
func (u *UserNotificationSettingUpsert) SetSlug(v string) *UserNotificationSettingUpsert {
	u.Set(usernotificationsetting.FieldSlug, v)
	return u
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *UserNotificationSettingUpsert) UpdateSlug() *UserNotificationSettingUpsert {
	u.SetExcluded(usernotificationsetting.FieldSlug)
	return u
}

// SetName sets the "name" field.
func (u *UserNotificationSettingUpsert) SetName(v string) *UserNotificationSettingUpsert {
	u.Set(usernotificationsetting.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *UserNotificationSettingUpsert) UpdateName() *UserNotificationSettingUpsert {
	u.SetExcluded(usernotificationsetting.FieldName)
	return u
}

// SetEnableNewPosts sets the "enable_new_posts" field.
func (u *UserNotificationSettingUpsert) SetEnableNewPosts(v bool) *UserNotificationSettingUpsert {
	u.Set(usernotificationsetting.FieldEnableNewPosts, v)
	return u
}

// UpdateEnableNewPosts sets the "enable_new_posts" field to the value that was provided on create.
func (u *UserNotificationSettingUpsert) UpdateEnableNewPosts() *UserNotificationSettingUpsert {
	u.SetExcluded(usernotificationsetting.FieldEnableNewPosts)
	return u
}

// SetEnablePaymentStart sets the "enable_payment_start" field.
func (u *UserNotificationSettingUpsert) SetEnablePaymentStart(v bool) *UserNotificationSettingUpsert {
	u.Set(usernotificationsetting.FieldEnablePaymentStart, v)
	return u
}

// UpdateEnablePaymentStart sets the "enable_payment_start" field to the value that was provided on create.
func (u *UserNotificationSettingUpsert) UpdateEnablePaymentStart() *UserNotificationSettingUpsert {
	u.SetExcluded(usernotificationsetting.FieldEnablePaymentStart)
	return u
}

// SetEnablePaymentDue sets the "enable_payment_due" field.
func (u *UserNotificationSettingUpsert) SetEnablePaymentDue(v bool) *UserNotificationSettingUpsert {
	u.Set(usernotificationsetting.FieldEnablePaymentDue, v)
	return u
}

// UpdateEnablePaymentDue sets the "enable_payment_due" field to the value that was provided on create.
func (u *UserNotificationSettingUpsert) UpdateEnablePaymentDue() *UserNotificationSettingUpsert {
	u.SetExcluded(usernotificationsetting.FieldEnablePaymentDue)
	return u
}

// SetOwnerUserID sets the "owner_user_id" field.
func (u *UserNotificationSettingUpsert) SetOwnerUserID(v int) *UserNotificationSettingUpsert {
	u.Set(usernotificationsetting.FieldOwnerUserID, v)
	return u
}

// UpdateOwnerUserID sets the "owner_user_id" field to the value that was provided on create.
func (u *UserNotificationSettingUpsert) UpdateOwnerUserID() *UserNotificationSettingUpsert {
	u.SetExcluded(usernotificationsetting.FieldOwnerUserID)
	return u
}

// ClearOwnerUserID clears the value of the "owner_user_id" field.
func (u *UserNotificationSettingUpsert) ClearOwnerUserID() *UserNotificationSettingUpsert {
	u.SetNull(usernotificationsetting.FieldOwnerUserID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.UserNotificationSetting.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UserNotificationSettingUpsertOne) UpdateNewValues() *UserNotificationSettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(usernotificationsetting.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserNotificationSetting.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserNotificationSettingUpsertOne) Ignore() *UserNotificationSettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserNotificationSettingUpsertOne) DoNothing() *UserNotificationSettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserNotificationSettingCreate.OnConflict
// documentation for more info.
func (u *UserNotificationSettingUpsertOne) Update(set func(*UserNotificationSettingUpsert)) *UserNotificationSettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserNotificationSettingUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserNotificationSettingUpsertOne) SetUpdatedAt(v time.Time) *UserNotificationSettingUpsertOne {
	return u.Update(func(s *UserNotificationSettingUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserNotificationSettingUpsertOne) UpdateUpdatedAt() *UserNotificationSettingUpsertOne {
	return u.Update(func(s *UserNotificationSettingUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *UserNotificationSettingUpsertOne) ClearUpdatedAt() *UserNotificationSettingUpsertOne {
	return u.Update(func(s *UserNotificationSettingUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetToken sets the "token" field.
func (u *UserNotificationSettingUpsertOne) SetToken(v string) *UserNotificationSettingUpsertOne {
	return u.Update(func(s *UserNotificationSettingUpsert) {
		s.SetToken(v)
	})
}

// UpdateToken sets the "token" field to the value that was provided on create.
func (u *UserNotificationSettingUpsertOne) UpdateToken() *UserNotificationSettingUpsertOne {
	return u.Update(func(s *UserNotificationSettingUpsert) {
		s.UpdateToken()
	})
}

// SetSlug sets the "slug" field.
func (u *UserNotificationSettingUpsertOne) SetSlug(v string) *UserNotificationSettingUpsertOne {
	return u.Update(func(s *UserNotificationSettingUpsert) {
		s.SetSlug(v)
	})
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *UserNotificationSettingUpsertOne) UpdateSlug() *UserNotificationSettingUpsertOne {
	return u.Update(func(s *UserNotificationSettingUpsert) {
		s.UpdateSlug()
	})
}

// SetName sets the "name" field.
func (u *UserNotificationSettingUpsertOne) SetName(v string) *UserNotificationSettingUpsertOne {
	return u.Update(func(s *UserNotificationSettingUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *UserNotificationSettingUpsertOne) UpdateName() *UserNotificationSettingUpsertOne {
	return u.Update(func(s *UserNotificationSettingUpsert) {
		s.UpdateName()
	})
}

// SetEnableNewPosts sets the "enable_new_posts" field.
func (u *UserNotificationSettingUpsertOne) SetEnableNewPosts(v bool) *UserNotificationSettingUpsertOne {
	return u.Update(func(s *UserNotificationSettingUpsert) {
		s.SetEnableNewPosts(v)
	})
}

// UpdateEnableNewPosts sets the "enable_new_posts" field to the value that was provided on create.
func (u *UserNotificationSettingUpsertOne) UpdateEnableNewPosts() *UserNotificationSettingUpsertOne {
	return u.Update(func(s *UserNotificationSettingUpsert) {
		s.UpdateEnableNewPosts()
	})
}

// SetEnablePaymentStart sets the "enable_payment_start" field.
func (u *UserNotificationSettingUpsertOne) SetEnablePaymentStart(v bool) *UserNotificationSettingUpsertOne {
	return u.Update(func(s *UserNotificationSettingUpsert) {
		s.SetEnablePaymentStart(v)
	})
}

// UpdateEnablePaymentStart sets the "enable_payment_start" field to the value that was provided on create.
func (u *UserNotificationSettingUpsertOne) UpdateEnablePaymentStart() *UserNotificationSettingUpsertOne {
	return u.Update(func(s *UserNotificationSettingUpsert) {
		s.UpdateEnablePaymentStart()
	})
}

// SetEnablePaymentDue sets the "enable_payment_due" field.
func (u *UserNotificationSettingUpsertOne) SetEnablePaymentDue(v bool) *UserNotificationSettingUpsertOne {
	return u.Update(func(s *UserNotificationSettingUpsert) {
		s.SetEnablePaymentDue(v)
	})
}

// UpdateEnablePaymentDue sets the "enable_payment_due" field to the value that was provided on create.
func (u *UserNotificationSettingUpsertOne) UpdateEnablePaymentDue() *UserNotificationSettingUpsertOne {
	return u.Update(func(s *UserNotificationSettingUpsert) {
		s.UpdateEnablePaymentDue()
	})
}

// SetOwnerUserID sets the "owner_user_id" field.
func (u *UserNotificationSettingUpsertOne) SetOwnerUserID(v int) *UserNotificationSettingUpsertOne {
	return u.Update(func(s *UserNotificationSettingUpsert) {
		s.SetOwnerUserID(v)
	})
}

// UpdateOwnerUserID sets the "owner_user_id" field to the value that was provided on create.
func (u *UserNotificationSettingUpsertOne) UpdateOwnerUserID() *UserNotificationSettingUpsertOne {
	return u.Update(func(s *UserNotificationSettingUpsert) {
		s.UpdateOwnerUserID()
	})
}

// ClearOwnerUserID clears the value of the "owner_user_id" field.
func (u *UserNotificationSettingUpsertOne) ClearOwnerUserID() *UserNotificationSettingUpsertOne {
	return u.Update(func(s *UserNotificationSettingUpsert) {
		s.ClearOwnerUserID()
	})
}

// Exec executes the query.
func (u *UserNotificationSettingUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserNotificationSettingCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserNotificationSettingUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserNotificationSettingUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserNotificationSettingUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserNotificationSettingCreateBulk is the builder for creating many UserNotificationSetting entities in bulk.
type UserNotificationSettingCreateBulk struct {
	config
	builders []*UserNotificationSettingCreate
	conflict []sql.ConflictOption
}

// Save creates the UserNotificationSetting entities in the database.
func (unscb *UserNotificationSettingCreateBulk) Save(ctx context.Context) ([]*UserNotificationSetting, error) {
	specs := make([]*sqlgraph.CreateSpec, len(unscb.builders))
	nodes := make([]*UserNotificationSetting, len(unscb.builders))
	mutators := make([]Mutator, len(unscb.builders))
	for i := range unscb.builders {
		func(i int, root context.Context) {
			builder := unscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserNotificationSettingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, unscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = unscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, unscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, unscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (unscb *UserNotificationSettingCreateBulk) SaveX(ctx context.Context) []*UserNotificationSetting {
	v, err := unscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (unscb *UserNotificationSettingCreateBulk) Exec(ctx context.Context) error {
	_, err := unscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (unscb *UserNotificationSettingCreateBulk) ExecX(ctx context.Context) {
	if err := unscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserNotificationSetting.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserNotificationSettingUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (unscb *UserNotificationSettingCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserNotificationSettingUpsertBulk {
	unscb.conflict = opts
	return &UserNotificationSettingUpsertBulk{
		create: unscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserNotificationSetting.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (unscb *UserNotificationSettingCreateBulk) OnConflictColumns(columns ...string) *UserNotificationSettingUpsertBulk {
	unscb.conflict = append(unscb.conflict, sql.ConflictColumns(columns...))
	return &UserNotificationSettingUpsertBulk{
		create: unscb,
	}
}

// UserNotificationSettingUpsertBulk is the builder for "upsert"-ing
// a bulk of UserNotificationSetting nodes.
type UserNotificationSettingUpsertBulk struct {
	create *UserNotificationSettingCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.UserNotificationSetting.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UserNotificationSettingUpsertBulk) UpdateNewValues() *UserNotificationSettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(usernotificationsetting.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserNotificationSetting.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserNotificationSettingUpsertBulk) Ignore() *UserNotificationSettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserNotificationSettingUpsertBulk) DoNothing() *UserNotificationSettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserNotificationSettingCreateBulk.OnConflict
// documentation for more info.
func (u *UserNotificationSettingUpsertBulk) Update(set func(*UserNotificationSettingUpsert)) *UserNotificationSettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserNotificationSettingUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserNotificationSettingUpsertBulk) SetUpdatedAt(v time.Time) *UserNotificationSettingUpsertBulk {
	return u.Update(func(s *UserNotificationSettingUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserNotificationSettingUpsertBulk) UpdateUpdatedAt() *UserNotificationSettingUpsertBulk {
	return u.Update(func(s *UserNotificationSettingUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *UserNotificationSettingUpsertBulk) ClearUpdatedAt() *UserNotificationSettingUpsertBulk {
	return u.Update(func(s *UserNotificationSettingUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetToken sets the "token" field.
func (u *UserNotificationSettingUpsertBulk) SetToken(v string) *UserNotificationSettingUpsertBulk {
	return u.Update(func(s *UserNotificationSettingUpsert) {
		s.SetToken(v)
	})
}

// UpdateToken sets the "token" field to the value that was provided on create.
func (u *UserNotificationSettingUpsertBulk) UpdateToken() *UserNotificationSettingUpsertBulk {
	return u.Update(func(s *UserNotificationSettingUpsert) {
		s.UpdateToken()
	})
}

// SetSlug sets the "slug" field.
func (u *UserNotificationSettingUpsertBulk) SetSlug(v string) *UserNotificationSettingUpsertBulk {
	return u.Update(func(s *UserNotificationSettingUpsert) {
		s.SetSlug(v)
	})
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *UserNotificationSettingUpsertBulk) UpdateSlug() *UserNotificationSettingUpsertBulk {
	return u.Update(func(s *UserNotificationSettingUpsert) {
		s.UpdateSlug()
	})
}

// SetName sets the "name" field.
func (u *UserNotificationSettingUpsertBulk) SetName(v string) *UserNotificationSettingUpsertBulk {
	return u.Update(func(s *UserNotificationSettingUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *UserNotificationSettingUpsertBulk) UpdateName() *UserNotificationSettingUpsertBulk {
	return u.Update(func(s *UserNotificationSettingUpsert) {
		s.UpdateName()
	})
}

// SetEnableNewPosts sets the "enable_new_posts" field.
func (u *UserNotificationSettingUpsertBulk) SetEnableNewPosts(v bool) *UserNotificationSettingUpsertBulk {
	return u.Update(func(s *UserNotificationSettingUpsert) {
		s.SetEnableNewPosts(v)
	})
}

// UpdateEnableNewPosts sets the "enable_new_posts" field to the value that was provided on create.
func (u *UserNotificationSettingUpsertBulk) UpdateEnableNewPosts() *UserNotificationSettingUpsertBulk {
	return u.Update(func(s *UserNotificationSettingUpsert) {
		s.UpdateEnableNewPosts()
	})
}

// SetEnablePaymentStart sets the "enable_payment_start" field.
func (u *UserNotificationSettingUpsertBulk) SetEnablePaymentStart(v bool) *UserNotificationSettingUpsertBulk {
	return u.Update(func(s *UserNotificationSettingUpsert) {
		s.SetEnablePaymentStart(v)
	})
}

// UpdateEnablePaymentStart sets the "enable_payment_start" field to the value that was provided on create.
func (u *UserNotificationSettingUpsertBulk) UpdateEnablePaymentStart() *UserNotificationSettingUpsertBulk {
	return u.Update(func(s *UserNotificationSettingUpsert) {
		s.UpdateEnablePaymentStart()
	})
}

// SetEnablePaymentDue sets the "enable_payment_due" field.
func (u *UserNotificationSettingUpsertBulk) SetEnablePaymentDue(v bool) *UserNotificationSettingUpsertBulk {
	return u.Update(func(s *UserNotificationSettingUpsert) {
		s.SetEnablePaymentDue(v)
	})
}

// UpdateEnablePaymentDue sets the "enable_payment_due" field to the value that was provided on create.
func (u *UserNotificationSettingUpsertBulk) UpdateEnablePaymentDue() *UserNotificationSettingUpsertBulk {
	return u.Update(func(s *UserNotificationSettingUpsert) {
		s.UpdateEnablePaymentDue()
	})
}

// SetOwnerUserID sets the "owner_user_id" field.
func (u *UserNotificationSettingUpsertBulk) SetOwnerUserID(v int) *UserNotificationSettingUpsertBulk {
	return u.Update(func(s *UserNotificationSettingUpsert) {
		s.SetOwnerUserID(v)
	})
}

// UpdateOwnerUserID sets the "owner_user_id" field to the value that was provided on create.
func (u *UserNotificationSettingUpsertBulk) UpdateOwnerUserID() *UserNotificationSettingUpsertBulk {
	return u.Update(func(s *UserNotificationSettingUpsert) {
		s.UpdateOwnerUserID()
	})
}

// ClearOwnerUserID clears the value of the "owner_user_id" field.
func (u *UserNotificationSettingUpsertBulk) ClearOwnerUserID() *UserNotificationSettingUpsertBulk {
	return u.Update(func(s *UserNotificationSettingUpsert) {
		s.ClearOwnerUserID()
	})
}

// Exec executes the query.
func (u *UserNotificationSettingUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserNotificationSettingCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserNotificationSettingCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserNotificationSettingUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
