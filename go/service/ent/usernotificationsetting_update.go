// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yssk22/hpapp/go/service/ent/predicate"
	"github.com/yssk22/hpapp/go/service/ent/user"
	"github.com/yssk22/hpapp/go/service/ent/usernotificationlog"
	"github.com/yssk22/hpapp/go/service/ent/usernotificationsetting"
)

// UserNotificationSettingUpdate is the builder for updating UserNotificationSetting entities.
type UserNotificationSettingUpdate struct {
	config
	hooks    []Hook
	mutation *UserNotificationSettingMutation
}

// Where appends a list predicates to the UserNotificationSettingUpdate builder.
func (unsu *UserNotificationSettingUpdate) Where(ps ...predicate.UserNotificationSetting) *UserNotificationSettingUpdate {
	unsu.mutation.Where(ps...)
	return unsu
}

// SetUpdatedAt sets the "updated_at" field.
func (unsu *UserNotificationSettingUpdate) SetUpdatedAt(t time.Time) *UserNotificationSettingUpdate {
	unsu.mutation.SetUpdatedAt(t)
	return unsu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (unsu *UserNotificationSettingUpdate) SetNillableUpdatedAt(t *time.Time) *UserNotificationSettingUpdate {
	if t != nil {
		unsu.SetUpdatedAt(*t)
	}
	return unsu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (unsu *UserNotificationSettingUpdate) ClearUpdatedAt() *UserNotificationSettingUpdate {
	unsu.mutation.ClearUpdatedAt()
	return unsu
}

// SetToken sets the "token" field.
func (unsu *UserNotificationSettingUpdate) SetToken(s string) *UserNotificationSettingUpdate {
	unsu.mutation.SetToken(s)
	return unsu
}

// SetSlug sets the "slug" field.
func (unsu *UserNotificationSettingUpdate) SetSlug(s string) *UserNotificationSettingUpdate {
	unsu.mutation.SetSlug(s)
	return unsu
}

// SetName sets the "name" field.
func (unsu *UserNotificationSettingUpdate) SetName(s string) *UserNotificationSettingUpdate {
	unsu.mutation.SetName(s)
	return unsu
}

// SetEnableNewPosts sets the "enable_new_posts" field.
func (unsu *UserNotificationSettingUpdate) SetEnableNewPosts(b bool) *UserNotificationSettingUpdate {
	unsu.mutation.SetEnableNewPosts(b)
	return unsu
}

// SetEnablePaymentStart sets the "enable_payment_start" field.
func (unsu *UserNotificationSettingUpdate) SetEnablePaymentStart(b bool) *UserNotificationSettingUpdate {
	unsu.mutation.SetEnablePaymentStart(b)
	return unsu
}

// SetEnablePaymentDue sets the "enable_payment_due" field.
func (unsu *UserNotificationSettingUpdate) SetEnablePaymentDue(b bool) *UserNotificationSettingUpdate {
	unsu.mutation.SetEnablePaymentDue(b)
	return unsu
}

// SetOwnerUserID sets the "owner_user_id" field.
func (unsu *UserNotificationSettingUpdate) SetOwnerUserID(i int) *UserNotificationSettingUpdate {
	unsu.mutation.SetOwnerUserID(i)
	return unsu
}

// SetNillableOwnerUserID sets the "owner_user_id" field if the given value is not nil.
func (unsu *UserNotificationSettingUpdate) SetNillableOwnerUserID(i *int) *UserNotificationSettingUpdate {
	if i != nil {
		unsu.SetOwnerUserID(*i)
	}
	return unsu
}

// ClearOwnerUserID clears the value of the "owner_user_id" field.
func (unsu *UserNotificationSettingUpdate) ClearOwnerUserID() *UserNotificationSettingUpdate {
	unsu.mutation.ClearOwnerUserID()
	return unsu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (unsu *UserNotificationSettingUpdate) SetUserID(id int) *UserNotificationSettingUpdate {
	unsu.mutation.SetUserID(id)
	return unsu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (unsu *UserNotificationSettingUpdate) SetNillableUserID(id *int) *UserNotificationSettingUpdate {
	if id != nil {
		unsu = unsu.SetUserID(*id)
	}
	return unsu
}

// SetUser sets the "user" edge to the User entity.
func (unsu *UserNotificationSettingUpdate) SetUser(u *User) *UserNotificationSettingUpdate {
	return unsu.SetUserID(u.ID)
}

// AddNotificationLogIDs adds the "notification_logs" edge to the UserNotificationLog entity by IDs.
func (unsu *UserNotificationSettingUpdate) AddNotificationLogIDs(ids ...int) *UserNotificationSettingUpdate {
	unsu.mutation.AddNotificationLogIDs(ids...)
	return unsu
}

// AddNotificationLogs adds the "notification_logs" edges to the UserNotificationLog entity.
func (unsu *UserNotificationSettingUpdate) AddNotificationLogs(u ...*UserNotificationLog) *UserNotificationSettingUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return unsu.AddNotificationLogIDs(ids...)
}

// Mutation returns the UserNotificationSettingMutation object of the builder.
func (unsu *UserNotificationSettingUpdate) Mutation() *UserNotificationSettingMutation {
	return unsu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (unsu *UserNotificationSettingUpdate) ClearUser() *UserNotificationSettingUpdate {
	unsu.mutation.ClearUser()
	return unsu
}

// ClearNotificationLogs clears all "notification_logs" edges to the UserNotificationLog entity.
func (unsu *UserNotificationSettingUpdate) ClearNotificationLogs() *UserNotificationSettingUpdate {
	unsu.mutation.ClearNotificationLogs()
	return unsu
}

// RemoveNotificationLogIDs removes the "notification_logs" edge to UserNotificationLog entities by IDs.
func (unsu *UserNotificationSettingUpdate) RemoveNotificationLogIDs(ids ...int) *UserNotificationSettingUpdate {
	unsu.mutation.RemoveNotificationLogIDs(ids...)
	return unsu
}

// RemoveNotificationLogs removes "notification_logs" edges to UserNotificationLog entities.
func (unsu *UserNotificationSettingUpdate) RemoveNotificationLogs(u ...*UserNotificationLog) *UserNotificationSettingUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return unsu.RemoveNotificationLogIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (unsu *UserNotificationSettingUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, UserNotificationSettingMutation](ctx, unsu.sqlSave, unsu.mutation, unsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (unsu *UserNotificationSettingUpdate) SaveX(ctx context.Context) int {
	affected, err := unsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (unsu *UserNotificationSettingUpdate) Exec(ctx context.Context) error {
	_, err := unsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (unsu *UserNotificationSettingUpdate) ExecX(ctx context.Context) {
	if err := unsu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (unsu *UserNotificationSettingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(usernotificationsetting.Table, usernotificationsetting.Columns, sqlgraph.NewFieldSpec(usernotificationsetting.FieldID, field.TypeInt))
	if ps := unsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if unsu.mutation.CreatedAtCleared() {
		_spec.ClearField(usernotificationsetting.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := unsu.mutation.UpdatedAt(); ok {
		_spec.SetField(usernotificationsetting.FieldUpdatedAt, field.TypeTime, value)
	}
	if unsu.mutation.UpdatedAtCleared() {
		_spec.ClearField(usernotificationsetting.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := unsu.mutation.Token(); ok {
		_spec.SetField(usernotificationsetting.FieldToken, field.TypeString, value)
	}
	if value, ok := unsu.mutation.Slug(); ok {
		_spec.SetField(usernotificationsetting.FieldSlug, field.TypeString, value)
	}
	if value, ok := unsu.mutation.Name(); ok {
		_spec.SetField(usernotificationsetting.FieldName, field.TypeString, value)
	}
	if value, ok := unsu.mutation.EnableNewPosts(); ok {
		_spec.SetField(usernotificationsetting.FieldEnableNewPosts, field.TypeBool, value)
	}
	if value, ok := unsu.mutation.EnablePaymentStart(); ok {
		_spec.SetField(usernotificationsetting.FieldEnablePaymentStart, field.TypeBool, value)
	}
	if value, ok := unsu.mutation.EnablePaymentDue(); ok {
		_spec.SetField(usernotificationsetting.FieldEnablePaymentDue, field.TypeBool, value)
	}
	if unsu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usernotificationsetting.UserTable,
			Columns: []string{usernotificationsetting.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := unsu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usernotificationsetting.UserTable,
			Columns: []string{usernotificationsetting.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if unsu.mutation.NotificationLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   usernotificationsetting.NotificationLogsTable,
			Columns: usernotificationsetting.NotificationLogsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usernotificationlog.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := unsu.mutation.RemovedNotificationLogsIDs(); len(nodes) > 0 && !unsu.mutation.NotificationLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   usernotificationsetting.NotificationLogsTable,
			Columns: usernotificationsetting.NotificationLogsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usernotificationlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := unsu.mutation.NotificationLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   usernotificationsetting.NotificationLogsTable,
			Columns: usernotificationsetting.NotificationLogsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usernotificationlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, unsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usernotificationsetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	unsu.mutation.done = true
	return n, nil
}

// UserNotificationSettingUpdateOne is the builder for updating a single UserNotificationSetting entity.
type UserNotificationSettingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserNotificationSettingMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (unsuo *UserNotificationSettingUpdateOne) SetUpdatedAt(t time.Time) *UserNotificationSettingUpdateOne {
	unsuo.mutation.SetUpdatedAt(t)
	return unsuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (unsuo *UserNotificationSettingUpdateOne) SetNillableUpdatedAt(t *time.Time) *UserNotificationSettingUpdateOne {
	if t != nil {
		unsuo.SetUpdatedAt(*t)
	}
	return unsuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (unsuo *UserNotificationSettingUpdateOne) ClearUpdatedAt() *UserNotificationSettingUpdateOne {
	unsuo.mutation.ClearUpdatedAt()
	return unsuo
}

// SetToken sets the "token" field.
func (unsuo *UserNotificationSettingUpdateOne) SetToken(s string) *UserNotificationSettingUpdateOne {
	unsuo.mutation.SetToken(s)
	return unsuo
}

// SetSlug sets the "slug" field.
func (unsuo *UserNotificationSettingUpdateOne) SetSlug(s string) *UserNotificationSettingUpdateOne {
	unsuo.mutation.SetSlug(s)
	return unsuo
}

// SetName sets the "name" field.
func (unsuo *UserNotificationSettingUpdateOne) SetName(s string) *UserNotificationSettingUpdateOne {
	unsuo.mutation.SetName(s)
	return unsuo
}

// SetEnableNewPosts sets the "enable_new_posts" field.
func (unsuo *UserNotificationSettingUpdateOne) SetEnableNewPosts(b bool) *UserNotificationSettingUpdateOne {
	unsuo.mutation.SetEnableNewPosts(b)
	return unsuo
}

// SetEnablePaymentStart sets the "enable_payment_start" field.
func (unsuo *UserNotificationSettingUpdateOne) SetEnablePaymentStart(b bool) *UserNotificationSettingUpdateOne {
	unsuo.mutation.SetEnablePaymentStart(b)
	return unsuo
}

// SetEnablePaymentDue sets the "enable_payment_due" field.
func (unsuo *UserNotificationSettingUpdateOne) SetEnablePaymentDue(b bool) *UserNotificationSettingUpdateOne {
	unsuo.mutation.SetEnablePaymentDue(b)
	return unsuo
}

// SetOwnerUserID sets the "owner_user_id" field.
func (unsuo *UserNotificationSettingUpdateOne) SetOwnerUserID(i int) *UserNotificationSettingUpdateOne {
	unsuo.mutation.SetOwnerUserID(i)
	return unsuo
}

// SetNillableOwnerUserID sets the "owner_user_id" field if the given value is not nil.
func (unsuo *UserNotificationSettingUpdateOne) SetNillableOwnerUserID(i *int) *UserNotificationSettingUpdateOne {
	if i != nil {
		unsuo.SetOwnerUserID(*i)
	}
	return unsuo
}

// ClearOwnerUserID clears the value of the "owner_user_id" field.
func (unsuo *UserNotificationSettingUpdateOne) ClearOwnerUserID() *UserNotificationSettingUpdateOne {
	unsuo.mutation.ClearOwnerUserID()
	return unsuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (unsuo *UserNotificationSettingUpdateOne) SetUserID(id int) *UserNotificationSettingUpdateOne {
	unsuo.mutation.SetUserID(id)
	return unsuo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (unsuo *UserNotificationSettingUpdateOne) SetNillableUserID(id *int) *UserNotificationSettingUpdateOne {
	if id != nil {
		unsuo = unsuo.SetUserID(*id)
	}
	return unsuo
}

// SetUser sets the "user" edge to the User entity.
func (unsuo *UserNotificationSettingUpdateOne) SetUser(u *User) *UserNotificationSettingUpdateOne {
	return unsuo.SetUserID(u.ID)
}

// AddNotificationLogIDs adds the "notification_logs" edge to the UserNotificationLog entity by IDs.
func (unsuo *UserNotificationSettingUpdateOne) AddNotificationLogIDs(ids ...int) *UserNotificationSettingUpdateOne {
	unsuo.mutation.AddNotificationLogIDs(ids...)
	return unsuo
}

// AddNotificationLogs adds the "notification_logs" edges to the UserNotificationLog entity.
func (unsuo *UserNotificationSettingUpdateOne) AddNotificationLogs(u ...*UserNotificationLog) *UserNotificationSettingUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return unsuo.AddNotificationLogIDs(ids...)
}

// Mutation returns the UserNotificationSettingMutation object of the builder.
func (unsuo *UserNotificationSettingUpdateOne) Mutation() *UserNotificationSettingMutation {
	return unsuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (unsuo *UserNotificationSettingUpdateOne) ClearUser() *UserNotificationSettingUpdateOne {
	unsuo.mutation.ClearUser()
	return unsuo
}

// ClearNotificationLogs clears all "notification_logs" edges to the UserNotificationLog entity.
func (unsuo *UserNotificationSettingUpdateOne) ClearNotificationLogs() *UserNotificationSettingUpdateOne {
	unsuo.mutation.ClearNotificationLogs()
	return unsuo
}

// RemoveNotificationLogIDs removes the "notification_logs" edge to UserNotificationLog entities by IDs.
func (unsuo *UserNotificationSettingUpdateOne) RemoveNotificationLogIDs(ids ...int) *UserNotificationSettingUpdateOne {
	unsuo.mutation.RemoveNotificationLogIDs(ids...)
	return unsuo
}

// RemoveNotificationLogs removes "notification_logs" edges to UserNotificationLog entities.
func (unsuo *UserNotificationSettingUpdateOne) RemoveNotificationLogs(u ...*UserNotificationLog) *UserNotificationSettingUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return unsuo.RemoveNotificationLogIDs(ids...)
}

// Where appends a list predicates to the UserNotificationSettingUpdate builder.
func (unsuo *UserNotificationSettingUpdateOne) Where(ps ...predicate.UserNotificationSetting) *UserNotificationSettingUpdateOne {
	unsuo.mutation.Where(ps...)
	return unsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (unsuo *UserNotificationSettingUpdateOne) Select(field string, fields ...string) *UserNotificationSettingUpdateOne {
	unsuo.fields = append([]string{field}, fields...)
	return unsuo
}

// Save executes the query and returns the updated UserNotificationSetting entity.
func (unsuo *UserNotificationSettingUpdateOne) Save(ctx context.Context) (*UserNotificationSetting, error) {
	return withHooks[*UserNotificationSetting, UserNotificationSettingMutation](ctx, unsuo.sqlSave, unsuo.mutation, unsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (unsuo *UserNotificationSettingUpdateOne) SaveX(ctx context.Context) *UserNotificationSetting {
	node, err := unsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (unsuo *UserNotificationSettingUpdateOne) Exec(ctx context.Context) error {
	_, err := unsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (unsuo *UserNotificationSettingUpdateOne) ExecX(ctx context.Context) {
	if err := unsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (unsuo *UserNotificationSettingUpdateOne) sqlSave(ctx context.Context) (_node *UserNotificationSetting, err error) {
	_spec := sqlgraph.NewUpdateSpec(usernotificationsetting.Table, usernotificationsetting.Columns, sqlgraph.NewFieldSpec(usernotificationsetting.FieldID, field.TypeInt))
	id, ok := unsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserNotificationSetting.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := unsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usernotificationsetting.FieldID)
		for _, f := range fields {
			if !usernotificationsetting.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != usernotificationsetting.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := unsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if unsuo.mutation.CreatedAtCleared() {
		_spec.ClearField(usernotificationsetting.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := unsuo.mutation.UpdatedAt(); ok {
		_spec.SetField(usernotificationsetting.FieldUpdatedAt, field.TypeTime, value)
	}
	if unsuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(usernotificationsetting.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := unsuo.mutation.Token(); ok {
		_spec.SetField(usernotificationsetting.FieldToken, field.TypeString, value)
	}
	if value, ok := unsuo.mutation.Slug(); ok {
		_spec.SetField(usernotificationsetting.FieldSlug, field.TypeString, value)
	}
	if value, ok := unsuo.mutation.Name(); ok {
		_spec.SetField(usernotificationsetting.FieldName, field.TypeString, value)
	}
	if value, ok := unsuo.mutation.EnableNewPosts(); ok {
		_spec.SetField(usernotificationsetting.FieldEnableNewPosts, field.TypeBool, value)
	}
	if value, ok := unsuo.mutation.EnablePaymentStart(); ok {
		_spec.SetField(usernotificationsetting.FieldEnablePaymentStart, field.TypeBool, value)
	}
	if value, ok := unsuo.mutation.EnablePaymentDue(); ok {
		_spec.SetField(usernotificationsetting.FieldEnablePaymentDue, field.TypeBool, value)
	}
	if unsuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usernotificationsetting.UserTable,
			Columns: []string{usernotificationsetting.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := unsuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usernotificationsetting.UserTable,
			Columns: []string{usernotificationsetting.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if unsuo.mutation.NotificationLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   usernotificationsetting.NotificationLogsTable,
			Columns: usernotificationsetting.NotificationLogsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usernotificationlog.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := unsuo.mutation.RemovedNotificationLogsIDs(); len(nodes) > 0 && !unsuo.mutation.NotificationLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   usernotificationsetting.NotificationLogsTable,
			Columns: usernotificationsetting.NotificationLogsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usernotificationlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := unsuo.mutation.NotificationLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   usernotificationsetting.NotificationLogsTable,
			Columns: usernotificationsetting.NotificationLogsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usernotificationlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserNotificationSetting{config: unsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, unsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usernotificationsetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	unsuo.mutation.done = true
	return _node, nil
}
