// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yssk22/hpapp/go/service/ent/hpartist"
	"github.com/yssk22/hpapp/go/service/ent/hpevent"
	"github.com/yssk22/hpapp/go/service/ent/hpfceventticket"
	"github.com/yssk22/hpapp/go/service/ent/hpmember"
	"github.com/yssk22/hpapp/go/service/ent/predicate"
)

// HPEventQuery is the builder for querying HPEvent entities.
type HPEventQuery struct {
	config
	ctx                       *QueryContext
	order                     []hpevent.Order
	inters                    []Interceptor
	predicates                []predicate.HPEvent
	withMembers               *HPMemberQuery
	withArtists               *HPArtistQuery
	withHpfcEventTickets      *HPFCEventTicketQuery
	modifiers                 []func(*sql.Selector)
	loadTotal                 []func(context.Context, []*HPEvent) error
	withNamedMembers          map[string]*HPMemberQuery
	withNamedArtists          map[string]*HPArtistQuery
	withNamedHpfcEventTickets map[string]*HPFCEventTicketQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the HPEventQuery builder.
func (heq *HPEventQuery) Where(ps ...predicate.HPEvent) *HPEventQuery {
	heq.predicates = append(heq.predicates, ps...)
	return heq
}

// Limit the number of records to be returned by this query.
func (heq *HPEventQuery) Limit(limit int) *HPEventQuery {
	heq.ctx.Limit = &limit
	return heq
}

// Offset to start from.
func (heq *HPEventQuery) Offset(offset int) *HPEventQuery {
	heq.ctx.Offset = &offset
	return heq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (heq *HPEventQuery) Unique(unique bool) *HPEventQuery {
	heq.ctx.Unique = &unique
	return heq
}

// Order specifies how the records should be ordered.
func (heq *HPEventQuery) Order(o ...hpevent.Order) *HPEventQuery {
	heq.order = append(heq.order, o...)
	return heq
}

// QueryMembers chains the current query on the "members" edge.
func (heq *HPEventQuery) QueryMembers() *HPMemberQuery {
	query := (&HPMemberClient{config: heq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := heq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := heq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hpevent.Table, hpevent.FieldID, selector),
			sqlgraph.To(hpmember.Table, hpmember.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, hpevent.MembersTable, hpevent.MembersColumn),
		)
		fromU = sqlgraph.SetNeighbors(heq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryArtists chains the current query on the "artists" edge.
func (heq *HPEventQuery) QueryArtists() *HPArtistQuery {
	query := (&HPArtistClient{config: heq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := heq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := heq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hpevent.Table, hpevent.FieldID, selector),
			sqlgraph.To(hpartist.Table, hpartist.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, hpevent.ArtistsTable, hpevent.ArtistsColumn),
		)
		fromU = sqlgraph.SetNeighbors(heq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHpfcEventTickets chains the current query on the "hpfc_event_tickets" edge.
func (heq *HPEventQuery) QueryHpfcEventTickets() *HPFCEventTicketQuery {
	query := (&HPFCEventTicketClient{config: heq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := heq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := heq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hpevent.Table, hpevent.FieldID, selector),
			sqlgraph.To(hpfceventticket.Table, hpfceventticket.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, hpevent.HpfcEventTicketsTable, hpevent.HpfcEventTicketsColumn),
		)
		fromU = sqlgraph.SetNeighbors(heq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first HPEvent entity from the query.
// Returns a *NotFoundError when no HPEvent was found.
func (heq *HPEventQuery) First(ctx context.Context) (*HPEvent, error) {
	nodes, err := heq.Limit(1).All(setContextOp(ctx, heq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{hpevent.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (heq *HPEventQuery) FirstX(ctx context.Context) *HPEvent {
	node, err := heq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first HPEvent ID from the query.
// Returns a *NotFoundError when no HPEvent ID was found.
func (heq *HPEventQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = heq.Limit(1).IDs(setContextOp(ctx, heq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{hpevent.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (heq *HPEventQuery) FirstIDX(ctx context.Context) int {
	id, err := heq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single HPEvent entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one HPEvent entity is found.
// Returns a *NotFoundError when no HPEvent entities are found.
func (heq *HPEventQuery) Only(ctx context.Context) (*HPEvent, error) {
	nodes, err := heq.Limit(2).All(setContextOp(ctx, heq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{hpevent.Label}
	default:
		return nil, &NotSingularError{hpevent.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (heq *HPEventQuery) OnlyX(ctx context.Context) *HPEvent {
	node, err := heq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only HPEvent ID in the query.
// Returns a *NotSingularError when more than one HPEvent ID is found.
// Returns a *NotFoundError when no entities are found.
func (heq *HPEventQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = heq.Limit(2).IDs(setContextOp(ctx, heq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{hpevent.Label}
	default:
		err = &NotSingularError{hpevent.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (heq *HPEventQuery) OnlyIDX(ctx context.Context) int {
	id, err := heq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of HPEvents.
func (heq *HPEventQuery) All(ctx context.Context) ([]*HPEvent, error) {
	ctx = setContextOp(ctx, heq.ctx, "All")
	if err := heq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*HPEvent, *HPEventQuery]()
	return withInterceptors[[]*HPEvent](ctx, heq, qr, heq.inters)
}

// AllX is like All, but panics if an error occurs.
func (heq *HPEventQuery) AllX(ctx context.Context) []*HPEvent {
	nodes, err := heq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of HPEvent IDs.
func (heq *HPEventQuery) IDs(ctx context.Context) (ids []int, err error) {
	if heq.ctx.Unique == nil && heq.path != nil {
		heq.Unique(true)
	}
	ctx = setContextOp(ctx, heq.ctx, "IDs")
	if err = heq.Select(hpevent.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (heq *HPEventQuery) IDsX(ctx context.Context) []int {
	ids, err := heq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (heq *HPEventQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, heq.ctx, "Count")
	if err := heq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, heq, querierCount[*HPEventQuery](), heq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (heq *HPEventQuery) CountX(ctx context.Context) int {
	count, err := heq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (heq *HPEventQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, heq.ctx, "Exist")
	switch _, err := heq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (heq *HPEventQuery) ExistX(ctx context.Context) bool {
	exist, err := heq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the HPEventQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (heq *HPEventQuery) Clone() *HPEventQuery {
	if heq == nil {
		return nil
	}
	return &HPEventQuery{
		config:               heq.config,
		ctx:                  heq.ctx.Clone(),
		order:                append([]hpevent.Order{}, heq.order...),
		inters:               append([]Interceptor{}, heq.inters...),
		predicates:           append([]predicate.HPEvent{}, heq.predicates...),
		withMembers:          heq.withMembers.Clone(),
		withArtists:          heq.withArtists.Clone(),
		withHpfcEventTickets: heq.withHpfcEventTickets.Clone(),
		// clone intermediate query.
		sql:  heq.sql.Clone(),
		path: heq.path,
	}
}

// WithMembers tells the query-builder to eager-load the nodes that are connected to
// the "members" edge. The optional arguments are used to configure the query builder of the edge.
func (heq *HPEventQuery) WithMembers(opts ...func(*HPMemberQuery)) *HPEventQuery {
	query := (&HPMemberClient{config: heq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	heq.withMembers = query
	return heq
}

// WithArtists tells the query-builder to eager-load the nodes that are connected to
// the "artists" edge. The optional arguments are used to configure the query builder of the edge.
func (heq *HPEventQuery) WithArtists(opts ...func(*HPArtistQuery)) *HPEventQuery {
	query := (&HPArtistClient{config: heq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	heq.withArtists = query
	return heq
}

// WithHpfcEventTickets tells the query-builder to eager-load the nodes that are connected to
// the "hpfc_event_tickets" edge. The optional arguments are used to configure the query builder of the edge.
func (heq *HPEventQuery) WithHpfcEventTickets(opts ...func(*HPFCEventTicketQuery)) *HPEventQuery {
	query := (&HPFCEventTicketClient{config: heq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	heq.withHpfcEventTickets = query
	return heq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.HPEvent.Query().
//		GroupBy(hpevent.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (heq *HPEventQuery) GroupBy(field string, fields ...string) *HPEventGroupBy {
	heq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &HPEventGroupBy{build: heq}
	grbuild.flds = &heq.ctx.Fields
	grbuild.label = hpevent.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.HPEvent.Query().
//		Select(hpevent.FieldCreatedAt).
//		Scan(ctx, &v)
func (heq *HPEventQuery) Select(fields ...string) *HPEventSelect {
	heq.ctx.Fields = append(heq.ctx.Fields, fields...)
	sbuild := &HPEventSelect{HPEventQuery: heq}
	sbuild.label = hpevent.Label
	sbuild.flds, sbuild.scan = &heq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a HPEventSelect configured with the given aggregations.
func (heq *HPEventQuery) Aggregate(fns ...AggregateFunc) *HPEventSelect {
	return heq.Select().Aggregate(fns...)
}

func (heq *HPEventQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range heq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, heq); err != nil {
				return err
			}
		}
	}
	for _, f := range heq.ctx.Fields {
		if !hpevent.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if heq.path != nil {
		prev, err := heq.path(ctx)
		if err != nil {
			return err
		}
		heq.sql = prev
	}
	return nil
}

func (heq *HPEventQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*HPEvent, error) {
	var (
		nodes       = []*HPEvent{}
		_spec       = heq.querySpec()
		loadedTypes = [3]bool{
			heq.withMembers != nil,
			heq.withArtists != nil,
			heq.withHpfcEventTickets != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*HPEvent).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &HPEvent{config: heq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(heq.modifiers) > 0 {
		_spec.Modifiers = heq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, heq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := heq.withMembers; query != nil {
		if err := heq.loadMembers(ctx, query, nodes,
			func(n *HPEvent) { n.Edges.Members = []*HPMember{} },
			func(n *HPEvent, e *HPMember) { n.Edges.Members = append(n.Edges.Members, e) }); err != nil {
			return nil, err
		}
	}
	if query := heq.withArtists; query != nil {
		if err := heq.loadArtists(ctx, query, nodes,
			func(n *HPEvent) { n.Edges.Artists = []*HPArtist{} },
			func(n *HPEvent, e *HPArtist) { n.Edges.Artists = append(n.Edges.Artists, e) }); err != nil {
			return nil, err
		}
	}
	if query := heq.withHpfcEventTickets; query != nil {
		if err := heq.loadHpfcEventTickets(ctx, query, nodes,
			func(n *HPEvent) { n.Edges.HpfcEventTickets = []*HPFCEventTicket{} },
			func(n *HPEvent, e *HPFCEventTicket) { n.Edges.HpfcEventTickets = append(n.Edges.HpfcEventTickets, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range heq.withNamedMembers {
		if err := heq.loadMembers(ctx, query, nodes,
			func(n *HPEvent) { n.appendNamedMembers(name) },
			func(n *HPEvent, e *HPMember) { n.appendNamedMembers(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range heq.withNamedArtists {
		if err := heq.loadArtists(ctx, query, nodes,
			func(n *HPEvent) { n.appendNamedArtists(name) },
			func(n *HPEvent, e *HPArtist) { n.appendNamedArtists(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range heq.withNamedHpfcEventTickets {
		if err := heq.loadHpfcEventTickets(ctx, query, nodes,
			func(n *HPEvent) { n.appendNamedHpfcEventTickets(name) },
			func(n *HPEvent, e *HPFCEventTicket) { n.appendNamedHpfcEventTickets(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range heq.loadTotal {
		if err := heq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (heq *HPEventQuery) loadMembers(ctx context.Context, query *HPMemberQuery, nodes []*HPEvent, init func(*HPEvent), assign func(*HPEvent, *HPMember)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*HPEvent)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.HPMember(func(s *sql.Selector) {
		s.Where(sql.InValues(hpevent.MembersColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.hp_event_members
		if fk == nil {
			return fmt.Errorf(`foreign-key "hp_event_members" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "hp_event_members" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (heq *HPEventQuery) loadArtists(ctx context.Context, query *HPArtistQuery, nodes []*HPEvent, init func(*HPEvent), assign func(*HPEvent, *HPArtist)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*HPEvent)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.HPArtist(func(s *sql.Selector) {
		s.Where(sql.InValues(hpevent.ArtistsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.hp_event_artists
		if fk == nil {
			return fmt.Errorf(`foreign-key "hp_event_artists" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "hp_event_artists" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (heq *HPEventQuery) loadHpfcEventTickets(ctx context.Context, query *HPFCEventTicketQuery, nodes []*HPEvent, init func(*HPEvent), assign func(*HPEvent, *HPFCEventTicket)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*HPEvent)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.HPFCEventTicket(func(s *sql.Selector) {
		s.Where(sql.InValues(hpevent.HpfcEventTicketsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.hp_event_hpfc_event_tickets
		if fk == nil {
			return fmt.Errorf(`foreign-key "hp_event_hpfc_event_tickets" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "hp_event_hpfc_event_tickets" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (heq *HPEventQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := heq.querySpec()
	if len(heq.modifiers) > 0 {
		_spec.Modifiers = heq.modifiers
	}
	_spec.Node.Columns = heq.ctx.Fields
	if len(heq.ctx.Fields) > 0 {
		_spec.Unique = heq.ctx.Unique != nil && *heq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, heq.driver, _spec)
}

func (heq *HPEventQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(hpevent.Table, hpevent.Columns, sqlgraph.NewFieldSpec(hpevent.FieldID, field.TypeInt))
	_spec.From = heq.sql
	if unique := heq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if heq.path != nil {
		_spec.Unique = true
	}
	if fields := heq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hpevent.FieldID)
		for i := range fields {
			if fields[i] != hpevent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := heq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := heq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := heq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := heq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (heq *HPEventQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(heq.driver.Dialect())
	t1 := builder.Table(hpevent.Table)
	columns := heq.ctx.Fields
	if len(columns) == 0 {
		columns = hpevent.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if heq.sql != nil {
		selector = heq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if heq.ctx.Unique != nil && *heq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range heq.predicates {
		p(selector)
	}
	for _, p := range heq.order {
		p(selector)
	}
	if offset := heq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := heq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedMembers tells the query-builder to eager-load the nodes that are connected to the "members"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (heq *HPEventQuery) WithNamedMembers(name string, opts ...func(*HPMemberQuery)) *HPEventQuery {
	query := (&HPMemberClient{config: heq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if heq.withNamedMembers == nil {
		heq.withNamedMembers = make(map[string]*HPMemberQuery)
	}
	heq.withNamedMembers[name] = query
	return heq
}

// WithNamedArtists tells the query-builder to eager-load the nodes that are connected to the "artists"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (heq *HPEventQuery) WithNamedArtists(name string, opts ...func(*HPArtistQuery)) *HPEventQuery {
	query := (&HPArtistClient{config: heq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if heq.withNamedArtists == nil {
		heq.withNamedArtists = make(map[string]*HPArtistQuery)
	}
	heq.withNamedArtists[name] = query
	return heq
}

// WithNamedHpfcEventTickets tells the query-builder to eager-load the nodes that are connected to the "hpfc_event_tickets"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (heq *HPEventQuery) WithNamedHpfcEventTickets(name string, opts ...func(*HPFCEventTicketQuery)) *HPEventQuery {
	query := (&HPFCEventTicketClient{config: heq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if heq.withNamedHpfcEventTickets == nil {
		heq.withNamedHpfcEventTickets = make(map[string]*HPFCEventTicketQuery)
	}
	heq.withNamedHpfcEventTickets[name] = query
	return heq
}

// HPEventGroupBy is the group-by builder for HPEvent entities.
type HPEventGroupBy struct {
	selector
	build *HPEventQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (hegb *HPEventGroupBy) Aggregate(fns ...AggregateFunc) *HPEventGroupBy {
	hegb.fns = append(hegb.fns, fns...)
	return hegb
}

// Scan applies the selector query and scans the result into the given value.
func (hegb *HPEventGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, hegb.build.ctx, "GroupBy")
	if err := hegb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*HPEventQuery, *HPEventGroupBy](ctx, hegb.build, hegb, hegb.build.inters, v)
}

func (hegb *HPEventGroupBy) sqlScan(ctx context.Context, root *HPEventQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(hegb.fns))
	for _, fn := range hegb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*hegb.flds)+len(hegb.fns))
		for _, f := range *hegb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*hegb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := hegb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// HPEventSelect is the builder for selecting fields of HPEvent entities.
type HPEventSelect struct {
	*HPEventQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (hes *HPEventSelect) Aggregate(fns ...AggregateFunc) *HPEventSelect {
	hes.fns = append(hes.fns, fns...)
	return hes
}

// Scan applies the selector query and scans the result into the given value.
func (hes *HPEventSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, hes.ctx, "Select")
	if err := hes.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*HPEventQuery, *HPEventSelect](ctx, hes.HPEventQuery, hes, hes.inters, v)
}

func (hes *HPEventSelect) sqlScan(ctx context.Context, root *HPEventQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(hes.fns))
	for _, fn := range hes.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*hes.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := hes.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
