// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yssk22/hpapp/go/service/ent/auth"
	"github.com/yssk22/hpapp/go/service/ent/hpelineupmallitempurchasehistory"
	"github.com/yssk22/hpapp/go/service/ent/hpfceventticket"
	"github.com/yssk22/hpapp/go/service/ent/hpfollow"
	"github.com/yssk22/hpapp/go/service/ent/hpsorthistory"
	"github.com/yssk22/hpapp/go/service/ent/hpviewhistory"
	"github.com/yssk22/hpapp/go/service/ent/predicate"
	"github.com/yssk22/hpapp/go/service/ent/user"
	"github.com/yssk22/hpapp/go/service/ent/usernotificationsetting"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetUpdatedAt sets the "updated_at" field.
func (uu *UserUpdate) SetUpdatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetUpdatedAt(t)
	return uu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUpdatedAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetUpdatedAt(*t)
	}
	return uu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (uu *UserUpdate) ClearUpdatedAt() *UserUpdate {
	uu.mutation.ClearUpdatedAt()
	return uu
}

// SetUsername sets the "username" field.
func (uu *UserUpdate) SetUsername(s string) *UserUpdate {
	uu.mutation.SetUsername(s)
	return uu
}

// SetAccessToken sets the "access_token" field.
func (uu *UserUpdate) SetAccessToken(s string) *UserUpdate {
	uu.mutation.SetAccessToken(s)
	return uu
}

// AddAuthIDs adds the "auth" edge to the Auth entity by IDs.
func (uu *UserUpdate) AddAuthIDs(ids ...int) *UserUpdate {
	uu.mutation.AddAuthIDs(ids...)
	return uu
}

// AddAuth adds the "auth" edges to the Auth entity.
func (uu *UserUpdate) AddAuth(a ...*Auth) *UserUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.AddAuthIDs(ids...)
}

// AddNotificationSettingIDs adds the "notification_settings" edge to the UserNotificationSetting entity by IDs.
func (uu *UserUpdate) AddNotificationSettingIDs(ids ...int) *UserUpdate {
	uu.mutation.AddNotificationSettingIDs(ids...)
	return uu
}

// AddNotificationSettings adds the "notification_settings" edges to the UserNotificationSetting entity.
func (uu *UserUpdate) AddNotificationSettings(u ...*UserNotificationSetting) *UserUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddNotificationSettingIDs(ids...)
}

// AddHpviewHistoryIDs adds the "hpview_history" edge to the HPViewHistory entity by IDs.
func (uu *UserUpdate) AddHpviewHistoryIDs(ids ...int) *UserUpdate {
	uu.mutation.AddHpviewHistoryIDs(ids...)
	return uu
}

// AddHpviewHistory adds the "hpview_history" edges to the HPViewHistory entity.
func (uu *UserUpdate) AddHpviewHistory(h ...*HPViewHistory) *UserUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return uu.AddHpviewHistoryIDs(ids...)
}

// AddHpfollowIDs adds the "hpfollow" edge to the HPFollow entity by IDs.
func (uu *UserUpdate) AddHpfollowIDs(ids ...int) *UserUpdate {
	uu.mutation.AddHpfollowIDs(ids...)
	return uu
}

// AddHpfollow adds the "hpfollow" edges to the HPFollow entity.
func (uu *UserUpdate) AddHpfollow(h ...*HPFollow) *UserUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return uu.AddHpfollowIDs(ids...)
}

// AddHpsortHistoryIDs adds the "hpsort_history" edge to the HPSortHistory entity by IDs.
func (uu *UserUpdate) AddHpsortHistoryIDs(ids ...int) *UserUpdate {
	uu.mutation.AddHpsortHistoryIDs(ids...)
	return uu
}

// AddHpsortHistory adds the "hpsort_history" edges to the HPSortHistory entity.
func (uu *UserUpdate) AddHpsortHistory(h ...*HPSortHistory) *UserUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return uu.AddHpsortHistoryIDs(ids...)
}

// AddHpfcEventTicketIDs adds the "hpfc_event_tickets" edge to the HPFCEventTicket entity by IDs.
func (uu *UserUpdate) AddHpfcEventTicketIDs(ids ...int) *UserUpdate {
	uu.mutation.AddHpfcEventTicketIDs(ids...)
	return uu
}

// AddHpfcEventTickets adds the "hpfc_event_tickets" edges to the HPFCEventTicket entity.
func (uu *UserUpdate) AddHpfcEventTickets(h ...*HPFCEventTicket) *UserUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return uu.AddHpfcEventTicketIDs(ids...)
}

// AddElineupMallPurchaseHistoryIDs adds the "elineup_mall_purchase_histories" edge to the HPElineupMallItemPurchaseHistory entity by IDs.
func (uu *UserUpdate) AddElineupMallPurchaseHistoryIDs(ids ...int) *UserUpdate {
	uu.mutation.AddElineupMallPurchaseHistoryIDs(ids...)
	return uu
}

// AddElineupMallPurchaseHistories adds the "elineup_mall_purchase_histories" edges to the HPElineupMallItemPurchaseHistory entity.
func (uu *UserUpdate) AddElineupMallPurchaseHistories(h ...*HPElineupMallItemPurchaseHistory) *UserUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return uu.AddElineupMallPurchaseHistoryIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearAuth clears all "auth" edges to the Auth entity.
func (uu *UserUpdate) ClearAuth() *UserUpdate {
	uu.mutation.ClearAuth()
	return uu
}

// RemoveAuthIDs removes the "auth" edge to Auth entities by IDs.
func (uu *UserUpdate) RemoveAuthIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveAuthIDs(ids...)
	return uu
}

// RemoveAuth removes "auth" edges to Auth entities.
func (uu *UserUpdate) RemoveAuth(a ...*Auth) *UserUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.RemoveAuthIDs(ids...)
}

// ClearNotificationSettings clears all "notification_settings" edges to the UserNotificationSetting entity.
func (uu *UserUpdate) ClearNotificationSettings() *UserUpdate {
	uu.mutation.ClearNotificationSettings()
	return uu
}

// RemoveNotificationSettingIDs removes the "notification_settings" edge to UserNotificationSetting entities by IDs.
func (uu *UserUpdate) RemoveNotificationSettingIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveNotificationSettingIDs(ids...)
	return uu
}

// RemoveNotificationSettings removes "notification_settings" edges to UserNotificationSetting entities.
func (uu *UserUpdate) RemoveNotificationSettings(u ...*UserNotificationSetting) *UserUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveNotificationSettingIDs(ids...)
}

// ClearHpviewHistory clears all "hpview_history" edges to the HPViewHistory entity.
func (uu *UserUpdate) ClearHpviewHistory() *UserUpdate {
	uu.mutation.ClearHpviewHistory()
	return uu
}

// RemoveHpviewHistoryIDs removes the "hpview_history" edge to HPViewHistory entities by IDs.
func (uu *UserUpdate) RemoveHpviewHistoryIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveHpviewHistoryIDs(ids...)
	return uu
}

// RemoveHpviewHistory removes "hpview_history" edges to HPViewHistory entities.
func (uu *UserUpdate) RemoveHpviewHistory(h ...*HPViewHistory) *UserUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return uu.RemoveHpviewHistoryIDs(ids...)
}

// ClearHpfollow clears all "hpfollow" edges to the HPFollow entity.
func (uu *UserUpdate) ClearHpfollow() *UserUpdate {
	uu.mutation.ClearHpfollow()
	return uu
}

// RemoveHpfollowIDs removes the "hpfollow" edge to HPFollow entities by IDs.
func (uu *UserUpdate) RemoveHpfollowIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveHpfollowIDs(ids...)
	return uu
}

// RemoveHpfollow removes "hpfollow" edges to HPFollow entities.
func (uu *UserUpdate) RemoveHpfollow(h ...*HPFollow) *UserUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return uu.RemoveHpfollowIDs(ids...)
}

// ClearHpsortHistory clears all "hpsort_history" edges to the HPSortHistory entity.
func (uu *UserUpdate) ClearHpsortHistory() *UserUpdate {
	uu.mutation.ClearHpsortHistory()
	return uu
}

// RemoveHpsortHistoryIDs removes the "hpsort_history" edge to HPSortHistory entities by IDs.
func (uu *UserUpdate) RemoveHpsortHistoryIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveHpsortHistoryIDs(ids...)
	return uu
}

// RemoveHpsortHistory removes "hpsort_history" edges to HPSortHistory entities.
func (uu *UserUpdate) RemoveHpsortHistory(h ...*HPSortHistory) *UserUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return uu.RemoveHpsortHistoryIDs(ids...)
}

// ClearHpfcEventTickets clears all "hpfc_event_tickets" edges to the HPFCEventTicket entity.
func (uu *UserUpdate) ClearHpfcEventTickets() *UserUpdate {
	uu.mutation.ClearHpfcEventTickets()
	return uu
}

// RemoveHpfcEventTicketIDs removes the "hpfc_event_tickets" edge to HPFCEventTicket entities by IDs.
func (uu *UserUpdate) RemoveHpfcEventTicketIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveHpfcEventTicketIDs(ids...)
	return uu
}

// RemoveHpfcEventTickets removes "hpfc_event_tickets" edges to HPFCEventTicket entities.
func (uu *UserUpdate) RemoveHpfcEventTickets(h ...*HPFCEventTicket) *UserUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return uu.RemoveHpfcEventTicketIDs(ids...)
}

// ClearElineupMallPurchaseHistories clears all "elineup_mall_purchase_histories" edges to the HPElineupMallItemPurchaseHistory entity.
func (uu *UserUpdate) ClearElineupMallPurchaseHistories() *UserUpdate {
	uu.mutation.ClearElineupMallPurchaseHistories()
	return uu
}

// RemoveElineupMallPurchaseHistoryIDs removes the "elineup_mall_purchase_histories" edge to HPElineupMallItemPurchaseHistory entities by IDs.
func (uu *UserUpdate) RemoveElineupMallPurchaseHistoryIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveElineupMallPurchaseHistoryIDs(ids...)
	return uu
}

// RemoveElineupMallPurchaseHistories removes "elineup_mall_purchase_histories" edges to HPElineupMallItemPurchaseHistory entities.
func (uu *UserUpdate) RemoveElineupMallPurchaseHistories(h ...*HPElineupMallItemPurchaseHistory) *UserUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return uu.RemoveElineupMallPurchaseHistoryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, UserMutation](ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if uu.mutation.CreatedAtCleared() {
		_spec.ClearField(user.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := uu.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if uu.mutation.UpdatedAtCleared() {
		_spec.ClearField(user.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := uu.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if value, ok := uu.mutation.AccessToken(); ok {
		_spec.SetField(user.FieldAccessToken, field.TypeString, value)
	}
	if uu.mutation.AuthCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AuthTable,
			Columns: []string{user.AuthColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(auth.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedAuthIDs(); len(nodes) > 0 && !uu.mutation.AuthCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AuthTable,
			Columns: []string{user.AuthColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(auth.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.AuthIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AuthTable,
			Columns: []string{user.AuthColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(auth.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.NotificationSettingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotificationSettingsTable,
			Columns: []string{user.NotificationSettingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usernotificationsetting.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedNotificationSettingsIDs(); len(nodes) > 0 && !uu.mutation.NotificationSettingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotificationSettingsTable,
			Columns: []string{user.NotificationSettingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usernotificationsetting.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.NotificationSettingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotificationSettingsTable,
			Columns: []string{user.NotificationSettingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usernotificationsetting.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.HpviewHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.HpviewHistoryTable,
			Columns: []string{user.HpviewHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpviewhistory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedHpviewHistoryIDs(); len(nodes) > 0 && !uu.mutation.HpviewHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.HpviewHistoryTable,
			Columns: []string{user.HpviewHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpviewhistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.HpviewHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.HpviewHistoryTable,
			Columns: []string{user.HpviewHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpviewhistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.HpfollowCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.HpfollowTable,
			Columns: []string{user.HpfollowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpfollow.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedHpfollowIDs(); len(nodes) > 0 && !uu.mutation.HpfollowCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.HpfollowTable,
			Columns: []string{user.HpfollowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpfollow.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.HpfollowIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.HpfollowTable,
			Columns: []string{user.HpfollowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpfollow.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.HpsortHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.HpsortHistoryTable,
			Columns: []string{user.HpsortHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpsorthistory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedHpsortHistoryIDs(); len(nodes) > 0 && !uu.mutation.HpsortHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.HpsortHistoryTable,
			Columns: []string{user.HpsortHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpsorthistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.HpsortHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.HpsortHistoryTable,
			Columns: []string{user.HpsortHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpsorthistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.HpfcEventTicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.HpfcEventTicketsTable,
			Columns: []string{user.HpfcEventTicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpfceventticket.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedHpfcEventTicketsIDs(); len(nodes) > 0 && !uu.mutation.HpfcEventTicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.HpfcEventTicketsTable,
			Columns: []string{user.HpfcEventTicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpfceventticket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.HpfcEventTicketsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.HpfcEventTicketsTable,
			Columns: []string{user.HpfcEventTicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpfceventticket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.ElineupMallPurchaseHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ElineupMallPurchaseHistoriesTable,
			Columns: []string{user.ElineupMallPurchaseHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpelineupmallitempurchasehistory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedElineupMallPurchaseHistoriesIDs(); len(nodes) > 0 && !uu.mutation.ElineupMallPurchaseHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ElineupMallPurchaseHistoriesTable,
			Columns: []string{user.ElineupMallPurchaseHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpelineupmallitempurchasehistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ElineupMallPurchaseHistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ElineupMallPurchaseHistoriesTable,
			Columns: []string{user.ElineupMallPurchaseHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpelineupmallitempurchasehistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (uuo *UserUpdateOne) SetUpdatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUpdatedAt(t)
	return uuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUpdatedAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetUpdatedAt(*t)
	}
	return uuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (uuo *UserUpdateOne) ClearUpdatedAt() *UserUpdateOne {
	uuo.mutation.ClearUpdatedAt()
	return uuo
}

// SetUsername sets the "username" field.
func (uuo *UserUpdateOne) SetUsername(s string) *UserUpdateOne {
	uuo.mutation.SetUsername(s)
	return uuo
}

// SetAccessToken sets the "access_token" field.
func (uuo *UserUpdateOne) SetAccessToken(s string) *UserUpdateOne {
	uuo.mutation.SetAccessToken(s)
	return uuo
}

// AddAuthIDs adds the "auth" edge to the Auth entity by IDs.
func (uuo *UserUpdateOne) AddAuthIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddAuthIDs(ids...)
	return uuo
}

// AddAuth adds the "auth" edges to the Auth entity.
func (uuo *UserUpdateOne) AddAuth(a ...*Auth) *UserUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.AddAuthIDs(ids...)
}

// AddNotificationSettingIDs adds the "notification_settings" edge to the UserNotificationSetting entity by IDs.
func (uuo *UserUpdateOne) AddNotificationSettingIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddNotificationSettingIDs(ids...)
	return uuo
}

// AddNotificationSettings adds the "notification_settings" edges to the UserNotificationSetting entity.
func (uuo *UserUpdateOne) AddNotificationSettings(u ...*UserNotificationSetting) *UserUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddNotificationSettingIDs(ids...)
}

// AddHpviewHistoryIDs adds the "hpview_history" edge to the HPViewHistory entity by IDs.
func (uuo *UserUpdateOne) AddHpviewHistoryIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddHpviewHistoryIDs(ids...)
	return uuo
}

// AddHpviewHistory adds the "hpview_history" edges to the HPViewHistory entity.
func (uuo *UserUpdateOne) AddHpviewHistory(h ...*HPViewHistory) *UserUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return uuo.AddHpviewHistoryIDs(ids...)
}

// AddHpfollowIDs adds the "hpfollow" edge to the HPFollow entity by IDs.
func (uuo *UserUpdateOne) AddHpfollowIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddHpfollowIDs(ids...)
	return uuo
}

// AddHpfollow adds the "hpfollow" edges to the HPFollow entity.
func (uuo *UserUpdateOne) AddHpfollow(h ...*HPFollow) *UserUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return uuo.AddHpfollowIDs(ids...)
}

// AddHpsortHistoryIDs adds the "hpsort_history" edge to the HPSortHistory entity by IDs.
func (uuo *UserUpdateOne) AddHpsortHistoryIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddHpsortHistoryIDs(ids...)
	return uuo
}

// AddHpsortHistory adds the "hpsort_history" edges to the HPSortHistory entity.
func (uuo *UserUpdateOne) AddHpsortHistory(h ...*HPSortHistory) *UserUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return uuo.AddHpsortHistoryIDs(ids...)
}

// AddHpfcEventTicketIDs adds the "hpfc_event_tickets" edge to the HPFCEventTicket entity by IDs.
func (uuo *UserUpdateOne) AddHpfcEventTicketIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddHpfcEventTicketIDs(ids...)
	return uuo
}

// AddHpfcEventTickets adds the "hpfc_event_tickets" edges to the HPFCEventTicket entity.
func (uuo *UserUpdateOne) AddHpfcEventTickets(h ...*HPFCEventTicket) *UserUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return uuo.AddHpfcEventTicketIDs(ids...)
}

// AddElineupMallPurchaseHistoryIDs adds the "elineup_mall_purchase_histories" edge to the HPElineupMallItemPurchaseHistory entity by IDs.
func (uuo *UserUpdateOne) AddElineupMallPurchaseHistoryIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddElineupMallPurchaseHistoryIDs(ids...)
	return uuo
}

// AddElineupMallPurchaseHistories adds the "elineup_mall_purchase_histories" edges to the HPElineupMallItemPurchaseHistory entity.
func (uuo *UserUpdateOne) AddElineupMallPurchaseHistories(h ...*HPElineupMallItemPurchaseHistory) *UserUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return uuo.AddElineupMallPurchaseHistoryIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearAuth clears all "auth" edges to the Auth entity.
func (uuo *UserUpdateOne) ClearAuth() *UserUpdateOne {
	uuo.mutation.ClearAuth()
	return uuo
}

// RemoveAuthIDs removes the "auth" edge to Auth entities by IDs.
func (uuo *UserUpdateOne) RemoveAuthIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveAuthIDs(ids...)
	return uuo
}

// RemoveAuth removes "auth" edges to Auth entities.
func (uuo *UserUpdateOne) RemoveAuth(a ...*Auth) *UserUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.RemoveAuthIDs(ids...)
}

// ClearNotificationSettings clears all "notification_settings" edges to the UserNotificationSetting entity.
func (uuo *UserUpdateOne) ClearNotificationSettings() *UserUpdateOne {
	uuo.mutation.ClearNotificationSettings()
	return uuo
}

// RemoveNotificationSettingIDs removes the "notification_settings" edge to UserNotificationSetting entities by IDs.
func (uuo *UserUpdateOne) RemoveNotificationSettingIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveNotificationSettingIDs(ids...)
	return uuo
}

// RemoveNotificationSettings removes "notification_settings" edges to UserNotificationSetting entities.
func (uuo *UserUpdateOne) RemoveNotificationSettings(u ...*UserNotificationSetting) *UserUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveNotificationSettingIDs(ids...)
}

// ClearHpviewHistory clears all "hpview_history" edges to the HPViewHistory entity.
func (uuo *UserUpdateOne) ClearHpviewHistory() *UserUpdateOne {
	uuo.mutation.ClearHpviewHistory()
	return uuo
}

// RemoveHpviewHistoryIDs removes the "hpview_history" edge to HPViewHistory entities by IDs.
func (uuo *UserUpdateOne) RemoveHpviewHistoryIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveHpviewHistoryIDs(ids...)
	return uuo
}

// RemoveHpviewHistory removes "hpview_history" edges to HPViewHistory entities.
func (uuo *UserUpdateOne) RemoveHpviewHistory(h ...*HPViewHistory) *UserUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return uuo.RemoveHpviewHistoryIDs(ids...)
}

// ClearHpfollow clears all "hpfollow" edges to the HPFollow entity.
func (uuo *UserUpdateOne) ClearHpfollow() *UserUpdateOne {
	uuo.mutation.ClearHpfollow()
	return uuo
}

// RemoveHpfollowIDs removes the "hpfollow" edge to HPFollow entities by IDs.
func (uuo *UserUpdateOne) RemoveHpfollowIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveHpfollowIDs(ids...)
	return uuo
}

// RemoveHpfollow removes "hpfollow" edges to HPFollow entities.
func (uuo *UserUpdateOne) RemoveHpfollow(h ...*HPFollow) *UserUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return uuo.RemoveHpfollowIDs(ids...)
}

// ClearHpsortHistory clears all "hpsort_history" edges to the HPSortHistory entity.
func (uuo *UserUpdateOne) ClearHpsortHistory() *UserUpdateOne {
	uuo.mutation.ClearHpsortHistory()
	return uuo
}

// RemoveHpsortHistoryIDs removes the "hpsort_history" edge to HPSortHistory entities by IDs.
func (uuo *UserUpdateOne) RemoveHpsortHistoryIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveHpsortHistoryIDs(ids...)
	return uuo
}

// RemoveHpsortHistory removes "hpsort_history" edges to HPSortHistory entities.
func (uuo *UserUpdateOne) RemoveHpsortHistory(h ...*HPSortHistory) *UserUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return uuo.RemoveHpsortHistoryIDs(ids...)
}

// ClearHpfcEventTickets clears all "hpfc_event_tickets" edges to the HPFCEventTicket entity.
func (uuo *UserUpdateOne) ClearHpfcEventTickets() *UserUpdateOne {
	uuo.mutation.ClearHpfcEventTickets()
	return uuo
}

// RemoveHpfcEventTicketIDs removes the "hpfc_event_tickets" edge to HPFCEventTicket entities by IDs.
func (uuo *UserUpdateOne) RemoveHpfcEventTicketIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveHpfcEventTicketIDs(ids...)
	return uuo
}

// RemoveHpfcEventTickets removes "hpfc_event_tickets" edges to HPFCEventTicket entities.
func (uuo *UserUpdateOne) RemoveHpfcEventTickets(h ...*HPFCEventTicket) *UserUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return uuo.RemoveHpfcEventTicketIDs(ids...)
}

// ClearElineupMallPurchaseHistories clears all "elineup_mall_purchase_histories" edges to the HPElineupMallItemPurchaseHistory entity.
func (uuo *UserUpdateOne) ClearElineupMallPurchaseHistories() *UserUpdateOne {
	uuo.mutation.ClearElineupMallPurchaseHistories()
	return uuo
}

// RemoveElineupMallPurchaseHistoryIDs removes the "elineup_mall_purchase_histories" edge to HPElineupMallItemPurchaseHistory entities by IDs.
func (uuo *UserUpdateOne) RemoveElineupMallPurchaseHistoryIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveElineupMallPurchaseHistoryIDs(ids...)
	return uuo
}

// RemoveElineupMallPurchaseHistories removes "elineup_mall_purchase_histories" edges to HPElineupMallItemPurchaseHistory entities.
func (uuo *UserUpdateOne) RemoveElineupMallPurchaseHistories(h ...*HPElineupMallItemPurchaseHistory) *UserUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return uuo.RemoveElineupMallPurchaseHistoryIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	return withHooks[*User, UserMutation](ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if uuo.mutation.CreatedAtCleared() {
		_spec.ClearField(user.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := uuo.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if uuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(user.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := uuo.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if value, ok := uuo.mutation.AccessToken(); ok {
		_spec.SetField(user.FieldAccessToken, field.TypeString, value)
	}
	if uuo.mutation.AuthCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AuthTable,
			Columns: []string{user.AuthColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(auth.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedAuthIDs(); len(nodes) > 0 && !uuo.mutation.AuthCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AuthTable,
			Columns: []string{user.AuthColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(auth.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.AuthIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AuthTable,
			Columns: []string{user.AuthColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(auth.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.NotificationSettingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotificationSettingsTable,
			Columns: []string{user.NotificationSettingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usernotificationsetting.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedNotificationSettingsIDs(); len(nodes) > 0 && !uuo.mutation.NotificationSettingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotificationSettingsTable,
			Columns: []string{user.NotificationSettingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usernotificationsetting.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.NotificationSettingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotificationSettingsTable,
			Columns: []string{user.NotificationSettingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usernotificationsetting.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.HpviewHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.HpviewHistoryTable,
			Columns: []string{user.HpviewHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpviewhistory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedHpviewHistoryIDs(); len(nodes) > 0 && !uuo.mutation.HpviewHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.HpviewHistoryTable,
			Columns: []string{user.HpviewHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpviewhistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.HpviewHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.HpviewHistoryTable,
			Columns: []string{user.HpviewHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpviewhistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.HpfollowCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.HpfollowTable,
			Columns: []string{user.HpfollowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpfollow.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedHpfollowIDs(); len(nodes) > 0 && !uuo.mutation.HpfollowCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.HpfollowTable,
			Columns: []string{user.HpfollowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpfollow.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.HpfollowIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.HpfollowTable,
			Columns: []string{user.HpfollowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpfollow.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.HpsortHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.HpsortHistoryTable,
			Columns: []string{user.HpsortHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpsorthistory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedHpsortHistoryIDs(); len(nodes) > 0 && !uuo.mutation.HpsortHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.HpsortHistoryTable,
			Columns: []string{user.HpsortHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpsorthistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.HpsortHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.HpsortHistoryTable,
			Columns: []string{user.HpsortHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpsorthistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.HpfcEventTicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.HpfcEventTicketsTable,
			Columns: []string{user.HpfcEventTicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpfceventticket.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedHpfcEventTicketsIDs(); len(nodes) > 0 && !uuo.mutation.HpfcEventTicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.HpfcEventTicketsTable,
			Columns: []string{user.HpfcEventTicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpfceventticket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.HpfcEventTicketsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.HpfcEventTicketsTable,
			Columns: []string{user.HpfcEventTicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpfceventticket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.ElineupMallPurchaseHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ElineupMallPurchaseHistoriesTable,
			Columns: []string{user.ElineupMallPurchaseHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpelineupmallitempurchasehistory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedElineupMallPurchaseHistoriesIDs(); len(nodes) > 0 && !uuo.mutation.ElineupMallPurchaseHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ElineupMallPurchaseHistoriesTable,
			Columns: []string{user.ElineupMallPurchaseHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpelineupmallitempurchasehistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ElineupMallPurchaseHistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ElineupMallPurchaseHistoriesTable,
			Columns: []string{user.ElineupMallPurchaseHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpelineupmallitempurchasehistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
