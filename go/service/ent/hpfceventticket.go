// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"hpapp.yssk22.dev/go/service/ent/hpevent"
	"hpapp.yssk22.dev/go/service/ent/hpfceventticket"
	"hpapp.yssk22.dev/go/service/ent/user"
	"hpapp.yssk22.dev/go/service/schema/enums"
)

// HPFCEventTicket is the model entity for the HPFCEventTicket schema.
type HPFCEventTicket struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Num holds the value of the "num" field.
	Num int `json:"num,omitempty"`
	// Status holds the value of the "status" field.
	Status enums.HPEventFCTicketStatus `json:"status,omitempty"`
	// FcMemberSha256 holds the value of the "fc_member_sha256" field.
	FcMemberSha256 string `json:"fc_member_sha256,omitempty"`
	// ApplicationTitle holds the value of the "application_title" field.
	ApplicationTitle string `json:"application_title,omitempty"`
	// ApplicationID holds the value of the "application_id" field.
	ApplicationID *string `json:"application_id,omitempty"`
	// ApplicationStartDate holds the value of the "application_start_date" field.
	ApplicationStartDate *time.Time `json:"application_start_date,omitempty"`
	// ApplicationDueDate holds the value of the "application_due_date" field.
	ApplicationDueDate *time.Time `json:"application_due_date,omitempty"`
	// PaymentStartDate holds the value of the "payment_start_date" field.
	PaymentStartDate *time.Time `json:"payment_start_date,omitempty"`
	// PaymentDueDate holds the value of the "payment_due_date" field.
	PaymentDueDate *time.Time `json:"payment_due_date,omitempty"`
	// OwnerUserID holds the value of the "owner_user_id" field.
	OwnerUserID int `json:"owner_user_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HPFCEventTicketQuery when eager-loading is set.
	Edges                       HPFCEventTicketEdges `json:"edges"`
	hp_event_hpfc_event_tickets *int
	selectValues                sql.SelectValues
}

// HPFCEventTicketEdges holds the relations/edges for other nodes in the graph.
type HPFCEventTicketEdges struct {
	// Event holds the value of the event edge.
	Event *HPEvent `json:"event,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// EventOrErr returns the Event value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HPFCEventTicketEdges) EventOrErr() (*HPEvent, error) {
	if e.loadedTypes[0] {
		if e.Event == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: hpevent.Label}
		}
		return e.Event, nil
	}
	return nil, &NotLoadedError{edge: "event"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HPFCEventTicketEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*HPFCEventTicket) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case hpfceventticket.FieldID, hpfceventticket.FieldNum, hpfceventticket.FieldOwnerUserID:
			values[i] = new(sql.NullInt64)
		case hpfceventticket.FieldStatus, hpfceventticket.FieldFcMemberSha256, hpfceventticket.FieldApplicationTitle, hpfceventticket.FieldApplicationID:
			values[i] = new(sql.NullString)
		case hpfceventticket.FieldCreatedAt, hpfceventticket.FieldUpdatedAt, hpfceventticket.FieldApplicationStartDate, hpfceventticket.FieldApplicationDueDate, hpfceventticket.FieldPaymentStartDate, hpfceventticket.FieldPaymentDueDate:
			values[i] = new(sql.NullTime)
		case hpfceventticket.ForeignKeys[0]: // hp_event_hpfc_event_tickets
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the HPFCEventTicket fields.
func (het *HPFCEventTicket) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case hpfceventticket.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			het.ID = int(value.Int64)
		case hpfceventticket.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				het.CreatedAt = value.Time
			}
		case hpfceventticket.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				het.UpdatedAt = value.Time
			}
		case hpfceventticket.FieldNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field num", values[i])
			} else if value.Valid {
				het.Num = int(value.Int64)
			}
		case hpfceventticket.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				het.Status = enums.HPEventFCTicketStatus(value.String)
			}
		case hpfceventticket.FieldFcMemberSha256:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field fc_member_sha256", values[i])
			} else if value.Valid {
				het.FcMemberSha256 = value.String
			}
		case hpfceventticket.FieldApplicationTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field application_title", values[i])
			} else if value.Valid {
				het.ApplicationTitle = value.String
			}
		case hpfceventticket.FieldApplicationID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field application_id", values[i])
			} else if value.Valid {
				het.ApplicationID = new(string)
				*het.ApplicationID = value.String
			}
		case hpfceventticket.FieldApplicationStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field application_start_date", values[i])
			} else if value.Valid {
				het.ApplicationStartDate = new(time.Time)
				*het.ApplicationStartDate = value.Time
			}
		case hpfceventticket.FieldApplicationDueDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field application_due_date", values[i])
			} else if value.Valid {
				het.ApplicationDueDate = new(time.Time)
				*het.ApplicationDueDate = value.Time
			}
		case hpfceventticket.FieldPaymentStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field payment_start_date", values[i])
			} else if value.Valid {
				het.PaymentStartDate = new(time.Time)
				*het.PaymentStartDate = value.Time
			}
		case hpfceventticket.FieldPaymentDueDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field payment_due_date", values[i])
			} else if value.Valid {
				het.PaymentDueDate = new(time.Time)
				*het.PaymentDueDate = value.Time
			}
		case hpfceventticket.FieldOwnerUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field owner_user_id", values[i])
			} else if value.Valid {
				het.OwnerUserID = int(value.Int64)
			}
		case hpfceventticket.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field hp_event_hpfc_event_tickets", value)
			} else if value.Valid {
				het.hp_event_hpfc_event_tickets = new(int)
				*het.hp_event_hpfc_event_tickets = int(value.Int64)
			}
		default:
			het.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the HPFCEventTicket.
// This includes values selected through modifiers, order, etc.
func (het *HPFCEventTicket) Value(name string) (ent.Value, error) {
	return het.selectValues.Get(name)
}

// QueryEvent queries the "event" edge of the HPFCEventTicket entity.
func (het *HPFCEventTicket) QueryEvent() *HPEventQuery {
	return NewHPFCEventTicketClient(het.config).QueryEvent(het)
}

// QueryUser queries the "user" edge of the HPFCEventTicket entity.
func (het *HPFCEventTicket) QueryUser() *UserQuery {
	return NewHPFCEventTicketClient(het.config).QueryUser(het)
}

// Update returns a builder for updating this HPFCEventTicket.
// Note that you need to call HPFCEventTicket.Unwrap() before calling this method if this HPFCEventTicket
// was returned from a transaction, and the transaction was committed or rolled back.
func (het *HPFCEventTicket) Update() *HPFCEventTicketUpdateOne {
	return NewHPFCEventTicketClient(het.config).UpdateOne(het)
}

// Unwrap unwraps the HPFCEventTicket entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (het *HPFCEventTicket) Unwrap() *HPFCEventTicket {
	_tx, ok := het.config.driver.(*txDriver)
	if !ok {
		panic("ent: HPFCEventTicket is not a transactional entity")
	}
	het.config.driver = _tx.drv
	return het
}

// String implements the fmt.Stringer.
func (het *HPFCEventTicket) String() string {
	var builder strings.Builder
	builder.WriteString("HPFCEventTicket(")
	builder.WriteString(fmt.Sprintf("id=%v, ", het.ID))
	builder.WriteString("created_at=")
	builder.WriteString(het.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(het.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("num=")
	builder.WriteString(fmt.Sprintf("%v", het.Num))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", het.Status))
	builder.WriteString(", ")
	builder.WriteString("fc_member_sha256=")
	builder.WriteString(het.FcMemberSha256)
	builder.WriteString(", ")
	builder.WriteString("application_title=")
	builder.WriteString(het.ApplicationTitle)
	builder.WriteString(", ")
	if v := het.ApplicationID; v != nil {
		builder.WriteString("application_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := het.ApplicationStartDate; v != nil {
		builder.WriteString("application_start_date=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := het.ApplicationDueDate; v != nil {
		builder.WriteString("application_due_date=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := het.PaymentStartDate; v != nil {
		builder.WriteString("payment_start_date=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := het.PaymentDueDate; v != nil {
		builder.WriteString("payment_due_date=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("owner_user_id=")
	builder.WriteString(fmt.Sprintf("%v", het.OwnerUserID))
	builder.WriteByte(')')
	return builder.String()
}

// HPFCEventTickets is a parsable slice of HPFCEventTicket.
type HPFCEventTickets []*HPFCEventTicket
