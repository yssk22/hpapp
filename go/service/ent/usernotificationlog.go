// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"hpapp.yssk22.dev/go/service/ent/usernotificationlog"
	"hpapp.yssk22.dev/go/service/schema/enums"
	"hpapp.yssk22.dev/go/service/schema/jsonfields"
)

// UserNotificationLog is the model entity for the UserNotificationLog schema.
type UserNotificationLog struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// unique key to identify the notification source
	Key string `json:"key,omitempty"`
	// ocurrence of the notification. the pair of the key and trigger has to be unique
	Trigger string `json:"trigger,omitempty"`
	// true if the notification is generated for the test
	IsTest bool `json:"is_test,omitempty"`
	// Message payload for client to handle the notification
	ReactNavigationMessage jsonfields.ReactNavigationPush `json:"react_navigation_message,omitempty"`
	// expected time for the notification to be sent
	ExpectedDeliveryTime time.Time `json:"expected_delivery_time,omitempty"`
	// Status holds the value of the "status" field.
	Status enums.UserNotificationStatus `json:"status,omitempty"`
	// error message if happens
	StatusMessage string `json:"status_message,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserNotificationLogQuery when eager-loading is set.
	Edges        UserNotificationLogEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserNotificationLogEdges holds the relations/edges for other nodes in the graph.
type UserNotificationLogEdges struct {
	// Receivers holds the value of the receivers edge.
	Receivers []*UserNotificationSetting `json:"receivers,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedReceivers map[string][]*UserNotificationSetting
}

// ReceiversOrErr returns the Receivers value or an error if the edge
// was not loaded in eager-loading.
func (e UserNotificationLogEdges) ReceiversOrErr() ([]*UserNotificationSetting, error) {
	if e.loadedTypes[0] {
		return e.Receivers, nil
	}
	return nil, &NotLoadedError{edge: "receivers"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserNotificationLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case usernotificationlog.FieldReactNavigationMessage:
			values[i] = new([]byte)
		case usernotificationlog.FieldIsTest:
			values[i] = new(sql.NullBool)
		case usernotificationlog.FieldID:
			values[i] = new(sql.NullInt64)
		case usernotificationlog.FieldKey, usernotificationlog.FieldTrigger, usernotificationlog.FieldStatus, usernotificationlog.FieldStatusMessage:
			values[i] = new(sql.NullString)
		case usernotificationlog.FieldCreatedAt, usernotificationlog.FieldUpdatedAt, usernotificationlog.FieldExpectedDeliveryTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserNotificationLog fields.
func (unl *UserNotificationLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case usernotificationlog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			unl.ID = int(value.Int64)
		case usernotificationlog.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				unl.CreatedAt = value.Time
			}
		case usernotificationlog.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				unl.UpdatedAt = value.Time
			}
		case usernotificationlog.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				unl.Key = value.String
			}
		case usernotificationlog.FieldTrigger:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field trigger", values[i])
			} else if value.Valid {
				unl.Trigger = value.String
			}
		case usernotificationlog.FieldIsTest:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_test", values[i])
			} else if value.Valid {
				unl.IsTest = value.Bool
			}
		case usernotificationlog.FieldReactNavigationMessage:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field react_navigation_message", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &unl.ReactNavigationMessage); err != nil {
					return fmt.Errorf("unmarshal field react_navigation_message: %w", err)
				}
			}
		case usernotificationlog.FieldExpectedDeliveryTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expected_delivery_time", values[i])
			} else if value.Valid {
				unl.ExpectedDeliveryTime = value.Time
			}
		case usernotificationlog.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				unl.Status = enums.UserNotificationStatus(value.String)
			}
		case usernotificationlog.FieldStatusMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status_message", values[i])
			} else if value.Valid {
				unl.StatusMessage = value.String
			}
		default:
			unl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserNotificationLog.
// This includes values selected through modifiers, order, etc.
func (unl *UserNotificationLog) Value(name string) (ent.Value, error) {
	return unl.selectValues.Get(name)
}

// QueryReceivers queries the "receivers" edge of the UserNotificationLog entity.
func (unl *UserNotificationLog) QueryReceivers() *UserNotificationSettingQuery {
	return NewUserNotificationLogClient(unl.config).QueryReceivers(unl)
}

// Update returns a builder for updating this UserNotificationLog.
// Note that you need to call UserNotificationLog.Unwrap() before calling this method if this UserNotificationLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (unl *UserNotificationLog) Update() *UserNotificationLogUpdateOne {
	return NewUserNotificationLogClient(unl.config).UpdateOne(unl)
}

// Unwrap unwraps the UserNotificationLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (unl *UserNotificationLog) Unwrap() *UserNotificationLog {
	_tx, ok := unl.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserNotificationLog is not a transactional entity")
	}
	unl.config.driver = _tx.drv
	return unl
}

// String implements the fmt.Stringer.
func (unl *UserNotificationLog) String() string {
	var builder strings.Builder
	builder.WriteString("UserNotificationLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", unl.ID))
	builder.WriteString("created_at=")
	builder.WriteString(unl.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(unl.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("key=")
	builder.WriteString(unl.Key)
	builder.WriteString(", ")
	builder.WriteString("trigger=")
	builder.WriteString(unl.Trigger)
	builder.WriteString(", ")
	builder.WriteString("is_test=")
	builder.WriteString(fmt.Sprintf("%v", unl.IsTest))
	builder.WriteString(", ")
	builder.WriteString("react_navigation_message=")
	builder.WriteString(fmt.Sprintf("%v", unl.ReactNavigationMessage))
	builder.WriteString(", ")
	builder.WriteString("expected_delivery_time=")
	builder.WriteString(unl.ExpectedDeliveryTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", unl.Status))
	builder.WriteString(", ")
	builder.WriteString("status_message=")
	builder.WriteString(unl.StatusMessage)
	builder.WriteByte(')')
	return builder.String()
}

// NamedReceivers returns the Receivers named value or an error if the edge was not
// loaded in eager-loading with this name.
func (unl *UserNotificationLog) NamedReceivers(name string) ([]*UserNotificationSetting, error) {
	if unl.Edges.namedReceivers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := unl.Edges.namedReceivers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (unl *UserNotificationLog) appendNamedReceivers(name string, edges ...*UserNotificationSetting) {
	if unl.Edges.namedReceivers == nil {
		unl.Edges.namedReceivers = make(map[string][]*UserNotificationSetting)
	}
	if len(edges) == 0 {
		unl.Edges.namedReceivers[name] = []*UserNotificationSetting{}
	} else {
		unl.Edges.namedReceivers[name] = append(unl.Edges.namedReceivers[name], edges...)
	}
}

// UserNotificationLogs is a parsable slice of UserNotificationLog.
type UserNotificationLogs []*UserNotificationLog
