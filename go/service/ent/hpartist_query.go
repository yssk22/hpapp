// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"hpapp.yssk22.dev/go/service/ent/hpameblopost"
	"hpapp.yssk22.dev/go/service/ent/hpartist"
	"hpapp.yssk22.dev/go/service/ent/hpasset"
	"hpapp.yssk22.dev/go/service/ent/hpelineupmallitem"
	"hpapp.yssk22.dev/go/service/ent/hpfeeditem"
	"hpapp.yssk22.dev/go/service/ent/hpigpost"
	"hpapp.yssk22.dev/go/service/ent/hpmember"
	"hpapp.yssk22.dev/go/service/ent/predicate"
)

// HPArtistQuery is the builder for querying HPArtist entities.
type HPArtistQuery struct {
	config
	ctx                             *QueryContext
	order                           []hpartist.Order
	inters                          []Interceptor
	predicates                      []predicate.HPArtist
	withMembers                     *HPMemberQuery
	withAssets                      *HPAssetQuery
	withOwningFeed                  *HPFeedItemQuery
	withTaggedFeed                  *HPFeedItemQuery
	withOwningIgPosts               *HPIgPostQuery
	withTaggedIgPosts               *HPIgPostQuery
	withOwningAmebloPosts           *HPAmebloPostQuery
	withTaggedAmebloPosts           *HPAmebloPostQuery
	withTaggedElineupMallItems      *HPElineupMallItemQuery
	withFKs                         bool
	modifiers                       []func(*sql.Selector)
	loadTotal                       []func(context.Context, []*HPArtist) error
	withNamedMembers                map[string]*HPMemberQuery
	withNamedAssets                 map[string]*HPAssetQuery
	withNamedOwningFeed             map[string]*HPFeedItemQuery
	withNamedTaggedFeed             map[string]*HPFeedItemQuery
	withNamedOwningIgPosts          map[string]*HPIgPostQuery
	withNamedTaggedIgPosts          map[string]*HPIgPostQuery
	withNamedOwningAmebloPosts      map[string]*HPAmebloPostQuery
	withNamedTaggedAmebloPosts      map[string]*HPAmebloPostQuery
	withNamedTaggedElineupMallItems map[string]*HPElineupMallItemQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the HPArtistQuery builder.
func (haq *HPArtistQuery) Where(ps ...predicate.HPArtist) *HPArtistQuery {
	haq.predicates = append(haq.predicates, ps...)
	return haq
}

// Limit the number of records to be returned by this query.
func (haq *HPArtistQuery) Limit(limit int) *HPArtistQuery {
	haq.ctx.Limit = &limit
	return haq
}

// Offset to start from.
func (haq *HPArtistQuery) Offset(offset int) *HPArtistQuery {
	haq.ctx.Offset = &offset
	return haq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (haq *HPArtistQuery) Unique(unique bool) *HPArtistQuery {
	haq.ctx.Unique = &unique
	return haq
}

// Order specifies how the records should be ordered.
func (haq *HPArtistQuery) Order(o ...hpartist.Order) *HPArtistQuery {
	haq.order = append(haq.order, o...)
	return haq
}

// QueryMembers chains the current query on the "members" edge.
func (haq *HPArtistQuery) QueryMembers() *HPMemberQuery {
	query := (&HPMemberClient{config: haq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := haq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := haq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hpartist.Table, hpartist.FieldID, selector),
			sqlgraph.To(hpmember.Table, hpmember.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, hpartist.MembersTable, hpartist.MembersColumn),
		)
		fromU = sqlgraph.SetNeighbors(haq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAssets chains the current query on the "assets" edge.
func (haq *HPArtistQuery) QueryAssets() *HPAssetQuery {
	query := (&HPAssetClient{config: haq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := haq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := haq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hpartist.Table, hpartist.FieldID, selector),
			sqlgraph.To(hpasset.Table, hpasset.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, hpartist.AssetsTable, hpartist.AssetsColumn),
		)
		fromU = sqlgraph.SetNeighbors(haq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOwningFeed chains the current query on the "owning_feed" edge.
func (haq *HPArtistQuery) QueryOwningFeed() *HPFeedItemQuery {
	query := (&HPFeedItemClient{config: haq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := haq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := haq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hpartist.Table, hpartist.FieldID, selector),
			sqlgraph.To(hpfeeditem.Table, hpfeeditem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, hpartist.OwningFeedTable, hpartist.OwningFeedColumn),
		)
		fromU = sqlgraph.SetNeighbors(haq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTaggedFeed chains the current query on the "tagged_feed" edge.
func (haq *HPArtistQuery) QueryTaggedFeed() *HPFeedItemQuery {
	query := (&HPFeedItemClient{config: haq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := haq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := haq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hpartist.Table, hpartist.FieldID, selector),
			sqlgraph.To(hpfeeditem.Table, hpfeeditem.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, hpartist.TaggedFeedTable, hpartist.TaggedFeedPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(haq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOwningIgPosts chains the current query on the "owning_ig_posts" edge.
func (haq *HPArtistQuery) QueryOwningIgPosts() *HPIgPostQuery {
	query := (&HPIgPostClient{config: haq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := haq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := haq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hpartist.Table, hpartist.FieldID, selector),
			sqlgraph.To(hpigpost.Table, hpigpost.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, hpartist.OwningIgPostsTable, hpartist.OwningIgPostsColumn),
		)
		fromU = sqlgraph.SetNeighbors(haq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTaggedIgPosts chains the current query on the "tagged_ig_posts" edge.
func (haq *HPArtistQuery) QueryTaggedIgPosts() *HPIgPostQuery {
	query := (&HPIgPostClient{config: haq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := haq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := haq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hpartist.Table, hpartist.FieldID, selector),
			sqlgraph.To(hpigpost.Table, hpigpost.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, hpartist.TaggedIgPostsTable, hpartist.TaggedIgPostsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(haq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOwningAmebloPosts chains the current query on the "owning_ameblo_posts" edge.
func (haq *HPArtistQuery) QueryOwningAmebloPosts() *HPAmebloPostQuery {
	query := (&HPAmebloPostClient{config: haq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := haq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := haq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hpartist.Table, hpartist.FieldID, selector),
			sqlgraph.To(hpameblopost.Table, hpameblopost.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, hpartist.OwningAmebloPostsTable, hpartist.OwningAmebloPostsColumn),
		)
		fromU = sqlgraph.SetNeighbors(haq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTaggedAmebloPosts chains the current query on the "tagged_ameblo_posts" edge.
func (haq *HPArtistQuery) QueryTaggedAmebloPosts() *HPAmebloPostQuery {
	query := (&HPAmebloPostClient{config: haq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := haq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := haq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hpartist.Table, hpartist.FieldID, selector),
			sqlgraph.To(hpameblopost.Table, hpameblopost.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, hpartist.TaggedAmebloPostsTable, hpartist.TaggedAmebloPostsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(haq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTaggedElineupMallItems chains the current query on the "tagged_elineup_mall_items" edge.
func (haq *HPArtistQuery) QueryTaggedElineupMallItems() *HPElineupMallItemQuery {
	query := (&HPElineupMallItemClient{config: haq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := haq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := haq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hpartist.Table, hpartist.FieldID, selector),
			sqlgraph.To(hpelineupmallitem.Table, hpelineupmallitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, hpartist.TaggedElineupMallItemsTable, hpartist.TaggedElineupMallItemsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(haq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first HPArtist entity from the query.
// Returns a *NotFoundError when no HPArtist was found.
func (haq *HPArtistQuery) First(ctx context.Context) (*HPArtist, error) {
	nodes, err := haq.Limit(1).All(setContextOp(ctx, haq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{hpartist.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (haq *HPArtistQuery) FirstX(ctx context.Context) *HPArtist {
	node, err := haq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first HPArtist ID from the query.
// Returns a *NotFoundError when no HPArtist ID was found.
func (haq *HPArtistQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = haq.Limit(1).IDs(setContextOp(ctx, haq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{hpartist.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (haq *HPArtistQuery) FirstIDX(ctx context.Context) int {
	id, err := haq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single HPArtist entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one HPArtist entity is found.
// Returns a *NotFoundError when no HPArtist entities are found.
func (haq *HPArtistQuery) Only(ctx context.Context) (*HPArtist, error) {
	nodes, err := haq.Limit(2).All(setContextOp(ctx, haq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{hpartist.Label}
	default:
		return nil, &NotSingularError{hpartist.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (haq *HPArtistQuery) OnlyX(ctx context.Context) *HPArtist {
	node, err := haq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only HPArtist ID in the query.
// Returns a *NotSingularError when more than one HPArtist ID is found.
// Returns a *NotFoundError when no entities are found.
func (haq *HPArtistQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = haq.Limit(2).IDs(setContextOp(ctx, haq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{hpartist.Label}
	default:
		err = &NotSingularError{hpartist.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (haq *HPArtistQuery) OnlyIDX(ctx context.Context) int {
	id, err := haq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of HPArtists.
func (haq *HPArtistQuery) All(ctx context.Context) ([]*HPArtist, error) {
	ctx = setContextOp(ctx, haq.ctx, "All")
	if err := haq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*HPArtist, *HPArtistQuery]()
	return withInterceptors[[]*HPArtist](ctx, haq, qr, haq.inters)
}

// AllX is like All, but panics if an error occurs.
func (haq *HPArtistQuery) AllX(ctx context.Context) []*HPArtist {
	nodes, err := haq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of HPArtist IDs.
func (haq *HPArtistQuery) IDs(ctx context.Context) (ids []int, err error) {
	if haq.ctx.Unique == nil && haq.path != nil {
		haq.Unique(true)
	}
	ctx = setContextOp(ctx, haq.ctx, "IDs")
	if err = haq.Select(hpartist.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (haq *HPArtistQuery) IDsX(ctx context.Context) []int {
	ids, err := haq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (haq *HPArtistQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, haq.ctx, "Count")
	if err := haq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, haq, querierCount[*HPArtistQuery](), haq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (haq *HPArtistQuery) CountX(ctx context.Context) int {
	count, err := haq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (haq *HPArtistQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, haq.ctx, "Exist")
	switch _, err := haq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (haq *HPArtistQuery) ExistX(ctx context.Context) bool {
	exist, err := haq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the HPArtistQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (haq *HPArtistQuery) Clone() *HPArtistQuery {
	if haq == nil {
		return nil
	}
	return &HPArtistQuery{
		config:                     haq.config,
		ctx:                        haq.ctx.Clone(),
		order:                      append([]hpartist.Order{}, haq.order...),
		inters:                     append([]Interceptor{}, haq.inters...),
		predicates:                 append([]predicate.HPArtist{}, haq.predicates...),
		withMembers:                haq.withMembers.Clone(),
		withAssets:                 haq.withAssets.Clone(),
		withOwningFeed:             haq.withOwningFeed.Clone(),
		withTaggedFeed:             haq.withTaggedFeed.Clone(),
		withOwningIgPosts:          haq.withOwningIgPosts.Clone(),
		withTaggedIgPosts:          haq.withTaggedIgPosts.Clone(),
		withOwningAmebloPosts:      haq.withOwningAmebloPosts.Clone(),
		withTaggedAmebloPosts:      haq.withTaggedAmebloPosts.Clone(),
		withTaggedElineupMallItems: haq.withTaggedElineupMallItems.Clone(),
		// clone intermediate query.
		sql:  haq.sql.Clone(),
		path: haq.path,
	}
}

// WithMembers tells the query-builder to eager-load the nodes that are connected to
// the "members" edge. The optional arguments are used to configure the query builder of the edge.
func (haq *HPArtistQuery) WithMembers(opts ...func(*HPMemberQuery)) *HPArtistQuery {
	query := (&HPMemberClient{config: haq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	haq.withMembers = query
	return haq
}

// WithAssets tells the query-builder to eager-load the nodes that are connected to
// the "assets" edge. The optional arguments are used to configure the query builder of the edge.
func (haq *HPArtistQuery) WithAssets(opts ...func(*HPAssetQuery)) *HPArtistQuery {
	query := (&HPAssetClient{config: haq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	haq.withAssets = query
	return haq
}

// WithOwningFeed tells the query-builder to eager-load the nodes that are connected to
// the "owning_feed" edge. The optional arguments are used to configure the query builder of the edge.
func (haq *HPArtistQuery) WithOwningFeed(opts ...func(*HPFeedItemQuery)) *HPArtistQuery {
	query := (&HPFeedItemClient{config: haq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	haq.withOwningFeed = query
	return haq
}

// WithTaggedFeed tells the query-builder to eager-load the nodes that are connected to
// the "tagged_feed" edge. The optional arguments are used to configure the query builder of the edge.
func (haq *HPArtistQuery) WithTaggedFeed(opts ...func(*HPFeedItemQuery)) *HPArtistQuery {
	query := (&HPFeedItemClient{config: haq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	haq.withTaggedFeed = query
	return haq
}

// WithOwningIgPosts tells the query-builder to eager-load the nodes that are connected to
// the "owning_ig_posts" edge. The optional arguments are used to configure the query builder of the edge.
func (haq *HPArtistQuery) WithOwningIgPosts(opts ...func(*HPIgPostQuery)) *HPArtistQuery {
	query := (&HPIgPostClient{config: haq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	haq.withOwningIgPosts = query
	return haq
}

// WithTaggedIgPosts tells the query-builder to eager-load the nodes that are connected to
// the "tagged_ig_posts" edge. The optional arguments are used to configure the query builder of the edge.
func (haq *HPArtistQuery) WithTaggedIgPosts(opts ...func(*HPIgPostQuery)) *HPArtistQuery {
	query := (&HPIgPostClient{config: haq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	haq.withTaggedIgPosts = query
	return haq
}

// WithOwningAmebloPosts tells the query-builder to eager-load the nodes that are connected to
// the "owning_ameblo_posts" edge. The optional arguments are used to configure the query builder of the edge.
func (haq *HPArtistQuery) WithOwningAmebloPosts(opts ...func(*HPAmebloPostQuery)) *HPArtistQuery {
	query := (&HPAmebloPostClient{config: haq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	haq.withOwningAmebloPosts = query
	return haq
}

// WithTaggedAmebloPosts tells the query-builder to eager-load the nodes that are connected to
// the "tagged_ameblo_posts" edge. The optional arguments are used to configure the query builder of the edge.
func (haq *HPArtistQuery) WithTaggedAmebloPosts(opts ...func(*HPAmebloPostQuery)) *HPArtistQuery {
	query := (&HPAmebloPostClient{config: haq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	haq.withTaggedAmebloPosts = query
	return haq
}

// WithTaggedElineupMallItems tells the query-builder to eager-load the nodes that are connected to
// the "tagged_elineup_mall_items" edge. The optional arguments are used to configure the query builder of the edge.
func (haq *HPArtistQuery) WithTaggedElineupMallItems(opts ...func(*HPElineupMallItemQuery)) *HPArtistQuery {
	query := (&HPElineupMallItemClient{config: haq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	haq.withTaggedElineupMallItems = query
	return haq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CrawledAt time.Time `json:"crawled_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.HPArtist.Query().
//		GroupBy(hpartist.FieldCrawledAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (haq *HPArtistQuery) GroupBy(field string, fields ...string) *HPArtistGroupBy {
	haq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &HPArtistGroupBy{build: haq}
	grbuild.flds = &haq.ctx.Fields
	grbuild.label = hpartist.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CrawledAt time.Time `json:"crawled_at,omitempty"`
//	}
//
//	client.HPArtist.Query().
//		Select(hpartist.FieldCrawledAt).
//		Scan(ctx, &v)
//
func (haq *HPArtistQuery) Select(fields ...string) *HPArtistSelect {
	haq.ctx.Fields = append(haq.ctx.Fields, fields...)
	sbuild := &HPArtistSelect{HPArtistQuery: haq}
	sbuild.label = hpartist.Label
	sbuild.flds, sbuild.scan = &haq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a HPArtistSelect configured with the given aggregations.
func (haq *HPArtistQuery) Aggregate(fns ...AggregateFunc) *HPArtistSelect {
	return haq.Select().Aggregate(fns...)
}

func (haq *HPArtistQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range haq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, haq); err != nil {
				return err
			}
		}
	}
	for _, f := range haq.ctx.Fields {
		if !hpartist.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if haq.path != nil {
		prev, err := haq.path(ctx)
		if err != nil {
			return err
		}
		haq.sql = prev
	}
	if hpartist.Policy == nil {
		return errors.New("ent: uninitialized hpartist.Policy (forgotten import ent/runtime?)")
	}
	if err := hpartist.Policy.EvalQuery(ctx, haq); err != nil {
		return err
	}
	return nil
}

func (haq *HPArtistQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*HPArtist, error) {
	var (
		nodes       = []*HPArtist{}
		withFKs     = haq.withFKs
		_spec       = haq.querySpec()
		loadedTypes = [9]bool{
			haq.withMembers != nil,
			haq.withAssets != nil,
			haq.withOwningFeed != nil,
			haq.withTaggedFeed != nil,
			haq.withOwningIgPosts != nil,
			haq.withTaggedIgPosts != nil,
			haq.withOwningAmebloPosts != nil,
			haq.withTaggedAmebloPosts != nil,
			haq.withTaggedElineupMallItems != nil,
		}
	)
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, hpartist.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*HPArtist).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &HPArtist{config: haq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(haq.modifiers) > 0 {
		_spec.Modifiers = haq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, haq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := haq.withMembers; query != nil {
		if err := haq.loadMembers(ctx, query, nodes,
			func(n *HPArtist) { n.Edges.Members = []*HPMember{} },
			func(n *HPArtist, e *HPMember) { n.Edges.Members = append(n.Edges.Members, e) }); err != nil {
			return nil, err
		}
	}
	if query := haq.withAssets; query != nil {
		if err := haq.loadAssets(ctx, query, nodes,
			func(n *HPArtist) { n.Edges.Assets = []*HPAsset{} },
			func(n *HPArtist, e *HPAsset) { n.Edges.Assets = append(n.Edges.Assets, e) }); err != nil {
			return nil, err
		}
	}
	if query := haq.withOwningFeed; query != nil {
		if err := haq.loadOwningFeed(ctx, query, nodes,
			func(n *HPArtist) { n.Edges.OwningFeed = []*HPFeedItem{} },
			func(n *HPArtist, e *HPFeedItem) { n.Edges.OwningFeed = append(n.Edges.OwningFeed, e) }); err != nil {
			return nil, err
		}
	}
	if query := haq.withTaggedFeed; query != nil {
		if err := haq.loadTaggedFeed(ctx, query, nodes,
			func(n *HPArtist) { n.Edges.TaggedFeed = []*HPFeedItem{} },
			func(n *HPArtist, e *HPFeedItem) { n.Edges.TaggedFeed = append(n.Edges.TaggedFeed, e) }); err != nil {
			return nil, err
		}
	}
	if query := haq.withOwningIgPosts; query != nil {
		if err := haq.loadOwningIgPosts(ctx, query, nodes,
			func(n *HPArtist) { n.Edges.OwningIgPosts = []*HPIgPost{} },
			func(n *HPArtist, e *HPIgPost) { n.Edges.OwningIgPosts = append(n.Edges.OwningIgPosts, e) }); err != nil {
			return nil, err
		}
	}
	if query := haq.withTaggedIgPosts; query != nil {
		if err := haq.loadTaggedIgPosts(ctx, query, nodes,
			func(n *HPArtist) { n.Edges.TaggedIgPosts = []*HPIgPost{} },
			func(n *HPArtist, e *HPIgPost) { n.Edges.TaggedIgPosts = append(n.Edges.TaggedIgPosts, e) }); err != nil {
			return nil, err
		}
	}
	if query := haq.withOwningAmebloPosts; query != nil {
		if err := haq.loadOwningAmebloPosts(ctx, query, nodes,
			func(n *HPArtist) { n.Edges.OwningAmebloPosts = []*HPAmebloPost{} },
			func(n *HPArtist, e *HPAmebloPost) { n.Edges.OwningAmebloPosts = append(n.Edges.OwningAmebloPosts, e) }); err != nil {
			return nil, err
		}
	}
	if query := haq.withTaggedAmebloPosts; query != nil {
		if err := haq.loadTaggedAmebloPosts(ctx, query, nodes,
			func(n *HPArtist) { n.Edges.TaggedAmebloPosts = []*HPAmebloPost{} },
			func(n *HPArtist, e *HPAmebloPost) { n.Edges.TaggedAmebloPosts = append(n.Edges.TaggedAmebloPosts, e) }); err != nil {
			return nil, err
		}
	}
	if query := haq.withTaggedElineupMallItems; query != nil {
		if err := haq.loadTaggedElineupMallItems(ctx, query, nodes,
			func(n *HPArtist) { n.Edges.TaggedElineupMallItems = []*HPElineupMallItem{} },
			func(n *HPArtist, e *HPElineupMallItem) {
				n.Edges.TaggedElineupMallItems = append(n.Edges.TaggedElineupMallItems, e)
			}); err != nil {
			return nil, err
		}
	}
	for name, query := range haq.withNamedMembers {
		if err := haq.loadMembers(ctx, query, nodes,
			func(n *HPArtist) { n.appendNamedMembers(name) },
			func(n *HPArtist, e *HPMember) { n.appendNamedMembers(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range haq.withNamedAssets {
		if err := haq.loadAssets(ctx, query, nodes,
			func(n *HPArtist) { n.appendNamedAssets(name) },
			func(n *HPArtist, e *HPAsset) { n.appendNamedAssets(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range haq.withNamedOwningFeed {
		if err := haq.loadOwningFeed(ctx, query, nodes,
			func(n *HPArtist) { n.appendNamedOwningFeed(name) },
			func(n *HPArtist, e *HPFeedItem) { n.appendNamedOwningFeed(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range haq.withNamedTaggedFeed {
		if err := haq.loadTaggedFeed(ctx, query, nodes,
			func(n *HPArtist) { n.appendNamedTaggedFeed(name) },
			func(n *HPArtist, e *HPFeedItem) { n.appendNamedTaggedFeed(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range haq.withNamedOwningIgPosts {
		if err := haq.loadOwningIgPosts(ctx, query, nodes,
			func(n *HPArtist) { n.appendNamedOwningIgPosts(name) },
			func(n *HPArtist, e *HPIgPost) { n.appendNamedOwningIgPosts(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range haq.withNamedTaggedIgPosts {
		if err := haq.loadTaggedIgPosts(ctx, query, nodes,
			func(n *HPArtist) { n.appendNamedTaggedIgPosts(name) },
			func(n *HPArtist, e *HPIgPost) { n.appendNamedTaggedIgPosts(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range haq.withNamedOwningAmebloPosts {
		if err := haq.loadOwningAmebloPosts(ctx, query, nodes,
			func(n *HPArtist) { n.appendNamedOwningAmebloPosts(name) },
			func(n *HPArtist, e *HPAmebloPost) { n.appendNamedOwningAmebloPosts(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range haq.withNamedTaggedAmebloPosts {
		if err := haq.loadTaggedAmebloPosts(ctx, query, nodes,
			func(n *HPArtist) { n.appendNamedTaggedAmebloPosts(name) },
			func(n *HPArtist, e *HPAmebloPost) { n.appendNamedTaggedAmebloPosts(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range haq.withNamedTaggedElineupMallItems {
		if err := haq.loadTaggedElineupMallItems(ctx, query, nodes,
			func(n *HPArtist) { n.appendNamedTaggedElineupMallItems(name) },
			func(n *HPArtist, e *HPElineupMallItem) { n.appendNamedTaggedElineupMallItems(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range haq.loadTotal {
		if err := haq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (haq *HPArtistQuery) loadMembers(ctx context.Context, query *HPMemberQuery, nodes []*HPArtist, init func(*HPArtist), assign func(*HPArtist, *HPMember)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*HPArtist)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.HPMember(func(s *sql.Selector) {
		s.Where(sql.InValues(hpartist.MembersColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ArtistID
		if fk == nil {
			return fmt.Errorf(`foreign-key "artist_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "artist_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (haq *HPArtistQuery) loadAssets(ctx context.Context, query *HPAssetQuery, nodes []*HPArtist, init func(*HPArtist), assign func(*HPArtist, *HPAsset)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*HPArtist)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.HPAsset(func(s *sql.Selector) {
		s.Where(sql.InValues(hpartist.AssetsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.hp_artist_assets
		if fk == nil {
			return fmt.Errorf(`foreign-key "hp_artist_assets" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "hp_artist_assets" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (haq *HPArtistQuery) loadOwningFeed(ctx context.Context, query *HPFeedItemQuery, nodes []*HPArtist, init func(*HPArtist), assign func(*HPArtist, *HPFeedItem)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*HPArtist)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.HPFeedItem(func(s *sql.Selector) {
		s.Where(sql.InValues(hpartist.OwningFeedColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerArtistID
		if fk == nil {
			return fmt.Errorf(`foreign-key "owner_artist_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "owner_artist_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (haq *HPArtistQuery) loadTaggedFeed(ctx context.Context, query *HPFeedItemQuery, nodes []*HPArtist, init func(*HPArtist), assign func(*HPArtist, *HPFeedItem)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*HPArtist)
	nids := make(map[int]map[*HPArtist]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(hpartist.TaggedFeedTable)
		s.Join(joinT).On(s.C(hpfeeditem.FieldID), joinT.C(hpartist.TaggedFeedPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(hpartist.TaggedFeedPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(hpartist.TaggedFeedPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*HPArtist]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*HPFeedItem](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "tagged_feed" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (haq *HPArtistQuery) loadOwningIgPosts(ctx context.Context, query *HPIgPostQuery, nodes []*HPArtist, init func(*HPArtist), assign func(*HPArtist, *HPIgPost)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*HPArtist)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.HPIgPost(func(s *sql.Selector) {
		s.Where(sql.InValues(hpartist.OwningIgPostsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerArtistID
		if fk == nil {
			return fmt.Errorf(`foreign-key "owner_artist_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "owner_artist_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (haq *HPArtistQuery) loadTaggedIgPosts(ctx context.Context, query *HPIgPostQuery, nodes []*HPArtist, init func(*HPArtist), assign func(*HPArtist, *HPIgPost)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*HPArtist)
	nids := make(map[int]map[*HPArtist]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(hpartist.TaggedIgPostsTable)
		s.Join(joinT).On(s.C(hpigpost.FieldID), joinT.C(hpartist.TaggedIgPostsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(hpartist.TaggedIgPostsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(hpartist.TaggedIgPostsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*HPArtist]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*HPIgPost](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "tagged_ig_posts" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (haq *HPArtistQuery) loadOwningAmebloPosts(ctx context.Context, query *HPAmebloPostQuery, nodes []*HPArtist, init func(*HPArtist), assign func(*HPArtist, *HPAmebloPost)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*HPArtist)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.HPAmebloPost(func(s *sql.Selector) {
		s.Where(sql.InValues(hpartist.OwningAmebloPostsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerArtistID
		if fk == nil {
			return fmt.Errorf(`foreign-key "owner_artist_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "owner_artist_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (haq *HPArtistQuery) loadTaggedAmebloPosts(ctx context.Context, query *HPAmebloPostQuery, nodes []*HPArtist, init func(*HPArtist), assign func(*HPArtist, *HPAmebloPost)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*HPArtist)
	nids := make(map[int]map[*HPArtist]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(hpartist.TaggedAmebloPostsTable)
		s.Join(joinT).On(s.C(hpameblopost.FieldID), joinT.C(hpartist.TaggedAmebloPostsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(hpartist.TaggedAmebloPostsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(hpartist.TaggedAmebloPostsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*HPArtist]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*HPAmebloPost](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "tagged_ameblo_posts" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (haq *HPArtistQuery) loadTaggedElineupMallItems(ctx context.Context, query *HPElineupMallItemQuery, nodes []*HPArtist, init func(*HPArtist), assign func(*HPArtist, *HPElineupMallItem)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*HPArtist)
	nids := make(map[int]map[*HPArtist]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(hpartist.TaggedElineupMallItemsTable)
		s.Join(joinT).On(s.C(hpelineupmallitem.FieldID), joinT.C(hpartist.TaggedElineupMallItemsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(hpartist.TaggedElineupMallItemsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(hpartist.TaggedElineupMallItemsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*HPArtist]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*HPElineupMallItem](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "tagged_elineup_mall_items" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (haq *HPArtistQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := haq.querySpec()
	if len(haq.modifiers) > 0 {
		_spec.Modifiers = haq.modifiers
	}
	_spec.Node.Columns = haq.ctx.Fields
	if len(haq.ctx.Fields) > 0 {
		_spec.Unique = haq.ctx.Unique != nil && *haq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, haq.driver, _spec)
}

func (haq *HPArtistQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(hpartist.Table, hpartist.Columns, sqlgraph.NewFieldSpec(hpartist.FieldID, field.TypeInt))
	_spec.From = haq.sql
	if unique := haq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if haq.path != nil {
		_spec.Unique = true
	}
	if fields := haq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hpartist.FieldID)
		for i := range fields {
			if fields[i] != hpartist.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := haq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := haq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := haq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := haq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (haq *HPArtistQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(haq.driver.Dialect())
	t1 := builder.Table(hpartist.Table)
	columns := haq.ctx.Fields
	if len(columns) == 0 {
		columns = hpartist.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if haq.sql != nil {
		selector = haq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if haq.ctx.Unique != nil && *haq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range haq.predicates {
		p(selector)
	}
	for _, p := range haq.order {
		p(selector)
	}
	if offset := haq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := haq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedMembers tells the query-builder to eager-load the nodes that are connected to the "members"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (haq *HPArtistQuery) WithNamedMembers(name string, opts ...func(*HPMemberQuery)) *HPArtistQuery {
	query := (&HPMemberClient{config: haq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if haq.withNamedMembers == nil {
		haq.withNamedMembers = make(map[string]*HPMemberQuery)
	}
	haq.withNamedMembers[name] = query
	return haq
}

// WithNamedAssets tells the query-builder to eager-load the nodes that are connected to the "assets"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (haq *HPArtistQuery) WithNamedAssets(name string, opts ...func(*HPAssetQuery)) *HPArtistQuery {
	query := (&HPAssetClient{config: haq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if haq.withNamedAssets == nil {
		haq.withNamedAssets = make(map[string]*HPAssetQuery)
	}
	haq.withNamedAssets[name] = query
	return haq
}

// WithNamedOwningFeed tells the query-builder to eager-load the nodes that are connected to the "owning_feed"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (haq *HPArtistQuery) WithNamedOwningFeed(name string, opts ...func(*HPFeedItemQuery)) *HPArtistQuery {
	query := (&HPFeedItemClient{config: haq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if haq.withNamedOwningFeed == nil {
		haq.withNamedOwningFeed = make(map[string]*HPFeedItemQuery)
	}
	haq.withNamedOwningFeed[name] = query
	return haq
}

// WithNamedTaggedFeed tells the query-builder to eager-load the nodes that are connected to the "tagged_feed"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (haq *HPArtistQuery) WithNamedTaggedFeed(name string, opts ...func(*HPFeedItemQuery)) *HPArtistQuery {
	query := (&HPFeedItemClient{config: haq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if haq.withNamedTaggedFeed == nil {
		haq.withNamedTaggedFeed = make(map[string]*HPFeedItemQuery)
	}
	haq.withNamedTaggedFeed[name] = query
	return haq
}

// WithNamedOwningIgPosts tells the query-builder to eager-load the nodes that are connected to the "owning_ig_posts"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (haq *HPArtistQuery) WithNamedOwningIgPosts(name string, opts ...func(*HPIgPostQuery)) *HPArtistQuery {
	query := (&HPIgPostClient{config: haq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if haq.withNamedOwningIgPosts == nil {
		haq.withNamedOwningIgPosts = make(map[string]*HPIgPostQuery)
	}
	haq.withNamedOwningIgPosts[name] = query
	return haq
}

// WithNamedTaggedIgPosts tells the query-builder to eager-load the nodes that are connected to the "tagged_ig_posts"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (haq *HPArtistQuery) WithNamedTaggedIgPosts(name string, opts ...func(*HPIgPostQuery)) *HPArtistQuery {
	query := (&HPIgPostClient{config: haq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if haq.withNamedTaggedIgPosts == nil {
		haq.withNamedTaggedIgPosts = make(map[string]*HPIgPostQuery)
	}
	haq.withNamedTaggedIgPosts[name] = query
	return haq
}

// WithNamedOwningAmebloPosts tells the query-builder to eager-load the nodes that are connected to the "owning_ameblo_posts"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (haq *HPArtistQuery) WithNamedOwningAmebloPosts(name string, opts ...func(*HPAmebloPostQuery)) *HPArtistQuery {
	query := (&HPAmebloPostClient{config: haq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if haq.withNamedOwningAmebloPosts == nil {
		haq.withNamedOwningAmebloPosts = make(map[string]*HPAmebloPostQuery)
	}
	haq.withNamedOwningAmebloPosts[name] = query
	return haq
}

// WithNamedTaggedAmebloPosts tells the query-builder to eager-load the nodes that are connected to the "tagged_ameblo_posts"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (haq *HPArtistQuery) WithNamedTaggedAmebloPosts(name string, opts ...func(*HPAmebloPostQuery)) *HPArtistQuery {
	query := (&HPAmebloPostClient{config: haq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if haq.withNamedTaggedAmebloPosts == nil {
		haq.withNamedTaggedAmebloPosts = make(map[string]*HPAmebloPostQuery)
	}
	haq.withNamedTaggedAmebloPosts[name] = query
	return haq
}

// WithNamedTaggedElineupMallItems tells the query-builder to eager-load the nodes that are connected to the "tagged_elineup_mall_items"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (haq *HPArtistQuery) WithNamedTaggedElineupMallItems(name string, opts ...func(*HPElineupMallItemQuery)) *HPArtistQuery {
	query := (&HPElineupMallItemClient{config: haq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if haq.withNamedTaggedElineupMallItems == nil {
		haq.withNamedTaggedElineupMallItems = make(map[string]*HPElineupMallItemQuery)
	}
	haq.withNamedTaggedElineupMallItems[name] = query
	return haq
}

// HPArtistGroupBy is the group-by builder for HPArtist entities.
type HPArtistGroupBy struct {
	selector
	build *HPArtistQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (hagb *HPArtistGroupBy) Aggregate(fns ...AggregateFunc) *HPArtistGroupBy {
	hagb.fns = append(hagb.fns, fns...)
	return hagb
}

// Scan applies the selector query and scans the result into the given value.
func (hagb *HPArtistGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, hagb.build.ctx, "GroupBy")
	if err := hagb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*HPArtistQuery, *HPArtistGroupBy](ctx, hagb.build, hagb, hagb.build.inters, v)
}

func (hagb *HPArtistGroupBy) sqlScan(ctx context.Context, root *HPArtistQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(hagb.fns))
	for _, fn := range hagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*hagb.flds)+len(hagb.fns))
		for _, f := range *hagb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*hagb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := hagb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// HPArtistSelect is the builder for selecting fields of HPArtist entities.
type HPArtistSelect struct {
	*HPArtistQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (has *HPArtistSelect) Aggregate(fns ...AggregateFunc) *HPArtistSelect {
	has.fns = append(has.fns, fns...)
	return has
}

// Scan applies the selector query and scans the result into the given value.
func (has *HPArtistSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, has.ctx, "Select")
	if err := has.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*HPArtistQuery, *HPArtistSelect](ctx, has.HPArtistQuery, has, has.inters, v)
}

func (has *HPArtistSelect) sqlScan(ctx context.Context, root *HPArtistQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(has.fns))
	for _, fn := range has.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*has.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := has.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
