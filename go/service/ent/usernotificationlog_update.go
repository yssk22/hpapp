// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yssk22/hpapp/go/service/ent/predicate"
	"github.com/yssk22/hpapp/go/service/ent/usernotificationlog"
	"github.com/yssk22/hpapp/go/service/ent/usernotificationsetting"
	"github.com/yssk22/hpapp/go/service/schema/enums"
	"github.com/yssk22/hpapp/go/service/schema/jsonfields"
)

// UserNotificationLogUpdate is the builder for updating UserNotificationLog entities.
type UserNotificationLogUpdate struct {
	config
	hooks    []Hook
	mutation *UserNotificationLogMutation
}

// Where appends a list predicates to the UserNotificationLogUpdate builder.
func (unlu *UserNotificationLogUpdate) Where(ps ...predicate.UserNotificationLog) *UserNotificationLogUpdate {
	unlu.mutation.Where(ps...)
	return unlu
}

// SetUpdatedAt sets the "updated_at" field.
func (unlu *UserNotificationLogUpdate) SetUpdatedAt(t time.Time) *UserNotificationLogUpdate {
	unlu.mutation.SetUpdatedAt(t)
	return unlu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (unlu *UserNotificationLogUpdate) SetNillableUpdatedAt(t *time.Time) *UserNotificationLogUpdate {
	if t != nil {
		unlu.SetUpdatedAt(*t)
	}
	return unlu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (unlu *UserNotificationLogUpdate) ClearUpdatedAt() *UserNotificationLogUpdate {
	unlu.mutation.ClearUpdatedAt()
	return unlu
}

// SetIsTest sets the "is_test" field.
func (unlu *UserNotificationLogUpdate) SetIsTest(b bool) *UserNotificationLogUpdate {
	unlu.mutation.SetIsTest(b)
	return unlu
}

// SetReactNavigationMessage sets the "react_navigation_message" field.
func (unlu *UserNotificationLogUpdate) SetReactNavigationMessage(jnp jsonfields.ReactNavigationPush) *UserNotificationLogUpdate {
	unlu.mutation.SetReactNavigationMessage(jnp)
	return unlu
}

// SetExpectedDeliveryTime sets the "expected_delivery_time" field.
func (unlu *UserNotificationLogUpdate) SetExpectedDeliveryTime(t time.Time) *UserNotificationLogUpdate {
	unlu.mutation.SetExpectedDeliveryTime(t)
	return unlu
}

// SetStatus sets the "status" field.
func (unlu *UserNotificationLogUpdate) SetStatus(ens enums.UserNotificationStatus) *UserNotificationLogUpdate {
	unlu.mutation.SetStatus(ens)
	return unlu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (unlu *UserNotificationLogUpdate) SetNillableStatus(ens *enums.UserNotificationStatus) *UserNotificationLogUpdate {
	if ens != nil {
		unlu.SetStatus(*ens)
	}
	return unlu
}

// SetStatusMessage sets the "status_message" field.
func (unlu *UserNotificationLogUpdate) SetStatusMessage(s string) *UserNotificationLogUpdate {
	unlu.mutation.SetStatusMessage(s)
	return unlu
}

// SetNillableStatusMessage sets the "status_message" field if the given value is not nil.
func (unlu *UserNotificationLogUpdate) SetNillableStatusMessage(s *string) *UserNotificationLogUpdate {
	if s != nil {
		unlu.SetStatusMessage(*s)
	}
	return unlu
}

// AddReceiverIDs adds the "receivers" edge to the UserNotificationSetting entity by IDs.
func (unlu *UserNotificationLogUpdate) AddReceiverIDs(ids ...int) *UserNotificationLogUpdate {
	unlu.mutation.AddReceiverIDs(ids...)
	return unlu
}

// AddReceivers adds the "receivers" edges to the UserNotificationSetting entity.
func (unlu *UserNotificationLogUpdate) AddReceivers(u ...*UserNotificationSetting) *UserNotificationLogUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return unlu.AddReceiverIDs(ids...)
}

// Mutation returns the UserNotificationLogMutation object of the builder.
func (unlu *UserNotificationLogUpdate) Mutation() *UserNotificationLogMutation {
	return unlu.mutation
}

// ClearReceivers clears all "receivers" edges to the UserNotificationSetting entity.
func (unlu *UserNotificationLogUpdate) ClearReceivers() *UserNotificationLogUpdate {
	unlu.mutation.ClearReceivers()
	return unlu
}

// RemoveReceiverIDs removes the "receivers" edge to UserNotificationSetting entities by IDs.
func (unlu *UserNotificationLogUpdate) RemoveReceiverIDs(ids ...int) *UserNotificationLogUpdate {
	unlu.mutation.RemoveReceiverIDs(ids...)
	return unlu
}

// RemoveReceivers removes "receivers" edges to UserNotificationSetting entities.
func (unlu *UserNotificationLogUpdate) RemoveReceivers(u ...*UserNotificationSetting) *UserNotificationLogUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return unlu.RemoveReceiverIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (unlu *UserNotificationLogUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, UserNotificationLogMutation](ctx, unlu.sqlSave, unlu.mutation, unlu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (unlu *UserNotificationLogUpdate) SaveX(ctx context.Context) int {
	affected, err := unlu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (unlu *UserNotificationLogUpdate) Exec(ctx context.Context) error {
	_, err := unlu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (unlu *UserNotificationLogUpdate) ExecX(ctx context.Context) {
	if err := unlu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (unlu *UserNotificationLogUpdate) check() error {
	if v, ok := unlu.mutation.Status(); ok {
		if err := usernotificationlog.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "UserNotificationLog.status": %w`, err)}
		}
	}
	return nil
}

func (unlu *UserNotificationLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := unlu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(usernotificationlog.Table, usernotificationlog.Columns, sqlgraph.NewFieldSpec(usernotificationlog.FieldID, field.TypeInt))
	if ps := unlu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if unlu.mutation.CreatedAtCleared() {
		_spec.ClearField(usernotificationlog.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := unlu.mutation.UpdatedAt(); ok {
		_spec.SetField(usernotificationlog.FieldUpdatedAt, field.TypeTime, value)
	}
	if unlu.mutation.UpdatedAtCleared() {
		_spec.ClearField(usernotificationlog.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := unlu.mutation.IsTest(); ok {
		_spec.SetField(usernotificationlog.FieldIsTest, field.TypeBool, value)
	}
	if value, ok := unlu.mutation.ReactNavigationMessage(); ok {
		_spec.SetField(usernotificationlog.FieldReactNavigationMessage, field.TypeJSON, value)
	}
	if value, ok := unlu.mutation.ExpectedDeliveryTime(); ok {
		_spec.SetField(usernotificationlog.FieldExpectedDeliveryTime, field.TypeTime, value)
	}
	if value, ok := unlu.mutation.Status(); ok {
		_spec.SetField(usernotificationlog.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := unlu.mutation.StatusMessage(); ok {
		_spec.SetField(usernotificationlog.FieldStatusMessage, field.TypeString, value)
	}
	if unlu.mutation.ReceiversCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   usernotificationlog.ReceiversTable,
			Columns: usernotificationlog.ReceiversPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usernotificationsetting.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := unlu.mutation.RemovedReceiversIDs(); len(nodes) > 0 && !unlu.mutation.ReceiversCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   usernotificationlog.ReceiversTable,
			Columns: usernotificationlog.ReceiversPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usernotificationsetting.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := unlu.mutation.ReceiversIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   usernotificationlog.ReceiversTable,
			Columns: usernotificationlog.ReceiversPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usernotificationsetting.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, unlu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usernotificationlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	unlu.mutation.done = true
	return n, nil
}

// UserNotificationLogUpdateOne is the builder for updating a single UserNotificationLog entity.
type UserNotificationLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserNotificationLogMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (unluo *UserNotificationLogUpdateOne) SetUpdatedAt(t time.Time) *UserNotificationLogUpdateOne {
	unluo.mutation.SetUpdatedAt(t)
	return unluo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (unluo *UserNotificationLogUpdateOne) SetNillableUpdatedAt(t *time.Time) *UserNotificationLogUpdateOne {
	if t != nil {
		unluo.SetUpdatedAt(*t)
	}
	return unluo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (unluo *UserNotificationLogUpdateOne) ClearUpdatedAt() *UserNotificationLogUpdateOne {
	unluo.mutation.ClearUpdatedAt()
	return unluo
}

// SetIsTest sets the "is_test" field.
func (unluo *UserNotificationLogUpdateOne) SetIsTest(b bool) *UserNotificationLogUpdateOne {
	unluo.mutation.SetIsTest(b)
	return unluo
}

// SetReactNavigationMessage sets the "react_navigation_message" field.
func (unluo *UserNotificationLogUpdateOne) SetReactNavigationMessage(jnp jsonfields.ReactNavigationPush) *UserNotificationLogUpdateOne {
	unluo.mutation.SetReactNavigationMessage(jnp)
	return unluo
}

// SetExpectedDeliveryTime sets the "expected_delivery_time" field.
func (unluo *UserNotificationLogUpdateOne) SetExpectedDeliveryTime(t time.Time) *UserNotificationLogUpdateOne {
	unluo.mutation.SetExpectedDeliveryTime(t)
	return unluo
}

// SetStatus sets the "status" field.
func (unluo *UserNotificationLogUpdateOne) SetStatus(ens enums.UserNotificationStatus) *UserNotificationLogUpdateOne {
	unluo.mutation.SetStatus(ens)
	return unluo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (unluo *UserNotificationLogUpdateOne) SetNillableStatus(ens *enums.UserNotificationStatus) *UserNotificationLogUpdateOne {
	if ens != nil {
		unluo.SetStatus(*ens)
	}
	return unluo
}

// SetStatusMessage sets the "status_message" field.
func (unluo *UserNotificationLogUpdateOne) SetStatusMessage(s string) *UserNotificationLogUpdateOne {
	unluo.mutation.SetStatusMessage(s)
	return unluo
}

// SetNillableStatusMessage sets the "status_message" field if the given value is not nil.
func (unluo *UserNotificationLogUpdateOne) SetNillableStatusMessage(s *string) *UserNotificationLogUpdateOne {
	if s != nil {
		unluo.SetStatusMessage(*s)
	}
	return unluo
}

// AddReceiverIDs adds the "receivers" edge to the UserNotificationSetting entity by IDs.
func (unluo *UserNotificationLogUpdateOne) AddReceiverIDs(ids ...int) *UserNotificationLogUpdateOne {
	unluo.mutation.AddReceiverIDs(ids...)
	return unluo
}

// AddReceivers adds the "receivers" edges to the UserNotificationSetting entity.
func (unluo *UserNotificationLogUpdateOne) AddReceivers(u ...*UserNotificationSetting) *UserNotificationLogUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return unluo.AddReceiverIDs(ids...)
}

// Mutation returns the UserNotificationLogMutation object of the builder.
func (unluo *UserNotificationLogUpdateOne) Mutation() *UserNotificationLogMutation {
	return unluo.mutation
}

// ClearReceivers clears all "receivers" edges to the UserNotificationSetting entity.
func (unluo *UserNotificationLogUpdateOne) ClearReceivers() *UserNotificationLogUpdateOne {
	unluo.mutation.ClearReceivers()
	return unluo
}

// RemoveReceiverIDs removes the "receivers" edge to UserNotificationSetting entities by IDs.
func (unluo *UserNotificationLogUpdateOne) RemoveReceiverIDs(ids ...int) *UserNotificationLogUpdateOne {
	unluo.mutation.RemoveReceiverIDs(ids...)
	return unluo
}

// RemoveReceivers removes "receivers" edges to UserNotificationSetting entities.
func (unluo *UserNotificationLogUpdateOne) RemoveReceivers(u ...*UserNotificationSetting) *UserNotificationLogUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return unluo.RemoveReceiverIDs(ids...)
}

// Where appends a list predicates to the UserNotificationLogUpdate builder.
func (unluo *UserNotificationLogUpdateOne) Where(ps ...predicate.UserNotificationLog) *UserNotificationLogUpdateOne {
	unluo.mutation.Where(ps...)
	return unluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (unluo *UserNotificationLogUpdateOne) Select(field string, fields ...string) *UserNotificationLogUpdateOne {
	unluo.fields = append([]string{field}, fields...)
	return unluo
}

// Save executes the query and returns the updated UserNotificationLog entity.
func (unluo *UserNotificationLogUpdateOne) Save(ctx context.Context) (*UserNotificationLog, error) {
	return withHooks[*UserNotificationLog, UserNotificationLogMutation](ctx, unluo.sqlSave, unluo.mutation, unluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (unluo *UserNotificationLogUpdateOne) SaveX(ctx context.Context) *UserNotificationLog {
	node, err := unluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (unluo *UserNotificationLogUpdateOne) Exec(ctx context.Context) error {
	_, err := unluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (unluo *UserNotificationLogUpdateOne) ExecX(ctx context.Context) {
	if err := unluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (unluo *UserNotificationLogUpdateOne) check() error {
	if v, ok := unluo.mutation.Status(); ok {
		if err := usernotificationlog.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "UserNotificationLog.status": %w`, err)}
		}
	}
	return nil
}

func (unluo *UserNotificationLogUpdateOne) sqlSave(ctx context.Context) (_node *UserNotificationLog, err error) {
	if err := unluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(usernotificationlog.Table, usernotificationlog.Columns, sqlgraph.NewFieldSpec(usernotificationlog.FieldID, field.TypeInt))
	id, ok := unluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserNotificationLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := unluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usernotificationlog.FieldID)
		for _, f := range fields {
			if !usernotificationlog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != usernotificationlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := unluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if unluo.mutation.CreatedAtCleared() {
		_spec.ClearField(usernotificationlog.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := unluo.mutation.UpdatedAt(); ok {
		_spec.SetField(usernotificationlog.FieldUpdatedAt, field.TypeTime, value)
	}
	if unluo.mutation.UpdatedAtCleared() {
		_spec.ClearField(usernotificationlog.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := unluo.mutation.IsTest(); ok {
		_spec.SetField(usernotificationlog.FieldIsTest, field.TypeBool, value)
	}
	if value, ok := unluo.mutation.ReactNavigationMessage(); ok {
		_spec.SetField(usernotificationlog.FieldReactNavigationMessage, field.TypeJSON, value)
	}
	if value, ok := unluo.mutation.ExpectedDeliveryTime(); ok {
		_spec.SetField(usernotificationlog.FieldExpectedDeliveryTime, field.TypeTime, value)
	}
	if value, ok := unluo.mutation.Status(); ok {
		_spec.SetField(usernotificationlog.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := unluo.mutation.StatusMessage(); ok {
		_spec.SetField(usernotificationlog.FieldStatusMessage, field.TypeString, value)
	}
	if unluo.mutation.ReceiversCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   usernotificationlog.ReceiversTable,
			Columns: usernotificationlog.ReceiversPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usernotificationsetting.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := unluo.mutation.RemovedReceiversIDs(); len(nodes) > 0 && !unluo.mutation.ReceiversCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   usernotificationlog.ReceiversTable,
			Columns: usernotificationlog.ReceiversPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usernotificationsetting.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := unluo.mutation.ReceiversIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   usernotificationlog.ReceiversTable,
			Columns: usernotificationlog.ReceiversPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usernotificationsetting.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserNotificationLog{config: unluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, unluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usernotificationlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	unluo.mutation.done = true
	return _node, nil
}
