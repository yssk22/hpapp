// Code generated by ent, DO NOT EDIT.

package usernotificationlog

import (
	"fmt"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/99designs/gqlgen/graphql"
	"hpapp.yssk22.dev/go/service/schema/enums"
)

const (
	// Label holds the string label denoting the usernotificationlog type in the database.
	Label = "user_notification_log"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldKey holds the string denoting the key field in the database.
	FieldKey = "key"
	// FieldTrigger holds the string denoting the trigger field in the database.
	FieldTrigger = "trigger"
	// FieldIsTest holds the string denoting the is_test field in the database.
	FieldIsTest = "is_test"
	// FieldReactNavigationMessage holds the string denoting the react_navigation_message field in the database.
	FieldReactNavigationMessage = "react_navigation_message"
	// FieldExpectedDeliveryTime holds the string denoting the expected_delivery_time field in the database.
	FieldExpectedDeliveryTime = "expected_delivery_time"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldStatusMessage holds the string denoting the status_message field in the database.
	FieldStatusMessage = "status_message"
	// EdgeReceivers holds the string denoting the receivers edge name in mutations.
	EdgeReceivers = "receivers"
	// Table holds the table name of the usernotificationlog in the database.
	Table = "user_notification_logs"
	// ReceiversTable is the table that holds the receivers relation/edge. The primary key declared below.
	ReceiversTable = "user_notification_log_receivers"
	// ReceiversInverseTable is the table name for the UserNotificationSetting entity.
	// It exists in this package in order to avoid circular dependency with the "usernotificationsetting" package.
	ReceiversInverseTable = "user_notification_settings"
)

// Columns holds all SQL columns for usernotificationlog fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldKey,
	FieldTrigger,
	FieldIsTest,
	FieldReactNavigationMessage,
	FieldExpectedDeliveryTime,
	FieldStatus,
	FieldStatusMessage,
}

var (
	// ReceiversPrimaryKey and ReceiversColumn2 are the table columns denoting the
	// primary key for the receivers relation (M2M).
	ReceiversPrimaryKey = []string{"user_notification_log_id", "user_notification_setting_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "hpapp.yssk22.dev/go/service/ent/runtime"
//
var (
	Hooks [1]ent.Hook
	// DefaultStatusMessage holds the default value on creation for the "status_message" field.
	DefaultStatusMessage string
)

const DefaultStatus enums.UserNotificationStatus = "prepared"

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s enums.UserNotificationStatus) error {
	switch s {
	case "error", "prepared", "sent":
		return nil
	default:
		return fmt.Errorf("usernotificationlog: invalid enum value for status field: %q", s)
	}
}

// Order defines the ordering method for the UserNotificationLog queries.
type Order func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByKey orders the results by the key field.
func ByKey(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldKey, opts...).ToFunc()
}

// ByTrigger orders the results by the trigger field.
func ByTrigger(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldTrigger, opts...).ToFunc()
}

// ByIsTest orders the results by the is_test field.
func ByIsTest(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldIsTest, opts...).ToFunc()
}

// ByExpectedDeliveryTime orders the results by the expected_delivery_time field.
func ByExpectedDeliveryTime(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldExpectedDeliveryTime, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByStatusMessage orders the results by the status_message field.
func ByStatusMessage(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldStatusMessage, opts...).ToFunc()
}

// ByReceiversCount orders the results by receivers count.
func ByReceiversCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newReceiversStep(), opts...)
	}
}

// ByReceivers orders the results by receivers terms.
func ByReceivers(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReceiversStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newReceiversStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReceiversInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ReceiversTable, ReceiversPrimaryKey...),
	)
}

var (
	// enums.UserNotificationStatus must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enums.UserNotificationStatus)(nil)
	// enums.UserNotificationStatus must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enums.UserNotificationStatus)(nil)
)
