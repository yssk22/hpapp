// Code generated by ent, DO NOT EDIT.

package usernotificationlog

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"hpapp.yssk22.dev/go/service/ent/predicate"
	"hpapp.yssk22.dev/go/service/schema/enums"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldEQ(FieldUpdatedAt, v))
}

// Key applies equality check predicate on the "key" field. It's identical to KeyEQ.
func Key(v string) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldEQ(FieldKey, v))
}

// Trigger applies equality check predicate on the "trigger" field. It's identical to TriggerEQ.
func Trigger(v string) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldEQ(FieldTrigger, v))
}

// IsTest applies equality check predicate on the "is_test" field. It's identical to IsTestEQ.
func IsTest(v bool) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldEQ(FieldIsTest, v))
}

// ExpectedDeliveryTime applies equality check predicate on the "expected_delivery_time" field. It's identical to ExpectedDeliveryTimeEQ.
func ExpectedDeliveryTime(v time.Time) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldEQ(FieldExpectedDeliveryTime, v))
}

// StatusMessage applies equality check predicate on the "status_message" field. It's identical to StatusMessageEQ.
func StatusMessage(v string) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldEQ(FieldStatusMessage, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldNotNull(FieldUpdatedAt))
}

// KeyEQ applies the EQ predicate on the "key" field.
func KeyEQ(v string) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldEQ(FieldKey, v))
}

// KeyNEQ applies the NEQ predicate on the "key" field.
func KeyNEQ(v string) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldNEQ(FieldKey, v))
}

// KeyIn applies the In predicate on the "key" field.
func KeyIn(vs ...string) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldIn(FieldKey, vs...))
}

// KeyNotIn applies the NotIn predicate on the "key" field.
func KeyNotIn(vs ...string) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldNotIn(FieldKey, vs...))
}

// KeyGT applies the GT predicate on the "key" field.
func KeyGT(v string) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldGT(FieldKey, v))
}

// KeyGTE applies the GTE predicate on the "key" field.
func KeyGTE(v string) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldGTE(FieldKey, v))
}

// KeyLT applies the LT predicate on the "key" field.
func KeyLT(v string) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldLT(FieldKey, v))
}

// KeyLTE applies the LTE predicate on the "key" field.
func KeyLTE(v string) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldLTE(FieldKey, v))
}

// KeyContains applies the Contains predicate on the "key" field.
func KeyContains(v string) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldContains(FieldKey, v))
}

// KeyHasPrefix applies the HasPrefix predicate on the "key" field.
func KeyHasPrefix(v string) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldHasPrefix(FieldKey, v))
}

// KeyHasSuffix applies the HasSuffix predicate on the "key" field.
func KeyHasSuffix(v string) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldHasSuffix(FieldKey, v))
}

// KeyEqualFold applies the EqualFold predicate on the "key" field.
func KeyEqualFold(v string) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldEqualFold(FieldKey, v))
}

// KeyContainsFold applies the ContainsFold predicate on the "key" field.
func KeyContainsFold(v string) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldContainsFold(FieldKey, v))
}

// TriggerEQ applies the EQ predicate on the "trigger" field.
func TriggerEQ(v string) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldEQ(FieldTrigger, v))
}

// TriggerNEQ applies the NEQ predicate on the "trigger" field.
func TriggerNEQ(v string) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldNEQ(FieldTrigger, v))
}

// TriggerIn applies the In predicate on the "trigger" field.
func TriggerIn(vs ...string) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldIn(FieldTrigger, vs...))
}

// TriggerNotIn applies the NotIn predicate on the "trigger" field.
func TriggerNotIn(vs ...string) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldNotIn(FieldTrigger, vs...))
}

// TriggerGT applies the GT predicate on the "trigger" field.
func TriggerGT(v string) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldGT(FieldTrigger, v))
}

// TriggerGTE applies the GTE predicate on the "trigger" field.
func TriggerGTE(v string) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldGTE(FieldTrigger, v))
}

// TriggerLT applies the LT predicate on the "trigger" field.
func TriggerLT(v string) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldLT(FieldTrigger, v))
}

// TriggerLTE applies the LTE predicate on the "trigger" field.
func TriggerLTE(v string) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldLTE(FieldTrigger, v))
}

// TriggerContains applies the Contains predicate on the "trigger" field.
func TriggerContains(v string) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldContains(FieldTrigger, v))
}

// TriggerHasPrefix applies the HasPrefix predicate on the "trigger" field.
func TriggerHasPrefix(v string) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldHasPrefix(FieldTrigger, v))
}

// TriggerHasSuffix applies the HasSuffix predicate on the "trigger" field.
func TriggerHasSuffix(v string) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldHasSuffix(FieldTrigger, v))
}

// TriggerEqualFold applies the EqualFold predicate on the "trigger" field.
func TriggerEqualFold(v string) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldEqualFold(FieldTrigger, v))
}

// TriggerContainsFold applies the ContainsFold predicate on the "trigger" field.
func TriggerContainsFold(v string) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldContainsFold(FieldTrigger, v))
}

// IsTestEQ applies the EQ predicate on the "is_test" field.
func IsTestEQ(v bool) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldEQ(FieldIsTest, v))
}

// IsTestNEQ applies the NEQ predicate on the "is_test" field.
func IsTestNEQ(v bool) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldNEQ(FieldIsTest, v))
}

// ExpectedDeliveryTimeEQ applies the EQ predicate on the "expected_delivery_time" field.
func ExpectedDeliveryTimeEQ(v time.Time) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldEQ(FieldExpectedDeliveryTime, v))
}

// ExpectedDeliveryTimeNEQ applies the NEQ predicate on the "expected_delivery_time" field.
func ExpectedDeliveryTimeNEQ(v time.Time) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldNEQ(FieldExpectedDeliveryTime, v))
}

// ExpectedDeliveryTimeIn applies the In predicate on the "expected_delivery_time" field.
func ExpectedDeliveryTimeIn(vs ...time.Time) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldIn(FieldExpectedDeliveryTime, vs...))
}

// ExpectedDeliveryTimeNotIn applies the NotIn predicate on the "expected_delivery_time" field.
func ExpectedDeliveryTimeNotIn(vs ...time.Time) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldNotIn(FieldExpectedDeliveryTime, vs...))
}

// ExpectedDeliveryTimeGT applies the GT predicate on the "expected_delivery_time" field.
func ExpectedDeliveryTimeGT(v time.Time) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldGT(FieldExpectedDeliveryTime, v))
}

// ExpectedDeliveryTimeGTE applies the GTE predicate on the "expected_delivery_time" field.
func ExpectedDeliveryTimeGTE(v time.Time) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldGTE(FieldExpectedDeliveryTime, v))
}

// ExpectedDeliveryTimeLT applies the LT predicate on the "expected_delivery_time" field.
func ExpectedDeliveryTimeLT(v time.Time) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldLT(FieldExpectedDeliveryTime, v))
}

// ExpectedDeliveryTimeLTE applies the LTE predicate on the "expected_delivery_time" field.
func ExpectedDeliveryTimeLTE(v time.Time) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldLTE(FieldExpectedDeliveryTime, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v enums.UserNotificationStatus) predicate.UserNotificationLog {
	vc := v
	return predicate.UserNotificationLog(sql.FieldEQ(FieldStatus, vc))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v enums.UserNotificationStatus) predicate.UserNotificationLog {
	vc := v
	return predicate.UserNotificationLog(sql.FieldNEQ(FieldStatus, vc))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...enums.UserNotificationStatus) predicate.UserNotificationLog {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserNotificationLog(sql.FieldIn(FieldStatus, v...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...enums.UserNotificationStatus) predicate.UserNotificationLog {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserNotificationLog(sql.FieldNotIn(FieldStatus, v...))
}

// StatusMessageEQ applies the EQ predicate on the "status_message" field.
func StatusMessageEQ(v string) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldEQ(FieldStatusMessage, v))
}

// StatusMessageNEQ applies the NEQ predicate on the "status_message" field.
func StatusMessageNEQ(v string) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldNEQ(FieldStatusMessage, v))
}

// StatusMessageIn applies the In predicate on the "status_message" field.
func StatusMessageIn(vs ...string) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldIn(FieldStatusMessage, vs...))
}

// StatusMessageNotIn applies the NotIn predicate on the "status_message" field.
func StatusMessageNotIn(vs ...string) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldNotIn(FieldStatusMessage, vs...))
}

// StatusMessageGT applies the GT predicate on the "status_message" field.
func StatusMessageGT(v string) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldGT(FieldStatusMessage, v))
}

// StatusMessageGTE applies the GTE predicate on the "status_message" field.
func StatusMessageGTE(v string) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldGTE(FieldStatusMessage, v))
}

// StatusMessageLT applies the LT predicate on the "status_message" field.
func StatusMessageLT(v string) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldLT(FieldStatusMessage, v))
}

// StatusMessageLTE applies the LTE predicate on the "status_message" field.
func StatusMessageLTE(v string) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldLTE(FieldStatusMessage, v))
}

// StatusMessageContains applies the Contains predicate on the "status_message" field.
func StatusMessageContains(v string) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldContains(FieldStatusMessage, v))
}

// StatusMessageHasPrefix applies the HasPrefix predicate on the "status_message" field.
func StatusMessageHasPrefix(v string) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldHasPrefix(FieldStatusMessage, v))
}

// StatusMessageHasSuffix applies the HasSuffix predicate on the "status_message" field.
func StatusMessageHasSuffix(v string) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldHasSuffix(FieldStatusMessage, v))
}

// StatusMessageEqualFold applies the EqualFold predicate on the "status_message" field.
func StatusMessageEqualFold(v string) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldEqualFold(FieldStatusMessage, v))
}

// StatusMessageContainsFold applies the ContainsFold predicate on the "status_message" field.
func StatusMessageContainsFold(v string) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(sql.FieldContainsFold(FieldStatusMessage, v))
}

// HasReceivers applies the HasEdge predicate on the "receivers" edge.
func HasReceivers() predicate.UserNotificationLog {
	return predicate.UserNotificationLog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ReceiversTable, ReceiversPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReceiversWith applies the HasEdge predicate on the "receivers" edge with a given conditions (other predicates).
func HasReceiversWith(preds ...predicate.UserNotificationSetting) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(func(s *sql.Selector) {
		step := newReceiversStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserNotificationLog) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserNotificationLog) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserNotificationLog) predicate.UserNotificationLog {
	return predicate.UserNotificationLog(func(s *sql.Selector) {
		p(s.Not())
	})
}
