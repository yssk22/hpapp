// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/yssk22/hpapp/go/service/ent/hpfollow"
	"github.com/yssk22/hpapp/go/service/ent/hpmember"
	"github.com/yssk22/hpapp/go/service/ent/user"
	"github.com/yssk22/hpapp/go/service/schema/enums"
)

// HPFollow is the model entity for the HPFollow schema.
type HPFollow struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Type holds the value of the "type" field.
	Type enums.HPFollowType `json:"type,omitempty"`
	// ElineupmallOther holds the value of the "elineupmall_other" field.
	ElineupmallOther enums.HPFollowType `json:"elineupmall_other,omitempty"`
	// ElineupmallPhotoDaily holds the value of the "elineupmall_photo_daily" field.
	ElineupmallPhotoDaily enums.HPFollowType `json:"elineupmall_photo_daily,omitempty"`
	// ElineupmallPhotoA4 holds the value of the "elineupmall_photo_a4" field.
	ElineupmallPhotoA4 enums.HPFollowType `json:"elineupmall_photo_a4,omitempty"`
	// ElineupmallPhotoA5 holds the value of the "elineupmall_photo_a5" field.
	ElineupmallPhotoA5 enums.HPFollowType `json:"elineupmall_photo_a5,omitempty"`
	// ElineupmallPhoto2l holds the value of the "elineupmall_photo_2l" field.
	ElineupmallPhoto2l enums.HPFollowType `json:"elineupmall_photo_2l,omitempty"`
	// ElineupmallPhotoOther holds the value of the "elineupmall_photo_other" field.
	ElineupmallPhotoOther enums.HPFollowType `json:"elineupmall_photo_other,omitempty"`
	// ElineupmallPhotoAlbum holds the value of the "elineupmall_photo_album" field.
	ElineupmallPhotoAlbum enums.HPFollowType `json:"elineupmall_photo_album,omitempty"`
	// ElineupmallPhotoAlbumOther holds the value of the "elineupmall_photo_album_other" field.
	ElineupmallPhotoAlbumOther enums.HPFollowType `json:"elineupmall_photo_album_other,omitempty"`
	// ElineupmallPhotoBook holds the value of the "elineupmall_photo_book" field.
	ElineupmallPhotoBook enums.HPFollowType `json:"elineupmall_photo_book,omitempty"`
	// ElineupmallPhotoBookOther holds the value of the "elineupmall_photo_book_other" field.
	ElineupmallPhotoBookOther enums.HPFollowType `json:"elineupmall_photo_book_other,omitempty"`
	// ElineupmallDvd holds the value of the "elineupmall_dvd" field.
	ElineupmallDvd enums.HPFollowType `json:"elineupmall_dvd,omitempty"`
	// ElineupmallDvdMagazine holds the value of the "elineupmall_dvd_magazine" field.
	ElineupmallDvdMagazine enums.HPFollowType `json:"elineupmall_dvd_magazine,omitempty"`
	// ElineupmallDvdMagazineOther holds the value of the "elineupmall_dvd_magazine_other" field.
	ElineupmallDvdMagazineOther enums.HPFollowType `json:"elineupmall_dvd_magazine_other,omitempty"`
	// ElineupmallBlueray holds the value of the "elineupmall_blueray" field.
	ElineupmallBlueray enums.HPFollowType `json:"elineupmall_blueray,omitempty"`
	// ElineupmallPenlight holds the value of the "elineupmall_penlight" field.
	ElineupmallPenlight enums.HPFollowType `json:"elineupmall_penlight,omitempty"`
	// ElineupmallCollectionPinnapPoster holds the value of the "elineupmall_collection_pinnap_poster" field.
	ElineupmallCollectionPinnapPoster enums.HPFollowType `json:"elineupmall_collection_pinnap_poster,omitempty"`
	// ElineupmallCollectionPhoto holds the value of the "elineupmall_collection_photo" field.
	ElineupmallCollectionPhoto enums.HPFollowType `json:"elineupmall_collection_photo,omitempty"`
	// ElineupmallCollectionOther holds the value of the "elineupmall_collection_other" field.
	ElineupmallCollectionOther enums.HPFollowType `json:"elineupmall_collection_other,omitempty"`
	// ElineupmallTshirt holds the value of the "elineupmall_tshirt" field.
	ElineupmallTshirt enums.HPFollowType `json:"elineupmall_tshirt,omitempty"`
	// ElineupmallMicrofiberTowel holds the value of the "elineupmall_microfiber_towel" field.
	ElineupmallMicrofiberTowel enums.HPFollowType `json:"elineupmall_microfiber_towel,omitempty"`
	// ElineupmallMufflerTowel holds the value of the "elineupmall_muffler_towel" field.
	ElineupmallMufflerTowel enums.HPFollowType `json:"elineupmall_muffler_towel,omitempty"`
	// ElineupmallFsk holds the value of the "elineupmall_fsk" field.
	ElineupmallFsk enums.HPFollowType `json:"elineupmall_fsk,omitempty"`
	// ElineupmallKeyringOther holds the value of the "elineupmall_keyring_other" field.
	ElineupmallKeyringOther enums.HPFollowType `json:"elineupmall_keyring_other,omitempty"`
	// ElineupmallClearFile holds the value of the "elineupmall_clear_file" field.
	ElineupmallClearFile enums.HPFollowType `json:"elineupmall_clear_file,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HPFollowQuery when eager-loading is set.
	Edges                   HPFollowEdges `json:"edges"`
	hp_follow_member        *int
	user_hpmember_following *int
	selectValues            sql.SelectValues
}

// HPFollowEdges holds the relations/edges for other nodes in the graph.
type HPFollowEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Member holds the value of the member edge.
	Member *HPMember `json:"member,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HPFollowEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// MemberOrErr returns the Member value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HPFollowEdges) MemberOrErr() (*HPMember, error) {
	if e.loadedTypes[1] {
		if e.Member == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: hpmember.Label}
		}
		return e.Member, nil
	}
	return nil, &NotLoadedError{edge: "member"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*HPFollow) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case hpfollow.FieldID:
			values[i] = new(sql.NullInt64)
		case hpfollow.FieldType, hpfollow.FieldElineupmallOther, hpfollow.FieldElineupmallPhotoDaily, hpfollow.FieldElineupmallPhotoA4, hpfollow.FieldElineupmallPhotoA5, hpfollow.FieldElineupmallPhoto2l, hpfollow.FieldElineupmallPhotoOther, hpfollow.FieldElineupmallPhotoAlbum, hpfollow.FieldElineupmallPhotoAlbumOther, hpfollow.FieldElineupmallPhotoBook, hpfollow.FieldElineupmallPhotoBookOther, hpfollow.FieldElineupmallDvd, hpfollow.FieldElineupmallDvdMagazine, hpfollow.FieldElineupmallDvdMagazineOther, hpfollow.FieldElineupmallBlueray, hpfollow.FieldElineupmallPenlight, hpfollow.FieldElineupmallCollectionPinnapPoster, hpfollow.FieldElineupmallCollectionPhoto, hpfollow.FieldElineupmallCollectionOther, hpfollow.FieldElineupmallTshirt, hpfollow.FieldElineupmallMicrofiberTowel, hpfollow.FieldElineupmallMufflerTowel, hpfollow.FieldElineupmallFsk, hpfollow.FieldElineupmallKeyringOther, hpfollow.FieldElineupmallClearFile:
			values[i] = new(sql.NullString)
		case hpfollow.FieldCreatedAt, hpfollow.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case hpfollow.ForeignKeys[0]: // hp_follow_member
			values[i] = new(sql.NullInt64)
		case hpfollow.ForeignKeys[1]: // user_hpmember_following
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the HPFollow fields.
func (hf *HPFollow) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case hpfollow.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			hf.ID = int(value.Int64)
		case hpfollow.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				hf.CreatedAt = value.Time
			}
		case hpfollow.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				hf.UpdatedAt = value.Time
			}
		case hpfollow.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				hf.Type = enums.HPFollowType(value.String)
			}
		case hpfollow.FieldElineupmallOther:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field elineupmall_other", values[i])
			} else if value.Valid {
				hf.ElineupmallOther = enums.HPFollowType(value.String)
			}
		case hpfollow.FieldElineupmallPhotoDaily:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field elineupmall_photo_daily", values[i])
			} else if value.Valid {
				hf.ElineupmallPhotoDaily = enums.HPFollowType(value.String)
			}
		case hpfollow.FieldElineupmallPhotoA4:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field elineupmall_photo_a4", values[i])
			} else if value.Valid {
				hf.ElineupmallPhotoA4 = enums.HPFollowType(value.String)
			}
		case hpfollow.FieldElineupmallPhotoA5:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field elineupmall_photo_a5", values[i])
			} else if value.Valid {
				hf.ElineupmallPhotoA5 = enums.HPFollowType(value.String)
			}
		case hpfollow.FieldElineupmallPhoto2l:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field elineupmall_photo_2l", values[i])
			} else if value.Valid {
				hf.ElineupmallPhoto2l = enums.HPFollowType(value.String)
			}
		case hpfollow.FieldElineupmallPhotoOther:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field elineupmall_photo_other", values[i])
			} else if value.Valid {
				hf.ElineupmallPhotoOther = enums.HPFollowType(value.String)
			}
		case hpfollow.FieldElineupmallPhotoAlbum:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field elineupmall_photo_album", values[i])
			} else if value.Valid {
				hf.ElineupmallPhotoAlbum = enums.HPFollowType(value.String)
			}
		case hpfollow.FieldElineupmallPhotoAlbumOther:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field elineupmall_photo_album_other", values[i])
			} else if value.Valid {
				hf.ElineupmallPhotoAlbumOther = enums.HPFollowType(value.String)
			}
		case hpfollow.FieldElineupmallPhotoBook:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field elineupmall_photo_book", values[i])
			} else if value.Valid {
				hf.ElineupmallPhotoBook = enums.HPFollowType(value.String)
			}
		case hpfollow.FieldElineupmallPhotoBookOther:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field elineupmall_photo_book_other", values[i])
			} else if value.Valid {
				hf.ElineupmallPhotoBookOther = enums.HPFollowType(value.String)
			}
		case hpfollow.FieldElineupmallDvd:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field elineupmall_dvd", values[i])
			} else if value.Valid {
				hf.ElineupmallDvd = enums.HPFollowType(value.String)
			}
		case hpfollow.FieldElineupmallDvdMagazine:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field elineupmall_dvd_magazine", values[i])
			} else if value.Valid {
				hf.ElineupmallDvdMagazine = enums.HPFollowType(value.String)
			}
		case hpfollow.FieldElineupmallDvdMagazineOther:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field elineupmall_dvd_magazine_other", values[i])
			} else if value.Valid {
				hf.ElineupmallDvdMagazineOther = enums.HPFollowType(value.String)
			}
		case hpfollow.FieldElineupmallBlueray:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field elineupmall_blueray", values[i])
			} else if value.Valid {
				hf.ElineupmallBlueray = enums.HPFollowType(value.String)
			}
		case hpfollow.FieldElineupmallPenlight:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field elineupmall_penlight", values[i])
			} else if value.Valid {
				hf.ElineupmallPenlight = enums.HPFollowType(value.String)
			}
		case hpfollow.FieldElineupmallCollectionPinnapPoster:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field elineupmall_collection_pinnap_poster", values[i])
			} else if value.Valid {
				hf.ElineupmallCollectionPinnapPoster = enums.HPFollowType(value.String)
			}
		case hpfollow.FieldElineupmallCollectionPhoto:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field elineupmall_collection_photo", values[i])
			} else if value.Valid {
				hf.ElineupmallCollectionPhoto = enums.HPFollowType(value.String)
			}
		case hpfollow.FieldElineupmallCollectionOther:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field elineupmall_collection_other", values[i])
			} else if value.Valid {
				hf.ElineupmallCollectionOther = enums.HPFollowType(value.String)
			}
		case hpfollow.FieldElineupmallTshirt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field elineupmall_tshirt", values[i])
			} else if value.Valid {
				hf.ElineupmallTshirt = enums.HPFollowType(value.String)
			}
		case hpfollow.FieldElineupmallMicrofiberTowel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field elineupmall_microfiber_towel", values[i])
			} else if value.Valid {
				hf.ElineupmallMicrofiberTowel = enums.HPFollowType(value.String)
			}
		case hpfollow.FieldElineupmallMufflerTowel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field elineupmall_muffler_towel", values[i])
			} else if value.Valid {
				hf.ElineupmallMufflerTowel = enums.HPFollowType(value.String)
			}
		case hpfollow.FieldElineupmallFsk:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field elineupmall_fsk", values[i])
			} else if value.Valid {
				hf.ElineupmallFsk = enums.HPFollowType(value.String)
			}
		case hpfollow.FieldElineupmallKeyringOther:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field elineupmall_keyring_other", values[i])
			} else if value.Valid {
				hf.ElineupmallKeyringOther = enums.HPFollowType(value.String)
			}
		case hpfollow.FieldElineupmallClearFile:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field elineupmall_clear_file", values[i])
			} else if value.Valid {
				hf.ElineupmallClearFile = enums.HPFollowType(value.String)
			}
		case hpfollow.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field hp_follow_member", value)
			} else if value.Valid {
				hf.hp_follow_member = new(int)
				*hf.hp_follow_member = int(value.Int64)
			}
		case hpfollow.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_hpmember_following", value)
			} else if value.Valid {
				hf.user_hpmember_following = new(int)
				*hf.user_hpmember_following = int(value.Int64)
			}
		default:
			hf.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the HPFollow.
// This includes values selected through modifiers, order, etc.
func (hf *HPFollow) Value(name string) (ent.Value, error) {
	return hf.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the HPFollow entity.
func (hf *HPFollow) QueryUser() *UserQuery {
	return NewHPFollowClient(hf.config).QueryUser(hf)
}

// QueryMember queries the "member" edge of the HPFollow entity.
func (hf *HPFollow) QueryMember() *HPMemberQuery {
	return NewHPFollowClient(hf.config).QueryMember(hf)
}

// Update returns a builder for updating this HPFollow.
// Note that you need to call HPFollow.Unwrap() before calling this method if this HPFollow
// was returned from a transaction, and the transaction was committed or rolled back.
func (hf *HPFollow) Update() *HPFollowUpdateOne {
	return NewHPFollowClient(hf.config).UpdateOne(hf)
}

// Unwrap unwraps the HPFollow entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (hf *HPFollow) Unwrap() *HPFollow {
	_tx, ok := hf.config.driver.(*txDriver)
	if !ok {
		panic("ent: HPFollow is not a transactional entity")
	}
	hf.config.driver = _tx.drv
	return hf
}

// String implements the fmt.Stringer.
func (hf *HPFollow) String() string {
	var builder strings.Builder
	builder.WriteString("HPFollow(")
	builder.WriteString(fmt.Sprintf("id=%v, ", hf.ID))
	builder.WriteString("created_at=")
	builder.WriteString(hf.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(hf.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", hf.Type))
	builder.WriteString(", ")
	builder.WriteString("elineupmall_other=")
	builder.WriteString(fmt.Sprintf("%v", hf.ElineupmallOther))
	builder.WriteString(", ")
	builder.WriteString("elineupmall_photo_daily=")
	builder.WriteString(fmt.Sprintf("%v", hf.ElineupmallPhotoDaily))
	builder.WriteString(", ")
	builder.WriteString("elineupmall_photo_a4=")
	builder.WriteString(fmt.Sprintf("%v", hf.ElineupmallPhotoA4))
	builder.WriteString(", ")
	builder.WriteString("elineupmall_photo_a5=")
	builder.WriteString(fmt.Sprintf("%v", hf.ElineupmallPhotoA5))
	builder.WriteString(", ")
	builder.WriteString("elineupmall_photo_2l=")
	builder.WriteString(fmt.Sprintf("%v", hf.ElineupmallPhoto2l))
	builder.WriteString(", ")
	builder.WriteString("elineupmall_photo_other=")
	builder.WriteString(fmt.Sprintf("%v", hf.ElineupmallPhotoOther))
	builder.WriteString(", ")
	builder.WriteString("elineupmall_photo_album=")
	builder.WriteString(fmt.Sprintf("%v", hf.ElineupmallPhotoAlbum))
	builder.WriteString(", ")
	builder.WriteString("elineupmall_photo_album_other=")
	builder.WriteString(fmt.Sprintf("%v", hf.ElineupmallPhotoAlbumOther))
	builder.WriteString(", ")
	builder.WriteString("elineupmall_photo_book=")
	builder.WriteString(fmt.Sprintf("%v", hf.ElineupmallPhotoBook))
	builder.WriteString(", ")
	builder.WriteString("elineupmall_photo_book_other=")
	builder.WriteString(fmt.Sprintf("%v", hf.ElineupmallPhotoBookOther))
	builder.WriteString(", ")
	builder.WriteString("elineupmall_dvd=")
	builder.WriteString(fmt.Sprintf("%v", hf.ElineupmallDvd))
	builder.WriteString(", ")
	builder.WriteString("elineupmall_dvd_magazine=")
	builder.WriteString(fmt.Sprintf("%v", hf.ElineupmallDvdMagazine))
	builder.WriteString(", ")
	builder.WriteString("elineupmall_dvd_magazine_other=")
	builder.WriteString(fmt.Sprintf("%v", hf.ElineupmallDvdMagazineOther))
	builder.WriteString(", ")
	builder.WriteString("elineupmall_blueray=")
	builder.WriteString(fmt.Sprintf("%v", hf.ElineupmallBlueray))
	builder.WriteString(", ")
	builder.WriteString("elineupmall_penlight=")
	builder.WriteString(fmt.Sprintf("%v", hf.ElineupmallPenlight))
	builder.WriteString(", ")
	builder.WriteString("elineupmall_collection_pinnap_poster=")
	builder.WriteString(fmt.Sprintf("%v", hf.ElineupmallCollectionPinnapPoster))
	builder.WriteString(", ")
	builder.WriteString("elineupmall_collection_photo=")
	builder.WriteString(fmt.Sprintf("%v", hf.ElineupmallCollectionPhoto))
	builder.WriteString(", ")
	builder.WriteString("elineupmall_collection_other=")
	builder.WriteString(fmt.Sprintf("%v", hf.ElineupmallCollectionOther))
	builder.WriteString(", ")
	builder.WriteString("elineupmall_tshirt=")
	builder.WriteString(fmt.Sprintf("%v", hf.ElineupmallTshirt))
	builder.WriteString(", ")
	builder.WriteString("elineupmall_microfiber_towel=")
	builder.WriteString(fmt.Sprintf("%v", hf.ElineupmallMicrofiberTowel))
	builder.WriteString(", ")
	builder.WriteString("elineupmall_muffler_towel=")
	builder.WriteString(fmt.Sprintf("%v", hf.ElineupmallMufflerTowel))
	builder.WriteString(", ")
	builder.WriteString("elineupmall_fsk=")
	builder.WriteString(fmt.Sprintf("%v", hf.ElineupmallFsk))
	builder.WriteString(", ")
	builder.WriteString("elineupmall_keyring_other=")
	builder.WriteString(fmt.Sprintf("%v", hf.ElineupmallKeyringOther))
	builder.WriteString(", ")
	builder.WriteString("elineupmall_clear_file=")
	builder.WriteString(fmt.Sprintf("%v", hf.ElineupmallClearFile))
	builder.WriteByte(')')
	return builder.String()
}

// HPFollows is a parsable slice of HPFollow.
type HPFollows []*HPFollow
