// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/yssk22/hpapp/go/service/ent/hpfollow"
	"github.com/yssk22/hpapp/go/service/ent/hpmember"
	"github.com/yssk22/hpapp/go/service/ent/user"
	"github.com/yssk22/hpapp/go/service/schema/enums"
)

// HPFollow is the model entity for the HPFollow schema.
type HPFollow struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Type holds the value of the "type" field.
	Type enums.HPFollowType `json:"type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HPFollowQuery when eager-loading is set.
	Edges                   HPFollowEdges `json:"edges"`
	hp_follow_member        *int
	user_hpmember_following *int
	selectValues            sql.SelectValues
}

// HPFollowEdges holds the relations/edges for other nodes in the graph.
type HPFollowEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Member holds the value of the member edge.
	Member *HPMember `json:"member,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HPFollowEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// MemberOrErr returns the Member value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HPFollowEdges) MemberOrErr() (*HPMember, error) {
	if e.loadedTypes[1] {
		if e.Member == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: hpmember.Label}
		}
		return e.Member, nil
	}
	return nil, &NotLoadedError{edge: "member"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*HPFollow) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case hpfollow.FieldID:
			values[i] = new(sql.NullInt64)
		case hpfollow.FieldType:
			values[i] = new(sql.NullString)
		case hpfollow.FieldCreatedAt, hpfollow.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case hpfollow.ForeignKeys[0]: // hp_follow_member
			values[i] = new(sql.NullInt64)
		case hpfollow.ForeignKeys[1]: // user_hpmember_following
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the HPFollow fields.
func (hf *HPFollow) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case hpfollow.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			hf.ID = int(value.Int64)
		case hpfollow.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				hf.CreatedAt = value.Time
			}
		case hpfollow.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				hf.UpdatedAt = value.Time
			}
		case hpfollow.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				hf.Type = enums.HPFollowType(value.String)
			}
		case hpfollow.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field hp_follow_member", value)
			} else if value.Valid {
				hf.hp_follow_member = new(int)
				*hf.hp_follow_member = int(value.Int64)
			}
		case hpfollow.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_hpmember_following", value)
			} else if value.Valid {
				hf.user_hpmember_following = new(int)
				*hf.user_hpmember_following = int(value.Int64)
			}
		default:
			hf.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the HPFollow.
// This includes values selected through modifiers, order, etc.
func (hf *HPFollow) Value(name string) (ent.Value, error) {
	return hf.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the HPFollow entity.
func (hf *HPFollow) QueryUser() *UserQuery {
	return NewHPFollowClient(hf.config).QueryUser(hf)
}

// QueryMember queries the "member" edge of the HPFollow entity.
func (hf *HPFollow) QueryMember() *HPMemberQuery {
	return NewHPFollowClient(hf.config).QueryMember(hf)
}

// Update returns a builder for updating this HPFollow.
// Note that you need to call HPFollow.Unwrap() before calling this method if this HPFollow
// was returned from a transaction, and the transaction was committed or rolled back.
func (hf *HPFollow) Update() *HPFollowUpdateOne {
	return NewHPFollowClient(hf.config).UpdateOne(hf)
}

// Unwrap unwraps the HPFollow entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (hf *HPFollow) Unwrap() *HPFollow {
	_tx, ok := hf.config.driver.(*txDriver)
	if !ok {
		panic("ent: HPFollow is not a transactional entity")
	}
	hf.config.driver = _tx.drv
	return hf
}

// String implements the fmt.Stringer.
func (hf *HPFollow) String() string {
	var builder strings.Builder
	builder.WriteString("HPFollow(")
	builder.WriteString(fmt.Sprintf("id=%v, ", hf.ID))
	builder.WriteString("created_at=")
	builder.WriteString(hf.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(hf.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", hf.Type))
	builder.WriteByte(')')
	return builder.String()
}

// HPFollows is a parsable slice of HPFollow.
type HPFollows []*HPFollow
