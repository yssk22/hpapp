// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yssk22/hpapp/go/service/ent/hpameblopost"
	"github.com/yssk22/hpapp/go/service/ent/hpartist"
	"github.com/yssk22/hpapp/go/service/ent/hpblob"
	"github.com/yssk22/hpapp/go/service/ent/hpigpost"
	"github.com/yssk22/hpapp/go/service/ent/hpmember"
	"github.com/yssk22/hpapp/go/service/ent/predicate"
)

// HPBlobQuery is the builder for querying HPBlob entities.
type HPBlobQuery struct {
	config
	ctx                  *QueryContext
	order                []hpblob.Order
	inters               []Interceptor
	predicates           []predicate.HPBlob
	withOwnerArtist      *HPArtistQuery
	withOwnerMember      *HPMemberQuery
	withAmebloPosts      *HPAmebloPostQuery
	withIgPosts          *HPIgPostQuery
	modifiers            []func(*sql.Selector)
	loadTotal            []func(context.Context, []*HPBlob) error
	withNamedAmebloPosts map[string]*HPAmebloPostQuery
	withNamedIgPosts     map[string]*HPIgPostQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the HPBlobQuery builder.
func (hbq *HPBlobQuery) Where(ps ...predicate.HPBlob) *HPBlobQuery {
	hbq.predicates = append(hbq.predicates, ps...)
	return hbq
}

// Limit the number of records to be returned by this query.
func (hbq *HPBlobQuery) Limit(limit int) *HPBlobQuery {
	hbq.ctx.Limit = &limit
	return hbq
}

// Offset to start from.
func (hbq *HPBlobQuery) Offset(offset int) *HPBlobQuery {
	hbq.ctx.Offset = &offset
	return hbq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (hbq *HPBlobQuery) Unique(unique bool) *HPBlobQuery {
	hbq.ctx.Unique = &unique
	return hbq
}

// Order specifies how the records should be ordered.
func (hbq *HPBlobQuery) Order(o ...hpblob.Order) *HPBlobQuery {
	hbq.order = append(hbq.order, o...)
	return hbq
}

// QueryOwnerArtist chains the current query on the "owner_artist" edge.
func (hbq *HPBlobQuery) QueryOwnerArtist() *HPArtistQuery {
	query := (&HPArtistClient{config: hbq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hbq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hbq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hpblob.Table, hpblob.FieldID, selector),
			sqlgraph.To(hpartist.Table, hpartist.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hpblob.OwnerArtistTable, hpblob.OwnerArtistColumn),
		)
		fromU = sqlgraph.SetNeighbors(hbq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOwnerMember chains the current query on the "owner_member" edge.
func (hbq *HPBlobQuery) QueryOwnerMember() *HPMemberQuery {
	query := (&HPMemberClient{config: hbq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hbq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hbq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hpblob.Table, hpblob.FieldID, selector),
			sqlgraph.To(hpmember.Table, hpmember.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hpblob.OwnerMemberTable, hpblob.OwnerMemberColumn),
		)
		fromU = sqlgraph.SetNeighbors(hbq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAmebloPosts chains the current query on the "ameblo_posts" edge.
func (hbq *HPBlobQuery) QueryAmebloPosts() *HPAmebloPostQuery {
	query := (&HPAmebloPostClient{config: hbq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hbq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hbq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hpblob.Table, hpblob.FieldID, selector),
			sqlgraph.To(hpameblopost.Table, hpameblopost.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, hpblob.AmebloPostsTable, hpblob.AmebloPostsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(hbq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryIgPosts chains the current query on the "ig_posts" edge.
func (hbq *HPBlobQuery) QueryIgPosts() *HPIgPostQuery {
	query := (&HPIgPostClient{config: hbq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hbq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hbq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hpblob.Table, hpblob.FieldID, selector),
			sqlgraph.To(hpigpost.Table, hpigpost.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, hpblob.IgPostsTable, hpblob.IgPostsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(hbq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first HPBlob entity from the query.
// Returns a *NotFoundError when no HPBlob was found.
func (hbq *HPBlobQuery) First(ctx context.Context) (*HPBlob, error) {
	nodes, err := hbq.Limit(1).All(setContextOp(ctx, hbq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{hpblob.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (hbq *HPBlobQuery) FirstX(ctx context.Context) *HPBlob {
	node, err := hbq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first HPBlob ID from the query.
// Returns a *NotFoundError when no HPBlob ID was found.
func (hbq *HPBlobQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = hbq.Limit(1).IDs(setContextOp(ctx, hbq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{hpblob.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (hbq *HPBlobQuery) FirstIDX(ctx context.Context) int {
	id, err := hbq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single HPBlob entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one HPBlob entity is found.
// Returns a *NotFoundError when no HPBlob entities are found.
func (hbq *HPBlobQuery) Only(ctx context.Context) (*HPBlob, error) {
	nodes, err := hbq.Limit(2).All(setContextOp(ctx, hbq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{hpblob.Label}
	default:
		return nil, &NotSingularError{hpblob.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (hbq *HPBlobQuery) OnlyX(ctx context.Context) *HPBlob {
	node, err := hbq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only HPBlob ID in the query.
// Returns a *NotSingularError when more than one HPBlob ID is found.
// Returns a *NotFoundError when no entities are found.
func (hbq *HPBlobQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = hbq.Limit(2).IDs(setContextOp(ctx, hbq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{hpblob.Label}
	default:
		err = &NotSingularError{hpblob.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (hbq *HPBlobQuery) OnlyIDX(ctx context.Context) int {
	id, err := hbq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of HPBlobs.
func (hbq *HPBlobQuery) All(ctx context.Context) ([]*HPBlob, error) {
	ctx = setContextOp(ctx, hbq.ctx, "All")
	if err := hbq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*HPBlob, *HPBlobQuery]()
	return withInterceptors[[]*HPBlob](ctx, hbq, qr, hbq.inters)
}

// AllX is like All, but panics if an error occurs.
func (hbq *HPBlobQuery) AllX(ctx context.Context) []*HPBlob {
	nodes, err := hbq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of HPBlob IDs.
func (hbq *HPBlobQuery) IDs(ctx context.Context) (ids []int, err error) {
	if hbq.ctx.Unique == nil && hbq.path != nil {
		hbq.Unique(true)
	}
	ctx = setContextOp(ctx, hbq.ctx, "IDs")
	if err = hbq.Select(hpblob.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (hbq *HPBlobQuery) IDsX(ctx context.Context) []int {
	ids, err := hbq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (hbq *HPBlobQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, hbq.ctx, "Count")
	if err := hbq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, hbq, querierCount[*HPBlobQuery](), hbq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (hbq *HPBlobQuery) CountX(ctx context.Context) int {
	count, err := hbq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (hbq *HPBlobQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, hbq.ctx, "Exist")
	switch _, err := hbq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (hbq *HPBlobQuery) ExistX(ctx context.Context) bool {
	exist, err := hbq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the HPBlobQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (hbq *HPBlobQuery) Clone() *HPBlobQuery {
	if hbq == nil {
		return nil
	}
	return &HPBlobQuery{
		config:          hbq.config,
		ctx:             hbq.ctx.Clone(),
		order:           append([]hpblob.Order{}, hbq.order...),
		inters:          append([]Interceptor{}, hbq.inters...),
		predicates:      append([]predicate.HPBlob{}, hbq.predicates...),
		withOwnerArtist: hbq.withOwnerArtist.Clone(),
		withOwnerMember: hbq.withOwnerMember.Clone(),
		withAmebloPosts: hbq.withAmebloPosts.Clone(),
		withIgPosts:     hbq.withIgPosts.Clone(),
		// clone intermediate query.
		sql:  hbq.sql.Clone(),
		path: hbq.path,
	}
}

// WithOwnerArtist tells the query-builder to eager-load the nodes that are connected to
// the "owner_artist" edge. The optional arguments are used to configure the query builder of the edge.
func (hbq *HPBlobQuery) WithOwnerArtist(opts ...func(*HPArtistQuery)) *HPBlobQuery {
	query := (&HPArtistClient{config: hbq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hbq.withOwnerArtist = query
	return hbq
}

// WithOwnerMember tells the query-builder to eager-load the nodes that are connected to
// the "owner_member" edge. The optional arguments are used to configure the query builder of the edge.
func (hbq *HPBlobQuery) WithOwnerMember(opts ...func(*HPMemberQuery)) *HPBlobQuery {
	query := (&HPMemberClient{config: hbq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hbq.withOwnerMember = query
	return hbq
}

// WithAmebloPosts tells the query-builder to eager-load the nodes that are connected to
// the "ameblo_posts" edge. The optional arguments are used to configure the query builder of the edge.
func (hbq *HPBlobQuery) WithAmebloPosts(opts ...func(*HPAmebloPostQuery)) *HPBlobQuery {
	query := (&HPAmebloPostClient{config: hbq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hbq.withAmebloPosts = query
	return hbq
}

// WithIgPosts tells the query-builder to eager-load the nodes that are connected to
// the "ig_posts" edge. The optional arguments are used to configure the query builder of the edge.
func (hbq *HPBlobQuery) WithIgPosts(opts ...func(*HPIgPostQuery)) *HPBlobQuery {
	query := (&HPIgPostClient{config: hbq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hbq.withIgPosts = query
	return hbq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.HPBlob.Query().
//		GroupBy(hpblob.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (hbq *HPBlobQuery) GroupBy(field string, fields ...string) *HPBlobGroupBy {
	hbq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &HPBlobGroupBy{build: hbq}
	grbuild.flds = &hbq.ctx.Fields
	grbuild.label = hpblob.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.HPBlob.Query().
//		Select(hpblob.FieldCreatedAt).
//		Scan(ctx, &v)
func (hbq *HPBlobQuery) Select(fields ...string) *HPBlobSelect {
	hbq.ctx.Fields = append(hbq.ctx.Fields, fields...)
	sbuild := &HPBlobSelect{HPBlobQuery: hbq}
	sbuild.label = hpblob.Label
	sbuild.flds, sbuild.scan = &hbq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a HPBlobSelect configured with the given aggregations.
func (hbq *HPBlobQuery) Aggregate(fns ...AggregateFunc) *HPBlobSelect {
	return hbq.Select().Aggregate(fns...)
}

func (hbq *HPBlobQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range hbq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, hbq); err != nil {
				return err
			}
		}
	}
	for _, f := range hbq.ctx.Fields {
		if !hpblob.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if hbq.path != nil {
		prev, err := hbq.path(ctx)
		if err != nil {
			return err
		}
		hbq.sql = prev
	}
	return nil
}

func (hbq *HPBlobQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*HPBlob, error) {
	var (
		nodes       = []*HPBlob{}
		_spec       = hbq.querySpec()
		loadedTypes = [4]bool{
			hbq.withOwnerArtist != nil,
			hbq.withOwnerMember != nil,
			hbq.withAmebloPosts != nil,
			hbq.withIgPosts != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*HPBlob).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &HPBlob{config: hbq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(hbq.modifiers) > 0 {
		_spec.Modifiers = hbq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, hbq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := hbq.withOwnerArtist; query != nil {
		if err := hbq.loadOwnerArtist(ctx, query, nodes, nil,
			func(n *HPBlob, e *HPArtist) { n.Edges.OwnerArtist = e }); err != nil {
			return nil, err
		}
	}
	if query := hbq.withOwnerMember; query != nil {
		if err := hbq.loadOwnerMember(ctx, query, nodes, nil,
			func(n *HPBlob, e *HPMember) { n.Edges.OwnerMember = e }); err != nil {
			return nil, err
		}
	}
	if query := hbq.withAmebloPosts; query != nil {
		if err := hbq.loadAmebloPosts(ctx, query, nodes,
			func(n *HPBlob) { n.Edges.AmebloPosts = []*HPAmebloPost{} },
			func(n *HPBlob, e *HPAmebloPost) { n.Edges.AmebloPosts = append(n.Edges.AmebloPosts, e) }); err != nil {
			return nil, err
		}
	}
	if query := hbq.withIgPosts; query != nil {
		if err := hbq.loadIgPosts(ctx, query, nodes,
			func(n *HPBlob) { n.Edges.IgPosts = []*HPIgPost{} },
			func(n *HPBlob, e *HPIgPost) { n.Edges.IgPosts = append(n.Edges.IgPosts, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range hbq.withNamedAmebloPosts {
		if err := hbq.loadAmebloPosts(ctx, query, nodes,
			func(n *HPBlob) { n.appendNamedAmebloPosts(name) },
			func(n *HPBlob, e *HPAmebloPost) { n.appendNamedAmebloPosts(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range hbq.withNamedIgPosts {
		if err := hbq.loadIgPosts(ctx, query, nodes,
			func(n *HPBlob) { n.appendNamedIgPosts(name) },
			func(n *HPBlob, e *HPIgPost) { n.appendNamedIgPosts(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range hbq.loadTotal {
		if err := hbq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (hbq *HPBlobQuery) loadOwnerArtist(ctx context.Context, query *HPArtistQuery, nodes []*HPBlob, init func(*HPBlob), assign func(*HPBlob, *HPArtist)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*HPBlob)
	for i := range nodes {
		fk := nodes[i].OwnerArtistID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(hpartist.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "owner_artist_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (hbq *HPBlobQuery) loadOwnerMember(ctx context.Context, query *HPMemberQuery, nodes []*HPBlob, init func(*HPBlob), assign func(*HPBlob, *HPMember)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*HPBlob)
	for i := range nodes {
		fk := nodes[i].OwnerMemberID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(hpmember.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "owner_member_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (hbq *HPBlobQuery) loadAmebloPosts(ctx context.Context, query *HPAmebloPostQuery, nodes []*HPBlob, init func(*HPBlob), assign func(*HPBlob, *HPAmebloPost)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*HPBlob)
	nids := make(map[int]map[*HPBlob]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(hpblob.AmebloPostsTable)
		s.Join(joinT).On(s.C(hpameblopost.FieldID), joinT.C(hpblob.AmebloPostsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(hpblob.AmebloPostsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(hpblob.AmebloPostsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*HPBlob]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*HPAmebloPost](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "ameblo_posts" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (hbq *HPBlobQuery) loadIgPosts(ctx context.Context, query *HPIgPostQuery, nodes []*HPBlob, init func(*HPBlob), assign func(*HPBlob, *HPIgPost)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*HPBlob)
	nids := make(map[int]map[*HPBlob]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(hpblob.IgPostsTable)
		s.Join(joinT).On(s.C(hpigpost.FieldID), joinT.C(hpblob.IgPostsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(hpblob.IgPostsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(hpblob.IgPostsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*HPBlob]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*HPIgPost](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "ig_posts" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (hbq *HPBlobQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := hbq.querySpec()
	if len(hbq.modifiers) > 0 {
		_spec.Modifiers = hbq.modifiers
	}
	_spec.Node.Columns = hbq.ctx.Fields
	if len(hbq.ctx.Fields) > 0 {
		_spec.Unique = hbq.ctx.Unique != nil && *hbq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, hbq.driver, _spec)
}

func (hbq *HPBlobQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(hpblob.Table, hpblob.Columns, sqlgraph.NewFieldSpec(hpblob.FieldID, field.TypeInt))
	_spec.From = hbq.sql
	if unique := hbq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if hbq.path != nil {
		_spec.Unique = true
	}
	if fields := hbq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hpblob.FieldID)
		for i := range fields {
			if fields[i] != hpblob.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if hbq.withOwnerArtist != nil {
			_spec.Node.AddColumnOnce(hpblob.FieldOwnerArtistID)
		}
		if hbq.withOwnerMember != nil {
			_spec.Node.AddColumnOnce(hpblob.FieldOwnerMemberID)
		}
	}
	if ps := hbq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := hbq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := hbq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := hbq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (hbq *HPBlobQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(hbq.driver.Dialect())
	t1 := builder.Table(hpblob.Table)
	columns := hbq.ctx.Fields
	if len(columns) == 0 {
		columns = hpblob.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if hbq.sql != nil {
		selector = hbq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if hbq.ctx.Unique != nil && *hbq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range hbq.predicates {
		p(selector)
	}
	for _, p := range hbq.order {
		p(selector)
	}
	if offset := hbq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := hbq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedAmebloPosts tells the query-builder to eager-load the nodes that are connected to the "ameblo_posts"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (hbq *HPBlobQuery) WithNamedAmebloPosts(name string, opts ...func(*HPAmebloPostQuery)) *HPBlobQuery {
	query := (&HPAmebloPostClient{config: hbq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if hbq.withNamedAmebloPosts == nil {
		hbq.withNamedAmebloPosts = make(map[string]*HPAmebloPostQuery)
	}
	hbq.withNamedAmebloPosts[name] = query
	return hbq
}

// WithNamedIgPosts tells the query-builder to eager-load the nodes that are connected to the "ig_posts"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (hbq *HPBlobQuery) WithNamedIgPosts(name string, opts ...func(*HPIgPostQuery)) *HPBlobQuery {
	query := (&HPIgPostClient{config: hbq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if hbq.withNamedIgPosts == nil {
		hbq.withNamedIgPosts = make(map[string]*HPIgPostQuery)
	}
	hbq.withNamedIgPosts[name] = query
	return hbq
}

// HPBlobGroupBy is the group-by builder for HPBlob entities.
type HPBlobGroupBy struct {
	selector
	build *HPBlobQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (hbgb *HPBlobGroupBy) Aggregate(fns ...AggregateFunc) *HPBlobGroupBy {
	hbgb.fns = append(hbgb.fns, fns...)
	return hbgb
}

// Scan applies the selector query and scans the result into the given value.
func (hbgb *HPBlobGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, hbgb.build.ctx, "GroupBy")
	if err := hbgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*HPBlobQuery, *HPBlobGroupBy](ctx, hbgb.build, hbgb, hbgb.build.inters, v)
}

func (hbgb *HPBlobGroupBy) sqlScan(ctx context.Context, root *HPBlobQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(hbgb.fns))
	for _, fn := range hbgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*hbgb.flds)+len(hbgb.fns))
		for _, f := range *hbgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*hbgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := hbgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// HPBlobSelect is the builder for selecting fields of HPBlob entities.
type HPBlobSelect struct {
	*HPBlobQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (hbs *HPBlobSelect) Aggregate(fns ...AggregateFunc) *HPBlobSelect {
	hbs.fns = append(hbs.fns, fns...)
	return hbs
}

// Scan applies the selector query and scans the result into the given value.
func (hbs *HPBlobSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, hbs.ctx, "Select")
	if err := hbs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*HPBlobQuery, *HPBlobSelect](ctx, hbs.HPBlobQuery, hbs, hbs.inters, v)
}

func (hbs *HPBlobSelect) sqlScan(ctx context.Context, root *HPBlobQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(hbs.fns))
	for _, fn := range hbs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*hbs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := hbs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
