// Code generated by ent, DO NOT EDIT.

package hpevent

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"hpapp.yssk22.dev/go/service/ent/predicate"
	"hpapp.yssk22.dev/go/service/schema/enums"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldEQ(FieldUpdatedAt, v))
}

// Key applies equality check predicate on the "key" field. It's identical to KeyEQ.
func Key(v string) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldEQ(FieldKey, v))
}

// OpenAt applies equality check predicate on the "open_at" field. It's identical to OpenAtEQ.
func OpenAt(v time.Time) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldEQ(FieldOpenAt, v))
}

// StartAt applies equality check predicate on the "start_at" field. It's identical to StartAtEQ.
func StartAt(v time.Time) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldEQ(FieldStartAt, v))
}

// Venue applies equality check predicate on the "venue" field. It's identical to VenueEQ.
func Venue(v string) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldEQ(FieldVenue, v))
}

// Prefecture applies equality check predicate on the "prefecture" field. It's identical to PrefectureEQ.
func Prefecture(v string) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldEQ(FieldPrefecture, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.HPEvent {
	return predicate.HPEvent(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.HPEvent {
	return predicate.HPEvent(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.HPEvent {
	return predicate.HPEvent(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.HPEvent {
	return predicate.HPEvent(sql.FieldNotNull(FieldUpdatedAt))
}

// KeyEQ applies the EQ predicate on the "key" field.
func KeyEQ(v string) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldEQ(FieldKey, v))
}

// KeyNEQ applies the NEQ predicate on the "key" field.
func KeyNEQ(v string) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldNEQ(FieldKey, v))
}

// KeyIn applies the In predicate on the "key" field.
func KeyIn(vs ...string) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldIn(FieldKey, vs...))
}

// KeyNotIn applies the NotIn predicate on the "key" field.
func KeyNotIn(vs ...string) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldNotIn(FieldKey, vs...))
}

// KeyGT applies the GT predicate on the "key" field.
func KeyGT(v string) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldGT(FieldKey, v))
}

// KeyGTE applies the GTE predicate on the "key" field.
func KeyGTE(v string) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldGTE(FieldKey, v))
}

// KeyLT applies the LT predicate on the "key" field.
func KeyLT(v string) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldLT(FieldKey, v))
}

// KeyLTE applies the LTE predicate on the "key" field.
func KeyLTE(v string) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldLTE(FieldKey, v))
}

// KeyContains applies the Contains predicate on the "key" field.
func KeyContains(v string) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldContains(FieldKey, v))
}

// KeyHasPrefix applies the HasPrefix predicate on the "key" field.
func KeyHasPrefix(v string) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldHasPrefix(FieldKey, v))
}

// KeyHasSuffix applies the HasSuffix predicate on the "key" field.
func KeyHasSuffix(v string) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldHasSuffix(FieldKey, v))
}

// KeyEqualFold applies the EqualFold predicate on the "key" field.
func KeyEqualFold(v string) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldEqualFold(FieldKey, v))
}

// KeyContainsFold applies the ContainsFold predicate on the "key" field.
func KeyContainsFold(v string) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldContainsFold(FieldKey, v))
}

// OpenAtEQ applies the EQ predicate on the "open_at" field.
func OpenAtEQ(v time.Time) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldEQ(FieldOpenAt, v))
}

// OpenAtNEQ applies the NEQ predicate on the "open_at" field.
func OpenAtNEQ(v time.Time) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldNEQ(FieldOpenAt, v))
}

// OpenAtIn applies the In predicate on the "open_at" field.
func OpenAtIn(vs ...time.Time) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldIn(FieldOpenAt, vs...))
}

// OpenAtNotIn applies the NotIn predicate on the "open_at" field.
func OpenAtNotIn(vs ...time.Time) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldNotIn(FieldOpenAt, vs...))
}

// OpenAtGT applies the GT predicate on the "open_at" field.
func OpenAtGT(v time.Time) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldGT(FieldOpenAt, v))
}

// OpenAtGTE applies the GTE predicate on the "open_at" field.
func OpenAtGTE(v time.Time) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldGTE(FieldOpenAt, v))
}

// OpenAtLT applies the LT predicate on the "open_at" field.
func OpenAtLT(v time.Time) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldLT(FieldOpenAt, v))
}

// OpenAtLTE applies the LTE predicate on the "open_at" field.
func OpenAtLTE(v time.Time) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldLTE(FieldOpenAt, v))
}

// OpenAtIsNil applies the IsNil predicate on the "open_at" field.
func OpenAtIsNil() predicate.HPEvent {
	return predicate.HPEvent(sql.FieldIsNull(FieldOpenAt))
}

// OpenAtNotNil applies the NotNil predicate on the "open_at" field.
func OpenAtNotNil() predicate.HPEvent {
	return predicate.HPEvent(sql.FieldNotNull(FieldOpenAt))
}

// StartAtEQ applies the EQ predicate on the "start_at" field.
func StartAtEQ(v time.Time) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldEQ(FieldStartAt, v))
}

// StartAtNEQ applies the NEQ predicate on the "start_at" field.
func StartAtNEQ(v time.Time) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldNEQ(FieldStartAt, v))
}

// StartAtIn applies the In predicate on the "start_at" field.
func StartAtIn(vs ...time.Time) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldIn(FieldStartAt, vs...))
}

// StartAtNotIn applies the NotIn predicate on the "start_at" field.
func StartAtNotIn(vs ...time.Time) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldNotIn(FieldStartAt, vs...))
}

// StartAtGT applies the GT predicate on the "start_at" field.
func StartAtGT(v time.Time) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldGT(FieldStartAt, v))
}

// StartAtGTE applies the GTE predicate on the "start_at" field.
func StartAtGTE(v time.Time) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldGTE(FieldStartAt, v))
}

// StartAtLT applies the LT predicate on the "start_at" field.
func StartAtLT(v time.Time) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldLT(FieldStartAt, v))
}

// StartAtLTE applies the LTE predicate on the "start_at" field.
func StartAtLTE(v time.Time) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldLTE(FieldStartAt, v))
}

// VenueEQ applies the EQ predicate on the "venue" field.
func VenueEQ(v string) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldEQ(FieldVenue, v))
}

// VenueNEQ applies the NEQ predicate on the "venue" field.
func VenueNEQ(v string) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldNEQ(FieldVenue, v))
}

// VenueIn applies the In predicate on the "venue" field.
func VenueIn(vs ...string) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldIn(FieldVenue, vs...))
}

// VenueNotIn applies the NotIn predicate on the "venue" field.
func VenueNotIn(vs ...string) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldNotIn(FieldVenue, vs...))
}

// VenueGT applies the GT predicate on the "venue" field.
func VenueGT(v string) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldGT(FieldVenue, v))
}

// VenueGTE applies the GTE predicate on the "venue" field.
func VenueGTE(v string) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldGTE(FieldVenue, v))
}

// VenueLT applies the LT predicate on the "venue" field.
func VenueLT(v string) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldLT(FieldVenue, v))
}

// VenueLTE applies the LTE predicate on the "venue" field.
func VenueLTE(v string) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldLTE(FieldVenue, v))
}

// VenueContains applies the Contains predicate on the "venue" field.
func VenueContains(v string) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldContains(FieldVenue, v))
}

// VenueHasPrefix applies the HasPrefix predicate on the "venue" field.
func VenueHasPrefix(v string) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldHasPrefix(FieldVenue, v))
}

// VenueHasSuffix applies the HasSuffix predicate on the "venue" field.
func VenueHasSuffix(v string) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldHasSuffix(FieldVenue, v))
}

// VenueEqualFold applies the EqualFold predicate on the "venue" field.
func VenueEqualFold(v string) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldEqualFold(FieldVenue, v))
}

// VenueContainsFold applies the ContainsFold predicate on the "venue" field.
func VenueContainsFold(v string) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldContainsFold(FieldVenue, v))
}

// PrefectureEQ applies the EQ predicate on the "prefecture" field.
func PrefectureEQ(v string) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldEQ(FieldPrefecture, v))
}

// PrefectureNEQ applies the NEQ predicate on the "prefecture" field.
func PrefectureNEQ(v string) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldNEQ(FieldPrefecture, v))
}

// PrefectureIn applies the In predicate on the "prefecture" field.
func PrefectureIn(vs ...string) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldIn(FieldPrefecture, vs...))
}

// PrefectureNotIn applies the NotIn predicate on the "prefecture" field.
func PrefectureNotIn(vs ...string) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldNotIn(FieldPrefecture, vs...))
}

// PrefectureGT applies the GT predicate on the "prefecture" field.
func PrefectureGT(v string) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldGT(FieldPrefecture, v))
}

// PrefectureGTE applies the GTE predicate on the "prefecture" field.
func PrefectureGTE(v string) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldGTE(FieldPrefecture, v))
}

// PrefectureLT applies the LT predicate on the "prefecture" field.
func PrefectureLT(v string) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldLT(FieldPrefecture, v))
}

// PrefectureLTE applies the LTE predicate on the "prefecture" field.
func PrefectureLTE(v string) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldLTE(FieldPrefecture, v))
}

// PrefectureContains applies the Contains predicate on the "prefecture" field.
func PrefectureContains(v string) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldContains(FieldPrefecture, v))
}

// PrefectureHasPrefix applies the HasPrefix predicate on the "prefecture" field.
func PrefectureHasPrefix(v string) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldHasPrefix(FieldPrefecture, v))
}

// PrefectureHasSuffix applies the HasSuffix predicate on the "prefecture" field.
func PrefectureHasSuffix(v string) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldHasSuffix(FieldPrefecture, v))
}

// PrefectureEqualFold applies the EqualFold predicate on the "prefecture" field.
func PrefectureEqualFold(v string) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldEqualFold(FieldPrefecture, v))
}

// PrefectureContainsFold applies the ContainsFold predicate on the "prefecture" field.
func PrefectureContainsFold(v string) predicate.HPEvent {
	return predicate.HPEvent(sql.FieldContainsFold(FieldPrefecture, v))
}

// SourceEQ applies the EQ predicate on the "source" field.
func SourceEQ(v enums.HPEventSource) predicate.HPEvent {
	vc := v
	return predicate.HPEvent(sql.FieldEQ(FieldSource, vc))
}

// SourceNEQ applies the NEQ predicate on the "source" field.
func SourceNEQ(v enums.HPEventSource) predicate.HPEvent {
	vc := v
	return predicate.HPEvent(sql.FieldNEQ(FieldSource, vc))
}

// SourceIn applies the In predicate on the "source" field.
func SourceIn(vs ...enums.HPEventSource) predicate.HPEvent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HPEvent(sql.FieldIn(FieldSource, v...))
}

// SourceNotIn applies the NotIn predicate on the "source" field.
func SourceNotIn(vs ...enums.HPEventSource) predicate.HPEvent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HPEvent(sql.FieldNotIn(FieldSource, v...))
}

// HasMembers applies the HasEdge predicate on the "members" edge.
func HasMembers() predicate.HPEvent {
	return predicate.HPEvent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MembersTable, MembersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMembersWith applies the HasEdge predicate on the "members" edge with a given conditions (other predicates).
func HasMembersWith(preds ...predicate.HPMember) predicate.HPEvent {
	return predicate.HPEvent(func(s *sql.Selector) {
		step := newMembersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasArtists applies the HasEdge predicate on the "artists" edge.
func HasArtists() predicate.HPEvent {
	return predicate.HPEvent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ArtistsTable, ArtistsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasArtistsWith applies the HasEdge predicate on the "artists" edge with a given conditions (other predicates).
func HasArtistsWith(preds ...predicate.HPArtist) predicate.HPEvent {
	return predicate.HPEvent(func(s *sql.Selector) {
		step := newArtistsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHpfcEventTickets applies the HasEdge predicate on the "hpfc_event_tickets" edge.
func HasHpfcEventTickets() predicate.HPEvent {
	return predicate.HPEvent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, HpfcEventTicketsTable, HpfcEventTicketsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHpfcEventTicketsWith applies the HasEdge predicate on the "hpfc_event_tickets" edge with a given conditions (other predicates).
func HasHpfcEventTicketsWith(preds ...predicate.HPFCEventTicket) predicate.HPEvent {
	return predicate.HPEvent(func(s *sql.Selector) {
		step := newHpfcEventTicketsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.HPEvent) predicate.HPEvent {
	return predicate.HPEvent(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.HPEvent) predicate.HPEvent {
	return predicate.HPEvent(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.HPEvent) predicate.HPEvent {
	return predicate.HPEvent(func(s *sql.Selector) {
		p(s.Not())
	})
}
