// Code generated by ent, DO NOT EDIT.

package hpevent

import (
	"fmt"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/99designs/gqlgen/graphql"
	"hpapp.yssk22.dev/go/service/schema/enums"
)

const (
	// Label holds the string label denoting the hpevent type in the database.
	Label = "hp_event"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldKey holds the string denoting the key field in the database.
	FieldKey = "key"
	// FieldDisplayTitles holds the string denoting the display_titles field in the database.
	FieldDisplayTitles = "display_titles"
	// FieldOpenAt holds the string denoting the open_at field in the database.
	FieldOpenAt = "open_at"
	// FieldStartAt holds the string denoting the start_at field in the database.
	FieldStartAt = "start_at"
	// FieldVenue holds the string denoting the venue field in the database.
	FieldVenue = "venue"
	// FieldPrefecture holds the string denoting the prefecture field in the database.
	FieldPrefecture = "prefecture"
	// FieldSource holds the string denoting the source field in the database.
	FieldSource = "source"
	// EdgeMembers holds the string denoting the members edge name in mutations.
	EdgeMembers = "members"
	// EdgeArtists holds the string denoting the artists edge name in mutations.
	EdgeArtists = "artists"
	// EdgeHpfcEventTickets holds the string denoting the hpfc_event_tickets edge name in mutations.
	EdgeHpfcEventTickets = "hpfc_event_tickets"
	// Table holds the table name of the hpevent in the database.
	Table = "hp_events"
	// MembersTable is the table that holds the members relation/edge.
	MembersTable = "hp_members"
	// MembersInverseTable is the table name for the HPMember entity.
	// It exists in this package in order to avoid circular dependency with the "hpmember" package.
	MembersInverseTable = "hp_members"
	// MembersColumn is the table column denoting the members relation/edge.
	MembersColumn = "hp_event_members"
	// ArtistsTable is the table that holds the artists relation/edge.
	ArtistsTable = "hp_artists"
	// ArtistsInverseTable is the table name for the HPArtist entity.
	// It exists in this package in order to avoid circular dependency with the "hpartist" package.
	ArtistsInverseTable = "hp_artists"
	// ArtistsColumn is the table column denoting the artists relation/edge.
	ArtistsColumn = "hp_event_artists"
	// HpfcEventTicketsTable is the table that holds the hpfc_event_tickets relation/edge.
	HpfcEventTicketsTable = "hpfc_event_tickets"
	// HpfcEventTicketsInverseTable is the table name for the HPFCEventTicket entity.
	// It exists in this package in order to avoid circular dependency with the "hpfceventticket" package.
	HpfcEventTicketsInverseTable = "hpfc_event_tickets"
	// HpfcEventTicketsColumn is the table column denoting the hpfc_event_tickets relation/edge.
	HpfcEventTicketsColumn = "hp_event_hpfc_event_tickets"
)

// Columns holds all SQL columns for hpevent fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldKey,
	FieldDisplayTitles,
	FieldOpenAt,
	FieldStartAt,
	FieldVenue,
	FieldPrefecture,
	FieldSource,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "hpapp.yssk22.dev/go/service/ent/runtime"
//
var (
	Hooks [1]ent.Hook
)

const DefaultSource enums.HPEventSource = "fc_scrape"

// SourceValidator is a validator for the "source" field enum values. It is called by the builders before save.
func SourceValidator(s enums.HPEventSource) error {
	switch s {
	case "fc_scrape":
		return nil
	default:
		return fmt.Errorf("hpevent: invalid enum value for source field: %q", s)
	}
}

// Order defines the ordering method for the HPEvent queries.
type Order func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByKey orders the results by the key field.
func ByKey(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldKey, opts...).ToFunc()
}

// ByOpenAt orders the results by the open_at field.
func ByOpenAt(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldOpenAt, opts...).ToFunc()
}

// ByStartAt orders the results by the start_at field.
func ByStartAt(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldStartAt, opts...).ToFunc()
}

// ByVenue orders the results by the venue field.
func ByVenue(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldVenue, opts...).ToFunc()
}

// ByPrefecture orders the results by the prefecture field.
func ByPrefecture(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldPrefecture, opts...).ToFunc()
}

// BySource orders the results by the source field.
func BySource(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldSource, opts...).ToFunc()
}

// ByMembersCount orders the results by members count.
func ByMembersCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMembersStep(), opts...)
	}
}

// ByMembers orders the results by members terms.
func ByMembers(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMembersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByArtistsCount orders the results by artists count.
func ByArtistsCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newArtistsStep(), opts...)
	}
}

// ByArtists orders the results by artists terms.
func ByArtists(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newArtistsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByHpfcEventTicketsCount orders the results by hpfc_event_tickets count.
func ByHpfcEventTicketsCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newHpfcEventTicketsStep(), opts...)
	}
}

// ByHpfcEventTickets orders the results by hpfc_event_tickets terms.
func ByHpfcEventTickets(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHpfcEventTicketsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newMembersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MembersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MembersTable, MembersColumn),
	)
}
func newArtistsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ArtistsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ArtistsTable, ArtistsColumn),
	)
}
func newHpfcEventTicketsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HpfcEventTicketsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, HpfcEventTicketsTable, HpfcEventTicketsColumn),
	)
}

var (
	// enums.HPEventSource must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enums.HPEventSource)(nil)
	// enums.HPEventSource must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enums.HPEventSource)(nil)
)
