// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yssk22/hpapp/go/service/ent/testent"
	"github.com/yssk22/hpapp/go/service/schema/enums"
	"github.com/yssk22/hpapp/go/service/schema/jsonfields"
)

// TestEntCreate is the builder for creating a TestEnt entity.
type TestEntCreate struct {
	config
	mutation *TestEntMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetStringField sets the "string_field" field.
func (tec *TestEntCreate) SetStringField(s string) *TestEntCreate {
	tec.mutation.SetStringField(s)
	return tec
}

// SetNillableStringField sets the "string_field" field if the given value is not nil.
func (tec *TestEntCreate) SetNillableStringField(s *string) *TestEntCreate {
	if s != nil {
		tec.SetStringField(*s)
	}
	return tec
}

// SetTextField sets the "text_field" field.
func (tec *TestEntCreate) SetTextField(s string) *TestEntCreate {
	tec.mutation.SetTextField(s)
	return tec
}

// SetNillableTextField sets the "text_field" field if the given value is not nil.
func (tec *TestEntCreate) SetNillableTextField(s *string) *TestEntCreate {
	if s != nil {
		tec.SetTextField(*s)
	}
	return tec
}

// SetBytesField sets the "bytes_field" field.
func (tec *TestEntCreate) SetBytesField(b []byte) *TestEntCreate {
	tec.mutation.SetBytesField(b)
	return tec
}

// SetBoolField sets the "bool_field" field.
func (tec *TestEntCreate) SetBoolField(b bool) *TestEntCreate {
	tec.mutation.SetBoolField(b)
	return tec
}

// SetNillableBoolField sets the "bool_field" field if the given value is not nil.
func (tec *TestEntCreate) SetNillableBoolField(b *bool) *TestEntCreate {
	if b != nil {
		tec.SetBoolField(*b)
	}
	return tec
}

// SetTimeField sets the "time_field" field.
func (tec *TestEntCreate) SetTimeField(t time.Time) *TestEntCreate {
	tec.mutation.SetTimeField(t)
	return tec
}

// SetNillableTimeField sets the "time_field" field if the given value is not nil.
func (tec *TestEntCreate) SetNillableTimeField(t *time.Time) *TestEntCreate {
	if t != nil {
		tec.SetTimeField(*t)
	}
	return tec
}

// SetIntField sets the "int_field" field.
func (tec *TestEntCreate) SetIntField(i int) *TestEntCreate {
	tec.mutation.SetIntField(i)
	return tec
}

// SetNillableIntField sets the "int_field" field if the given value is not nil.
func (tec *TestEntCreate) SetNillableIntField(i *int) *TestEntCreate {
	if i != nil {
		tec.SetIntField(*i)
	}
	return tec
}

// SetInt64Field sets the "int64_field" field.
func (tec *TestEntCreate) SetInt64Field(i int64) *TestEntCreate {
	tec.mutation.SetInt64Field(i)
	return tec
}

// SetNillableInt64Field sets the "int64_field" field if the given value is not nil.
func (tec *TestEntCreate) SetNillableInt64Field(i *int64) *TestEntCreate {
	if i != nil {
		tec.SetInt64Field(*i)
	}
	return tec
}

// SetFloatField sets the "float_field" field.
func (tec *TestEntCreate) SetFloatField(f float64) *TestEntCreate {
	tec.mutation.SetFloatField(f)
	return tec
}

// SetNillableFloatField sets the "float_field" field if the given value is not nil.
func (tec *TestEntCreate) SetNillableFloatField(f *float64) *TestEntCreate {
	if f != nil {
		tec.SetFloatField(*f)
	}
	return tec
}

// SetJSONField sets the "json_field" field.
func (tec *TestEntCreate) SetJSONField(jj *jsonfields.TestJSON) *TestEntCreate {
	tec.mutation.SetJSONField(jj)
	return tec
}

// SetEnumField sets the "enum_field" field.
func (tec *TestEntCreate) SetEnumField(ee enums.TestEnum) *TestEntCreate {
	tec.mutation.SetEnumField(ee)
	return tec
}

// SetNillableEnumField sets the "enum_field" field if the given value is not nil.
func (tec *TestEntCreate) SetNillableEnumField(ee *enums.TestEnum) *TestEntCreate {
	if ee != nil {
		tec.SetEnumField(*ee)
	}
	return tec
}

// Mutation returns the TestEntMutation object of the builder.
func (tec *TestEntCreate) Mutation() *TestEntMutation {
	return tec.mutation
}

// Save creates the TestEnt in the database.
func (tec *TestEntCreate) Save(ctx context.Context) (*TestEnt, error) {
	tec.defaults()
	return withHooks[*TestEnt, TestEntMutation](ctx, tec.sqlSave, tec.mutation, tec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tec *TestEntCreate) SaveX(ctx context.Context) *TestEnt {
	v, err := tec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tec *TestEntCreate) Exec(ctx context.Context) error {
	_, err := tec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tec *TestEntCreate) ExecX(ctx context.Context) {
	if err := tec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tec *TestEntCreate) defaults() {
	if _, ok := tec.mutation.StringField(); !ok {
		v := testent.DefaultStringField
		tec.mutation.SetStringField(v)
	}
	if _, ok := tec.mutation.TextField(); !ok {
		v := testent.DefaultTextField
		tec.mutation.SetTextField(v)
	}
	if _, ok := tec.mutation.BytesField(); !ok {
		v := testent.DefaultBytesField
		tec.mutation.SetBytesField(v)
	}
	if _, ok := tec.mutation.BoolField(); !ok {
		v := testent.DefaultBoolField
		tec.mutation.SetBoolField(v)
	}
	if _, ok := tec.mutation.TimeField(); !ok {
		v := testent.DefaultTimeField
		tec.mutation.SetTimeField(v)
	}
	if _, ok := tec.mutation.IntField(); !ok {
		v := testent.DefaultIntField
		tec.mutation.SetIntField(v)
	}
	if _, ok := tec.mutation.Int64Field(); !ok {
		v := testent.DefaultInt64Field
		tec.mutation.SetInt64Field(v)
	}
	if _, ok := tec.mutation.FloatField(); !ok {
		v := testent.DefaultFloatField
		tec.mutation.SetFloatField(v)
	}
	if _, ok := tec.mutation.JSONField(); !ok {
		v := testent.DefaultJSONField
		tec.mutation.SetJSONField(v)
	}
	if _, ok := tec.mutation.EnumField(); !ok {
		v := testent.DefaultEnumField
		tec.mutation.SetEnumField(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tec *TestEntCreate) check() error {
	if v, ok := tec.mutation.EnumField(); ok {
		if err := testent.EnumFieldValidator(v); err != nil {
			return &ValidationError{Name: "enum_field", err: fmt.Errorf(`ent: validator failed for field "TestEnt.enum_field": %w`, err)}
		}
	}
	return nil
}

func (tec *TestEntCreate) sqlSave(ctx context.Context) (*TestEnt, error) {
	if err := tec.check(); err != nil {
		return nil, err
	}
	_node, _spec := tec.createSpec()
	if err := sqlgraph.CreateNode(ctx, tec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tec.mutation.id = &_node.ID
	tec.mutation.done = true
	return _node, nil
}

func (tec *TestEntCreate) createSpec() (*TestEnt, *sqlgraph.CreateSpec) {
	var (
		_node = &TestEnt{config: tec.config}
		_spec = sqlgraph.NewCreateSpec(testent.Table, sqlgraph.NewFieldSpec(testent.FieldID, field.TypeInt))
	)
	_spec.OnConflict = tec.conflict
	if value, ok := tec.mutation.StringField(); ok {
		_spec.SetField(testent.FieldStringField, field.TypeString, value)
		_node.StringField = &value
	}
	if value, ok := tec.mutation.TextField(); ok {
		_spec.SetField(testent.FieldTextField, field.TypeString, value)
		_node.TextField = &value
	}
	if value, ok := tec.mutation.BytesField(); ok {
		_spec.SetField(testent.FieldBytesField, field.TypeBytes, value)
		_node.BytesField = &value
	}
	if value, ok := tec.mutation.BoolField(); ok {
		_spec.SetField(testent.FieldBoolField, field.TypeBool, value)
		_node.BoolField = &value
	}
	if value, ok := tec.mutation.TimeField(); ok {
		_spec.SetField(testent.FieldTimeField, field.TypeTime, value)
		_node.TimeField = &value
	}
	if value, ok := tec.mutation.IntField(); ok {
		_spec.SetField(testent.FieldIntField, field.TypeInt, value)
		_node.IntField = &value
	}
	if value, ok := tec.mutation.Int64Field(); ok {
		_spec.SetField(testent.FieldInt64Field, field.TypeInt64, value)
		_node.Int64Field = &value
	}
	if value, ok := tec.mutation.FloatField(); ok {
		_spec.SetField(testent.FieldFloatField, field.TypeFloat64, value)
		_node.FloatField = &value
	}
	if value, ok := tec.mutation.JSONField(); ok {
		_spec.SetField(testent.FieldJSONField, field.TypeJSON, value)
		_node.JSONField = value
	}
	if value, ok := tec.mutation.EnumField(); ok {
		_spec.SetField(testent.FieldEnumField, field.TypeEnum, value)
		_node.EnumField = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TestEnt.Create().
//		SetStringField(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TestEntUpsert) {
//			SetStringField(v+v).
//		}).
//		Exec(ctx)
//
func (tec *TestEntCreate) OnConflict(opts ...sql.ConflictOption) *TestEntUpsertOne {
	tec.conflict = opts
	return &TestEntUpsertOne{
		create: tec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TestEnt.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (tec *TestEntCreate) OnConflictColumns(columns ...string) *TestEntUpsertOne {
	tec.conflict = append(tec.conflict, sql.ConflictColumns(columns...))
	return &TestEntUpsertOne{
		create: tec,
	}
}

type (
	// TestEntUpsertOne is the builder for "upsert"-ing
	//  one TestEnt node.
	TestEntUpsertOne struct {
		create *TestEntCreate
	}

	// TestEntUpsert is the "OnConflict" setter.
	TestEntUpsert struct {
		*sql.UpdateSet
	}
)

// SetStringField sets the "string_field" field.
func (u *TestEntUpsert) SetStringField(v string) *TestEntUpsert {
	u.Set(testent.FieldStringField, v)
	return u
}

// UpdateStringField sets the "string_field" field to the value that was provided on create.
func (u *TestEntUpsert) UpdateStringField() *TestEntUpsert {
	u.SetExcluded(testent.FieldStringField)
	return u
}

// ClearStringField clears the value of the "string_field" field.
func (u *TestEntUpsert) ClearStringField() *TestEntUpsert {
	u.SetNull(testent.FieldStringField)
	return u
}

// SetTextField sets the "text_field" field.
func (u *TestEntUpsert) SetTextField(v string) *TestEntUpsert {
	u.Set(testent.FieldTextField, v)
	return u
}

// UpdateTextField sets the "text_field" field to the value that was provided on create.
func (u *TestEntUpsert) UpdateTextField() *TestEntUpsert {
	u.SetExcluded(testent.FieldTextField)
	return u
}

// ClearTextField clears the value of the "text_field" field.
func (u *TestEntUpsert) ClearTextField() *TestEntUpsert {
	u.SetNull(testent.FieldTextField)
	return u
}

// SetBytesField sets the "bytes_field" field.
func (u *TestEntUpsert) SetBytesField(v []byte) *TestEntUpsert {
	u.Set(testent.FieldBytesField, v)
	return u
}

// UpdateBytesField sets the "bytes_field" field to the value that was provided on create.
func (u *TestEntUpsert) UpdateBytesField() *TestEntUpsert {
	u.SetExcluded(testent.FieldBytesField)
	return u
}

// ClearBytesField clears the value of the "bytes_field" field.
func (u *TestEntUpsert) ClearBytesField() *TestEntUpsert {
	u.SetNull(testent.FieldBytesField)
	return u
}

// SetBoolField sets the "bool_field" field.
func (u *TestEntUpsert) SetBoolField(v bool) *TestEntUpsert {
	u.Set(testent.FieldBoolField, v)
	return u
}

// UpdateBoolField sets the "bool_field" field to the value that was provided on create.
func (u *TestEntUpsert) UpdateBoolField() *TestEntUpsert {
	u.SetExcluded(testent.FieldBoolField)
	return u
}

// ClearBoolField clears the value of the "bool_field" field.
func (u *TestEntUpsert) ClearBoolField() *TestEntUpsert {
	u.SetNull(testent.FieldBoolField)
	return u
}

// SetTimeField sets the "time_field" field.
func (u *TestEntUpsert) SetTimeField(v time.Time) *TestEntUpsert {
	u.Set(testent.FieldTimeField, v)
	return u
}

// UpdateTimeField sets the "time_field" field to the value that was provided on create.
func (u *TestEntUpsert) UpdateTimeField() *TestEntUpsert {
	u.SetExcluded(testent.FieldTimeField)
	return u
}

// ClearTimeField clears the value of the "time_field" field.
func (u *TestEntUpsert) ClearTimeField() *TestEntUpsert {
	u.SetNull(testent.FieldTimeField)
	return u
}

// SetIntField sets the "int_field" field.
func (u *TestEntUpsert) SetIntField(v int) *TestEntUpsert {
	u.Set(testent.FieldIntField, v)
	return u
}

// UpdateIntField sets the "int_field" field to the value that was provided on create.
func (u *TestEntUpsert) UpdateIntField() *TestEntUpsert {
	u.SetExcluded(testent.FieldIntField)
	return u
}

// AddIntField adds v to the "int_field" field.
func (u *TestEntUpsert) AddIntField(v int) *TestEntUpsert {
	u.Add(testent.FieldIntField, v)
	return u
}

// ClearIntField clears the value of the "int_field" field.
func (u *TestEntUpsert) ClearIntField() *TestEntUpsert {
	u.SetNull(testent.FieldIntField)
	return u
}

// SetInt64Field sets the "int64_field" field.
func (u *TestEntUpsert) SetInt64Field(v int64) *TestEntUpsert {
	u.Set(testent.FieldInt64Field, v)
	return u
}

// UpdateInt64Field sets the "int64_field" field to the value that was provided on create.
func (u *TestEntUpsert) UpdateInt64Field() *TestEntUpsert {
	u.SetExcluded(testent.FieldInt64Field)
	return u
}

// AddInt64Field adds v to the "int64_field" field.
func (u *TestEntUpsert) AddInt64Field(v int64) *TestEntUpsert {
	u.Add(testent.FieldInt64Field, v)
	return u
}

// ClearInt64Field clears the value of the "int64_field" field.
func (u *TestEntUpsert) ClearInt64Field() *TestEntUpsert {
	u.SetNull(testent.FieldInt64Field)
	return u
}

// SetFloatField sets the "float_field" field.
func (u *TestEntUpsert) SetFloatField(v float64) *TestEntUpsert {
	u.Set(testent.FieldFloatField, v)
	return u
}

// UpdateFloatField sets the "float_field" field to the value that was provided on create.
func (u *TestEntUpsert) UpdateFloatField() *TestEntUpsert {
	u.SetExcluded(testent.FieldFloatField)
	return u
}

// AddFloatField adds v to the "float_field" field.
func (u *TestEntUpsert) AddFloatField(v float64) *TestEntUpsert {
	u.Add(testent.FieldFloatField, v)
	return u
}

// ClearFloatField clears the value of the "float_field" field.
func (u *TestEntUpsert) ClearFloatField() *TestEntUpsert {
	u.SetNull(testent.FieldFloatField)
	return u
}

// SetJSONField sets the "json_field" field.
func (u *TestEntUpsert) SetJSONField(v *jsonfields.TestJSON) *TestEntUpsert {
	u.Set(testent.FieldJSONField, v)
	return u
}

// UpdateJSONField sets the "json_field" field to the value that was provided on create.
func (u *TestEntUpsert) UpdateJSONField() *TestEntUpsert {
	u.SetExcluded(testent.FieldJSONField)
	return u
}

// ClearJSONField clears the value of the "json_field" field.
func (u *TestEntUpsert) ClearJSONField() *TestEntUpsert {
	u.SetNull(testent.FieldJSONField)
	return u
}

// SetEnumField sets the "enum_field" field.
func (u *TestEntUpsert) SetEnumField(v enums.TestEnum) *TestEntUpsert {
	u.Set(testent.FieldEnumField, v)
	return u
}

// UpdateEnumField sets the "enum_field" field to the value that was provided on create.
func (u *TestEntUpsert) UpdateEnumField() *TestEntUpsert {
	u.SetExcluded(testent.FieldEnumField)
	return u
}

// ClearEnumField clears the value of the "enum_field" field.
func (u *TestEntUpsert) ClearEnumField() *TestEntUpsert {
	u.SetNull(testent.FieldEnumField)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.TestEnt.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *TestEntUpsertOne) UpdateNewValues() *TestEntUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.TestEnt.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *TestEntUpsertOne) Ignore() *TestEntUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TestEntUpsertOne) DoNothing() *TestEntUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TestEntCreate.OnConflict
// documentation for more info.
func (u *TestEntUpsertOne) Update(set func(*TestEntUpsert)) *TestEntUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TestEntUpsert{UpdateSet: update})
	}))
	return u
}

// SetStringField sets the "string_field" field.
func (u *TestEntUpsertOne) SetStringField(v string) *TestEntUpsertOne {
	return u.Update(func(s *TestEntUpsert) {
		s.SetStringField(v)
	})
}

// UpdateStringField sets the "string_field" field to the value that was provided on create.
func (u *TestEntUpsertOne) UpdateStringField() *TestEntUpsertOne {
	return u.Update(func(s *TestEntUpsert) {
		s.UpdateStringField()
	})
}

// ClearStringField clears the value of the "string_field" field.
func (u *TestEntUpsertOne) ClearStringField() *TestEntUpsertOne {
	return u.Update(func(s *TestEntUpsert) {
		s.ClearStringField()
	})
}

// SetTextField sets the "text_field" field.
func (u *TestEntUpsertOne) SetTextField(v string) *TestEntUpsertOne {
	return u.Update(func(s *TestEntUpsert) {
		s.SetTextField(v)
	})
}

// UpdateTextField sets the "text_field" field to the value that was provided on create.
func (u *TestEntUpsertOne) UpdateTextField() *TestEntUpsertOne {
	return u.Update(func(s *TestEntUpsert) {
		s.UpdateTextField()
	})
}

// ClearTextField clears the value of the "text_field" field.
func (u *TestEntUpsertOne) ClearTextField() *TestEntUpsertOne {
	return u.Update(func(s *TestEntUpsert) {
		s.ClearTextField()
	})
}

// SetBytesField sets the "bytes_field" field.
func (u *TestEntUpsertOne) SetBytesField(v []byte) *TestEntUpsertOne {
	return u.Update(func(s *TestEntUpsert) {
		s.SetBytesField(v)
	})
}

// UpdateBytesField sets the "bytes_field" field to the value that was provided on create.
func (u *TestEntUpsertOne) UpdateBytesField() *TestEntUpsertOne {
	return u.Update(func(s *TestEntUpsert) {
		s.UpdateBytesField()
	})
}

// ClearBytesField clears the value of the "bytes_field" field.
func (u *TestEntUpsertOne) ClearBytesField() *TestEntUpsertOne {
	return u.Update(func(s *TestEntUpsert) {
		s.ClearBytesField()
	})
}

// SetBoolField sets the "bool_field" field.
func (u *TestEntUpsertOne) SetBoolField(v bool) *TestEntUpsertOne {
	return u.Update(func(s *TestEntUpsert) {
		s.SetBoolField(v)
	})
}

// UpdateBoolField sets the "bool_field" field to the value that was provided on create.
func (u *TestEntUpsertOne) UpdateBoolField() *TestEntUpsertOne {
	return u.Update(func(s *TestEntUpsert) {
		s.UpdateBoolField()
	})
}

// ClearBoolField clears the value of the "bool_field" field.
func (u *TestEntUpsertOne) ClearBoolField() *TestEntUpsertOne {
	return u.Update(func(s *TestEntUpsert) {
		s.ClearBoolField()
	})
}

// SetTimeField sets the "time_field" field.
func (u *TestEntUpsertOne) SetTimeField(v time.Time) *TestEntUpsertOne {
	return u.Update(func(s *TestEntUpsert) {
		s.SetTimeField(v)
	})
}

// UpdateTimeField sets the "time_field" field to the value that was provided on create.
func (u *TestEntUpsertOne) UpdateTimeField() *TestEntUpsertOne {
	return u.Update(func(s *TestEntUpsert) {
		s.UpdateTimeField()
	})
}

// ClearTimeField clears the value of the "time_field" field.
func (u *TestEntUpsertOne) ClearTimeField() *TestEntUpsertOne {
	return u.Update(func(s *TestEntUpsert) {
		s.ClearTimeField()
	})
}

// SetIntField sets the "int_field" field.
func (u *TestEntUpsertOne) SetIntField(v int) *TestEntUpsertOne {
	return u.Update(func(s *TestEntUpsert) {
		s.SetIntField(v)
	})
}

// AddIntField adds v to the "int_field" field.
func (u *TestEntUpsertOne) AddIntField(v int) *TestEntUpsertOne {
	return u.Update(func(s *TestEntUpsert) {
		s.AddIntField(v)
	})
}

// UpdateIntField sets the "int_field" field to the value that was provided on create.
func (u *TestEntUpsertOne) UpdateIntField() *TestEntUpsertOne {
	return u.Update(func(s *TestEntUpsert) {
		s.UpdateIntField()
	})
}

// ClearIntField clears the value of the "int_field" field.
func (u *TestEntUpsertOne) ClearIntField() *TestEntUpsertOne {
	return u.Update(func(s *TestEntUpsert) {
		s.ClearIntField()
	})
}

// SetInt64Field sets the "int64_field" field.
func (u *TestEntUpsertOne) SetInt64Field(v int64) *TestEntUpsertOne {
	return u.Update(func(s *TestEntUpsert) {
		s.SetInt64Field(v)
	})
}

// AddInt64Field adds v to the "int64_field" field.
func (u *TestEntUpsertOne) AddInt64Field(v int64) *TestEntUpsertOne {
	return u.Update(func(s *TestEntUpsert) {
		s.AddInt64Field(v)
	})
}

// UpdateInt64Field sets the "int64_field" field to the value that was provided on create.
func (u *TestEntUpsertOne) UpdateInt64Field() *TestEntUpsertOne {
	return u.Update(func(s *TestEntUpsert) {
		s.UpdateInt64Field()
	})
}

// ClearInt64Field clears the value of the "int64_field" field.
func (u *TestEntUpsertOne) ClearInt64Field() *TestEntUpsertOne {
	return u.Update(func(s *TestEntUpsert) {
		s.ClearInt64Field()
	})
}

// SetFloatField sets the "float_field" field.
func (u *TestEntUpsertOne) SetFloatField(v float64) *TestEntUpsertOne {
	return u.Update(func(s *TestEntUpsert) {
		s.SetFloatField(v)
	})
}

// AddFloatField adds v to the "float_field" field.
func (u *TestEntUpsertOne) AddFloatField(v float64) *TestEntUpsertOne {
	return u.Update(func(s *TestEntUpsert) {
		s.AddFloatField(v)
	})
}

// UpdateFloatField sets the "float_field" field to the value that was provided on create.
func (u *TestEntUpsertOne) UpdateFloatField() *TestEntUpsertOne {
	return u.Update(func(s *TestEntUpsert) {
		s.UpdateFloatField()
	})
}

// ClearFloatField clears the value of the "float_field" field.
func (u *TestEntUpsertOne) ClearFloatField() *TestEntUpsertOne {
	return u.Update(func(s *TestEntUpsert) {
		s.ClearFloatField()
	})
}

// SetJSONField sets the "json_field" field.
func (u *TestEntUpsertOne) SetJSONField(v *jsonfields.TestJSON) *TestEntUpsertOne {
	return u.Update(func(s *TestEntUpsert) {
		s.SetJSONField(v)
	})
}

// UpdateJSONField sets the "json_field" field to the value that was provided on create.
func (u *TestEntUpsertOne) UpdateJSONField() *TestEntUpsertOne {
	return u.Update(func(s *TestEntUpsert) {
		s.UpdateJSONField()
	})
}

// ClearJSONField clears the value of the "json_field" field.
func (u *TestEntUpsertOne) ClearJSONField() *TestEntUpsertOne {
	return u.Update(func(s *TestEntUpsert) {
		s.ClearJSONField()
	})
}

// SetEnumField sets the "enum_field" field.
func (u *TestEntUpsertOne) SetEnumField(v enums.TestEnum) *TestEntUpsertOne {
	return u.Update(func(s *TestEntUpsert) {
		s.SetEnumField(v)
	})
}

// UpdateEnumField sets the "enum_field" field to the value that was provided on create.
func (u *TestEntUpsertOne) UpdateEnumField() *TestEntUpsertOne {
	return u.Update(func(s *TestEntUpsert) {
		s.UpdateEnumField()
	})
}

// ClearEnumField clears the value of the "enum_field" field.
func (u *TestEntUpsertOne) ClearEnumField() *TestEntUpsertOne {
	return u.Update(func(s *TestEntUpsert) {
		s.ClearEnumField()
	})
}

// Exec executes the query.
func (u *TestEntUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TestEntCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TestEntUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TestEntUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TestEntUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TestEntCreateBulk is the builder for creating many TestEnt entities in bulk.
type TestEntCreateBulk struct {
	config
	builders []*TestEntCreate
	conflict []sql.ConflictOption
}

// Save creates the TestEnt entities in the database.
func (tecb *TestEntCreateBulk) Save(ctx context.Context) ([]*TestEnt, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tecb.builders))
	nodes := make([]*TestEnt, len(tecb.builders))
	mutators := make([]Mutator, len(tecb.builders))
	for i := range tecb.builders {
		func(i int, root context.Context) {
			builder := tecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TestEntMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tecb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tecb *TestEntCreateBulk) SaveX(ctx context.Context) []*TestEnt {
	v, err := tecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tecb *TestEntCreateBulk) Exec(ctx context.Context) error {
	_, err := tecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tecb *TestEntCreateBulk) ExecX(ctx context.Context) {
	if err := tecb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TestEnt.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TestEntUpsert) {
//			SetStringField(v+v).
//		}).
//		Exec(ctx)
//
func (tecb *TestEntCreateBulk) OnConflict(opts ...sql.ConflictOption) *TestEntUpsertBulk {
	tecb.conflict = opts
	return &TestEntUpsertBulk{
		create: tecb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TestEnt.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (tecb *TestEntCreateBulk) OnConflictColumns(columns ...string) *TestEntUpsertBulk {
	tecb.conflict = append(tecb.conflict, sql.ConflictColumns(columns...))
	return &TestEntUpsertBulk{
		create: tecb,
	}
}

// TestEntUpsertBulk is the builder for "upsert"-ing
// a bulk of TestEnt nodes.
type TestEntUpsertBulk struct {
	create *TestEntCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TestEnt.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *TestEntUpsertBulk) UpdateNewValues() *TestEntUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TestEnt.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *TestEntUpsertBulk) Ignore() *TestEntUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TestEntUpsertBulk) DoNothing() *TestEntUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TestEntCreateBulk.OnConflict
// documentation for more info.
func (u *TestEntUpsertBulk) Update(set func(*TestEntUpsert)) *TestEntUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TestEntUpsert{UpdateSet: update})
	}))
	return u
}

// SetStringField sets the "string_field" field.
func (u *TestEntUpsertBulk) SetStringField(v string) *TestEntUpsertBulk {
	return u.Update(func(s *TestEntUpsert) {
		s.SetStringField(v)
	})
}

// UpdateStringField sets the "string_field" field to the value that was provided on create.
func (u *TestEntUpsertBulk) UpdateStringField() *TestEntUpsertBulk {
	return u.Update(func(s *TestEntUpsert) {
		s.UpdateStringField()
	})
}

// ClearStringField clears the value of the "string_field" field.
func (u *TestEntUpsertBulk) ClearStringField() *TestEntUpsertBulk {
	return u.Update(func(s *TestEntUpsert) {
		s.ClearStringField()
	})
}

// SetTextField sets the "text_field" field.
func (u *TestEntUpsertBulk) SetTextField(v string) *TestEntUpsertBulk {
	return u.Update(func(s *TestEntUpsert) {
		s.SetTextField(v)
	})
}

// UpdateTextField sets the "text_field" field to the value that was provided on create.
func (u *TestEntUpsertBulk) UpdateTextField() *TestEntUpsertBulk {
	return u.Update(func(s *TestEntUpsert) {
		s.UpdateTextField()
	})
}

// ClearTextField clears the value of the "text_field" field.
func (u *TestEntUpsertBulk) ClearTextField() *TestEntUpsertBulk {
	return u.Update(func(s *TestEntUpsert) {
		s.ClearTextField()
	})
}

// SetBytesField sets the "bytes_field" field.
func (u *TestEntUpsertBulk) SetBytesField(v []byte) *TestEntUpsertBulk {
	return u.Update(func(s *TestEntUpsert) {
		s.SetBytesField(v)
	})
}

// UpdateBytesField sets the "bytes_field" field to the value that was provided on create.
func (u *TestEntUpsertBulk) UpdateBytesField() *TestEntUpsertBulk {
	return u.Update(func(s *TestEntUpsert) {
		s.UpdateBytesField()
	})
}

// ClearBytesField clears the value of the "bytes_field" field.
func (u *TestEntUpsertBulk) ClearBytesField() *TestEntUpsertBulk {
	return u.Update(func(s *TestEntUpsert) {
		s.ClearBytesField()
	})
}

// SetBoolField sets the "bool_field" field.
func (u *TestEntUpsertBulk) SetBoolField(v bool) *TestEntUpsertBulk {
	return u.Update(func(s *TestEntUpsert) {
		s.SetBoolField(v)
	})
}

// UpdateBoolField sets the "bool_field" field to the value that was provided on create.
func (u *TestEntUpsertBulk) UpdateBoolField() *TestEntUpsertBulk {
	return u.Update(func(s *TestEntUpsert) {
		s.UpdateBoolField()
	})
}

// ClearBoolField clears the value of the "bool_field" field.
func (u *TestEntUpsertBulk) ClearBoolField() *TestEntUpsertBulk {
	return u.Update(func(s *TestEntUpsert) {
		s.ClearBoolField()
	})
}

// SetTimeField sets the "time_field" field.
func (u *TestEntUpsertBulk) SetTimeField(v time.Time) *TestEntUpsertBulk {
	return u.Update(func(s *TestEntUpsert) {
		s.SetTimeField(v)
	})
}

// UpdateTimeField sets the "time_field" field to the value that was provided on create.
func (u *TestEntUpsertBulk) UpdateTimeField() *TestEntUpsertBulk {
	return u.Update(func(s *TestEntUpsert) {
		s.UpdateTimeField()
	})
}

// ClearTimeField clears the value of the "time_field" field.
func (u *TestEntUpsertBulk) ClearTimeField() *TestEntUpsertBulk {
	return u.Update(func(s *TestEntUpsert) {
		s.ClearTimeField()
	})
}

// SetIntField sets the "int_field" field.
func (u *TestEntUpsertBulk) SetIntField(v int) *TestEntUpsertBulk {
	return u.Update(func(s *TestEntUpsert) {
		s.SetIntField(v)
	})
}

// AddIntField adds v to the "int_field" field.
func (u *TestEntUpsertBulk) AddIntField(v int) *TestEntUpsertBulk {
	return u.Update(func(s *TestEntUpsert) {
		s.AddIntField(v)
	})
}

// UpdateIntField sets the "int_field" field to the value that was provided on create.
func (u *TestEntUpsertBulk) UpdateIntField() *TestEntUpsertBulk {
	return u.Update(func(s *TestEntUpsert) {
		s.UpdateIntField()
	})
}

// ClearIntField clears the value of the "int_field" field.
func (u *TestEntUpsertBulk) ClearIntField() *TestEntUpsertBulk {
	return u.Update(func(s *TestEntUpsert) {
		s.ClearIntField()
	})
}

// SetInt64Field sets the "int64_field" field.
func (u *TestEntUpsertBulk) SetInt64Field(v int64) *TestEntUpsertBulk {
	return u.Update(func(s *TestEntUpsert) {
		s.SetInt64Field(v)
	})
}

// AddInt64Field adds v to the "int64_field" field.
func (u *TestEntUpsertBulk) AddInt64Field(v int64) *TestEntUpsertBulk {
	return u.Update(func(s *TestEntUpsert) {
		s.AddInt64Field(v)
	})
}

// UpdateInt64Field sets the "int64_field" field to the value that was provided on create.
func (u *TestEntUpsertBulk) UpdateInt64Field() *TestEntUpsertBulk {
	return u.Update(func(s *TestEntUpsert) {
		s.UpdateInt64Field()
	})
}

// ClearInt64Field clears the value of the "int64_field" field.
func (u *TestEntUpsertBulk) ClearInt64Field() *TestEntUpsertBulk {
	return u.Update(func(s *TestEntUpsert) {
		s.ClearInt64Field()
	})
}

// SetFloatField sets the "float_field" field.
func (u *TestEntUpsertBulk) SetFloatField(v float64) *TestEntUpsertBulk {
	return u.Update(func(s *TestEntUpsert) {
		s.SetFloatField(v)
	})
}

// AddFloatField adds v to the "float_field" field.
func (u *TestEntUpsertBulk) AddFloatField(v float64) *TestEntUpsertBulk {
	return u.Update(func(s *TestEntUpsert) {
		s.AddFloatField(v)
	})
}

// UpdateFloatField sets the "float_field" field to the value that was provided on create.
func (u *TestEntUpsertBulk) UpdateFloatField() *TestEntUpsertBulk {
	return u.Update(func(s *TestEntUpsert) {
		s.UpdateFloatField()
	})
}

// ClearFloatField clears the value of the "float_field" field.
func (u *TestEntUpsertBulk) ClearFloatField() *TestEntUpsertBulk {
	return u.Update(func(s *TestEntUpsert) {
		s.ClearFloatField()
	})
}

// SetJSONField sets the "json_field" field.
func (u *TestEntUpsertBulk) SetJSONField(v *jsonfields.TestJSON) *TestEntUpsertBulk {
	return u.Update(func(s *TestEntUpsert) {
		s.SetJSONField(v)
	})
}

// UpdateJSONField sets the "json_field" field to the value that was provided on create.
func (u *TestEntUpsertBulk) UpdateJSONField() *TestEntUpsertBulk {
	return u.Update(func(s *TestEntUpsert) {
		s.UpdateJSONField()
	})
}

// ClearJSONField clears the value of the "json_field" field.
func (u *TestEntUpsertBulk) ClearJSONField() *TestEntUpsertBulk {
	return u.Update(func(s *TestEntUpsert) {
		s.ClearJSONField()
	})
}

// SetEnumField sets the "enum_field" field.
func (u *TestEntUpsertBulk) SetEnumField(v enums.TestEnum) *TestEntUpsertBulk {
	return u.Update(func(s *TestEntUpsert) {
		s.SetEnumField(v)
	})
}

// UpdateEnumField sets the "enum_field" field to the value that was provided on create.
func (u *TestEntUpsertBulk) UpdateEnumField() *TestEntUpsertBulk {
	return u.Update(func(s *TestEntUpsert) {
		s.UpdateEnumField()
	})
}

// ClearEnumField clears the value of the "enum_field" field.
func (u *TestEntUpsertBulk) ClearEnumField() *TestEntUpsertBulk {
	return u.Update(func(s *TestEntUpsert) {
		s.ClearEnumField()
	})
}

// Exec executes the query.
func (u *TestEntUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TestEntCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TestEntCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TestEntUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
