// Code generated by ent, DO NOT EDIT.

package hpviewhistory

import (
	"fmt"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/99designs/gqlgen/graphql"
	"hpapp.yssk22.dev/go/service/schema/enums"
)

const (
	// Label holds the string label denoting the hpviewhistory type in the database.
	Label = "hp_view_history"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldContentID holds the string denoting the content_id field in the database.
	FieldContentID = "content_id"
	// FieldContentPostAt holds the string denoting the content_post_at field in the database.
	FieldContentPostAt = "content_post_at"
	// FieldAssetType holds the string denoting the asset_type field in the database.
	FieldAssetType = "asset_type"
	// FieldIsFavorite holds the string denoting the is_favorite field in the database.
	FieldIsFavorite = "is_favorite"
	// FieldOwnerUserID holds the string denoting the owner_user_id field in the database.
	FieldOwnerUserID = "user_hpview_history"
	// EdgeFeed holds the string denoting the feed edge name in mutations.
	EdgeFeed = "feed"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the hpviewhistory in the database.
	Table = "hp_view_histories"
	// FeedTable is the table that holds the feed relation/edge.
	FeedTable = "hp_view_histories"
	// FeedInverseTable is the table name for the HPFeedItem entity.
	// It exists in this package in order to avoid circular dependency with the "hpfeeditem" package.
	FeedInverseTable = "hp_feed_items"
	// FeedColumn is the table column denoting the feed relation/edge.
	FeedColumn = "hp_feed_item_view_histories"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "hp_view_histories"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_hpview_history"
)

// Columns holds all SQL columns for hpviewhistory fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldContentID,
	FieldContentPostAt,
	FieldAssetType,
	FieldIsFavorite,
	FieldOwnerUserID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "hp_view_histories"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"hp_feed_item_view_histories",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "hpapp.yssk22.dev/go/service/ent/runtime"
//
var (
	Hooks  [2]ent.Hook
	Policy ent.Policy
	// DefaultIsFavorite holds the default value on creation for the "is_favorite" field.
	DefaultIsFavorite bool
)

// AssetTypeValidator is a validator for the "asset_type" field enum values. It is called by the builders before save.
func AssetTypeValidator(at enums.HPAssetType) error {
	switch at {
	case "ameblo", "elineupmall", "instagram", "tiktok", "twitter", "youtube":
		return nil
	default:
		return fmt.Errorf("hpviewhistory: invalid enum value for asset_type field: %q", at)
	}
}

// Order defines the ordering method for the HPViewHistory queries.
type Order func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByContentID orders the results by the content_id field.
func ByContentID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldContentID, opts...).ToFunc()
}

// ByContentPostAt orders the results by the content_post_at field.
func ByContentPostAt(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldContentPostAt, opts...).ToFunc()
}

// ByAssetType orders the results by the asset_type field.
func ByAssetType(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldAssetType, opts...).ToFunc()
}

// ByIsFavorite orders the results by the is_favorite field.
func ByIsFavorite(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldIsFavorite, opts...).ToFunc()
}

// ByOwnerUserID orders the results by the owner_user_id field.
func ByOwnerUserID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldOwnerUserID, opts...).ToFunc()
}

// ByFeedField orders the results by feed field.
func ByFeedField(field string, opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFeedStep(), sql.OrderByField(field, opts...))
	}
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}
func newFeedStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FeedInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, FeedTable, FeedColumn),
	)
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}

var (
	// enums.HPAssetType must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enums.HPAssetType)(nil)
	// enums.HPAssetType must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enums.HPAssetType)(nil)
)
