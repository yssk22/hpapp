// Code generated by ent, DO NOT EDIT.

package hpviewhistory

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"hpapp.yssk22.dev/go/service/ent/predicate"
	"hpapp.yssk22.dev/go/service/schema/enums"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.HPViewHistory {
	return predicate.HPViewHistory(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.HPViewHistory {
	return predicate.HPViewHistory(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.HPViewHistory {
	return predicate.HPViewHistory(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.HPViewHistory {
	return predicate.HPViewHistory(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.HPViewHistory {
	return predicate.HPViewHistory(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.HPViewHistory {
	return predicate.HPViewHistory(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.HPViewHistory {
	return predicate.HPViewHistory(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.HPViewHistory {
	return predicate.HPViewHistory(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.HPViewHistory {
	return predicate.HPViewHistory(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.HPViewHistory {
	return predicate.HPViewHistory(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.HPViewHistory {
	return predicate.HPViewHistory(sql.FieldEQ(FieldUpdatedAt, v))
}

// ContentID applies equality check predicate on the "content_id" field. It's identical to ContentIDEQ.
func ContentID(v int) predicate.HPViewHistory {
	return predicate.HPViewHistory(sql.FieldEQ(FieldContentID, v))
}

// ContentPostAt applies equality check predicate on the "content_post_at" field. It's identical to ContentPostAtEQ.
func ContentPostAt(v time.Time) predicate.HPViewHistory {
	return predicate.HPViewHistory(sql.FieldEQ(FieldContentPostAt, v))
}

// IsFavorite applies equality check predicate on the "is_favorite" field. It's identical to IsFavoriteEQ.
func IsFavorite(v bool) predicate.HPViewHistory {
	return predicate.HPViewHistory(sql.FieldEQ(FieldIsFavorite, v))
}

// OwnerUserID applies equality check predicate on the "owner_user_id" field. It's identical to OwnerUserIDEQ.
func OwnerUserID(v int) predicate.HPViewHistory {
	return predicate.HPViewHistory(sql.FieldEQ(FieldOwnerUserID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.HPViewHistory {
	return predicate.HPViewHistory(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.HPViewHistory {
	return predicate.HPViewHistory(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.HPViewHistory {
	return predicate.HPViewHistory(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.HPViewHistory {
	return predicate.HPViewHistory(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.HPViewHistory {
	return predicate.HPViewHistory(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.HPViewHistory {
	return predicate.HPViewHistory(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.HPViewHistory {
	return predicate.HPViewHistory(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.HPViewHistory {
	return predicate.HPViewHistory(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.HPViewHistory {
	return predicate.HPViewHistory(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.HPViewHistory {
	return predicate.HPViewHistory(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.HPViewHistory {
	return predicate.HPViewHistory(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.HPViewHistory {
	return predicate.HPViewHistory(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.HPViewHistory {
	return predicate.HPViewHistory(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.HPViewHistory {
	return predicate.HPViewHistory(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.HPViewHistory {
	return predicate.HPViewHistory(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.HPViewHistory {
	return predicate.HPViewHistory(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.HPViewHistory {
	return predicate.HPViewHistory(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.HPViewHistory {
	return predicate.HPViewHistory(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.HPViewHistory {
	return predicate.HPViewHistory(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.HPViewHistory {
	return predicate.HPViewHistory(sql.FieldNotNull(FieldUpdatedAt))
}

// ContentIDEQ applies the EQ predicate on the "content_id" field.
func ContentIDEQ(v int) predicate.HPViewHistory {
	return predicate.HPViewHistory(sql.FieldEQ(FieldContentID, v))
}

// ContentIDNEQ applies the NEQ predicate on the "content_id" field.
func ContentIDNEQ(v int) predicate.HPViewHistory {
	return predicate.HPViewHistory(sql.FieldNEQ(FieldContentID, v))
}

// ContentIDIn applies the In predicate on the "content_id" field.
func ContentIDIn(vs ...int) predicate.HPViewHistory {
	return predicate.HPViewHistory(sql.FieldIn(FieldContentID, vs...))
}

// ContentIDNotIn applies the NotIn predicate on the "content_id" field.
func ContentIDNotIn(vs ...int) predicate.HPViewHistory {
	return predicate.HPViewHistory(sql.FieldNotIn(FieldContentID, vs...))
}

// ContentIDGT applies the GT predicate on the "content_id" field.
func ContentIDGT(v int) predicate.HPViewHistory {
	return predicate.HPViewHistory(sql.FieldGT(FieldContentID, v))
}

// ContentIDGTE applies the GTE predicate on the "content_id" field.
func ContentIDGTE(v int) predicate.HPViewHistory {
	return predicate.HPViewHistory(sql.FieldGTE(FieldContentID, v))
}

// ContentIDLT applies the LT predicate on the "content_id" field.
func ContentIDLT(v int) predicate.HPViewHistory {
	return predicate.HPViewHistory(sql.FieldLT(FieldContentID, v))
}

// ContentIDLTE applies the LTE predicate on the "content_id" field.
func ContentIDLTE(v int) predicate.HPViewHistory {
	return predicate.HPViewHistory(sql.FieldLTE(FieldContentID, v))
}

// ContentPostAtEQ applies the EQ predicate on the "content_post_at" field.
func ContentPostAtEQ(v time.Time) predicate.HPViewHistory {
	return predicate.HPViewHistory(sql.FieldEQ(FieldContentPostAt, v))
}

// ContentPostAtNEQ applies the NEQ predicate on the "content_post_at" field.
func ContentPostAtNEQ(v time.Time) predicate.HPViewHistory {
	return predicate.HPViewHistory(sql.FieldNEQ(FieldContentPostAt, v))
}

// ContentPostAtIn applies the In predicate on the "content_post_at" field.
func ContentPostAtIn(vs ...time.Time) predicate.HPViewHistory {
	return predicate.HPViewHistory(sql.FieldIn(FieldContentPostAt, vs...))
}

// ContentPostAtNotIn applies the NotIn predicate on the "content_post_at" field.
func ContentPostAtNotIn(vs ...time.Time) predicate.HPViewHistory {
	return predicate.HPViewHistory(sql.FieldNotIn(FieldContentPostAt, vs...))
}

// ContentPostAtGT applies the GT predicate on the "content_post_at" field.
func ContentPostAtGT(v time.Time) predicate.HPViewHistory {
	return predicate.HPViewHistory(sql.FieldGT(FieldContentPostAt, v))
}

// ContentPostAtGTE applies the GTE predicate on the "content_post_at" field.
func ContentPostAtGTE(v time.Time) predicate.HPViewHistory {
	return predicate.HPViewHistory(sql.FieldGTE(FieldContentPostAt, v))
}

// ContentPostAtLT applies the LT predicate on the "content_post_at" field.
func ContentPostAtLT(v time.Time) predicate.HPViewHistory {
	return predicate.HPViewHistory(sql.FieldLT(FieldContentPostAt, v))
}

// ContentPostAtLTE applies the LTE predicate on the "content_post_at" field.
func ContentPostAtLTE(v time.Time) predicate.HPViewHistory {
	return predicate.HPViewHistory(sql.FieldLTE(FieldContentPostAt, v))
}

// AssetTypeEQ applies the EQ predicate on the "asset_type" field.
func AssetTypeEQ(v enums.HPAssetType) predicate.HPViewHistory {
	vc := v
	return predicate.HPViewHistory(sql.FieldEQ(FieldAssetType, vc))
}

// AssetTypeNEQ applies the NEQ predicate on the "asset_type" field.
func AssetTypeNEQ(v enums.HPAssetType) predicate.HPViewHistory {
	vc := v
	return predicate.HPViewHistory(sql.FieldNEQ(FieldAssetType, vc))
}

// AssetTypeIn applies the In predicate on the "asset_type" field.
func AssetTypeIn(vs ...enums.HPAssetType) predicate.HPViewHistory {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HPViewHistory(sql.FieldIn(FieldAssetType, v...))
}

// AssetTypeNotIn applies the NotIn predicate on the "asset_type" field.
func AssetTypeNotIn(vs ...enums.HPAssetType) predicate.HPViewHistory {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HPViewHistory(sql.FieldNotIn(FieldAssetType, v...))
}

// IsFavoriteEQ applies the EQ predicate on the "is_favorite" field.
func IsFavoriteEQ(v bool) predicate.HPViewHistory {
	return predicate.HPViewHistory(sql.FieldEQ(FieldIsFavorite, v))
}

// IsFavoriteNEQ applies the NEQ predicate on the "is_favorite" field.
func IsFavoriteNEQ(v bool) predicate.HPViewHistory {
	return predicate.HPViewHistory(sql.FieldNEQ(FieldIsFavorite, v))
}

// OwnerUserIDEQ applies the EQ predicate on the "owner_user_id" field.
func OwnerUserIDEQ(v int) predicate.HPViewHistory {
	return predicate.HPViewHistory(sql.FieldEQ(FieldOwnerUserID, v))
}

// OwnerUserIDNEQ applies the NEQ predicate on the "owner_user_id" field.
func OwnerUserIDNEQ(v int) predicate.HPViewHistory {
	return predicate.HPViewHistory(sql.FieldNEQ(FieldOwnerUserID, v))
}

// OwnerUserIDIn applies the In predicate on the "owner_user_id" field.
func OwnerUserIDIn(vs ...int) predicate.HPViewHistory {
	return predicate.HPViewHistory(sql.FieldIn(FieldOwnerUserID, vs...))
}

// OwnerUserIDNotIn applies the NotIn predicate on the "owner_user_id" field.
func OwnerUserIDNotIn(vs ...int) predicate.HPViewHistory {
	return predicate.HPViewHistory(sql.FieldNotIn(FieldOwnerUserID, vs...))
}

// HasFeed applies the HasEdge predicate on the "feed" edge.
func HasFeed() predicate.HPViewHistory {
	return predicate.HPViewHistory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FeedTable, FeedColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFeedWith applies the HasEdge predicate on the "feed" edge with a given conditions (other predicates).
func HasFeedWith(preds ...predicate.HPFeedItem) predicate.HPViewHistory {
	return predicate.HPViewHistory(func(s *sql.Selector) {
		step := newFeedStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.HPViewHistory {
	return predicate.HPViewHistory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.HPViewHistory {
	return predicate.HPViewHistory(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.HPViewHistory) predicate.HPViewHistory {
	return predicate.HPViewHistory(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.HPViewHistory) predicate.HPViewHistory {
	return predicate.HPViewHistory(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.HPViewHistory) predicate.HPViewHistory {
	return predicate.HPViewHistory(func(s *sql.Selector) {
		p(s.Not())
	})
}
