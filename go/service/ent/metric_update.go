// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yssk22/hpapp/go/service/ent/metric"
	"github.com/yssk22/hpapp/go/service/ent/predicate"
	"github.com/yssk22/hpapp/go/service/ent/user"
)

// MetricUpdate is the builder for updating Metric entities.
type MetricUpdate struct {
	config
	hooks    []Hook
	mutation *MetricMutation
}

// Where appends a list predicates to the MetricUpdate builder.
func (mu *MetricUpdate) Where(ps ...predicate.Metric) *MetricUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetUpdatedAt sets the "updated_at" field.
func (mu *MetricUpdate) SetUpdatedAt(t time.Time) *MetricUpdate {
	mu.mutation.SetUpdatedAt(t)
	return mu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mu *MetricUpdate) SetNillableUpdatedAt(t *time.Time) *MetricUpdate {
	if t != nil {
		mu.SetUpdatedAt(*t)
	}
	return mu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (mu *MetricUpdate) ClearUpdatedAt() *MetricUpdate {
	mu.mutation.ClearUpdatedAt()
	return mu
}

// SetMetricName sets the "metric_name" field.
func (mu *MetricUpdate) SetMetricName(s string) *MetricUpdate {
	mu.mutation.SetMetricName(s)
	return mu
}

// SetDate sets the "date" field.
func (mu *MetricUpdate) SetDate(s string) *MetricUpdate {
	mu.mutation.SetDate(s)
	return mu
}

// SetValue sets the "value" field.
func (mu *MetricUpdate) SetValue(f float64) *MetricUpdate {
	mu.mutation.ResetValue()
	mu.mutation.SetValue(f)
	return mu
}

// AddValue adds f to the "value" field.
func (mu *MetricUpdate) AddValue(f float64) *MetricUpdate {
	mu.mutation.AddValue(f)
	return mu
}

// SetOwnerUserID sets the "owner_user_id" field.
func (mu *MetricUpdate) SetOwnerUserID(i int) *MetricUpdate {
	mu.mutation.SetOwnerUserID(i)
	return mu
}

// SetNillableOwnerUserID sets the "owner_user_id" field if the given value is not nil.
func (mu *MetricUpdate) SetNillableOwnerUserID(i *int) *MetricUpdate {
	if i != nil {
		mu.SetOwnerUserID(*i)
	}
	return mu
}

// ClearOwnerUserID clears the value of the "owner_user_id" field.
func (mu *MetricUpdate) ClearOwnerUserID() *MetricUpdate {
	mu.mutation.ClearOwnerUserID()
	return mu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (mu *MetricUpdate) SetUserID(id int) *MetricUpdate {
	mu.mutation.SetUserID(id)
	return mu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (mu *MetricUpdate) SetNillableUserID(id *int) *MetricUpdate {
	if id != nil {
		mu = mu.SetUserID(*id)
	}
	return mu
}

// SetUser sets the "user" edge to the User entity.
func (mu *MetricUpdate) SetUser(u *User) *MetricUpdate {
	return mu.SetUserID(u.ID)
}

// Mutation returns the MetricMutation object of the builder.
func (mu *MetricUpdate) Mutation() *MetricMutation {
	return mu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (mu *MetricUpdate) ClearUser() *MetricUpdate {
	mu.mutation.ClearUser()
	return mu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MetricUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, MetricMutation](ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MetricUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MetricUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MetricUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mu *MetricUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(metric.Table, metric.Columns, sqlgraph.NewFieldSpec(metric.FieldID, field.TypeInt))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if mu.mutation.CreatedAtCleared() {
		_spec.ClearField(metric.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := mu.mutation.UpdatedAt(); ok {
		_spec.SetField(metric.FieldUpdatedAt, field.TypeTime, value)
	}
	if mu.mutation.UpdatedAtCleared() {
		_spec.ClearField(metric.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := mu.mutation.MetricName(); ok {
		_spec.SetField(metric.FieldMetricName, field.TypeString, value)
	}
	if value, ok := mu.mutation.Date(); ok {
		_spec.SetField(metric.FieldDate, field.TypeString, value)
	}
	if value, ok := mu.mutation.Value(); ok {
		_spec.SetField(metric.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := mu.mutation.AddedValue(); ok {
		_spec.AddField(metric.FieldValue, field.TypeFloat64, value)
	}
	if mu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   metric.UserTable,
			Columns: []string{metric.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   metric.UserTable,
			Columns: []string{metric.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{metric.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MetricUpdateOne is the builder for updating a single Metric entity.
type MetricUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MetricMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (muo *MetricUpdateOne) SetUpdatedAt(t time.Time) *MetricUpdateOne {
	muo.mutation.SetUpdatedAt(t)
	return muo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (muo *MetricUpdateOne) SetNillableUpdatedAt(t *time.Time) *MetricUpdateOne {
	if t != nil {
		muo.SetUpdatedAt(*t)
	}
	return muo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (muo *MetricUpdateOne) ClearUpdatedAt() *MetricUpdateOne {
	muo.mutation.ClearUpdatedAt()
	return muo
}

// SetMetricName sets the "metric_name" field.
func (muo *MetricUpdateOne) SetMetricName(s string) *MetricUpdateOne {
	muo.mutation.SetMetricName(s)
	return muo
}

// SetDate sets the "date" field.
func (muo *MetricUpdateOne) SetDate(s string) *MetricUpdateOne {
	muo.mutation.SetDate(s)
	return muo
}

// SetValue sets the "value" field.
func (muo *MetricUpdateOne) SetValue(f float64) *MetricUpdateOne {
	muo.mutation.ResetValue()
	muo.mutation.SetValue(f)
	return muo
}

// AddValue adds f to the "value" field.
func (muo *MetricUpdateOne) AddValue(f float64) *MetricUpdateOne {
	muo.mutation.AddValue(f)
	return muo
}

// SetOwnerUserID sets the "owner_user_id" field.
func (muo *MetricUpdateOne) SetOwnerUserID(i int) *MetricUpdateOne {
	muo.mutation.SetOwnerUserID(i)
	return muo
}

// SetNillableOwnerUserID sets the "owner_user_id" field if the given value is not nil.
func (muo *MetricUpdateOne) SetNillableOwnerUserID(i *int) *MetricUpdateOne {
	if i != nil {
		muo.SetOwnerUserID(*i)
	}
	return muo
}

// ClearOwnerUserID clears the value of the "owner_user_id" field.
func (muo *MetricUpdateOne) ClearOwnerUserID() *MetricUpdateOne {
	muo.mutation.ClearOwnerUserID()
	return muo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (muo *MetricUpdateOne) SetUserID(id int) *MetricUpdateOne {
	muo.mutation.SetUserID(id)
	return muo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (muo *MetricUpdateOne) SetNillableUserID(id *int) *MetricUpdateOne {
	if id != nil {
		muo = muo.SetUserID(*id)
	}
	return muo
}

// SetUser sets the "user" edge to the User entity.
func (muo *MetricUpdateOne) SetUser(u *User) *MetricUpdateOne {
	return muo.SetUserID(u.ID)
}

// Mutation returns the MetricMutation object of the builder.
func (muo *MetricUpdateOne) Mutation() *MetricMutation {
	return muo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (muo *MetricUpdateOne) ClearUser() *MetricUpdateOne {
	muo.mutation.ClearUser()
	return muo
}

// Where appends a list predicates to the MetricUpdate builder.
func (muo *MetricUpdateOne) Where(ps ...predicate.Metric) *MetricUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MetricUpdateOne) Select(field string, fields ...string) *MetricUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Metric entity.
func (muo *MetricUpdateOne) Save(ctx context.Context) (*Metric, error) {
	return withHooks[*Metric, MetricMutation](ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MetricUpdateOne) SaveX(ctx context.Context) *Metric {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MetricUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MetricUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (muo *MetricUpdateOne) sqlSave(ctx context.Context) (_node *Metric, err error) {
	_spec := sqlgraph.NewUpdateSpec(metric.Table, metric.Columns, sqlgraph.NewFieldSpec(metric.FieldID, field.TypeInt))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Metric.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, metric.FieldID)
		for _, f := range fields {
			if !metric.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != metric.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if muo.mutation.CreatedAtCleared() {
		_spec.ClearField(metric.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := muo.mutation.UpdatedAt(); ok {
		_spec.SetField(metric.FieldUpdatedAt, field.TypeTime, value)
	}
	if muo.mutation.UpdatedAtCleared() {
		_spec.ClearField(metric.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := muo.mutation.MetricName(); ok {
		_spec.SetField(metric.FieldMetricName, field.TypeString, value)
	}
	if value, ok := muo.mutation.Date(); ok {
		_spec.SetField(metric.FieldDate, field.TypeString, value)
	}
	if value, ok := muo.mutation.Value(); ok {
		_spec.SetField(metric.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := muo.mutation.AddedValue(); ok {
		_spec.AddField(metric.FieldValue, field.TypeFloat64, value)
	}
	if muo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   metric.UserTable,
			Columns: []string{metric.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   metric.UserTable,
			Columns: []string{metric.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Metric{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{metric.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
