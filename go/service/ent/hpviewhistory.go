// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/yssk22/hpapp/go/service/ent/hpfeeditem"
	"github.com/yssk22/hpapp/go/service/ent/hpviewhistory"
	"github.com/yssk22/hpapp/go/service/ent/user"
	"github.com/yssk22/hpapp/go/service/schema/enums"
)

// HPViewHistory is the model entity for the HPViewHistory schema.
type HPViewHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// ContentID holds the value of the "content_id" field.
	ContentID int `json:"content_id,omitempty"`
	// post_at field value on content to query histories by post_at range
	ContentPostAt time.Time `json:"content_post_at,omitempty"`
	// AssetType holds the value of the "asset_type" field.
	AssetType enums.HPAssetType `json:"asset_type,omitempty"`
	// IsFavorite holds the value of the "is_favorite" field.
	IsFavorite bool `json:"is_favorite,omitempty"`
	// OwnerUserID holds the value of the "owner_user_id" field.
	OwnerUserID int `json:"owner_user_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HPViewHistoryQuery when eager-loading is set.
	Edges                       HPViewHistoryEdges `json:"edges"`
	hp_feed_item_view_histories *int
	selectValues                sql.SelectValues
}

// HPViewHistoryEdges holds the relations/edges for other nodes in the graph.
type HPViewHistoryEdges struct {
	// Feed holds the value of the feed edge.
	Feed *HPFeedItem `json:"feed,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// FeedOrErr returns the Feed value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HPViewHistoryEdges) FeedOrErr() (*HPFeedItem, error) {
	if e.loadedTypes[0] {
		if e.Feed == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: hpfeeditem.Label}
		}
		return e.Feed, nil
	}
	return nil, &NotLoadedError{edge: "feed"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HPViewHistoryEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*HPViewHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case hpviewhistory.FieldIsFavorite:
			values[i] = new(sql.NullBool)
		case hpviewhistory.FieldID, hpviewhistory.FieldContentID, hpviewhistory.FieldOwnerUserID:
			values[i] = new(sql.NullInt64)
		case hpviewhistory.FieldAssetType:
			values[i] = new(sql.NullString)
		case hpviewhistory.FieldCreatedAt, hpviewhistory.FieldUpdatedAt, hpviewhistory.FieldContentPostAt:
			values[i] = new(sql.NullTime)
		case hpviewhistory.ForeignKeys[0]: // hp_feed_item_view_histories
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the HPViewHistory fields.
func (hvh *HPViewHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case hpviewhistory.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			hvh.ID = int(value.Int64)
		case hpviewhistory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				hvh.CreatedAt = value.Time
			}
		case hpviewhistory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				hvh.UpdatedAt = value.Time
			}
		case hpviewhistory.FieldContentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field content_id", values[i])
			} else if value.Valid {
				hvh.ContentID = int(value.Int64)
			}
		case hpviewhistory.FieldContentPostAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field content_post_at", values[i])
			} else if value.Valid {
				hvh.ContentPostAt = value.Time
			}
		case hpviewhistory.FieldAssetType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field asset_type", values[i])
			} else if value.Valid {
				hvh.AssetType = enums.HPAssetType(value.String)
			}
		case hpviewhistory.FieldIsFavorite:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_favorite", values[i])
			} else if value.Valid {
				hvh.IsFavorite = value.Bool
			}
		case hpviewhistory.FieldOwnerUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field owner_user_id", values[i])
			} else if value.Valid {
				hvh.OwnerUserID = int(value.Int64)
			}
		case hpviewhistory.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field hp_feed_item_view_histories", value)
			} else if value.Valid {
				hvh.hp_feed_item_view_histories = new(int)
				*hvh.hp_feed_item_view_histories = int(value.Int64)
			}
		default:
			hvh.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the HPViewHistory.
// This includes values selected through modifiers, order, etc.
func (hvh *HPViewHistory) Value(name string) (ent.Value, error) {
	return hvh.selectValues.Get(name)
}

// QueryFeed queries the "feed" edge of the HPViewHistory entity.
func (hvh *HPViewHistory) QueryFeed() *HPFeedItemQuery {
	return NewHPViewHistoryClient(hvh.config).QueryFeed(hvh)
}

// QueryUser queries the "user" edge of the HPViewHistory entity.
func (hvh *HPViewHistory) QueryUser() *UserQuery {
	return NewHPViewHistoryClient(hvh.config).QueryUser(hvh)
}

// Update returns a builder for updating this HPViewHistory.
// Note that you need to call HPViewHistory.Unwrap() before calling this method if this HPViewHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (hvh *HPViewHistory) Update() *HPViewHistoryUpdateOne {
	return NewHPViewHistoryClient(hvh.config).UpdateOne(hvh)
}

// Unwrap unwraps the HPViewHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (hvh *HPViewHistory) Unwrap() *HPViewHistory {
	_tx, ok := hvh.config.driver.(*txDriver)
	if !ok {
		panic("ent: HPViewHistory is not a transactional entity")
	}
	hvh.config.driver = _tx.drv
	return hvh
}

// String implements the fmt.Stringer.
func (hvh *HPViewHistory) String() string {
	var builder strings.Builder
	builder.WriteString("HPViewHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", hvh.ID))
	builder.WriteString("created_at=")
	builder.WriteString(hvh.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(hvh.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("content_id=")
	builder.WriteString(fmt.Sprintf("%v", hvh.ContentID))
	builder.WriteString(", ")
	builder.WriteString("content_post_at=")
	builder.WriteString(hvh.ContentPostAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("asset_type=")
	builder.WriteString(fmt.Sprintf("%v", hvh.AssetType))
	builder.WriteString(", ")
	builder.WriteString("is_favorite=")
	builder.WriteString(fmt.Sprintf("%v", hvh.IsFavorite))
	builder.WriteString(", ")
	builder.WriteString("owner_user_id=")
	builder.WriteString(fmt.Sprintf("%v", hvh.OwnerUserID))
	builder.WriteByte(')')
	return builder.String()
}

// HPViewHistories is a parsable slice of HPViewHistory.
type HPViewHistories []*HPViewHistory
