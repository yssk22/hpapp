// Code generated by ent, DO NOT EDIT.

package hpfeeditem

import (
	"fmt"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/99designs/gqlgen/graphql"
	"github.com/yssk22/hpapp/go/service/schema/enums"
)

const (
	// Label holds the string label denoting the hpfeeditem type in the database.
	Label = "hp_feed_item"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldSourceID holds the string denoting the source_id field in the database.
	FieldSourceID = "source_id"
	// FieldAssetType holds the string denoting the asset_type field in the database.
	FieldAssetType = "asset_type"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldPostAt holds the string denoting the post_at field in the database.
	FieldPostAt = "post_at"
	// FieldSourceURL holds the string denoting the source_url field in the database.
	FieldSourceURL = "source_url"
	// FieldImageURL holds the string denoting the image_url field in the database.
	FieldImageURL = "image_url"
	// FieldMedia holds the string denoting the media field in the database.
	FieldMedia = "media"
	// FieldOwnerArtistID holds the string denoting the owner_artist_id field in the database.
	FieldOwnerArtistID = "owner_artist_id"
	// FieldOwnerMemberID holds the string denoting the owner_member_id field in the database.
	FieldOwnerMemberID = "owner_member_id"
	// EdgeViewHistories holds the string denoting the view_histories edge name in mutations.
	EdgeViewHistories = "view_histories"
	// EdgeOwnerArtist holds the string denoting the owner_artist edge name in mutations.
	EdgeOwnerArtist = "owner_artist"
	// EdgeOwnerMember holds the string denoting the owner_member edge name in mutations.
	EdgeOwnerMember = "owner_member"
	// EdgeTaggedArtists holds the string denoting the tagged_artists edge name in mutations.
	EdgeTaggedArtists = "tagged_artists"
	// EdgeTaggedMembers holds the string denoting the tagged_members edge name in mutations.
	EdgeTaggedMembers = "tagged_members"
	// Table holds the table name of the hpfeeditem in the database.
	Table = "hp_feed_items"
	// ViewHistoriesTable is the table that holds the view_histories relation/edge.
	ViewHistoriesTable = "hp_view_histories"
	// ViewHistoriesInverseTable is the table name for the HPViewHistory entity.
	// It exists in this package in order to avoid circular dependency with the "hpviewhistory" package.
	ViewHistoriesInverseTable = "hp_view_histories"
	// ViewHistoriesColumn is the table column denoting the view_histories relation/edge.
	ViewHistoriesColumn = "hp_feed_item_view_histories"
	// OwnerArtistTable is the table that holds the owner_artist relation/edge.
	OwnerArtistTable = "hp_feed_items"
	// OwnerArtistInverseTable is the table name for the HPArtist entity.
	// It exists in this package in order to avoid circular dependency with the "hpartist" package.
	OwnerArtistInverseTable = "hp_artists"
	// OwnerArtistColumn is the table column denoting the owner_artist relation/edge.
	OwnerArtistColumn = "owner_artist_id"
	// OwnerMemberTable is the table that holds the owner_member relation/edge.
	OwnerMemberTable = "hp_feed_items"
	// OwnerMemberInverseTable is the table name for the HPMember entity.
	// It exists in this package in order to avoid circular dependency with the "hpmember" package.
	OwnerMemberInverseTable = "hp_members"
	// OwnerMemberColumn is the table column denoting the owner_member relation/edge.
	OwnerMemberColumn = "owner_member_id"
	// TaggedArtistsTable is the table that holds the tagged_artists relation/edge. The primary key declared below.
	TaggedArtistsTable = "hp_artist_feed"
	// TaggedArtistsInverseTable is the table name for the HPArtist entity.
	// It exists in this package in order to avoid circular dependency with the "hpartist" package.
	TaggedArtistsInverseTable = "hp_artists"
	// TaggedMembersTable is the table that holds the tagged_members relation/edge. The primary key declared below.
	TaggedMembersTable = "hp_member_feed"
	// TaggedMembersInverseTable is the table name for the HPMember entity.
	// It exists in this package in order to avoid circular dependency with the "hpmember" package.
	TaggedMembersInverseTable = "hp_members"
)

// Columns holds all SQL columns for hpfeeditem fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldSourceID,
	FieldAssetType,
	FieldTitle,
	FieldPostAt,
	FieldSourceURL,
	FieldImageURL,
	FieldMedia,
	FieldOwnerArtistID,
	FieldOwnerMemberID,
}

var (
	// TaggedArtistsPrimaryKey and TaggedArtistsColumn2 are the table columns denoting the
	// primary key for the tagged_artists relation (M2M).
	TaggedArtistsPrimaryKey = []string{"hp_artist_id", "hp_feed_item_id"}
	// TaggedMembersPrimaryKey and TaggedMembersColumn2 are the table columns denoting the
	// primary key for the tagged_members relation (M2M).
	TaggedMembersPrimaryKey = []string{"hp_member_id", "hp_feed_item_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/yssk22/hpapp/go/service/ent/runtime"
//
var (
	Hooks [1]ent.Hook
)

const DefaultAssetType enums.HPAssetType = "ameblo"

// AssetTypeValidator is a validator for the "asset_type" field enum values. It is called by the builders before save.
func AssetTypeValidator(at enums.HPAssetType) error {
	switch at {
	case "ameblo", "elineupmall", "instagram", "tiktok", "twitter", "youtube":
		return nil
	default:
		return fmt.Errorf("hpfeeditem: invalid enum value for asset_type field: %q", at)
	}
}

// Order defines the ordering method for the HPFeedItem queries.
type Order func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// BySourceID orders the results by the source_id field.
func BySourceID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldSourceID, opts...).ToFunc()
}

// ByAssetType orders the results by the asset_type field.
func ByAssetType(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldAssetType, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByPostAt orders the results by the post_at field.
func ByPostAt(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldPostAt, opts...).ToFunc()
}

// BySourceURL orders the results by the source_url field.
func BySourceURL(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldSourceURL, opts...).ToFunc()
}

// ByImageURL orders the results by the image_url field.
func ByImageURL(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldImageURL, opts...).ToFunc()
}

// ByOwnerArtistID orders the results by the owner_artist_id field.
func ByOwnerArtistID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldOwnerArtistID, opts...).ToFunc()
}

// ByOwnerMemberID orders the results by the owner_member_id field.
func ByOwnerMemberID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldOwnerMemberID, opts...).ToFunc()
}

// ByViewHistoriesCount orders the results by view_histories count.
func ByViewHistoriesCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newViewHistoriesStep(), opts...)
	}
}

// ByViewHistories orders the results by view_histories terms.
func ByViewHistories(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newViewHistoriesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOwnerArtistField orders the results by owner_artist field.
func ByOwnerArtistField(field string, opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerArtistStep(), sql.OrderByField(field, opts...))
	}
}

// ByOwnerMemberField orders the results by owner_member field.
func ByOwnerMemberField(field string, opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerMemberStep(), sql.OrderByField(field, opts...))
	}
}

// ByTaggedArtistsCount orders the results by tagged_artists count.
func ByTaggedArtistsCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTaggedArtistsStep(), opts...)
	}
}

// ByTaggedArtists orders the results by tagged_artists terms.
func ByTaggedArtists(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTaggedArtistsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTaggedMembersCount orders the results by tagged_members count.
func ByTaggedMembersCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTaggedMembersStep(), opts...)
	}
}

// ByTaggedMembers orders the results by tagged_members terms.
func ByTaggedMembers(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTaggedMembersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newViewHistoriesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ViewHistoriesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ViewHistoriesTable, ViewHistoriesColumn),
	)
}
func newOwnerArtistStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerArtistInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OwnerArtistTable, OwnerArtistColumn),
	)
}
func newOwnerMemberStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerMemberInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OwnerMemberTable, OwnerMemberColumn),
	)
}
func newTaggedArtistsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TaggedArtistsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, TaggedArtistsTable, TaggedArtistsPrimaryKey...),
	)
}
func newTaggedMembersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TaggedMembersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, TaggedMembersTable, TaggedMembersPrimaryKey...),
	)
}

var (
	// enums.HPAssetType must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enums.HPAssetType)(nil)
	// enums.HPAssetType must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enums.HPAssetType)(nil)
)
