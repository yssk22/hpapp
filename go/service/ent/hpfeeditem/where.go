// Code generated by ent, DO NOT EDIT.

package hpfeeditem

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"hpapp.yssk22.dev/go/service/ent/predicate"
	"hpapp.yssk22.dev/go/service/schema/enums"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldEQ(FieldUpdatedAt, v))
}

// SourceID applies equality check predicate on the "source_id" field. It's identical to SourceIDEQ.
func SourceID(v int) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldEQ(FieldSourceID, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldEQ(FieldTitle, v))
}

// PostAt applies equality check predicate on the "post_at" field. It's identical to PostAtEQ.
func PostAt(v time.Time) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldEQ(FieldPostAt, v))
}

// SourceURL applies equality check predicate on the "source_url" field. It's identical to SourceURLEQ.
func SourceURL(v string) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldEQ(FieldSourceURL, v))
}

// ImageURL applies equality check predicate on the "image_url" field. It's identical to ImageURLEQ.
func ImageURL(v string) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldEQ(FieldImageURL, v))
}

// OwnerArtistID applies equality check predicate on the "owner_artist_id" field. It's identical to OwnerArtistIDEQ.
func OwnerArtistID(v int) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldEQ(FieldOwnerArtistID, v))
}

// OwnerMemberID applies equality check predicate on the "owner_member_id" field. It's identical to OwnerMemberIDEQ.
func OwnerMemberID(v int) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldEQ(FieldOwnerMemberID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldNotNull(FieldUpdatedAt))
}

// SourceIDEQ applies the EQ predicate on the "source_id" field.
func SourceIDEQ(v int) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldEQ(FieldSourceID, v))
}

// SourceIDNEQ applies the NEQ predicate on the "source_id" field.
func SourceIDNEQ(v int) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldNEQ(FieldSourceID, v))
}

// SourceIDIn applies the In predicate on the "source_id" field.
func SourceIDIn(vs ...int) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldIn(FieldSourceID, vs...))
}

// SourceIDNotIn applies the NotIn predicate on the "source_id" field.
func SourceIDNotIn(vs ...int) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldNotIn(FieldSourceID, vs...))
}

// SourceIDGT applies the GT predicate on the "source_id" field.
func SourceIDGT(v int) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldGT(FieldSourceID, v))
}

// SourceIDGTE applies the GTE predicate on the "source_id" field.
func SourceIDGTE(v int) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldGTE(FieldSourceID, v))
}

// SourceIDLT applies the LT predicate on the "source_id" field.
func SourceIDLT(v int) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldLT(FieldSourceID, v))
}

// SourceIDLTE applies the LTE predicate on the "source_id" field.
func SourceIDLTE(v int) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldLTE(FieldSourceID, v))
}

// AssetTypeEQ applies the EQ predicate on the "asset_type" field.
func AssetTypeEQ(v enums.HPAssetType) predicate.HPFeedItem {
	vc := v
	return predicate.HPFeedItem(sql.FieldEQ(FieldAssetType, vc))
}

// AssetTypeNEQ applies the NEQ predicate on the "asset_type" field.
func AssetTypeNEQ(v enums.HPAssetType) predicate.HPFeedItem {
	vc := v
	return predicate.HPFeedItem(sql.FieldNEQ(FieldAssetType, vc))
}

// AssetTypeIn applies the In predicate on the "asset_type" field.
func AssetTypeIn(vs ...enums.HPAssetType) predicate.HPFeedItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HPFeedItem(sql.FieldIn(FieldAssetType, v...))
}

// AssetTypeNotIn applies the NotIn predicate on the "asset_type" field.
func AssetTypeNotIn(vs ...enums.HPAssetType) predicate.HPFeedItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HPFeedItem(sql.FieldNotIn(FieldAssetType, v...))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldContainsFold(FieldTitle, v))
}

// PostAtEQ applies the EQ predicate on the "post_at" field.
func PostAtEQ(v time.Time) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldEQ(FieldPostAt, v))
}

// PostAtNEQ applies the NEQ predicate on the "post_at" field.
func PostAtNEQ(v time.Time) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldNEQ(FieldPostAt, v))
}

// PostAtIn applies the In predicate on the "post_at" field.
func PostAtIn(vs ...time.Time) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldIn(FieldPostAt, vs...))
}

// PostAtNotIn applies the NotIn predicate on the "post_at" field.
func PostAtNotIn(vs ...time.Time) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldNotIn(FieldPostAt, vs...))
}

// PostAtGT applies the GT predicate on the "post_at" field.
func PostAtGT(v time.Time) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldGT(FieldPostAt, v))
}

// PostAtGTE applies the GTE predicate on the "post_at" field.
func PostAtGTE(v time.Time) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldGTE(FieldPostAt, v))
}

// PostAtLT applies the LT predicate on the "post_at" field.
func PostAtLT(v time.Time) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldLT(FieldPostAt, v))
}

// PostAtLTE applies the LTE predicate on the "post_at" field.
func PostAtLTE(v time.Time) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldLTE(FieldPostAt, v))
}

// SourceURLEQ applies the EQ predicate on the "source_url" field.
func SourceURLEQ(v string) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldEQ(FieldSourceURL, v))
}

// SourceURLNEQ applies the NEQ predicate on the "source_url" field.
func SourceURLNEQ(v string) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldNEQ(FieldSourceURL, v))
}

// SourceURLIn applies the In predicate on the "source_url" field.
func SourceURLIn(vs ...string) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldIn(FieldSourceURL, vs...))
}

// SourceURLNotIn applies the NotIn predicate on the "source_url" field.
func SourceURLNotIn(vs ...string) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldNotIn(FieldSourceURL, vs...))
}

// SourceURLGT applies the GT predicate on the "source_url" field.
func SourceURLGT(v string) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldGT(FieldSourceURL, v))
}

// SourceURLGTE applies the GTE predicate on the "source_url" field.
func SourceURLGTE(v string) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldGTE(FieldSourceURL, v))
}

// SourceURLLT applies the LT predicate on the "source_url" field.
func SourceURLLT(v string) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldLT(FieldSourceURL, v))
}

// SourceURLLTE applies the LTE predicate on the "source_url" field.
func SourceURLLTE(v string) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldLTE(FieldSourceURL, v))
}

// SourceURLContains applies the Contains predicate on the "source_url" field.
func SourceURLContains(v string) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldContains(FieldSourceURL, v))
}

// SourceURLHasPrefix applies the HasPrefix predicate on the "source_url" field.
func SourceURLHasPrefix(v string) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldHasPrefix(FieldSourceURL, v))
}

// SourceURLHasSuffix applies the HasSuffix predicate on the "source_url" field.
func SourceURLHasSuffix(v string) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldHasSuffix(FieldSourceURL, v))
}

// SourceURLEqualFold applies the EqualFold predicate on the "source_url" field.
func SourceURLEqualFold(v string) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldEqualFold(FieldSourceURL, v))
}

// SourceURLContainsFold applies the ContainsFold predicate on the "source_url" field.
func SourceURLContainsFold(v string) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldContainsFold(FieldSourceURL, v))
}

// ImageURLEQ applies the EQ predicate on the "image_url" field.
func ImageURLEQ(v string) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldEQ(FieldImageURL, v))
}

// ImageURLNEQ applies the NEQ predicate on the "image_url" field.
func ImageURLNEQ(v string) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldNEQ(FieldImageURL, v))
}

// ImageURLIn applies the In predicate on the "image_url" field.
func ImageURLIn(vs ...string) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldIn(FieldImageURL, vs...))
}

// ImageURLNotIn applies the NotIn predicate on the "image_url" field.
func ImageURLNotIn(vs ...string) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldNotIn(FieldImageURL, vs...))
}

// ImageURLGT applies the GT predicate on the "image_url" field.
func ImageURLGT(v string) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldGT(FieldImageURL, v))
}

// ImageURLGTE applies the GTE predicate on the "image_url" field.
func ImageURLGTE(v string) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldGTE(FieldImageURL, v))
}

// ImageURLLT applies the LT predicate on the "image_url" field.
func ImageURLLT(v string) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldLT(FieldImageURL, v))
}

// ImageURLLTE applies the LTE predicate on the "image_url" field.
func ImageURLLTE(v string) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldLTE(FieldImageURL, v))
}

// ImageURLContains applies the Contains predicate on the "image_url" field.
func ImageURLContains(v string) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldContains(FieldImageURL, v))
}

// ImageURLHasPrefix applies the HasPrefix predicate on the "image_url" field.
func ImageURLHasPrefix(v string) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldHasPrefix(FieldImageURL, v))
}

// ImageURLHasSuffix applies the HasSuffix predicate on the "image_url" field.
func ImageURLHasSuffix(v string) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldHasSuffix(FieldImageURL, v))
}

// ImageURLIsNil applies the IsNil predicate on the "image_url" field.
func ImageURLIsNil() predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldIsNull(FieldImageURL))
}

// ImageURLNotNil applies the NotNil predicate on the "image_url" field.
func ImageURLNotNil() predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldNotNull(FieldImageURL))
}

// ImageURLEqualFold applies the EqualFold predicate on the "image_url" field.
func ImageURLEqualFold(v string) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldEqualFold(FieldImageURL, v))
}

// ImageURLContainsFold applies the ContainsFold predicate on the "image_url" field.
func ImageURLContainsFold(v string) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldContainsFold(FieldImageURL, v))
}

// OwnerArtistIDEQ applies the EQ predicate on the "owner_artist_id" field.
func OwnerArtistIDEQ(v int) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldEQ(FieldOwnerArtistID, v))
}

// OwnerArtistIDNEQ applies the NEQ predicate on the "owner_artist_id" field.
func OwnerArtistIDNEQ(v int) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldNEQ(FieldOwnerArtistID, v))
}

// OwnerArtistIDIn applies the In predicate on the "owner_artist_id" field.
func OwnerArtistIDIn(vs ...int) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldIn(FieldOwnerArtistID, vs...))
}

// OwnerArtistIDNotIn applies the NotIn predicate on the "owner_artist_id" field.
func OwnerArtistIDNotIn(vs ...int) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldNotIn(FieldOwnerArtistID, vs...))
}

// OwnerArtistIDIsNil applies the IsNil predicate on the "owner_artist_id" field.
func OwnerArtistIDIsNil() predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldIsNull(FieldOwnerArtistID))
}

// OwnerArtistIDNotNil applies the NotNil predicate on the "owner_artist_id" field.
func OwnerArtistIDNotNil() predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldNotNull(FieldOwnerArtistID))
}

// OwnerMemberIDEQ applies the EQ predicate on the "owner_member_id" field.
func OwnerMemberIDEQ(v int) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldEQ(FieldOwnerMemberID, v))
}

// OwnerMemberIDNEQ applies the NEQ predicate on the "owner_member_id" field.
func OwnerMemberIDNEQ(v int) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldNEQ(FieldOwnerMemberID, v))
}

// OwnerMemberIDIn applies the In predicate on the "owner_member_id" field.
func OwnerMemberIDIn(vs ...int) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldIn(FieldOwnerMemberID, vs...))
}

// OwnerMemberIDNotIn applies the NotIn predicate on the "owner_member_id" field.
func OwnerMemberIDNotIn(vs ...int) predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldNotIn(FieldOwnerMemberID, vs...))
}

// OwnerMemberIDIsNil applies the IsNil predicate on the "owner_member_id" field.
func OwnerMemberIDIsNil() predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldIsNull(FieldOwnerMemberID))
}

// OwnerMemberIDNotNil applies the NotNil predicate on the "owner_member_id" field.
func OwnerMemberIDNotNil() predicate.HPFeedItem {
	return predicate.HPFeedItem(sql.FieldNotNull(FieldOwnerMemberID))
}

// HasViewHistories applies the HasEdge predicate on the "view_histories" edge.
func HasViewHistories() predicate.HPFeedItem {
	return predicate.HPFeedItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ViewHistoriesTable, ViewHistoriesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasViewHistoriesWith applies the HasEdge predicate on the "view_histories" edge with a given conditions (other predicates).
func HasViewHistoriesWith(preds ...predicate.HPViewHistory) predicate.HPFeedItem {
	return predicate.HPFeedItem(func(s *sql.Selector) {
		step := newViewHistoriesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOwnerArtist applies the HasEdge predicate on the "owner_artist" edge.
func HasOwnerArtist() predicate.HPFeedItem {
	return predicate.HPFeedItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerArtistTable, OwnerArtistColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerArtistWith applies the HasEdge predicate on the "owner_artist" edge with a given conditions (other predicates).
func HasOwnerArtistWith(preds ...predicate.HPArtist) predicate.HPFeedItem {
	return predicate.HPFeedItem(func(s *sql.Selector) {
		step := newOwnerArtistStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOwnerMember applies the HasEdge predicate on the "owner_member" edge.
func HasOwnerMember() predicate.HPFeedItem {
	return predicate.HPFeedItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerMemberTable, OwnerMemberColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerMemberWith applies the HasEdge predicate on the "owner_member" edge with a given conditions (other predicates).
func HasOwnerMemberWith(preds ...predicate.HPMember) predicate.HPFeedItem {
	return predicate.HPFeedItem(func(s *sql.Selector) {
		step := newOwnerMemberStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTaggedArtists applies the HasEdge predicate on the "tagged_artists" edge.
func HasTaggedArtists() predicate.HPFeedItem {
	return predicate.HPFeedItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, TaggedArtistsTable, TaggedArtistsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTaggedArtistsWith applies the HasEdge predicate on the "tagged_artists" edge with a given conditions (other predicates).
func HasTaggedArtistsWith(preds ...predicate.HPArtist) predicate.HPFeedItem {
	return predicate.HPFeedItem(func(s *sql.Selector) {
		step := newTaggedArtistsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTaggedMembers applies the HasEdge predicate on the "tagged_members" edge.
func HasTaggedMembers() predicate.HPFeedItem {
	return predicate.HPFeedItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, TaggedMembersTable, TaggedMembersPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTaggedMembersWith applies the HasEdge predicate on the "tagged_members" edge with a given conditions (other predicates).
func HasTaggedMembersWith(preds ...predicate.HPMember) predicate.HPFeedItem {
	return predicate.HPFeedItem(func(s *sql.Selector) {
		step := newTaggedMembersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.HPFeedItem) predicate.HPFeedItem {
	return predicate.HPFeedItem(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.HPFeedItem) predicate.HPFeedItem {
	return predicate.HPFeedItem(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.HPFeedItem) predicate.HPFeedItem {
	return predicate.HPFeedItem(func(s *sql.Selector) {
		p(s.Not())
	})
}
