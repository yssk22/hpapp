// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yssk22/hpapp/go/service/ent/auth"
	"github.com/yssk22/hpapp/go/service/ent/hpelineupmallitempurchasehistory"
	"github.com/yssk22/hpapp/go/service/ent/hpfceventticket"
	"github.com/yssk22/hpapp/go/service/ent/hpfollow"
	"github.com/yssk22/hpapp/go/service/ent/hpsorthistory"
	"github.com/yssk22/hpapp/go/service/ent/hpviewhistory"
	"github.com/yssk22/hpapp/go/service/ent/metric"
	"github.com/yssk22/hpapp/go/service/ent/predicate"
	"github.com/yssk22/hpapp/go/service/ent/user"
	"github.com/yssk22/hpapp/go/service/ent/usernotificationsetting"
)

// UserQuery is the builder for querying User entities.
type UserQuery struct {
	config
	ctx                                   *QueryContext
	order                                 []user.Order
	inters                                []Interceptor
	predicates                            []predicate.User
	withAuth                              *AuthQuery
	withNotificationSettings              *UserNotificationSettingQuery
	withHpviewHistory                     *HPViewHistoryQuery
	withHpfollow                          *HPFollowQuery
	withHpsortHistory                     *HPSortHistoryQuery
	withHpfcEventTickets                  *HPFCEventTicketQuery
	withElineupMallPurchaseHistories      *HPElineupMallItemPurchaseHistoryQuery
	withMetrics                           *MetricQuery
	modifiers                             []func(*sql.Selector)
	loadTotal                             []func(context.Context, []*User) error
	withNamedAuth                         map[string]*AuthQuery
	withNamedNotificationSettings         map[string]*UserNotificationSettingQuery
	withNamedHpviewHistory                map[string]*HPViewHistoryQuery
	withNamedHpfollow                     map[string]*HPFollowQuery
	withNamedHpsortHistory                map[string]*HPSortHistoryQuery
	withNamedHpfcEventTickets             map[string]*HPFCEventTicketQuery
	withNamedElineupMallPurchaseHistories map[string]*HPElineupMallItemPurchaseHistoryQuery
	withNamedMetrics                      map[string]*MetricQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UserQuery builder.
func (uq *UserQuery) Where(ps ...predicate.User) *UserQuery {
	uq.predicates = append(uq.predicates, ps...)
	return uq
}

// Limit the number of records to be returned by this query.
func (uq *UserQuery) Limit(limit int) *UserQuery {
	uq.ctx.Limit = &limit
	return uq
}

// Offset to start from.
func (uq *UserQuery) Offset(offset int) *UserQuery {
	uq.ctx.Offset = &offset
	return uq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (uq *UserQuery) Unique(unique bool) *UserQuery {
	uq.ctx.Unique = &unique
	return uq
}

// Order specifies how the records should be ordered.
func (uq *UserQuery) Order(o ...user.Order) *UserQuery {
	uq.order = append(uq.order, o...)
	return uq
}

// QueryAuth chains the current query on the "auth" edge.
func (uq *UserQuery) QueryAuth() *AuthQuery {
	query := (&AuthClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(auth.Table, auth.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.AuthTable, user.AuthColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNotificationSettings chains the current query on the "notification_settings" edge.
func (uq *UserQuery) QueryNotificationSettings() *UserNotificationSettingQuery {
	query := (&UserNotificationSettingClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(usernotificationsetting.Table, usernotificationsetting.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.NotificationSettingsTable, user.NotificationSettingsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHpviewHistory chains the current query on the "hpview_history" edge.
func (uq *UserQuery) QueryHpviewHistory() *HPViewHistoryQuery {
	query := (&HPViewHistoryClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(hpviewhistory.Table, hpviewhistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.HpviewHistoryTable, user.HpviewHistoryColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHpfollow chains the current query on the "hpfollow" edge.
func (uq *UserQuery) QueryHpfollow() *HPFollowQuery {
	query := (&HPFollowClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(hpfollow.Table, hpfollow.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.HpfollowTable, user.HpfollowColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHpsortHistory chains the current query on the "hpsort_history" edge.
func (uq *UserQuery) QueryHpsortHistory() *HPSortHistoryQuery {
	query := (&HPSortHistoryClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(hpsorthistory.Table, hpsorthistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.HpsortHistoryTable, user.HpsortHistoryColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHpfcEventTickets chains the current query on the "hpfc_event_tickets" edge.
func (uq *UserQuery) QueryHpfcEventTickets() *HPFCEventTicketQuery {
	query := (&HPFCEventTicketClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(hpfceventticket.Table, hpfceventticket.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.HpfcEventTicketsTable, user.HpfcEventTicketsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryElineupMallPurchaseHistories chains the current query on the "elineup_mall_purchase_histories" edge.
func (uq *UserQuery) QueryElineupMallPurchaseHistories() *HPElineupMallItemPurchaseHistoryQuery {
	query := (&HPElineupMallItemPurchaseHistoryClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(hpelineupmallitempurchasehistory.Table, hpelineupmallitempurchasehistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ElineupMallPurchaseHistoriesTable, user.ElineupMallPurchaseHistoriesColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMetrics chains the current query on the "metrics" edge.
func (uq *UserQuery) QueryMetrics() *MetricQuery {
	query := (&MetricClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(metric.Table, metric.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.MetricsTable, user.MetricsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first User entity from the query.
// Returns a *NotFoundError when no User was found.
func (uq *UserQuery) First(ctx context.Context) (*User, error) {
	nodes, err := uq.Limit(1).All(setContextOp(ctx, uq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{user.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (uq *UserQuery) FirstX(ctx context.Context) *User {
	node, err := uq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first User ID from the query.
// Returns a *NotFoundError when no User ID was found.
func (uq *UserQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = uq.Limit(1).IDs(setContextOp(ctx, uq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{user.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (uq *UserQuery) FirstIDX(ctx context.Context) int {
	id, err := uq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single User entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one User entity is found.
// Returns a *NotFoundError when no User entities are found.
func (uq *UserQuery) Only(ctx context.Context) (*User, error) {
	nodes, err := uq.Limit(2).All(setContextOp(ctx, uq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{user.Label}
	default:
		return nil, &NotSingularError{user.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (uq *UserQuery) OnlyX(ctx context.Context) *User {
	node, err := uq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only User ID in the query.
// Returns a *NotSingularError when more than one User ID is found.
// Returns a *NotFoundError when no entities are found.
func (uq *UserQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = uq.Limit(2).IDs(setContextOp(ctx, uq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{user.Label}
	default:
		err = &NotSingularError{user.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (uq *UserQuery) OnlyIDX(ctx context.Context) int {
	id, err := uq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Users.
func (uq *UserQuery) All(ctx context.Context) ([]*User, error) {
	ctx = setContextOp(ctx, uq.ctx, "All")
	if err := uq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*User, *UserQuery]()
	return withInterceptors[[]*User](ctx, uq, qr, uq.inters)
}

// AllX is like All, but panics if an error occurs.
func (uq *UserQuery) AllX(ctx context.Context) []*User {
	nodes, err := uq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of User IDs.
func (uq *UserQuery) IDs(ctx context.Context) (ids []int, err error) {
	if uq.ctx.Unique == nil && uq.path != nil {
		uq.Unique(true)
	}
	ctx = setContextOp(ctx, uq.ctx, "IDs")
	if err = uq.Select(user.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (uq *UserQuery) IDsX(ctx context.Context) []int {
	ids, err := uq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (uq *UserQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, uq.ctx, "Count")
	if err := uq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, uq, querierCount[*UserQuery](), uq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (uq *UserQuery) CountX(ctx context.Context) int {
	count, err := uq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (uq *UserQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, uq.ctx, "Exist")
	switch _, err := uq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (uq *UserQuery) ExistX(ctx context.Context) bool {
	exist, err := uq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UserQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (uq *UserQuery) Clone() *UserQuery {
	if uq == nil {
		return nil
	}
	return &UserQuery{
		config:                           uq.config,
		ctx:                              uq.ctx.Clone(),
		order:                            append([]user.Order{}, uq.order...),
		inters:                           append([]Interceptor{}, uq.inters...),
		predicates:                       append([]predicate.User{}, uq.predicates...),
		withAuth:                         uq.withAuth.Clone(),
		withNotificationSettings:         uq.withNotificationSettings.Clone(),
		withHpviewHistory:                uq.withHpviewHistory.Clone(),
		withHpfollow:                     uq.withHpfollow.Clone(),
		withHpsortHistory:                uq.withHpsortHistory.Clone(),
		withHpfcEventTickets:             uq.withHpfcEventTickets.Clone(),
		withElineupMallPurchaseHistories: uq.withElineupMallPurchaseHistories.Clone(),
		withMetrics:                      uq.withMetrics.Clone(),
		// clone intermediate query.
		sql:  uq.sql.Clone(),
		path: uq.path,
	}
}

// WithAuth tells the query-builder to eager-load the nodes that are connected to
// the "auth" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithAuth(opts ...func(*AuthQuery)) *UserQuery {
	query := (&AuthClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withAuth = query
	return uq
}

// WithNotificationSettings tells the query-builder to eager-load the nodes that are connected to
// the "notification_settings" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithNotificationSettings(opts ...func(*UserNotificationSettingQuery)) *UserQuery {
	query := (&UserNotificationSettingClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withNotificationSettings = query
	return uq
}

// WithHpviewHistory tells the query-builder to eager-load the nodes that are connected to
// the "hpview_history" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithHpviewHistory(opts ...func(*HPViewHistoryQuery)) *UserQuery {
	query := (&HPViewHistoryClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withHpviewHistory = query
	return uq
}

// WithHpfollow tells the query-builder to eager-load the nodes that are connected to
// the "hpfollow" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithHpfollow(opts ...func(*HPFollowQuery)) *UserQuery {
	query := (&HPFollowClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withHpfollow = query
	return uq
}

// WithHpsortHistory tells the query-builder to eager-load the nodes that are connected to
// the "hpsort_history" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithHpsortHistory(opts ...func(*HPSortHistoryQuery)) *UserQuery {
	query := (&HPSortHistoryClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withHpsortHistory = query
	return uq
}

// WithHpfcEventTickets tells the query-builder to eager-load the nodes that are connected to
// the "hpfc_event_tickets" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithHpfcEventTickets(opts ...func(*HPFCEventTicketQuery)) *UserQuery {
	query := (&HPFCEventTicketClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withHpfcEventTickets = query
	return uq
}

// WithElineupMallPurchaseHistories tells the query-builder to eager-load the nodes that are connected to
// the "elineup_mall_purchase_histories" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithElineupMallPurchaseHistories(opts ...func(*HPElineupMallItemPurchaseHistoryQuery)) *UserQuery {
	query := (&HPElineupMallItemPurchaseHistoryClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withElineupMallPurchaseHistories = query
	return uq
}

// WithMetrics tells the query-builder to eager-load the nodes that are connected to
// the "metrics" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithMetrics(opts ...func(*MetricQuery)) *UserQuery {
	query := (&MetricClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withMetrics = query
	return uq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.User.Query().
//		GroupBy(user.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (uq *UserQuery) GroupBy(field string, fields ...string) *UserGroupBy {
	uq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &UserGroupBy{build: uq}
	grbuild.flds = &uq.ctx.Fields
	grbuild.label = user.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.User.Query().
//		Select(user.FieldCreatedAt).
//		Scan(ctx, &v)
func (uq *UserQuery) Select(fields ...string) *UserSelect {
	uq.ctx.Fields = append(uq.ctx.Fields, fields...)
	sbuild := &UserSelect{UserQuery: uq}
	sbuild.label = user.Label
	sbuild.flds, sbuild.scan = &uq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a UserSelect configured with the given aggregations.
func (uq *UserQuery) Aggregate(fns ...AggregateFunc) *UserSelect {
	return uq.Select().Aggregate(fns...)
}

func (uq *UserQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range uq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, uq); err != nil {
				return err
			}
		}
	}
	for _, f := range uq.ctx.Fields {
		if !user.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if uq.path != nil {
		prev, err := uq.path(ctx)
		if err != nil {
			return err
		}
		uq.sql = prev
	}
	if user.Policy == nil {
		return errors.New("ent: uninitialized user.Policy (forgotten import ent/runtime?)")
	}
	if err := user.Policy.EvalQuery(ctx, uq); err != nil {
		return err
	}
	return nil
}

func (uq *UserQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*User, error) {
	var (
		nodes       = []*User{}
		_spec       = uq.querySpec()
		loadedTypes = [8]bool{
			uq.withAuth != nil,
			uq.withNotificationSettings != nil,
			uq.withHpviewHistory != nil,
			uq.withHpfollow != nil,
			uq.withHpsortHistory != nil,
			uq.withHpfcEventTickets != nil,
			uq.withElineupMallPurchaseHistories != nil,
			uq.withMetrics != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*User).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &User{config: uq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(uq.modifiers) > 0 {
		_spec.Modifiers = uq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, uq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := uq.withAuth; query != nil {
		if err := uq.loadAuth(ctx, query, nodes,
			func(n *User) { n.Edges.Auth = []*Auth{} },
			func(n *User, e *Auth) { n.Edges.Auth = append(n.Edges.Auth, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withNotificationSettings; query != nil {
		if err := uq.loadNotificationSettings(ctx, query, nodes,
			func(n *User) { n.Edges.NotificationSettings = []*UserNotificationSetting{} },
			func(n *User, e *UserNotificationSetting) {
				n.Edges.NotificationSettings = append(n.Edges.NotificationSettings, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := uq.withHpviewHistory; query != nil {
		if err := uq.loadHpviewHistory(ctx, query, nodes,
			func(n *User) { n.Edges.HpviewHistory = []*HPViewHistory{} },
			func(n *User, e *HPViewHistory) { n.Edges.HpviewHistory = append(n.Edges.HpviewHistory, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withHpfollow; query != nil {
		if err := uq.loadHpfollow(ctx, query, nodes,
			func(n *User) { n.Edges.Hpfollow = []*HPFollow{} },
			func(n *User, e *HPFollow) { n.Edges.Hpfollow = append(n.Edges.Hpfollow, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withHpsortHistory; query != nil {
		if err := uq.loadHpsortHistory(ctx, query, nodes,
			func(n *User) { n.Edges.HpsortHistory = []*HPSortHistory{} },
			func(n *User, e *HPSortHistory) { n.Edges.HpsortHistory = append(n.Edges.HpsortHistory, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withHpfcEventTickets; query != nil {
		if err := uq.loadHpfcEventTickets(ctx, query, nodes,
			func(n *User) { n.Edges.HpfcEventTickets = []*HPFCEventTicket{} },
			func(n *User, e *HPFCEventTicket) { n.Edges.HpfcEventTickets = append(n.Edges.HpfcEventTickets, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withElineupMallPurchaseHistories; query != nil {
		if err := uq.loadElineupMallPurchaseHistories(ctx, query, nodes,
			func(n *User) { n.Edges.ElineupMallPurchaseHistories = []*HPElineupMallItemPurchaseHistory{} },
			func(n *User, e *HPElineupMallItemPurchaseHistory) {
				n.Edges.ElineupMallPurchaseHistories = append(n.Edges.ElineupMallPurchaseHistories, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := uq.withMetrics; query != nil {
		if err := uq.loadMetrics(ctx, query, nodes,
			func(n *User) { n.Edges.Metrics = []*Metric{} },
			func(n *User, e *Metric) { n.Edges.Metrics = append(n.Edges.Metrics, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range uq.withNamedAuth {
		if err := uq.loadAuth(ctx, query, nodes,
			func(n *User) { n.appendNamedAuth(name) },
			func(n *User, e *Auth) { n.appendNamedAuth(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range uq.withNamedNotificationSettings {
		if err := uq.loadNotificationSettings(ctx, query, nodes,
			func(n *User) { n.appendNamedNotificationSettings(name) },
			func(n *User, e *UserNotificationSetting) { n.appendNamedNotificationSettings(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range uq.withNamedHpviewHistory {
		if err := uq.loadHpviewHistory(ctx, query, nodes,
			func(n *User) { n.appendNamedHpviewHistory(name) },
			func(n *User, e *HPViewHistory) { n.appendNamedHpviewHistory(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range uq.withNamedHpfollow {
		if err := uq.loadHpfollow(ctx, query, nodes,
			func(n *User) { n.appendNamedHpfollow(name) },
			func(n *User, e *HPFollow) { n.appendNamedHpfollow(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range uq.withNamedHpsortHistory {
		if err := uq.loadHpsortHistory(ctx, query, nodes,
			func(n *User) { n.appendNamedHpsortHistory(name) },
			func(n *User, e *HPSortHistory) { n.appendNamedHpsortHistory(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range uq.withNamedHpfcEventTickets {
		if err := uq.loadHpfcEventTickets(ctx, query, nodes,
			func(n *User) { n.appendNamedHpfcEventTickets(name) },
			func(n *User, e *HPFCEventTicket) { n.appendNamedHpfcEventTickets(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range uq.withNamedElineupMallPurchaseHistories {
		if err := uq.loadElineupMallPurchaseHistories(ctx, query, nodes,
			func(n *User) { n.appendNamedElineupMallPurchaseHistories(name) },
			func(n *User, e *HPElineupMallItemPurchaseHistory) { n.appendNamedElineupMallPurchaseHistories(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range uq.withNamedMetrics {
		if err := uq.loadMetrics(ctx, query, nodes,
			func(n *User) { n.appendNamedMetrics(name) },
			func(n *User, e *Metric) { n.appendNamedMetrics(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range uq.loadTotal {
		if err := uq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (uq *UserQuery) loadAuth(ctx context.Context, query *AuthQuery, nodes []*User, init func(*User), assign func(*User, *Auth)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.Auth(func(s *sql.Selector) {
		s.Where(sql.InValues(user.AuthColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerUserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "owner_user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadNotificationSettings(ctx context.Context, query *UserNotificationSettingQuery, nodes []*User, init func(*User), assign func(*User, *UserNotificationSetting)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.UserNotificationSetting(func(s *sql.Selector) {
		s.Where(sql.InValues(user.NotificationSettingsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerUserID
		if fk == nil {
			return fmt.Errorf(`foreign-key "owner_user_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "owner_user_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadHpviewHistory(ctx context.Context, query *HPViewHistoryQuery, nodes []*User, init func(*User), assign func(*User, *HPViewHistory)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.HPViewHistory(func(s *sql.Selector) {
		s.Where(sql.InValues(user.HpviewHistoryColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerUserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "owner_user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadHpfollow(ctx context.Context, query *HPFollowQuery, nodes []*User, init func(*User), assign func(*User, *HPFollow)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.HPFollow(func(s *sql.Selector) {
		s.Where(sql.InValues(user.HpfollowColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_hpmember_following
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_hpmember_following" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_hpmember_following" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadHpsortHistory(ctx context.Context, query *HPSortHistoryQuery, nodes []*User, init func(*User), assign func(*User, *HPSortHistory)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.HPSortHistory(func(s *sql.Selector) {
		s.Where(sql.InValues(user.HpsortHistoryColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerUserID
		if fk == nil {
			return fmt.Errorf(`foreign-key "owner_user_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "owner_user_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadHpfcEventTickets(ctx context.Context, query *HPFCEventTicketQuery, nodes []*User, init func(*User), assign func(*User, *HPFCEventTicket)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.HPFCEventTicket(func(s *sql.Selector) {
		s.Where(sql.InValues(user.HpfcEventTicketsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerUserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "owner_user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadElineupMallPurchaseHistories(ctx context.Context, query *HPElineupMallItemPurchaseHistoryQuery, nodes []*User, init func(*User), assign func(*User, *HPElineupMallItemPurchaseHistory)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.HPElineupMallItemPurchaseHistory(func(s *sql.Selector) {
		s.Where(sql.InValues(user.ElineupMallPurchaseHistoriesColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerUserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "owner_user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadMetrics(ctx context.Context, query *MetricQuery, nodes []*User, init func(*User), assign func(*User, *Metric)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.Metric(func(s *sql.Selector) {
		s.Where(sql.InValues(user.MetricsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerUserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "owner_user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (uq *UserQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := uq.querySpec()
	if len(uq.modifiers) > 0 {
		_spec.Modifiers = uq.modifiers
	}
	_spec.Node.Columns = uq.ctx.Fields
	if len(uq.ctx.Fields) > 0 {
		_spec.Unique = uq.ctx.Unique != nil && *uq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, uq.driver, _spec)
}

func (uq *UserQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	_spec.From = uq.sql
	if unique := uq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if uq.path != nil {
		_spec.Unique = true
	}
	if fields := uq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for i := range fields {
			if fields[i] != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := uq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := uq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := uq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := uq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (uq *UserQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(uq.driver.Dialect())
	t1 := builder.Table(user.Table)
	columns := uq.ctx.Fields
	if len(columns) == 0 {
		columns = user.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if uq.sql != nil {
		selector = uq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if uq.ctx.Unique != nil && *uq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range uq.predicates {
		p(selector)
	}
	for _, p := range uq.order {
		p(selector)
	}
	if offset := uq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := uq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedAuth tells the query-builder to eager-load the nodes that are connected to the "auth"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithNamedAuth(name string, opts ...func(*AuthQuery)) *UserQuery {
	query := (&AuthClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if uq.withNamedAuth == nil {
		uq.withNamedAuth = make(map[string]*AuthQuery)
	}
	uq.withNamedAuth[name] = query
	return uq
}

// WithNamedNotificationSettings tells the query-builder to eager-load the nodes that are connected to the "notification_settings"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithNamedNotificationSettings(name string, opts ...func(*UserNotificationSettingQuery)) *UserQuery {
	query := (&UserNotificationSettingClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if uq.withNamedNotificationSettings == nil {
		uq.withNamedNotificationSettings = make(map[string]*UserNotificationSettingQuery)
	}
	uq.withNamedNotificationSettings[name] = query
	return uq
}

// WithNamedHpviewHistory tells the query-builder to eager-load the nodes that are connected to the "hpview_history"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithNamedHpviewHistory(name string, opts ...func(*HPViewHistoryQuery)) *UserQuery {
	query := (&HPViewHistoryClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if uq.withNamedHpviewHistory == nil {
		uq.withNamedHpviewHistory = make(map[string]*HPViewHistoryQuery)
	}
	uq.withNamedHpviewHistory[name] = query
	return uq
}

// WithNamedHpfollow tells the query-builder to eager-load the nodes that are connected to the "hpfollow"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithNamedHpfollow(name string, opts ...func(*HPFollowQuery)) *UserQuery {
	query := (&HPFollowClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if uq.withNamedHpfollow == nil {
		uq.withNamedHpfollow = make(map[string]*HPFollowQuery)
	}
	uq.withNamedHpfollow[name] = query
	return uq
}

// WithNamedHpsortHistory tells the query-builder to eager-load the nodes that are connected to the "hpsort_history"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithNamedHpsortHistory(name string, opts ...func(*HPSortHistoryQuery)) *UserQuery {
	query := (&HPSortHistoryClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if uq.withNamedHpsortHistory == nil {
		uq.withNamedHpsortHistory = make(map[string]*HPSortHistoryQuery)
	}
	uq.withNamedHpsortHistory[name] = query
	return uq
}

// WithNamedHpfcEventTickets tells the query-builder to eager-load the nodes that are connected to the "hpfc_event_tickets"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithNamedHpfcEventTickets(name string, opts ...func(*HPFCEventTicketQuery)) *UserQuery {
	query := (&HPFCEventTicketClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if uq.withNamedHpfcEventTickets == nil {
		uq.withNamedHpfcEventTickets = make(map[string]*HPFCEventTicketQuery)
	}
	uq.withNamedHpfcEventTickets[name] = query
	return uq
}

// WithNamedElineupMallPurchaseHistories tells the query-builder to eager-load the nodes that are connected to the "elineup_mall_purchase_histories"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithNamedElineupMallPurchaseHistories(name string, opts ...func(*HPElineupMallItemPurchaseHistoryQuery)) *UserQuery {
	query := (&HPElineupMallItemPurchaseHistoryClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if uq.withNamedElineupMallPurchaseHistories == nil {
		uq.withNamedElineupMallPurchaseHistories = make(map[string]*HPElineupMallItemPurchaseHistoryQuery)
	}
	uq.withNamedElineupMallPurchaseHistories[name] = query
	return uq
}

// WithNamedMetrics tells the query-builder to eager-load the nodes that are connected to the "metrics"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithNamedMetrics(name string, opts ...func(*MetricQuery)) *UserQuery {
	query := (&MetricClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if uq.withNamedMetrics == nil {
		uq.withNamedMetrics = make(map[string]*MetricQuery)
	}
	uq.withNamedMetrics[name] = query
	return uq
}

// UserGroupBy is the group-by builder for User entities.
type UserGroupBy struct {
	selector
	build *UserQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ugb *UserGroupBy) Aggregate(fns ...AggregateFunc) *UserGroupBy {
	ugb.fns = append(ugb.fns, fns...)
	return ugb
}

// Scan applies the selector query and scans the result into the given value.
func (ugb *UserGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ugb.build.ctx, "GroupBy")
	if err := ugb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserQuery, *UserGroupBy](ctx, ugb.build, ugb, ugb.build.inters, v)
}

func (ugb *UserGroupBy) sqlScan(ctx context.Context, root *UserQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ugb.fns))
	for _, fn := range ugb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ugb.flds)+len(ugb.fns))
		for _, f := range *ugb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ugb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ugb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// UserSelect is the builder for selecting fields of User entities.
type UserSelect struct {
	*UserQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (us *UserSelect) Aggregate(fns ...AggregateFunc) *UserSelect {
	us.fns = append(us.fns, fns...)
	return us
}

// Scan applies the selector query and scans the result into the given value.
func (us *UserSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, us.ctx, "Select")
	if err := us.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserQuery, *UserSelect](ctx, us.UserQuery, us, us.inters, v)
}

func (us *UserSelect) sqlScan(ctx context.Context, root *UserQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(us.fns))
	for _, fn := range us.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*us.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := us.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
