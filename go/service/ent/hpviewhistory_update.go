// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yssk22/hpapp/go/service/ent/hpfeeditem"
	"github.com/yssk22/hpapp/go/service/ent/hpviewhistory"
	"github.com/yssk22/hpapp/go/service/ent/predicate"
	"github.com/yssk22/hpapp/go/service/ent/user"
	"github.com/yssk22/hpapp/go/service/schema/enums"
)

// HPViewHistoryUpdate is the builder for updating HPViewHistory entities.
type HPViewHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *HPViewHistoryMutation
}

// Where appends a list predicates to the HPViewHistoryUpdate builder.
func (hvhu *HPViewHistoryUpdate) Where(ps ...predicate.HPViewHistory) *HPViewHistoryUpdate {
	hvhu.mutation.Where(ps...)
	return hvhu
}

// SetUpdatedAt sets the "updated_at" field.
func (hvhu *HPViewHistoryUpdate) SetUpdatedAt(t time.Time) *HPViewHistoryUpdate {
	hvhu.mutation.SetUpdatedAt(t)
	return hvhu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (hvhu *HPViewHistoryUpdate) SetNillableUpdatedAt(t *time.Time) *HPViewHistoryUpdate {
	if t != nil {
		hvhu.SetUpdatedAt(*t)
	}
	return hvhu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (hvhu *HPViewHistoryUpdate) ClearUpdatedAt() *HPViewHistoryUpdate {
	hvhu.mutation.ClearUpdatedAt()
	return hvhu
}

// SetContentID sets the "content_id" field.
func (hvhu *HPViewHistoryUpdate) SetContentID(i int) *HPViewHistoryUpdate {
	hvhu.mutation.ResetContentID()
	hvhu.mutation.SetContentID(i)
	return hvhu
}

// AddContentID adds i to the "content_id" field.
func (hvhu *HPViewHistoryUpdate) AddContentID(i int) *HPViewHistoryUpdate {
	hvhu.mutation.AddContentID(i)
	return hvhu
}

// SetContentPostAt sets the "content_post_at" field.
func (hvhu *HPViewHistoryUpdate) SetContentPostAt(t time.Time) *HPViewHistoryUpdate {
	hvhu.mutation.SetContentPostAt(t)
	return hvhu
}

// SetAssetType sets the "asset_type" field.
func (hvhu *HPViewHistoryUpdate) SetAssetType(eat enums.HPAssetType) *HPViewHistoryUpdate {
	hvhu.mutation.SetAssetType(eat)
	return hvhu
}

// SetIsFavorite sets the "is_favorite" field.
func (hvhu *HPViewHistoryUpdate) SetIsFavorite(b bool) *HPViewHistoryUpdate {
	hvhu.mutation.SetIsFavorite(b)
	return hvhu
}

// SetNillableIsFavorite sets the "is_favorite" field if the given value is not nil.
func (hvhu *HPViewHistoryUpdate) SetNillableIsFavorite(b *bool) *HPViewHistoryUpdate {
	if b != nil {
		hvhu.SetIsFavorite(*b)
	}
	return hvhu
}

// SetOwnerUserID sets the "owner_user_id" field.
func (hvhu *HPViewHistoryUpdate) SetOwnerUserID(i int) *HPViewHistoryUpdate {
	hvhu.mutation.SetOwnerUserID(i)
	return hvhu
}

// SetFeedID sets the "feed" edge to the HPFeedItem entity by ID.
func (hvhu *HPViewHistoryUpdate) SetFeedID(id int) *HPViewHistoryUpdate {
	hvhu.mutation.SetFeedID(id)
	return hvhu
}

// SetNillableFeedID sets the "feed" edge to the HPFeedItem entity by ID if the given value is not nil.
func (hvhu *HPViewHistoryUpdate) SetNillableFeedID(id *int) *HPViewHistoryUpdate {
	if id != nil {
		hvhu = hvhu.SetFeedID(*id)
	}
	return hvhu
}

// SetFeed sets the "feed" edge to the HPFeedItem entity.
func (hvhu *HPViewHistoryUpdate) SetFeed(h *HPFeedItem) *HPViewHistoryUpdate {
	return hvhu.SetFeedID(h.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (hvhu *HPViewHistoryUpdate) SetUserID(id int) *HPViewHistoryUpdate {
	hvhu.mutation.SetUserID(id)
	return hvhu
}

// SetUser sets the "user" edge to the User entity.
func (hvhu *HPViewHistoryUpdate) SetUser(u *User) *HPViewHistoryUpdate {
	return hvhu.SetUserID(u.ID)
}

// Mutation returns the HPViewHistoryMutation object of the builder.
func (hvhu *HPViewHistoryUpdate) Mutation() *HPViewHistoryMutation {
	return hvhu.mutation
}

// ClearFeed clears the "feed" edge to the HPFeedItem entity.
func (hvhu *HPViewHistoryUpdate) ClearFeed() *HPViewHistoryUpdate {
	hvhu.mutation.ClearFeed()
	return hvhu
}

// ClearUser clears the "user" edge to the User entity.
func (hvhu *HPViewHistoryUpdate) ClearUser() *HPViewHistoryUpdate {
	hvhu.mutation.ClearUser()
	return hvhu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hvhu *HPViewHistoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, HPViewHistoryMutation](ctx, hvhu.sqlSave, hvhu.mutation, hvhu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hvhu *HPViewHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := hvhu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hvhu *HPViewHistoryUpdate) Exec(ctx context.Context) error {
	_, err := hvhu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hvhu *HPViewHistoryUpdate) ExecX(ctx context.Context) {
	if err := hvhu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hvhu *HPViewHistoryUpdate) check() error {
	if v, ok := hvhu.mutation.AssetType(); ok {
		if err := hpviewhistory.AssetTypeValidator(v); err != nil {
			return &ValidationError{Name: "asset_type", err: fmt.Errorf(`ent: validator failed for field "HPViewHistory.asset_type": %w`, err)}
		}
	}
	if _, ok := hvhu.mutation.UserID(); hvhu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "HPViewHistory.user"`)
	}
	return nil
}

func (hvhu *HPViewHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := hvhu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(hpviewhistory.Table, hpviewhistory.Columns, sqlgraph.NewFieldSpec(hpviewhistory.FieldID, field.TypeInt))
	if ps := hvhu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if hvhu.mutation.CreatedAtCleared() {
		_spec.ClearField(hpviewhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := hvhu.mutation.UpdatedAt(); ok {
		_spec.SetField(hpviewhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if hvhu.mutation.UpdatedAtCleared() {
		_spec.ClearField(hpviewhistory.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := hvhu.mutation.ContentID(); ok {
		_spec.SetField(hpviewhistory.FieldContentID, field.TypeInt, value)
	}
	if value, ok := hvhu.mutation.AddedContentID(); ok {
		_spec.AddField(hpviewhistory.FieldContentID, field.TypeInt, value)
	}
	if value, ok := hvhu.mutation.ContentPostAt(); ok {
		_spec.SetField(hpviewhistory.FieldContentPostAt, field.TypeTime, value)
	}
	if value, ok := hvhu.mutation.AssetType(); ok {
		_spec.SetField(hpviewhistory.FieldAssetType, field.TypeEnum, value)
	}
	if value, ok := hvhu.mutation.IsFavorite(); ok {
		_spec.SetField(hpviewhistory.FieldIsFavorite, field.TypeBool, value)
	}
	if hvhu.mutation.FeedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpviewhistory.FeedTable,
			Columns: []string{hpviewhistory.FeedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpfeeditem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hvhu.mutation.FeedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpviewhistory.FeedTable,
			Columns: []string{hpviewhistory.FeedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpfeeditem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hvhu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpviewhistory.UserTable,
			Columns: []string{hpviewhistory.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hvhu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpviewhistory.UserTable,
			Columns: []string{hpviewhistory.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hvhu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hpviewhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	hvhu.mutation.done = true
	return n, nil
}

// HPViewHistoryUpdateOne is the builder for updating a single HPViewHistory entity.
type HPViewHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HPViewHistoryMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (hvhuo *HPViewHistoryUpdateOne) SetUpdatedAt(t time.Time) *HPViewHistoryUpdateOne {
	hvhuo.mutation.SetUpdatedAt(t)
	return hvhuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (hvhuo *HPViewHistoryUpdateOne) SetNillableUpdatedAt(t *time.Time) *HPViewHistoryUpdateOne {
	if t != nil {
		hvhuo.SetUpdatedAt(*t)
	}
	return hvhuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (hvhuo *HPViewHistoryUpdateOne) ClearUpdatedAt() *HPViewHistoryUpdateOne {
	hvhuo.mutation.ClearUpdatedAt()
	return hvhuo
}

// SetContentID sets the "content_id" field.
func (hvhuo *HPViewHistoryUpdateOne) SetContentID(i int) *HPViewHistoryUpdateOne {
	hvhuo.mutation.ResetContentID()
	hvhuo.mutation.SetContentID(i)
	return hvhuo
}

// AddContentID adds i to the "content_id" field.
func (hvhuo *HPViewHistoryUpdateOne) AddContentID(i int) *HPViewHistoryUpdateOne {
	hvhuo.mutation.AddContentID(i)
	return hvhuo
}

// SetContentPostAt sets the "content_post_at" field.
func (hvhuo *HPViewHistoryUpdateOne) SetContentPostAt(t time.Time) *HPViewHistoryUpdateOne {
	hvhuo.mutation.SetContentPostAt(t)
	return hvhuo
}

// SetAssetType sets the "asset_type" field.
func (hvhuo *HPViewHistoryUpdateOne) SetAssetType(eat enums.HPAssetType) *HPViewHistoryUpdateOne {
	hvhuo.mutation.SetAssetType(eat)
	return hvhuo
}

// SetIsFavorite sets the "is_favorite" field.
func (hvhuo *HPViewHistoryUpdateOne) SetIsFavorite(b bool) *HPViewHistoryUpdateOne {
	hvhuo.mutation.SetIsFavorite(b)
	return hvhuo
}

// SetNillableIsFavorite sets the "is_favorite" field if the given value is not nil.
func (hvhuo *HPViewHistoryUpdateOne) SetNillableIsFavorite(b *bool) *HPViewHistoryUpdateOne {
	if b != nil {
		hvhuo.SetIsFavorite(*b)
	}
	return hvhuo
}

// SetOwnerUserID sets the "owner_user_id" field.
func (hvhuo *HPViewHistoryUpdateOne) SetOwnerUserID(i int) *HPViewHistoryUpdateOne {
	hvhuo.mutation.SetOwnerUserID(i)
	return hvhuo
}

// SetFeedID sets the "feed" edge to the HPFeedItem entity by ID.
func (hvhuo *HPViewHistoryUpdateOne) SetFeedID(id int) *HPViewHistoryUpdateOne {
	hvhuo.mutation.SetFeedID(id)
	return hvhuo
}

// SetNillableFeedID sets the "feed" edge to the HPFeedItem entity by ID if the given value is not nil.
func (hvhuo *HPViewHistoryUpdateOne) SetNillableFeedID(id *int) *HPViewHistoryUpdateOne {
	if id != nil {
		hvhuo = hvhuo.SetFeedID(*id)
	}
	return hvhuo
}

// SetFeed sets the "feed" edge to the HPFeedItem entity.
func (hvhuo *HPViewHistoryUpdateOne) SetFeed(h *HPFeedItem) *HPViewHistoryUpdateOne {
	return hvhuo.SetFeedID(h.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (hvhuo *HPViewHistoryUpdateOne) SetUserID(id int) *HPViewHistoryUpdateOne {
	hvhuo.mutation.SetUserID(id)
	return hvhuo
}

// SetUser sets the "user" edge to the User entity.
func (hvhuo *HPViewHistoryUpdateOne) SetUser(u *User) *HPViewHistoryUpdateOne {
	return hvhuo.SetUserID(u.ID)
}

// Mutation returns the HPViewHistoryMutation object of the builder.
func (hvhuo *HPViewHistoryUpdateOne) Mutation() *HPViewHistoryMutation {
	return hvhuo.mutation
}

// ClearFeed clears the "feed" edge to the HPFeedItem entity.
func (hvhuo *HPViewHistoryUpdateOne) ClearFeed() *HPViewHistoryUpdateOne {
	hvhuo.mutation.ClearFeed()
	return hvhuo
}

// ClearUser clears the "user" edge to the User entity.
func (hvhuo *HPViewHistoryUpdateOne) ClearUser() *HPViewHistoryUpdateOne {
	hvhuo.mutation.ClearUser()
	return hvhuo
}

// Where appends a list predicates to the HPViewHistoryUpdate builder.
func (hvhuo *HPViewHistoryUpdateOne) Where(ps ...predicate.HPViewHistory) *HPViewHistoryUpdateOne {
	hvhuo.mutation.Where(ps...)
	return hvhuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (hvhuo *HPViewHistoryUpdateOne) Select(field string, fields ...string) *HPViewHistoryUpdateOne {
	hvhuo.fields = append([]string{field}, fields...)
	return hvhuo
}

// Save executes the query and returns the updated HPViewHistory entity.
func (hvhuo *HPViewHistoryUpdateOne) Save(ctx context.Context) (*HPViewHistory, error) {
	return withHooks[*HPViewHistory, HPViewHistoryMutation](ctx, hvhuo.sqlSave, hvhuo.mutation, hvhuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hvhuo *HPViewHistoryUpdateOne) SaveX(ctx context.Context) *HPViewHistory {
	node, err := hvhuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (hvhuo *HPViewHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := hvhuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hvhuo *HPViewHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := hvhuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hvhuo *HPViewHistoryUpdateOne) check() error {
	if v, ok := hvhuo.mutation.AssetType(); ok {
		if err := hpviewhistory.AssetTypeValidator(v); err != nil {
			return &ValidationError{Name: "asset_type", err: fmt.Errorf(`ent: validator failed for field "HPViewHistory.asset_type": %w`, err)}
		}
	}
	if _, ok := hvhuo.mutation.UserID(); hvhuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "HPViewHistory.user"`)
	}
	return nil
}

func (hvhuo *HPViewHistoryUpdateOne) sqlSave(ctx context.Context) (_node *HPViewHistory, err error) {
	if err := hvhuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(hpviewhistory.Table, hpviewhistory.Columns, sqlgraph.NewFieldSpec(hpviewhistory.FieldID, field.TypeInt))
	id, ok := hvhuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "HPViewHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := hvhuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hpviewhistory.FieldID)
		for _, f := range fields {
			if !hpviewhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != hpviewhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := hvhuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if hvhuo.mutation.CreatedAtCleared() {
		_spec.ClearField(hpviewhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := hvhuo.mutation.UpdatedAt(); ok {
		_spec.SetField(hpviewhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if hvhuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(hpviewhistory.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := hvhuo.mutation.ContentID(); ok {
		_spec.SetField(hpviewhistory.FieldContentID, field.TypeInt, value)
	}
	if value, ok := hvhuo.mutation.AddedContentID(); ok {
		_spec.AddField(hpviewhistory.FieldContentID, field.TypeInt, value)
	}
	if value, ok := hvhuo.mutation.ContentPostAt(); ok {
		_spec.SetField(hpviewhistory.FieldContentPostAt, field.TypeTime, value)
	}
	if value, ok := hvhuo.mutation.AssetType(); ok {
		_spec.SetField(hpviewhistory.FieldAssetType, field.TypeEnum, value)
	}
	if value, ok := hvhuo.mutation.IsFavorite(); ok {
		_spec.SetField(hpviewhistory.FieldIsFavorite, field.TypeBool, value)
	}
	if hvhuo.mutation.FeedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpviewhistory.FeedTable,
			Columns: []string{hpviewhistory.FeedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpfeeditem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hvhuo.mutation.FeedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpviewhistory.FeedTable,
			Columns: []string{hpviewhistory.FeedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpfeeditem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hvhuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpviewhistory.UserTable,
			Columns: []string{hpviewhistory.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hvhuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpviewhistory.UserTable,
			Columns: []string{hpviewhistory.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &HPViewHistory{config: hvhuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, hvhuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hpviewhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	hvhuo.mutation.done = true
	return _node, nil
}
