// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/yssk22/hpapp/go/service/ent/auth"
	"github.com/yssk22/hpapp/go/service/ent/predicate"
	"github.com/yssk22/hpapp/go/service/ent/user"
)

// AuthUpdate is the builder for updating Auth entities.
type AuthUpdate struct {
	config
	hooks    []Hook
	mutation *AuthMutation
}

// Where appends a list predicates to the AuthUpdate builder.
func (au *AuthUpdate) Where(ps ...predicate.Auth) *AuthUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AuthUpdate) SetUpdatedAt(t time.Time) *AuthUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (au *AuthUpdate) SetNillableUpdatedAt(t *time.Time) *AuthUpdate {
	if t != nil {
		au.SetUpdatedAt(*t)
	}
	return au
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (au *AuthUpdate) ClearUpdatedAt() *AuthUpdate {
	au.mutation.ClearUpdatedAt()
	return au
}

// SetProviderName sets the "provider_name" field.
func (au *AuthUpdate) SetProviderName(s string) *AuthUpdate {
	au.mutation.SetProviderName(s)
	return au
}

// SetProviderUserID sets the "provider_user_id" field.
func (au *AuthUpdate) SetProviderUserID(s string) *AuthUpdate {
	au.mutation.SetProviderUserID(s)
	return au
}

// SetAccessToken sets the "access_token" field.
func (au *AuthUpdate) SetAccessToken(s string) *AuthUpdate {
	au.mutation.SetAccessToken(s)
	return au
}

// SetRefreshToken sets the "refresh_token" field.
func (au *AuthUpdate) SetRefreshToken(s string) *AuthUpdate {
	au.mutation.SetRefreshToken(s)
	return au
}

// SetNillableRefreshToken sets the "refresh_token" field if the given value is not nil.
func (au *AuthUpdate) SetNillableRefreshToken(s *string) *AuthUpdate {
	if s != nil {
		au.SetRefreshToken(*s)
	}
	return au
}

// ClearRefreshToken clears the value of the "refresh_token" field.
func (au *AuthUpdate) ClearRefreshToken() *AuthUpdate {
	au.mutation.ClearRefreshToken()
	return au
}

// SetExpireAt sets the "expire_at" field.
func (au *AuthUpdate) SetExpireAt(t time.Time) *AuthUpdate {
	au.mutation.SetExpireAt(t)
	return au
}

// SetNillableExpireAt sets the "expire_at" field if the given value is not nil.
func (au *AuthUpdate) SetNillableExpireAt(t *time.Time) *AuthUpdate {
	if t != nil {
		au.SetExpireAt(*t)
	}
	return au
}

// ClearExpireAt clears the value of the "expire_at" field.
func (au *AuthUpdate) ClearExpireAt() *AuthUpdate {
	au.mutation.ClearExpireAt()
	return au
}

// SetScope sets the "scope" field.
func (au *AuthUpdate) SetScope(s []string) *AuthUpdate {
	au.mutation.SetScope(s)
	return au
}

// AppendScope appends s to the "scope" field.
func (au *AuthUpdate) AppendScope(s []string) *AuthUpdate {
	au.mutation.AppendScope(s)
	return au
}

// ClearScope clears the value of the "scope" field.
func (au *AuthUpdate) ClearScope() *AuthUpdate {
	au.mutation.ClearScope()
	return au
}

// SetOwnerUserID sets the "owner_user_id" field.
func (au *AuthUpdate) SetOwnerUserID(i int) *AuthUpdate {
	au.mutation.SetOwnerUserID(i)
	return au
}

// SetNillableOwnerUserID sets the "owner_user_id" field if the given value is not nil.
func (au *AuthUpdate) SetNillableOwnerUserID(i *int) *AuthUpdate {
	if i != nil {
		au.SetOwnerUserID(*i)
	}
	return au
}

// ClearOwnerUserID clears the value of the "owner_user_id" field.
func (au *AuthUpdate) ClearOwnerUserID() *AuthUpdate {
	au.mutation.ClearOwnerUserID()
	return au
}

// SetUserID sets the "user" edge to the User entity by ID.
func (au *AuthUpdate) SetUserID(id int) *AuthUpdate {
	au.mutation.SetUserID(id)
	return au
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (au *AuthUpdate) SetNillableUserID(id *int) *AuthUpdate {
	if id != nil {
		au = au.SetUserID(*id)
	}
	return au
}

// SetUser sets the "user" edge to the User entity.
func (au *AuthUpdate) SetUser(u *User) *AuthUpdate {
	return au.SetUserID(u.ID)
}

// Mutation returns the AuthMutation object of the builder.
func (au *AuthUpdate) Mutation() *AuthMutation {
	return au.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (au *AuthUpdate) ClearUser() *AuthUpdate {
	au.mutation.ClearUser()
	return au
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AuthUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, AuthMutation](ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AuthUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AuthUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AuthUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

func (au *AuthUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(auth.Table, auth.Columns, sqlgraph.NewFieldSpec(auth.FieldID, field.TypeInt))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if au.mutation.CreatedAtCleared() {
		_spec.ClearField(auth.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.SetField(auth.FieldUpdatedAt, field.TypeTime, value)
	}
	if au.mutation.UpdatedAtCleared() {
		_spec.ClearField(auth.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := au.mutation.ProviderName(); ok {
		_spec.SetField(auth.FieldProviderName, field.TypeString, value)
	}
	if value, ok := au.mutation.ProviderUserID(); ok {
		_spec.SetField(auth.FieldProviderUserID, field.TypeString, value)
	}
	if value, ok := au.mutation.AccessToken(); ok {
		_spec.SetField(auth.FieldAccessToken, field.TypeString, value)
	}
	if value, ok := au.mutation.RefreshToken(); ok {
		_spec.SetField(auth.FieldRefreshToken, field.TypeString, value)
	}
	if au.mutation.RefreshTokenCleared() {
		_spec.ClearField(auth.FieldRefreshToken, field.TypeString)
	}
	if value, ok := au.mutation.ExpireAt(); ok {
		_spec.SetField(auth.FieldExpireAt, field.TypeTime, value)
	}
	if au.mutation.ExpireAtCleared() {
		_spec.ClearField(auth.FieldExpireAt, field.TypeTime)
	}
	if value, ok := au.mutation.Scope(); ok {
		_spec.SetField(auth.FieldScope, field.TypeJSON, value)
	}
	if value, ok := au.mutation.AppendedScope(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, auth.FieldScope, value)
		})
	}
	if au.mutation.ScopeCleared() {
		_spec.ClearField(auth.FieldScope, field.TypeJSON)
	}
	if au.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   auth.UserTable,
			Columns: []string{auth.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   auth.UserTable,
			Columns: []string{auth.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{auth.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AuthUpdateOne is the builder for updating a single Auth entity.
type AuthUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AuthMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AuthUpdateOne) SetUpdatedAt(t time.Time) *AuthUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (auo *AuthUpdateOne) SetNillableUpdatedAt(t *time.Time) *AuthUpdateOne {
	if t != nil {
		auo.SetUpdatedAt(*t)
	}
	return auo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (auo *AuthUpdateOne) ClearUpdatedAt() *AuthUpdateOne {
	auo.mutation.ClearUpdatedAt()
	return auo
}

// SetProviderName sets the "provider_name" field.
func (auo *AuthUpdateOne) SetProviderName(s string) *AuthUpdateOne {
	auo.mutation.SetProviderName(s)
	return auo
}

// SetProviderUserID sets the "provider_user_id" field.
func (auo *AuthUpdateOne) SetProviderUserID(s string) *AuthUpdateOne {
	auo.mutation.SetProviderUserID(s)
	return auo
}

// SetAccessToken sets the "access_token" field.
func (auo *AuthUpdateOne) SetAccessToken(s string) *AuthUpdateOne {
	auo.mutation.SetAccessToken(s)
	return auo
}

// SetRefreshToken sets the "refresh_token" field.
func (auo *AuthUpdateOne) SetRefreshToken(s string) *AuthUpdateOne {
	auo.mutation.SetRefreshToken(s)
	return auo
}

// SetNillableRefreshToken sets the "refresh_token" field if the given value is not nil.
func (auo *AuthUpdateOne) SetNillableRefreshToken(s *string) *AuthUpdateOne {
	if s != nil {
		auo.SetRefreshToken(*s)
	}
	return auo
}

// ClearRefreshToken clears the value of the "refresh_token" field.
func (auo *AuthUpdateOne) ClearRefreshToken() *AuthUpdateOne {
	auo.mutation.ClearRefreshToken()
	return auo
}

// SetExpireAt sets the "expire_at" field.
func (auo *AuthUpdateOne) SetExpireAt(t time.Time) *AuthUpdateOne {
	auo.mutation.SetExpireAt(t)
	return auo
}

// SetNillableExpireAt sets the "expire_at" field if the given value is not nil.
func (auo *AuthUpdateOne) SetNillableExpireAt(t *time.Time) *AuthUpdateOne {
	if t != nil {
		auo.SetExpireAt(*t)
	}
	return auo
}

// ClearExpireAt clears the value of the "expire_at" field.
func (auo *AuthUpdateOne) ClearExpireAt() *AuthUpdateOne {
	auo.mutation.ClearExpireAt()
	return auo
}

// SetScope sets the "scope" field.
func (auo *AuthUpdateOne) SetScope(s []string) *AuthUpdateOne {
	auo.mutation.SetScope(s)
	return auo
}

// AppendScope appends s to the "scope" field.
func (auo *AuthUpdateOne) AppendScope(s []string) *AuthUpdateOne {
	auo.mutation.AppendScope(s)
	return auo
}

// ClearScope clears the value of the "scope" field.
func (auo *AuthUpdateOne) ClearScope() *AuthUpdateOne {
	auo.mutation.ClearScope()
	return auo
}

// SetOwnerUserID sets the "owner_user_id" field.
func (auo *AuthUpdateOne) SetOwnerUserID(i int) *AuthUpdateOne {
	auo.mutation.SetOwnerUserID(i)
	return auo
}

// SetNillableOwnerUserID sets the "owner_user_id" field if the given value is not nil.
func (auo *AuthUpdateOne) SetNillableOwnerUserID(i *int) *AuthUpdateOne {
	if i != nil {
		auo.SetOwnerUserID(*i)
	}
	return auo
}

// ClearOwnerUserID clears the value of the "owner_user_id" field.
func (auo *AuthUpdateOne) ClearOwnerUserID() *AuthUpdateOne {
	auo.mutation.ClearOwnerUserID()
	return auo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (auo *AuthUpdateOne) SetUserID(id int) *AuthUpdateOne {
	auo.mutation.SetUserID(id)
	return auo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (auo *AuthUpdateOne) SetNillableUserID(id *int) *AuthUpdateOne {
	if id != nil {
		auo = auo.SetUserID(*id)
	}
	return auo
}

// SetUser sets the "user" edge to the User entity.
func (auo *AuthUpdateOne) SetUser(u *User) *AuthUpdateOne {
	return auo.SetUserID(u.ID)
}

// Mutation returns the AuthMutation object of the builder.
func (auo *AuthUpdateOne) Mutation() *AuthMutation {
	return auo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (auo *AuthUpdateOne) ClearUser() *AuthUpdateOne {
	auo.mutation.ClearUser()
	return auo
}

// Where appends a list predicates to the AuthUpdate builder.
func (auo *AuthUpdateOne) Where(ps ...predicate.Auth) *AuthUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AuthUpdateOne) Select(field string, fields ...string) *AuthUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Auth entity.
func (auo *AuthUpdateOne) Save(ctx context.Context) (*Auth, error) {
	return withHooks[*Auth, AuthMutation](ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AuthUpdateOne) SaveX(ctx context.Context) *Auth {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AuthUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AuthUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auo *AuthUpdateOne) sqlSave(ctx context.Context) (_node *Auth, err error) {
	_spec := sqlgraph.NewUpdateSpec(auth.Table, auth.Columns, sqlgraph.NewFieldSpec(auth.FieldID, field.TypeInt))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Auth.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, auth.FieldID)
		for _, f := range fields {
			if !auth.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != auth.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if auo.mutation.CreatedAtCleared() {
		_spec.ClearField(auth.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.SetField(auth.FieldUpdatedAt, field.TypeTime, value)
	}
	if auo.mutation.UpdatedAtCleared() {
		_spec.ClearField(auth.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := auo.mutation.ProviderName(); ok {
		_spec.SetField(auth.FieldProviderName, field.TypeString, value)
	}
	if value, ok := auo.mutation.ProviderUserID(); ok {
		_spec.SetField(auth.FieldProviderUserID, field.TypeString, value)
	}
	if value, ok := auo.mutation.AccessToken(); ok {
		_spec.SetField(auth.FieldAccessToken, field.TypeString, value)
	}
	if value, ok := auo.mutation.RefreshToken(); ok {
		_spec.SetField(auth.FieldRefreshToken, field.TypeString, value)
	}
	if auo.mutation.RefreshTokenCleared() {
		_spec.ClearField(auth.FieldRefreshToken, field.TypeString)
	}
	if value, ok := auo.mutation.ExpireAt(); ok {
		_spec.SetField(auth.FieldExpireAt, field.TypeTime, value)
	}
	if auo.mutation.ExpireAtCleared() {
		_spec.ClearField(auth.FieldExpireAt, field.TypeTime)
	}
	if value, ok := auo.mutation.Scope(); ok {
		_spec.SetField(auth.FieldScope, field.TypeJSON, value)
	}
	if value, ok := auo.mutation.AppendedScope(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, auth.FieldScope, value)
		})
	}
	if auo.mutation.ScopeCleared() {
		_spec.ClearField(auth.FieldScope, field.TypeJSON)
	}
	if auo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   auth.UserTable,
			Columns: []string{auth.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   auth.UserTable,
			Columns: []string{auth.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Auth{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{auth.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
