// Code generated by ent, DO NOT EDIT.

package hpartist

import (
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the hpartist type in the database.
	Label = "hp_artist"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCrawledAt holds the string denoting the crawled_at field in the database.
	FieldCrawledAt = "crawled_at"
	// FieldErrorCount holds the string denoting the error_count field in the database.
	FieldErrorCount = "error_count"
	// FieldManuallyModified holds the string denoting the manually_modified field in the database.
	FieldManuallyModified = "manually_modified"
	// FieldLastErrorMessage holds the string denoting the last_error_message field in the database.
	FieldLastErrorMessage = "last_error_message"
	// FieldRecrawlRequired holds the string denoting the recrawl_required field in the database.
	FieldRecrawlRequired = "recrawl_required"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldKey holds the string denoting the key field in the database.
	FieldKey = "key"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldThumbnailURL holds the string denoting the thumbnail_url field in the database.
	FieldThumbnailURL = "thumbnail_url"
	// FieldIndex holds the string denoting the index field in the database.
	FieldIndex = "index"
	// EdgeMembers holds the string denoting the members edge name in mutations.
	EdgeMembers = "members"
	// EdgeAssets holds the string denoting the assets edge name in mutations.
	EdgeAssets = "assets"
	// EdgeOwningFeed holds the string denoting the owning_feed edge name in mutations.
	EdgeOwningFeed = "owning_feed"
	// EdgeTaggedFeed holds the string denoting the tagged_feed edge name in mutations.
	EdgeTaggedFeed = "tagged_feed"
	// EdgeOwningIgPosts holds the string denoting the owning_ig_posts edge name in mutations.
	EdgeOwningIgPosts = "owning_ig_posts"
	// EdgeTaggedIgPosts holds the string denoting the tagged_ig_posts edge name in mutations.
	EdgeTaggedIgPosts = "tagged_ig_posts"
	// EdgeOwningAmebloPosts holds the string denoting the owning_ameblo_posts edge name in mutations.
	EdgeOwningAmebloPosts = "owning_ameblo_posts"
	// EdgeTaggedAmebloPosts holds the string denoting the tagged_ameblo_posts edge name in mutations.
	EdgeTaggedAmebloPosts = "tagged_ameblo_posts"
	// EdgeTaggedElineupMallItems holds the string denoting the tagged_elineup_mall_items edge name in mutations.
	EdgeTaggedElineupMallItems = "tagged_elineup_mall_items"
	// Table holds the table name of the hpartist in the database.
	Table = "hp_artists"
	// MembersTable is the table that holds the members relation/edge.
	MembersTable = "hp_members"
	// MembersInverseTable is the table name for the HPMember entity.
	// It exists in this package in order to avoid circular dependency with the "hpmember" package.
	MembersInverseTable = "hp_members"
	// MembersColumn is the table column denoting the members relation/edge.
	MembersColumn = "hp_artist_members"
	// AssetsTable is the table that holds the assets relation/edge.
	AssetsTable = "hp_assets"
	// AssetsInverseTable is the table name for the HPAsset entity.
	// It exists in this package in order to avoid circular dependency with the "hpasset" package.
	AssetsInverseTable = "hp_assets"
	// AssetsColumn is the table column denoting the assets relation/edge.
	AssetsColumn = "hp_artist_assets"
	// OwningFeedTable is the table that holds the owning_feed relation/edge.
	OwningFeedTable = "hp_feed_items"
	// OwningFeedInverseTable is the table name for the HPFeedItem entity.
	// It exists in this package in order to avoid circular dependency with the "hpfeeditem" package.
	OwningFeedInverseTable = "hp_feed_items"
	// OwningFeedColumn is the table column denoting the owning_feed relation/edge.
	OwningFeedColumn = "owner_artist_id"
	// TaggedFeedTable is the table that holds the tagged_feed relation/edge. The primary key declared below.
	TaggedFeedTable = "hp_artist_feed"
	// TaggedFeedInverseTable is the table name for the HPFeedItem entity.
	// It exists in this package in order to avoid circular dependency with the "hpfeeditem" package.
	TaggedFeedInverseTable = "hp_feed_items"
	// OwningIgPostsTable is the table that holds the owning_ig_posts relation/edge.
	OwningIgPostsTable = "hp_ig_posts"
	// OwningIgPostsInverseTable is the table name for the HPIgPost entity.
	// It exists in this package in order to avoid circular dependency with the "hpigpost" package.
	OwningIgPostsInverseTable = "hp_ig_posts"
	// OwningIgPostsColumn is the table column denoting the owning_ig_posts relation/edge.
	OwningIgPostsColumn = "hp_artist_ig_posts"
	// TaggedIgPostsTable is the table that holds the tagged_ig_posts relation/edge. The primary key declared below.
	TaggedIgPostsTable = "hp_artist_tagged_ig_posts"
	// TaggedIgPostsInverseTable is the table name for the HPIgPost entity.
	// It exists in this package in order to avoid circular dependency with the "hpigpost" package.
	TaggedIgPostsInverseTable = "hp_ig_posts"
	// OwningAmebloPostsTable is the table that holds the owning_ameblo_posts relation/edge.
	OwningAmebloPostsTable = "hp_ameblo_posts"
	// OwningAmebloPostsInverseTable is the table name for the HPAmebloPost entity.
	// It exists in this package in order to avoid circular dependency with the "hpameblopost" package.
	OwningAmebloPostsInverseTable = "hp_ameblo_posts"
	// OwningAmebloPostsColumn is the table column denoting the owning_ameblo_posts relation/edge.
	OwningAmebloPostsColumn = "hp_artist_ameblo_posts"
	// TaggedAmebloPostsTable is the table that holds the tagged_ameblo_posts relation/edge. The primary key declared below.
	TaggedAmebloPostsTable = "hp_artist_tagged_ameblo_posts"
	// TaggedAmebloPostsInverseTable is the table name for the HPAmebloPost entity.
	// It exists in this package in order to avoid circular dependency with the "hpameblopost" package.
	TaggedAmebloPostsInverseTable = "hp_ameblo_posts"
	// TaggedElineupMallItemsTable is the table that holds the tagged_elineup_mall_items relation/edge. The primary key declared below.
	TaggedElineupMallItemsTable = "hp_artist_elineup_mall_items"
	// TaggedElineupMallItemsInverseTable is the table name for the HPElineupMallItem entity.
	// It exists in this package in order to avoid circular dependency with the "hpelineupmallitem" package.
	TaggedElineupMallItemsInverseTable = "hp_elineup_mall_items"
)

// Columns holds all SQL columns for hpartist fields.
var Columns = []string{
	FieldID,
	FieldCrawledAt,
	FieldErrorCount,
	FieldManuallyModified,
	FieldLastErrorMessage,
	FieldRecrawlRequired,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldKey,
	FieldName,
	FieldThumbnailURL,
	FieldIndex,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "hp_artists"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"hp_event_artists",
}

var (
	// TaggedFeedPrimaryKey and TaggedFeedColumn2 are the table columns denoting the
	// primary key for the tagged_feed relation (M2M).
	TaggedFeedPrimaryKey = []string{"hp_artist_id", "hp_feed_item_id"}
	// TaggedIgPostsPrimaryKey and TaggedIgPostsColumn2 are the table columns denoting the
	// primary key for the tagged_ig_posts relation (M2M).
	TaggedIgPostsPrimaryKey = []string{"hp_artist_id", "hp_ig_post_id"}
	// TaggedAmebloPostsPrimaryKey and TaggedAmebloPostsColumn2 are the table columns denoting the
	// primary key for the tagged_ameblo_posts relation (M2M).
	TaggedAmebloPostsPrimaryKey = []string{"hp_artist_id", "hp_ameblo_post_id"}
	// TaggedElineupMallItemsPrimaryKey and TaggedElineupMallItemsColumn2 are the table columns denoting the
	// primary key for the tagged_elineup_mall_items relation (M2M).
	TaggedElineupMallItemsPrimaryKey = []string{"hp_artist_id", "hp_elineup_mall_item_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "hpapp.yssk22.dev/go/service/ent/runtime"
//
var (
	Hooks  [2]ent.Hook
	Policy ent.Policy
	// DefaultErrorCount holds the default value on creation for the "error_count" field.
	DefaultErrorCount int
	// DefaultRecrawlRequired holds the default value on creation for the "recrawl_required" field.
	DefaultRecrawlRequired bool
)

// Order defines the ordering method for the HPArtist queries.
type Order func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCrawledAt orders the results by the crawled_at field.
func ByCrawledAt(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldCrawledAt, opts...).ToFunc()
}

// ByErrorCount orders the results by the error_count field.
func ByErrorCount(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldErrorCount, opts...).ToFunc()
}

// ByLastErrorMessage orders the results by the last_error_message field.
func ByLastErrorMessage(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldLastErrorMessage, opts...).ToFunc()
}

// ByRecrawlRequired orders the results by the recrawl_required field.
func ByRecrawlRequired(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldRecrawlRequired, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByKey orders the results by the key field.
func ByKey(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldKey, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByThumbnailURL orders the results by the thumbnail_url field.
func ByThumbnailURL(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldThumbnailURL, opts...).ToFunc()
}

// ByIndex orders the results by the index field.
func ByIndex(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldIndex, opts...).ToFunc()
}

// ByMembersCount orders the results by members count.
func ByMembersCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMembersStep(), opts...)
	}
}

// ByMembers orders the results by members terms.
func ByMembers(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMembersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAssetsCount orders the results by assets count.
func ByAssetsCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAssetsStep(), opts...)
	}
}

// ByAssets orders the results by assets terms.
func ByAssets(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAssetsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOwningFeedCount orders the results by owning_feed count.
func ByOwningFeedCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOwningFeedStep(), opts...)
	}
}

// ByOwningFeed orders the results by owning_feed terms.
func ByOwningFeed(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwningFeedStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTaggedFeedCount orders the results by tagged_feed count.
func ByTaggedFeedCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTaggedFeedStep(), opts...)
	}
}

// ByTaggedFeed orders the results by tagged_feed terms.
func ByTaggedFeed(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTaggedFeedStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOwningIgPostsCount orders the results by owning_ig_posts count.
func ByOwningIgPostsCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOwningIgPostsStep(), opts...)
	}
}

// ByOwningIgPosts orders the results by owning_ig_posts terms.
func ByOwningIgPosts(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwningIgPostsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTaggedIgPostsCount orders the results by tagged_ig_posts count.
func ByTaggedIgPostsCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTaggedIgPostsStep(), opts...)
	}
}

// ByTaggedIgPosts orders the results by tagged_ig_posts terms.
func ByTaggedIgPosts(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTaggedIgPostsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOwningAmebloPostsCount orders the results by owning_ameblo_posts count.
func ByOwningAmebloPostsCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOwningAmebloPostsStep(), opts...)
	}
}

// ByOwningAmebloPosts orders the results by owning_ameblo_posts terms.
func ByOwningAmebloPosts(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwningAmebloPostsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTaggedAmebloPostsCount orders the results by tagged_ameblo_posts count.
func ByTaggedAmebloPostsCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTaggedAmebloPostsStep(), opts...)
	}
}

// ByTaggedAmebloPosts orders the results by tagged_ameblo_posts terms.
func ByTaggedAmebloPosts(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTaggedAmebloPostsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTaggedElineupMallItemsCount orders the results by tagged_elineup_mall_items count.
func ByTaggedElineupMallItemsCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTaggedElineupMallItemsStep(), opts...)
	}
}

// ByTaggedElineupMallItems orders the results by tagged_elineup_mall_items terms.
func ByTaggedElineupMallItems(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTaggedElineupMallItemsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newMembersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MembersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MembersTable, MembersColumn),
	)
}
func newAssetsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AssetsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AssetsTable, AssetsColumn),
	)
}
func newOwningFeedStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwningFeedInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OwningFeedTable, OwningFeedColumn),
	)
}
func newTaggedFeedStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TaggedFeedInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, TaggedFeedTable, TaggedFeedPrimaryKey...),
	)
}
func newOwningIgPostsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwningIgPostsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OwningIgPostsTable, OwningIgPostsColumn),
	)
}
func newTaggedIgPostsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TaggedIgPostsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, TaggedIgPostsTable, TaggedIgPostsPrimaryKey...),
	)
}
func newOwningAmebloPostsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwningAmebloPostsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OwningAmebloPostsTable, OwningAmebloPostsColumn),
	)
}
func newTaggedAmebloPostsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TaggedAmebloPostsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, TaggedAmebloPostsTable, TaggedAmebloPostsPrimaryKey...),
	)
}
func newTaggedElineupMallItemsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TaggedElineupMallItemsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, TaggedElineupMallItemsTable, TaggedElineupMallItemsPrimaryKey...),
	)
}
