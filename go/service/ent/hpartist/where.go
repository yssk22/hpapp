// Code generated by ent, DO NOT EDIT.

package hpartist

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/yssk22/hpapp/go/service/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldLTE(FieldID, id))
}

// CrawledAt applies equality check predicate on the "crawled_at" field. It's identical to CrawledAtEQ.
func CrawledAt(v time.Time) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldEQ(FieldCrawledAt, v))
}

// ErrorCount applies equality check predicate on the "error_count" field. It's identical to ErrorCountEQ.
func ErrorCount(v int) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldEQ(FieldErrorCount, v))
}

// LastErrorMessage applies equality check predicate on the "last_error_message" field. It's identical to LastErrorMessageEQ.
func LastErrorMessage(v string) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldEQ(FieldLastErrorMessage, v))
}

// RecrawlRequired applies equality check predicate on the "recrawl_required" field. It's identical to RecrawlRequiredEQ.
func RecrawlRequired(v bool) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldEQ(FieldRecrawlRequired, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldEQ(FieldUpdatedAt, v))
}

// Key applies equality check predicate on the "key" field. It's identical to KeyEQ.
func Key(v string) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldEQ(FieldKey, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldEQ(FieldName, v))
}

// ThumbnailURL applies equality check predicate on the "thumbnail_url" field. It's identical to ThumbnailURLEQ.
func ThumbnailURL(v string) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldEQ(FieldThumbnailURL, v))
}

// Index applies equality check predicate on the "index" field. It's identical to IndexEQ.
func Index(v int) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldEQ(FieldIndex, v))
}

// CrawledAtEQ applies the EQ predicate on the "crawled_at" field.
func CrawledAtEQ(v time.Time) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldEQ(FieldCrawledAt, v))
}

// CrawledAtNEQ applies the NEQ predicate on the "crawled_at" field.
func CrawledAtNEQ(v time.Time) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldNEQ(FieldCrawledAt, v))
}

// CrawledAtIn applies the In predicate on the "crawled_at" field.
func CrawledAtIn(vs ...time.Time) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldIn(FieldCrawledAt, vs...))
}

// CrawledAtNotIn applies the NotIn predicate on the "crawled_at" field.
func CrawledAtNotIn(vs ...time.Time) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldNotIn(FieldCrawledAt, vs...))
}

// CrawledAtGT applies the GT predicate on the "crawled_at" field.
func CrawledAtGT(v time.Time) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldGT(FieldCrawledAt, v))
}

// CrawledAtGTE applies the GTE predicate on the "crawled_at" field.
func CrawledAtGTE(v time.Time) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldGTE(FieldCrawledAt, v))
}

// CrawledAtLT applies the LT predicate on the "crawled_at" field.
func CrawledAtLT(v time.Time) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldLT(FieldCrawledAt, v))
}

// CrawledAtLTE applies the LTE predicate on the "crawled_at" field.
func CrawledAtLTE(v time.Time) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldLTE(FieldCrawledAt, v))
}

// CrawledAtIsNil applies the IsNil predicate on the "crawled_at" field.
func CrawledAtIsNil() predicate.HPArtist {
	return predicate.HPArtist(sql.FieldIsNull(FieldCrawledAt))
}

// CrawledAtNotNil applies the NotNil predicate on the "crawled_at" field.
func CrawledAtNotNil() predicate.HPArtist {
	return predicate.HPArtist(sql.FieldNotNull(FieldCrawledAt))
}

// ErrorCountEQ applies the EQ predicate on the "error_count" field.
func ErrorCountEQ(v int) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldEQ(FieldErrorCount, v))
}

// ErrorCountNEQ applies the NEQ predicate on the "error_count" field.
func ErrorCountNEQ(v int) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldNEQ(FieldErrorCount, v))
}

// ErrorCountIn applies the In predicate on the "error_count" field.
func ErrorCountIn(vs ...int) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldIn(FieldErrorCount, vs...))
}

// ErrorCountNotIn applies the NotIn predicate on the "error_count" field.
func ErrorCountNotIn(vs ...int) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldNotIn(FieldErrorCount, vs...))
}

// ErrorCountGT applies the GT predicate on the "error_count" field.
func ErrorCountGT(v int) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldGT(FieldErrorCount, v))
}

// ErrorCountGTE applies the GTE predicate on the "error_count" field.
func ErrorCountGTE(v int) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldGTE(FieldErrorCount, v))
}

// ErrorCountLT applies the LT predicate on the "error_count" field.
func ErrorCountLT(v int) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldLT(FieldErrorCount, v))
}

// ErrorCountLTE applies the LTE predicate on the "error_count" field.
func ErrorCountLTE(v int) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldLTE(FieldErrorCount, v))
}

// ManuallyModifiedIsNil applies the IsNil predicate on the "manually_modified" field.
func ManuallyModifiedIsNil() predicate.HPArtist {
	return predicate.HPArtist(sql.FieldIsNull(FieldManuallyModified))
}

// ManuallyModifiedNotNil applies the NotNil predicate on the "manually_modified" field.
func ManuallyModifiedNotNil() predicate.HPArtist {
	return predicate.HPArtist(sql.FieldNotNull(FieldManuallyModified))
}

// LastErrorMessageEQ applies the EQ predicate on the "last_error_message" field.
func LastErrorMessageEQ(v string) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldEQ(FieldLastErrorMessage, v))
}

// LastErrorMessageNEQ applies the NEQ predicate on the "last_error_message" field.
func LastErrorMessageNEQ(v string) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldNEQ(FieldLastErrorMessage, v))
}

// LastErrorMessageIn applies the In predicate on the "last_error_message" field.
func LastErrorMessageIn(vs ...string) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldIn(FieldLastErrorMessage, vs...))
}

// LastErrorMessageNotIn applies the NotIn predicate on the "last_error_message" field.
func LastErrorMessageNotIn(vs ...string) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldNotIn(FieldLastErrorMessage, vs...))
}

// LastErrorMessageGT applies the GT predicate on the "last_error_message" field.
func LastErrorMessageGT(v string) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldGT(FieldLastErrorMessage, v))
}

// LastErrorMessageGTE applies the GTE predicate on the "last_error_message" field.
func LastErrorMessageGTE(v string) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldGTE(FieldLastErrorMessage, v))
}

// LastErrorMessageLT applies the LT predicate on the "last_error_message" field.
func LastErrorMessageLT(v string) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldLT(FieldLastErrorMessage, v))
}

// LastErrorMessageLTE applies the LTE predicate on the "last_error_message" field.
func LastErrorMessageLTE(v string) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldLTE(FieldLastErrorMessage, v))
}

// LastErrorMessageContains applies the Contains predicate on the "last_error_message" field.
func LastErrorMessageContains(v string) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldContains(FieldLastErrorMessage, v))
}

// LastErrorMessageHasPrefix applies the HasPrefix predicate on the "last_error_message" field.
func LastErrorMessageHasPrefix(v string) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldHasPrefix(FieldLastErrorMessage, v))
}

// LastErrorMessageHasSuffix applies the HasSuffix predicate on the "last_error_message" field.
func LastErrorMessageHasSuffix(v string) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldHasSuffix(FieldLastErrorMessage, v))
}

// LastErrorMessageIsNil applies the IsNil predicate on the "last_error_message" field.
func LastErrorMessageIsNil() predicate.HPArtist {
	return predicate.HPArtist(sql.FieldIsNull(FieldLastErrorMessage))
}

// LastErrorMessageNotNil applies the NotNil predicate on the "last_error_message" field.
func LastErrorMessageNotNil() predicate.HPArtist {
	return predicate.HPArtist(sql.FieldNotNull(FieldLastErrorMessage))
}

// LastErrorMessageEqualFold applies the EqualFold predicate on the "last_error_message" field.
func LastErrorMessageEqualFold(v string) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldEqualFold(FieldLastErrorMessage, v))
}

// LastErrorMessageContainsFold applies the ContainsFold predicate on the "last_error_message" field.
func LastErrorMessageContainsFold(v string) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldContainsFold(FieldLastErrorMessage, v))
}

// RecrawlRequiredEQ applies the EQ predicate on the "recrawl_required" field.
func RecrawlRequiredEQ(v bool) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldEQ(FieldRecrawlRequired, v))
}

// RecrawlRequiredNEQ applies the NEQ predicate on the "recrawl_required" field.
func RecrawlRequiredNEQ(v bool) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldNEQ(FieldRecrawlRequired, v))
}

// RecrawlRequiredIsNil applies the IsNil predicate on the "recrawl_required" field.
func RecrawlRequiredIsNil() predicate.HPArtist {
	return predicate.HPArtist(sql.FieldIsNull(FieldRecrawlRequired))
}

// RecrawlRequiredNotNil applies the NotNil predicate on the "recrawl_required" field.
func RecrawlRequiredNotNil() predicate.HPArtist {
	return predicate.HPArtist(sql.FieldNotNull(FieldRecrawlRequired))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.HPArtist {
	return predicate.HPArtist(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.HPArtist {
	return predicate.HPArtist(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.HPArtist {
	return predicate.HPArtist(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.HPArtist {
	return predicate.HPArtist(sql.FieldNotNull(FieldUpdatedAt))
}

// KeyEQ applies the EQ predicate on the "key" field.
func KeyEQ(v string) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldEQ(FieldKey, v))
}

// KeyNEQ applies the NEQ predicate on the "key" field.
func KeyNEQ(v string) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldNEQ(FieldKey, v))
}

// KeyIn applies the In predicate on the "key" field.
func KeyIn(vs ...string) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldIn(FieldKey, vs...))
}

// KeyNotIn applies the NotIn predicate on the "key" field.
func KeyNotIn(vs ...string) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldNotIn(FieldKey, vs...))
}

// KeyGT applies the GT predicate on the "key" field.
func KeyGT(v string) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldGT(FieldKey, v))
}

// KeyGTE applies the GTE predicate on the "key" field.
func KeyGTE(v string) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldGTE(FieldKey, v))
}

// KeyLT applies the LT predicate on the "key" field.
func KeyLT(v string) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldLT(FieldKey, v))
}

// KeyLTE applies the LTE predicate on the "key" field.
func KeyLTE(v string) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldLTE(FieldKey, v))
}

// KeyContains applies the Contains predicate on the "key" field.
func KeyContains(v string) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldContains(FieldKey, v))
}

// KeyHasPrefix applies the HasPrefix predicate on the "key" field.
func KeyHasPrefix(v string) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldHasPrefix(FieldKey, v))
}

// KeyHasSuffix applies the HasSuffix predicate on the "key" field.
func KeyHasSuffix(v string) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldHasSuffix(FieldKey, v))
}

// KeyEqualFold applies the EqualFold predicate on the "key" field.
func KeyEqualFold(v string) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldEqualFold(FieldKey, v))
}

// KeyContainsFold applies the ContainsFold predicate on the "key" field.
func KeyContainsFold(v string) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldContainsFold(FieldKey, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldContainsFold(FieldName, v))
}

// ThumbnailURLEQ applies the EQ predicate on the "thumbnail_url" field.
func ThumbnailURLEQ(v string) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldEQ(FieldThumbnailURL, v))
}

// ThumbnailURLNEQ applies the NEQ predicate on the "thumbnail_url" field.
func ThumbnailURLNEQ(v string) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldNEQ(FieldThumbnailURL, v))
}

// ThumbnailURLIn applies the In predicate on the "thumbnail_url" field.
func ThumbnailURLIn(vs ...string) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldIn(FieldThumbnailURL, vs...))
}

// ThumbnailURLNotIn applies the NotIn predicate on the "thumbnail_url" field.
func ThumbnailURLNotIn(vs ...string) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldNotIn(FieldThumbnailURL, vs...))
}

// ThumbnailURLGT applies the GT predicate on the "thumbnail_url" field.
func ThumbnailURLGT(v string) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldGT(FieldThumbnailURL, v))
}

// ThumbnailURLGTE applies the GTE predicate on the "thumbnail_url" field.
func ThumbnailURLGTE(v string) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldGTE(FieldThumbnailURL, v))
}

// ThumbnailURLLT applies the LT predicate on the "thumbnail_url" field.
func ThumbnailURLLT(v string) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldLT(FieldThumbnailURL, v))
}

// ThumbnailURLLTE applies the LTE predicate on the "thumbnail_url" field.
func ThumbnailURLLTE(v string) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldLTE(FieldThumbnailURL, v))
}

// ThumbnailURLContains applies the Contains predicate on the "thumbnail_url" field.
func ThumbnailURLContains(v string) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldContains(FieldThumbnailURL, v))
}

// ThumbnailURLHasPrefix applies the HasPrefix predicate on the "thumbnail_url" field.
func ThumbnailURLHasPrefix(v string) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldHasPrefix(FieldThumbnailURL, v))
}

// ThumbnailURLHasSuffix applies the HasSuffix predicate on the "thumbnail_url" field.
func ThumbnailURLHasSuffix(v string) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldHasSuffix(FieldThumbnailURL, v))
}

// ThumbnailURLEqualFold applies the EqualFold predicate on the "thumbnail_url" field.
func ThumbnailURLEqualFold(v string) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldEqualFold(FieldThumbnailURL, v))
}

// ThumbnailURLContainsFold applies the ContainsFold predicate on the "thumbnail_url" field.
func ThumbnailURLContainsFold(v string) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldContainsFold(FieldThumbnailURL, v))
}

// IndexEQ applies the EQ predicate on the "index" field.
func IndexEQ(v int) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldEQ(FieldIndex, v))
}

// IndexNEQ applies the NEQ predicate on the "index" field.
func IndexNEQ(v int) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldNEQ(FieldIndex, v))
}

// IndexIn applies the In predicate on the "index" field.
func IndexIn(vs ...int) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldIn(FieldIndex, vs...))
}

// IndexNotIn applies the NotIn predicate on the "index" field.
func IndexNotIn(vs ...int) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldNotIn(FieldIndex, vs...))
}

// IndexGT applies the GT predicate on the "index" field.
func IndexGT(v int) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldGT(FieldIndex, v))
}

// IndexGTE applies the GTE predicate on the "index" field.
func IndexGTE(v int) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldGTE(FieldIndex, v))
}

// IndexLT applies the LT predicate on the "index" field.
func IndexLT(v int) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldLT(FieldIndex, v))
}

// IndexLTE applies the LTE predicate on the "index" field.
func IndexLTE(v int) predicate.HPArtist {
	return predicate.HPArtist(sql.FieldLTE(FieldIndex, v))
}

// HasMembers applies the HasEdge predicate on the "members" edge.
func HasMembers() predicate.HPArtist {
	return predicate.HPArtist(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MembersTable, MembersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMembersWith applies the HasEdge predicate on the "members" edge with a given conditions (other predicates).
func HasMembersWith(preds ...predicate.HPMember) predicate.HPArtist {
	return predicate.HPArtist(func(s *sql.Selector) {
		step := newMembersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAssets applies the HasEdge predicate on the "assets" edge.
func HasAssets() predicate.HPArtist {
	return predicate.HPArtist(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AssetsTable, AssetsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAssetsWith applies the HasEdge predicate on the "assets" edge with a given conditions (other predicates).
func HasAssetsWith(preds ...predicate.HPAsset) predicate.HPArtist {
	return predicate.HPArtist(func(s *sql.Selector) {
		step := newAssetsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOwningFeed applies the HasEdge predicate on the "owning_feed" edge.
func HasOwningFeed() predicate.HPArtist {
	return predicate.HPArtist(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OwningFeedTable, OwningFeedColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwningFeedWith applies the HasEdge predicate on the "owning_feed" edge with a given conditions (other predicates).
func HasOwningFeedWith(preds ...predicate.HPFeedItem) predicate.HPArtist {
	return predicate.HPArtist(func(s *sql.Selector) {
		step := newOwningFeedStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTaggedFeed applies the HasEdge predicate on the "tagged_feed" edge.
func HasTaggedFeed() predicate.HPArtist {
	return predicate.HPArtist(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, TaggedFeedTable, TaggedFeedPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTaggedFeedWith applies the HasEdge predicate on the "tagged_feed" edge with a given conditions (other predicates).
func HasTaggedFeedWith(preds ...predicate.HPFeedItem) predicate.HPArtist {
	return predicate.HPArtist(func(s *sql.Selector) {
		step := newTaggedFeedStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOwningIgPosts applies the HasEdge predicate on the "owning_ig_posts" edge.
func HasOwningIgPosts() predicate.HPArtist {
	return predicate.HPArtist(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OwningIgPostsTable, OwningIgPostsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwningIgPostsWith applies the HasEdge predicate on the "owning_ig_posts" edge with a given conditions (other predicates).
func HasOwningIgPostsWith(preds ...predicate.HPIgPost) predicate.HPArtist {
	return predicate.HPArtist(func(s *sql.Selector) {
		step := newOwningIgPostsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTaggedIgPosts applies the HasEdge predicate on the "tagged_ig_posts" edge.
func HasTaggedIgPosts() predicate.HPArtist {
	return predicate.HPArtist(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, TaggedIgPostsTable, TaggedIgPostsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTaggedIgPostsWith applies the HasEdge predicate on the "tagged_ig_posts" edge with a given conditions (other predicates).
func HasTaggedIgPostsWith(preds ...predicate.HPIgPost) predicate.HPArtist {
	return predicate.HPArtist(func(s *sql.Selector) {
		step := newTaggedIgPostsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOwningAmebloPosts applies the HasEdge predicate on the "owning_ameblo_posts" edge.
func HasOwningAmebloPosts() predicate.HPArtist {
	return predicate.HPArtist(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OwningAmebloPostsTable, OwningAmebloPostsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwningAmebloPostsWith applies the HasEdge predicate on the "owning_ameblo_posts" edge with a given conditions (other predicates).
func HasOwningAmebloPostsWith(preds ...predicate.HPAmebloPost) predicate.HPArtist {
	return predicate.HPArtist(func(s *sql.Selector) {
		step := newOwningAmebloPostsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTaggedAmebloPosts applies the HasEdge predicate on the "tagged_ameblo_posts" edge.
func HasTaggedAmebloPosts() predicate.HPArtist {
	return predicate.HPArtist(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, TaggedAmebloPostsTable, TaggedAmebloPostsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTaggedAmebloPostsWith applies the HasEdge predicate on the "tagged_ameblo_posts" edge with a given conditions (other predicates).
func HasTaggedAmebloPostsWith(preds ...predicate.HPAmebloPost) predicate.HPArtist {
	return predicate.HPArtist(func(s *sql.Selector) {
		step := newTaggedAmebloPostsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTaggedElineupMallItems applies the HasEdge predicate on the "tagged_elineup_mall_items" edge.
func HasTaggedElineupMallItems() predicate.HPArtist {
	return predicate.HPArtist(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, TaggedElineupMallItemsTable, TaggedElineupMallItemsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTaggedElineupMallItemsWith applies the HasEdge predicate on the "tagged_elineup_mall_items" edge with a given conditions (other predicates).
func HasTaggedElineupMallItemsWith(preds ...predicate.HPElineupMallItem) predicate.HPArtist {
	return predicate.HPArtist(func(s *sql.Selector) {
		step := newTaggedElineupMallItemsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFollowedBy applies the HasEdge predicate on the "followed_by" edge.
func HasFollowedBy() predicate.HPArtist {
	return predicate.HPArtist(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FollowedByTable, FollowedByColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFollowedByWith applies the HasEdge predicate on the "followed_by" edge with a given conditions (other predicates).
func HasFollowedByWith(preds ...predicate.HPFollow) predicate.HPArtist {
	return predicate.HPArtist(func(s *sql.Selector) {
		step := newFollowedByStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.HPArtist) predicate.HPArtist {
	return predicate.HPArtist(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.HPArtist) predicate.HPArtist {
	return predicate.HPArtist(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.HPArtist) predicate.HPArtist {
	return predicate.HPArtist(func(s *sql.Selector) {
		p(s.Not())
	})
}
