// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yssk22/hpapp/go/service/ent/hpameblopost"
	"github.com/yssk22/hpapp/go/service/ent/predicate"
)

// HPAmebloPostDelete is the builder for deleting a HPAmebloPost entity.
type HPAmebloPostDelete struct {
	config
	hooks    []Hook
	mutation *HPAmebloPostMutation
}

// Where appends a list predicates to the HPAmebloPostDelete builder.
func (hapd *HPAmebloPostDelete) Where(ps ...predicate.HPAmebloPost) *HPAmebloPostDelete {
	hapd.mutation.Where(ps...)
	return hapd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (hapd *HPAmebloPostDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, HPAmebloPostMutation](ctx, hapd.sqlExec, hapd.mutation, hapd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (hapd *HPAmebloPostDelete) ExecX(ctx context.Context) int {
	n, err := hapd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (hapd *HPAmebloPostDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(hpameblopost.Table, sqlgraph.NewFieldSpec(hpameblopost.FieldID, field.TypeInt))
	if ps := hapd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, hapd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	hapd.mutation.done = true
	return affected, err
}

// HPAmebloPostDeleteOne is the builder for deleting a single HPAmebloPost entity.
type HPAmebloPostDeleteOne struct {
	hapd *HPAmebloPostDelete
}

// Where appends a list predicates to the HPAmebloPostDelete builder.
func (hapdo *HPAmebloPostDeleteOne) Where(ps ...predicate.HPAmebloPost) *HPAmebloPostDeleteOne {
	hapdo.hapd.mutation.Where(ps...)
	return hapdo
}

// Exec executes the deletion query.
func (hapdo *HPAmebloPostDeleteOne) Exec(ctx context.Context) error {
	n, err := hapdo.hapd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{hpameblopost.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (hapdo *HPAmebloPostDeleteOne) ExecX(ctx context.Context) {
	if err := hapdo.Exec(ctx); err != nil {
		panic(err)
	}
}
