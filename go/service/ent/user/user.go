// Code generated by ent, DO NOT EDIT.

package user

import (
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldAccessToken holds the string denoting the access_token field in the database.
	FieldAccessToken = "access_token"
	// EdgeAuth holds the string denoting the auth edge name in mutations.
	EdgeAuth = "auth"
	// EdgeNotificationSettings holds the string denoting the notification_settings edge name in mutations.
	EdgeNotificationSettings = "notification_settings"
	// EdgeHpviewHistory holds the string denoting the hpview_history edge name in mutations.
	EdgeHpviewHistory = "hpview_history"
	// EdgeHpfollow holds the string denoting the hpfollow edge name in mutations.
	EdgeHpfollow = "hpfollow"
	// EdgeHpsortHistory holds the string denoting the hpsort_history edge name in mutations.
	EdgeHpsortHistory = "hpsort_history"
	// EdgeHpfcEventTickets holds the string denoting the hpfc_event_tickets edge name in mutations.
	EdgeHpfcEventTickets = "hpfc_event_tickets"
	// EdgeElineupMallPurchaseHistories holds the string denoting the elineup_mall_purchase_histories edge name in mutations.
	EdgeElineupMallPurchaseHistories = "elineup_mall_purchase_histories"
	// EdgeMetrics holds the string denoting the metrics edge name in mutations.
	EdgeMetrics = "metrics"
	// Table holds the table name of the user in the database.
	Table = "users"
	// AuthTable is the table that holds the auth relation/edge.
	AuthTable = "auths"
	// AuthInverseTable is the table name for the Auth entity.
	// It exists in this package in order to avoid circular dependency with the "auth" package.
	AuthInverseTable = "auths"
	// AuthColumn is the table column denoting the auth relation/edge.
	AuthColumn = "user_auth"
	// NotificationSettingsTable is the table that holds the notification_settings relation/edge.
	NotificationSettingsTable = "user_notification_settings"
	// NotificationSettingsInverseTable is the table name for the UserNotificationSetting entity.
	// It exists in this package in order to avoid circular dependency with the "usernotificationsetting" package.
	NotificationSettingsInverseTable = "user_notification_settings"
	// NotificationSettingsColumn is the table column denoting the notification_settings relation/edge.
	NotificationSettingsColumn = "user_notification_settings"
	// HpviewHistoryTable is the table that holds the hpview_history relation/edge.
	HpviewHistoryTable = "hp_view_histories"
	// HpviewHistoryInverseTable is the table name for the HPViewHistory entity.
	// It exists in this package in order to avoid circular dependency with the "hpviewhistory" package.
	HpviewHistoryInverseTable = "hp_view_histories"
	// HpviewHistoryColumn is the table column denoting the hpview_history relation/edge.
	HpviewHistoryColumn = "user_hpview_history"
	// HpfollowTable is the table that holds the hpfollow relation/edge.
	HpfollowTable = "hp_follows"
	// HpfollowInverseTable is the table name for the HPFollow entity.
	// It exists in this package in order to avoid circular dependency with the "hpfollow" package.
	HpfollowInverseTable = "hp_follows"
	// HpfollowColumn is the table column denoting the hpfollow relation/edge.
	HpfollowColumn = "user_hpmember_following"
	// HpsortHistoryTable is the table that holds the hpsort_history relation/edge.
	HpsortHistoryTable = "hp_sort_histories"
	// HpsortHistoryInverseTable is the table name for the HPSortHistory entity.
	// It exists in this package in order to avoid circular dependency with the "hpsorthistory" package.
	HpsortHistoryInverseTable = "hp_sort_histories"
	// HpsortHistoryColumn is the table column denoting the hpsort_history relation/edge.
	HpsortHistoryColumn = "user_hpsort_history"
	// HpfcEventTicketsTable is the table that holds the hpfc_event_tickets relation/edge.
	HpfcEventTicketsTable = "hpfc_event_tickets"
	// HpfcEventTicketsInverseTable is the table name for the HPFCEventTicket entity.
	// It exists in this package in order to avoid circular dependency with the "hpfceventticket" package.
	HpfcEventTicketsInverseTable = "hpfc_event_tickets"
	// HpfcEventTicketsColumn is the table column denoting the hpfc_event_tickets relation/edge.
	HpfcEventTicketsColumn = "user_hpfc_event_tickets"
	// ElineupMallPurchaseHistoriesTable is the table that holds the elineup_mall_purchase_histories relation/edge.
	ElineupMallPurchaseHistoriesTable = "hp_elineup_mall_item_purchase_histories"
	// ElineupMallPurchaseHistoriesInverseTable is the table name for the HPElineupMallItemPurchaseHistory entity.
	// It exists in this package in order to avoid circular dependency with the "hpelineupmallitempurchasehistory" package.
	ElineupMallPurchaseHistoriesInverseTable = "hp_elineup_mall_item_purchase_histories"
	// ElineupMallPurchaseHistoriesColumn is the table column denoting the elineup_mall_purchase_histories relation/edge.
	ElineupMallPurchaseHistoriesColumn = "owner_user_id"
	// MetricsTable is the table that holds the metrics relation/edge.
	MetricsTable = "metrics"
	// MetricsInverseTable is the table name for the Metric entity.
	// It exists in this package in order to avoid circular dependency with the "metric" package.
	MetricsInverseTable = "metrics"
	// MetricsColumn is the table column denoting the metrics relation/edge.
	MetricsColumn = "owner_user_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldUsername,
	FieldAccessToken,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/yssk22/hpapp/go/service/ent/runtime"
var (
	Hooks  [2]ent.Hook
	Policy ent.Policy
)

// Order defines the ordering method for the User queries.
type Order func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByAccessToken orders the results by the access_token field.
func ByAccessToken(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldAccessToken, opts...).ToFunc()
}

// ByAuthCount orders the results by auth count.
func ByAuthCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAuthStep(), opts...)
	}
}

// ByAuth orders the results by auth terms.
func ByAuth(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAuthStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByNotificationSettingsCount orders the results by notification_settings count.
func ByNotificationSettingsCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNotificationSettingsStep(), opts...)
	}
}

// ByNotificationSettings orders the results by notification_settings terms.
func ByNotificationSettings(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNotificationSettingsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByHpviewHistoryCount orders the results by hpview_history count.
func ByHpviewHistoryCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newHpviewHistoryStep(), opts...)
	}
}

// ByHpviewHistory orders the results by hpview_history terms.
func ByHpviewHistory(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHpviewHistoryStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByHpfollowCount orders the results by hpfollow count.
func ByHpfollowCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newHpfollowStep(), opts...)
	}
}

// ByHpfollow orders the results by hpfollow terms.
func ByHpfollow(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHpfollowStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByHpsortHistoryCount orders the results by hpsort_history count.
func ByHpsortHistoryCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newHpsortHistoryStep(), opts...)
	}
}

// ByHpsortHistory orders the results by hpsort_history terms.
func ByHpsortHistory(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHpsortHistoryStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByHpfcEventTicketsCount orders the results by hpfc_event_tickets count.
func ByHpfcEventTicketsCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newHpfcEventTicketsStep(), opts...)
	}
}

// ByHpfcEventTickets orders the results by hpfc_event_tickets terms.
func ByHpfcEventTickets(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHpfcEventTicketsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByElineupMallPurchaseHistoriesCount orders the results by elineup_mall_purchase_histories count.
func ByElineupMallPurchaseHistoriesCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newElineupMallPurchaseHistoriesStep(), opts...)
	}
}

// ByElineupMallPurchaseHistories orders the results by elineup_mall_purchase_histories terms.
func ByElineupMallPurchaseHistories(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newElineupMallPurchaseHistoriesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMetricsCount orders the results by metrics count.
func ByMetricsCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMetricsStep(), opts...)
	}
}

// ByMetrics orders the results by metrics terms.
func ByMetrics(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMetricsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newAuthStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AuthInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AuthTable, AuthColumn),
	)
}
func newNotificationSettingsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NotificationSettingsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, NotificationSettingsTable, NotificationSettingsColumn),
	)
}
func newHpviewHistoryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HpviewHistoryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, HpviewHistoryTable, HpviewHistoryColumn),
	)
}
func newHpfollowStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HpfollowInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, HpfollowTable, HpfollowColumn),
	)
}
func newHpsortHistoryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HpsortHistoryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, HpsortHistoryTable, HpsortHistoryColumn),
	)
}
func newHpfcEventTicketsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HpfcEventTicketsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, HpfcEventTicketsTable, HpfcEventTicketsColumn),
	)
}
func newElineupMallPurchaseHistoriesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ElineupMallPurchaseHistoriesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ElineupMallPurchaseHistoriesTable, ElineupMallPurchaseHistoriesColumn),
	)
}
func newMetricsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MetricsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MetricsTable, MetricsColumn),
	)
}
