// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"hpapp.yssk22.dev/go/service/ent/hpsorthistory"
	"hpapp.yssk22.dev/go/service/ent/predicate"
)

// HPSortHistoryDelete is the builder for deleting a HPSortHistory entity.
type HPSortHistoryDelete struct {
	config
	hooks    []Hook
	mutation *HPSortHistoryMutation
}

// Where appends a list predicates to the HPSortHistoryDelete builder.
func (hshd *HPSortHistoryDelete) Where(ps ...predicate.HPSortHistory) *HPSortHistoryDelete {
	hshd.mutation.Where(ps...)
	return hshd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (hshd *HPSortHistoryDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, HPSortHistoryMutation](ctx, hshd.sqlExec, hshd.mutation, hshd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (hshd *HPSortHistoryDelete) ExecX(ctx context.Context) int {
	n, err := hshd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (hshd *HPSortHistoryDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(hpsorthistory.Table, sqlgraph.NewFieldSpec(hpsorthistory.FieldID, field.TypeInt))
	if ps := hshd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, hshd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	hshd.mutation.done = true
	return affected, err
}

// HPSortHistoryDeleteOne is the builder for deleting a single HPSortHistory entity.
type HPSortHistoryDeleteOne struct {
	hshd *HPSortHistoryDelete
}

// Where appends a list predicates to the HPSortHistoryDelete builder.
func (hshdo *HPSortHistoryDeleteOne) Where(ps ...predicate.HPSortHistory) *HPSortHistoryDeleteOne {
	hshdo.hshd.mutation.Where(ps...)
	return hshdo
}

// Exec executes the deletion query.
func (hshdo *HPSortHistoryDeleteOne) Exec(ctx context.Context) error {
	n, err := hshdo.hshd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{hpsorthistory.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (hshdo *HPSortHistoryDeleteOne) ExecX(ctx context.Context) {
	if err := hshdo.Exec(ctx); err != nil {
		panic(err)
	}
}
