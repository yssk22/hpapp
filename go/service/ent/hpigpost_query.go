// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"hpapp.yssk22.dev/go/service/ent/hpartist"
	"hpapp.yssk22.dev/go/service/ent/hpasset"
	"hpapp.yssk22.dev/go/service/ent/hpblob"
	"hpapp.yssk22.dev/go/service/ent/hpigpost"
	"hpapp.yssk22.dev/go/service/ent/hpmember"
	"hpapp.yssk22.dev/go/service/ent/predicate"
)

// HPIgPostQuery is the builder for querying HPIgPost entities.
type HPIgPostQuery struct {
	config
	ctx                    *QueryContext
	order                  []hpigpost.Order
	inters                 []Interceptor
	predicates             []predicate.HPIgPost
	withOwnerArtist        *HPArtistQuery
	withOwnerMember        *HPMemberQuery
	withAsset              *HPAssetQuery
	withTaggedArtists      *HPArtistQuery
	withTaggedMembers      *HPMemberQuery
	withBlobs              *HPBlobQuery
	withFKs                bool
	modifiers              []func(*sql.Selector)
	loadTotal              []func(context.Context, []*HPIgPost) error
	withNamedTaggedArtists map[string]*HPArtistQuery
	withNamedTaggedMembers map[string]*HPMemberQuery
	withNamedBlobs         map[string]*HPBlobQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the HPIgPostQuery builder.
func (hipq *HPIgPostQuery) Where(ps ...predicate.HPIgPost) *HPIgPostQuery {
	hipq.predicates = append(hipq.predicates, ps...)
	return hipq
}

// Limit the number of records to be returned by this query.
func (hipq *HPIgPostQuery) Limit(limit int) *HPIgPostQuery {
	hipq.ctx.Limit = &limit
	return hipq
}

// Offset to start from.
func (hipq *HPIgPostQuery) Offset(offset int) *HPIgPostQuery {
	hipq.ctx.Offset = &offset
	return hipq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (hipq *HPIgPostQuery) Unique(unique bool) *HPIgPostQuery {
	hipq.ctx.Unique = &unique
	return hipq
}

// Order specifies how the records should be ordered.
func (hipq *HPIgPostQuery) Order(o ...hpigpost.Order) *HPIgPostQuery {
	hipq.order = append(hipq.order, o...)
	return hipq
}

// QueryOwnerArtist chains the current query on the "owner_artist" edge.
func (hipq *HPIgPostQuery) QueryOwnerArtist() *HPArtistQuery {
	query := (&HPArtistClient{config: hipq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hipq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hipq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hpigpost.Table, hpigpost.FieldID, selector),
			sqlgraph.To(hpartist.Table, hpartist.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hpigpost.OwnerArtistTable, hpigpost.OwnerArtistColumn),
		)
		fromU = sqlgraph.SetNeighbors(hipq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOwnerMember chains the current query on the "owner_member" edge.
func (hipq *HPIgPostQuery) QueryOwnerMember() *HPMemberQuery {
	query := (&HPMemberClient{config: hipq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hipq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hipq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hpigpost.Table, hpigpost.FieldID, selector),
			sqlgraph.To(hpmember.Table, hpmember.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hpigpost.OwnerMemberTable, hpigpost.OwnerMemberColumn),
		)
		fromU = sqlgraph.SetNeighbors(hipq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAsset chains the current query on the "asset" edge.
func (hipq *HPIgPostQuery) QueryAsset() *HPAssetQuery {
	query := (&HPAssetClient{config: hipq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hipq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hipq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hpigpost.Table, hpigpost.FieldID, selector),
			sqlgraph.To(hpasset.Table, hpasset.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hpigpost.AssetTable, hpigpost.AssetColumn),
		)
		fromU = sqlgraph.SetNeighbors(hipq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTaggedArtists chains the current query on the "tagged_artists" edge.
func (hipq *HPIgPostQuery) QueryTaggedArtists() *HPArtistQuery {
	query := (&HPArtistClient{config: hipq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hipq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hipq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hpigpost.Table, hpigpost.FieldID, selector),
			sqlgraph.To(hpartist.Table, hpartist.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, hpigpost.TaggedArtistsTable, hpigpost.TaggedArtistsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(hipq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTaggedMembers chains the current query on the "tagged_members" edge.
func (hipq *HPIgPostQuery) QueryTaggedMembers() *HPMemberQuery {
	query := (&HPMemberClient{config: hipq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hipq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hipq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hpigpost.Table, hpigpost.FieldID, selector),
			sqlgraph.To(hpmember.Table, hpmember.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, hpigpost.TaggedMembersTable, hpigpost.TaggedMembersPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(hipq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBlobs chains the current query on the "blobs" edge.
func (hipq *HPIgPostQuery) QueryBlobs() *HPBlobQuery {
	query := (&HPBlobClient{config: hipq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hipq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hipq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hpigpost.Table, hpigpost.FieldID, selector),
			sqlgraph.To(hpblob.Table, hpblob.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, hpigpost.BlobsTable, hpigpost.BlobsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(hipq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first HPIgPost entity from the query.
// Returns a *NotFoundError when no HPIgPost was found.
func (hipq *HPIgPostQuery) First(ctx context.Context) (*HPIgPost, error) {
	nodes, err := hipq.Limit(1).All(setContextOp(ctx, hipq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{hpigpost.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (hipq *HPIgPostQuery) FirstX(ctx context.Context) *HPIgPost {
	node, err := hipq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first HPIgPost ID from the query.
// Returns a *NotFoundError when no HPIgPost ID was found.
func (hipq *HPIgPostQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = hipq.Limit(1).IDs(setContextOp(ctx, hipq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{hpigpost.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (hipq *HPIgPostQuery) FirstIDX(ctx context.Context) int {
	id, err := hipq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single HPIgPost entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one HPIgPost entity is found.
// Returns a *NotFoundError when no HPIgPost entities are found.
func (hipq *HPIgPostQuery) Only(ctx context.Context) (*HPIgPost, error) {
	nodes, err := hipq.Limit(2).All(setContextOp(ctx, hipq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{hpigpost.Label}
	default:
		return nil, &NotSingularError{hpigpost.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (hipq *HPIgPostQuery) OnlyX(ctx context.Context) *HPIgPost {
	node, err := hipq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only HPIgPost ID in the query.
// Returns a *NotSingularError when more than one HPIgPost ID is found.
// Returns a *NotFoundError when no entities are found.
func (hipq *HPIgPostQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = hipq.Limit(2).IDs(setContextOp(ctx, hipq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{hpigpost.Label}
	default:
		err = &NotSingularError{hpigpost.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (hipq *HPIgPostQuery) OnlyIDX(ctx context.Context) int {
	id, err := hipq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of HPIgPosts.
func (hipq *HPIgPostQuery) All(ctx context.Context) ([]*HPIgPost, error) {
	ctx = setContextOp(ctx, hipq.ctx, "All")
	if err := hipq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*HPIgPost, *HPIgPostQuery]()
	return withInterceptors[[]*HPIgPost](ctx, hipq, qr, hipq.inters)
}

// AllX is like All, but panics if an error occurs.
func (hipq *HPIgPostQuery) AllX(ctx context.Context) []*HPIgPost {
	nodes, err := hipq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of HPIgPost IDs.
func (hipq *HPIgPostQuery) IDs(ctx context.Context) (ids []int, err error) {
	if hipq.ctx.Unique == nil && hipq.path != nil {
		hipq.Unique(true)
	}
	ctx = setContextOp(ctx, hipq.ctx, "IDs")
	if err = hipq.Select(hpigpost.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (hipq *HPIgPostQuery) IDsX(ctx context.Context) []int {
	ids, err := hipq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (hipq *HPIgPostQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, hipq.ctx, "Count")
	if err := hipq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, hipq, querierCount[*HPIgPostQuery](), hipq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (hipq *HPIgPostQuery) CountX(ctx context.Context) int {
	count, err := hipq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (hipq *HPIgPostQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, hipq.ctx, "Exist")
	switch _, err := hipq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (hipq *HPIgPostQuery) ExistX(ctx context.Context) bool {
	exist, err := hipq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the HPIgPostQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (hipq *HPIgPostQuery) Clone() *HPIgPostQuery {
	if hipq == nil {
		return nil
	}
	return &HPIgPostQuery{
		config:            hipq.config,
		ctx:               hipq.ctx.Clone(),
		order:             append([]hpigpost.Order{}, hipq.order...),
		inters:            append([]Interceptor{}, hipq.inters...),
		predicates:        append([]predicate.HPIgPost{}, hipq.predicates...),
		withOwnerArtist:   hipq.withOwnerArtist.Clone(),
		withOwnerMember:   hipq.withOwnerMember.Clone(),
		withAsset:         hipq.withAsset.Clone(),
		withTaggedArtists: hipq.withTaggedArtists.Clone(),
		withTaggedMembers: hipq.withTaggedMembers.Clone(),
		withBlobs:         hipq.withBlobs.Clone(),
		// clone intermediate query.
		sql:  hipq.sql.Clone(),
		path: hipq.path,
	}
}

// WithOwnerArtist tells the query-builder to eager-load the nodes that are connected to
// the "owner_artist" edge. The optional arguments are used to configure the query builder of the edge.
func (hipq *HPIgPostQuery) WithOwnerArtist(opts ...func(*HPArtistQuery)) *HPIgPostQuery {
	query := (&HPArtistClient{config: hipq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hipq.withOwnerArtist = query
	return hipq
}

// WithOwnerMember tells the query-builder to eager-load the nodes that are connected to
// the "owner_member" edge. The optional arguments are used to configure the query builder of the edge.
func (hipq *HPIgPostQuery) WithOwnerMember(opts ...func(*HPMemberQuery)) *HPIgPostQuery {
	query := (&HPMemberClient{config: hipq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hipq.withOwnerMember = query
	return hipq
}

// WithAsset tells the query-builder to eager-load the nodes that are connected to
// the "asset" edge. The optional arguments are used to configure the query builder of the edge.
func (hipq *HPIgPostQuery) WithAsset(opts ...func(*HPAssetQuery)) *HPIgPostQuery {
	query := (&HPAssetClient{config: hipq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hipq.withAsset = query
	return hipq
}

// WithTaggedArtists tells the query-builder to eager-load the nodes that are connected to
// the "tagged_artists" edge. The optional arguments are used to configure the query builder of the edge.
func (hipq *HPIgPostQuery) WithTaggedArtists(opts ...func(*HPArtistQuery)) *HPIgPostQuery {
	query := (&HPArtistClient{config: hipq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hipq.withTaggedArtists = query
	return hipq
}

// WithTaggedMembers tells the query-builder to eager-load the nodes that are connected to
// the "tagged_members" edge. The optional arguments are used to configure the query builder of the edge.
func (hipq *HPIgPostQuery) WithTaggedMembers(opts ...func(*HPMemberQuery)) *HPIgPostQuery {
	query := (&HPMemberClient{config: hipq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hipq.withTaggedMembers = query
	return hipq
}

// WithBlobs tells the query-builder to eager-load the nodes that are connected to
// the "blobs" edge. The optional arguments are used to configure the query builder of the edge.
func (hipq *HPIgPostQuery) WithBlobs(opts ...func(*HPBlobQuery)) *HPIgPostQuery {
	query := (&HPBlobClient{config: hipq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hipq.withBlobs = query
	return hipq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CrawledAt time.Time `json:"crawled_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.HPIgPost.Query().
//		GroupBy(hpigpost.FieldCrawledAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (hipq *HPIgPostQuery) GroupBy(field string, fields ...string) *HPIgPostGroupBy {
	hipq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &HPIgPostGroupBy{build: hipq}
	grbuild.flds = &hipq.ctx.Fields
	grbuild.label = hpigpost.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CrawledAt time.Time `json:"crawled_at,omitempty"`
//	}
//
//	client.HPIgPost.Query().
//		Select(hpigpost.FieldCrawledAt).
//		Scan(ctx, &v)
//
func (hipq *HPIgPostQuery) Select(fields ...string) *HPIgPostSelect {
	hipq.ctx.Fields = append(hipq.ctx.Fields, fields...)
	sbuild := &HPIgPostSelect{HPIgPostQuery: hipq}
	sbuild.label = hpigpost.Label
	sbuild.flds, sbuild.scan = &hipq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a HPIgPostSelect configured with the given aggregations.
func (hipq *HPIgPostQuery) Aggregate(fns ...AggregateFunc) *HPIgPostSelect {
	return hipq.Select().Aggregate(fns...)
}

func (hipq *HPIgPostQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range hipq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, hipq); err != nil {
				return err
			}
		}
	}
	for _, f := range hipq.ctx.Fields {
		if !hpigpost.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if hipq.path != nil {
		prev, err := hipq.path(ctx)
		if err != nil {
			return err
		}
		hipq.sql = prev
	}
	return nil
}

func (hipq *HPIgPostQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*HPIgPost, error) {
	var (
		nodes       = []*HPIgPost{}
		withFKs     = hipq.withFKs
		_spec       = hipq.querySpec()
		loadedTypes = [6]bool{
			hipq.withOwnerArtist != nil,
			hipq.withOwnerMember != nil,
			hipq.withAsset != nil,
			hipq.withTaggedArtists != nil,
			hipq.withTaggedMembers != nil,
			hipq.withBlobs != nil,
		}
	)
	if hipq.withAsset != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, hpigpost.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*HPIgPost).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &HPIgPost{config: hipq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(hipq.modifiers) > 0 {
		_spec.Modifiers = hipq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, hipq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := hipq.withOwnerArtist; query != nil {
		if err := hipq.loadOwnerArtist(ctx, query, nodes, nil,
			func(n *HPIgPost, e *HPArtist) { n.Edges.OwnerArtist = e }); err != nil {
			return nil, err
		}
	}
	if query := hipq.withOwnerMember; query != nil {
		if err := hipq.loadOwnerMember(ctx, query, nodes, nil,
			func(n *HPIgPost, e *HPMember) { n.Edges.OwnerMember = e }); err != nil {
			return nil, err
		}
	}
	if query := hipq.withAsset; query != nil {
		if err := hipq.loadAsset(ctx, query, nodes, nil,
			func(n *HPIgPost, e *HPAsset) { n.Edges.Asset = e }); err != nil {
			return nil, err
		}
	}
	if query := hipq.withTaggedArtists; query != nil {
		if err := hipq.loadTaggedArtists(ctx, query, nodes,
			func(n *HPIgPost) { n.Edges.TaggedArtists = []*HPArtist{} },
			func(n *HPIgPost, e *HPArtist) { n.Edges.TaggedArtists = append(n.Edges.TaggedArtists, e) }); err != nil {
			return nil, err
		}
	}
	if query := hipq.withTaggedMembers; query != nil {
		if err := hipq.loadTaggedMembers(ctx, query, nodes,
			func(n *HPIgPost) { n.Edges.TaggedMembers = []*HPMember{} },
			func(n *HPIgPost, e *HPMember) { n.Edges.TaggedMembers = append(n.Edges.TaggedMembers, e) }); err != nil {
			return nil, err
		}
	}
	if query := hipq.withBlobs; query != nil {
		if err := hipq.loadBlobs(ctx, query, nodes,
			func(n *HPIgPost) { n.Edges.Blobs = []*HPBlob{} },
			func(n *HPIgPost, e *HPBlob) { n.Edges.Blobs = append(n.Edges.Blobs, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range hipq.withNamedTaggedArtists {
		if err := hipq.loadTaggedArtists(ctx, query, nodes,
			func(n *HPIgPost) { n.appendNamedTaggedArtists(name) },
			func(n *HPIgPost, e *HPArtist) { n.appendNamedTaggedArtists(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range hipq.withNamedTaggedMembers {
		if err := hipq.loadTaggedMembers(ctx, query, nodes,
			func(n *HPIgPost) { n.appendNamedTaggedMembers(name) },
			func(n *HPIgPost, e *HPMember) { n.appendNamedTaggedMembers(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range hipq.withNamedBlobs {
		if err := hipq.loadBlobs(ctx, query, nodes,
			func(n *HPIgPost) { n.appendNamedBlobs(name) },
			func(n *HPIgPost, e *HPBlob) { n.appendNamedBlobs(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range hipq.loadTotal {
		if err := hipq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (hipq *HPIgPostQuery) loadOwnerArtist(ctx context.Context, query *HPArtistQuery, nodes []*HPIgPost, init func(*HPIgPost), assign func(*HPIgPost, *HPArtist)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*HPIgPost)
	for i := range nodes {
		if nodes[i].OwnerArtistID == nil {
			continue
		}
		fk := *nodes[i].OwnerArtistID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(hpartist.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "owner_artist_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (hipq *HPIgPostQuery) loadOwnerMember(ctx context.Context, query *HPMemberQuery, nodes []*HPIgPost, init func(*HPIgPost), assign func(*HPIgPost, *HPMember)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*HPIgPost)
	for i := range nodes {
		if nodes[i].OwnerMemberID == nil {
			continue
		}
		fk := *nodes[i].OwnerMemberID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(hpmember.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "owner_member_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (hipq *HPIgPostQuery) loadAsset(ctx context.Context, query *HPAssetQuery, nodes []*HPIgPost, init func(*HPIgPost), assign func(*HPIgPost, *HPAsset)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*HPIgPost)
	for i := range nodes {
		if nodes[i].hp_asset_ig_posts == nil {
			continue
		}
		fk := *nodes[i].hp_asset_ig_posts
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(hpasset.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "hp_asset_ig_posts" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (hipq *HPIgPostQuery) loadTaggedArtists(ctx context.Context, query *HPArtistQuery, nodes []*HPIgPost, init func(*HPIgPost), assign func(*HPIgPost, *HPArtist)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*HPIgPost)
	nids := make(map[int]map[*HPIgPost]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(hpigpost.TaggedArtistsTable)
		s.Join(joinT).On(s.C(hpartist.FieldID), joinT.C(hpigpost.TaggedArtistsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(hpigpost.TaggedArtistsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(hpigpost.TaggedArtistsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*HPIgPost]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*HPArtist](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "tagged_artists" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (hipq *HPIgPostQuery) loadTaggedMembers(ctx context.Context, query *HPMemberQuery, nodes []*HPIgPost, init func(*HPIgPost), assign func(*HPIgPost, *HPMember)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*HPIgPost)
	nids := make(map[int]map[*HPIgPost]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(hpigpost.TaggedMembersTable)
		s.Join(joinT).On(s.C(hpmember.FieldID), joinT.C(hpigpost.TaggedMembersPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(hpigpost.TaggedMembersPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(hpigpost.TaggedMembersPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*HPIgPost]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*HPMember](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "tagged_members" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (hipq *HPIgPostQuery) loadBlobs(ctx context.Context, query *HPBlobQuery, nodes []*HPIgPost, init func(*HPIgPost), assign func(*HPIgPost, *HPBlob)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*HPIgPost)
	nids := make(map[int]map[*HPIgPost]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(hpigpost.BlobsTable)
		s.Join(joinT).On(s.C(hpblob.FieldID), joinT.C(hpigpost.BlobsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(hpigpost.BlobsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(hpigpost.BlobsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*HPIgPost]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*HPBlob](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "blobs" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (hipq *HPIgPostQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := hipq.querySpec()
	if len(hipq.modifiers) > 0 {
		_spec.Modifiers = hipq.modifiers
	}
	_spec.Node.Columns = hipq.ctx.Fields
	if len(hipq.ctx.Fields) > 0 {
		_spec.Unique = hipq.ctx.Unique != nil && *hipq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, hipq.driver, _spec)
}

func (hipq *HPIgPostQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(hpigpost.Table, hpigpost.Columns, sqlgraph.NewFieldSpec(hpigpost.FieldID, field.TypeInt))
	_spec.From = hipq.sql
	if unique := hipq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if hipq.path != nil {
		_spec.Unique = true
	}
	if fields := hipq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hpigpost.FieldID)
		for i := range fields {
			if fields[i] != hpigpost.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if hipq.withOwnerArtist != nil {
			_spec.Node.AddColumnOnce(hpigpost.FieldOwnerArtistID)
		}
		if hipq.withOwnerMember != nil {
			_spec.Node.AddColumnOnce(hpigpost.FieldOwnerMemberID)
		}
	}
	if ps := hipq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := hipq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := hipq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := hipq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (hipq *HPIgPostQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(hipq.driver.Dialect())
	t1 := builder.Table(hpigpost.Table)
	columns := hipq.ctx.Fields
	if len(columns) == 0 {
		columns = hpigpost.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if hipq.sql != nil {
		selector = hipq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if hipq.ctx.Unique != nil && *hipq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range hipq.predicates {
		p(selector)
	}
	for _, p := range hipq.order {
		p(selector)
	}
	if offset := hipq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := hipq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedTaggedArtists tells the query-builder to eager-load the nodes that are connected to the "tagged_artists"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (hipq *HPIgPostQuery) WithNamedTaggedArtists(name string, opts ...func(*HPArtistQuery)) *HPIgPostQuery {
	query := (&HPArtistClient{config: hipq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if hipq.withNamedTaggedArtists == nil {
		hipq.withNamedTaggedArtists = make(map[string]*HPArtistQuery)
	}
	hipq.withNamedTaggedArtists[name] = query
	return hipq
}

// WithNamedTaggedMembers tells the query-builder to eager-load the nodes that are connected to the "tagged_members"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (hipq *HPIgPostQuery) WithNamedTaggedMembers(name string, opts ...func(*HPMemberQuery)) *HPIgPostQuery {
	query := (&HPMemberClient{config: hipq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if hipq.withNamedTaggedMembers == nil {
		hipq.withNamedTaggedMembers = make(map[string]*HPMemberQuery)
	}
	hipq.withNamedTaggedMembers[name] = query
	return hipq
}

// WithNamedBlobs tells the query-builder to eager-load the nodes that are connected to the "blobs"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (hipq *HPIgPostQuery) WithNamedBlobs(name string, opts ...func(*HPBlobQuery)) *HPIgPostQuery {
	query := (&HPBlobClient{config: hipq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if hipq.withNamedBlobs == nil {
		hipq.withNamedBlobs = make(map[string]*HPBlobQuery)
	}
	hipq.withNamedBlobs[name] = query
	return hipq
}

// HPIgPostGroupBy is the group-by builder for HPIgPost entities.
type HPIgPostGroupBy struct {
	selector
	build *HPIgPostQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (hipgb *HPIgPostGroupBy) Aggregate(fns ...AggregateFunc) *HPIgPostGroupBy {
	hipgb.fns = append(hipgb.fns, fns...)
	return hipgb
}

// Scan applies the selector query and scans the result into the given value.
func (hipgb *HPIgPostGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, hipgb.build.ctx, "GroupBy")
	if err := hipgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*HPIgPostQuery, *HPIgPostGroupBy](ctx, hipgb.build, hipgb, hipgb.build.inters, v)
}

func (hipgb *HPIgPostGroupBy) sqlScan(ctx context.Context, root *HPIgPostQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(hipgb.fns))
	for _, fn := range hipgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*hipgb.flds)+len(hipgb.fns))
		for _, f := range *hipgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*hipgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := hipgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// HPIgPostSelect is the builder for selecting fields of HPIgPost entities.
type HPIgPostSelect struct {
	*HPIgPostQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (hips *HPIgPostSelect) Aggregate(fns ...AggregateFunc) *HPIgPostSelect {
	hips.fns = append(hips.fns, fns...)
	return hips
}

// Scan applies the selector query and scans the result into the given value.
func (hips *HPIgPostSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, hips.ctx, "Select")
	if err := hips.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*HPIgPostQuery, *HPIgPostSelect](ctx, hips.HPIgPostQuery, hips, hips.inters, v)
}

func (hips *HPIgPostSelect) sqlScan(ctx context.Context, root *HPIgPostQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(hips.fns))
	for _, fn := range hips.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*hips.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := hips.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
