// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yssk22/hpapp/go/service/ent/metricdryrun"
	"github.com/yssk22/hpapp/go/service/ent/predicate"
)

// MetricDryRunUpdate is the builder for updating MetricDryRun entities.
type MetricDryRunUpdate struct {
	config
	hooks    []Hook
	mutation *MetricDryRunMutation
}

// Where appends a list predicates to the MetricDryRunUpdate builder.
func (mdru *MetricDryRunUpdate) Where(ps ...predicate.MetricDryRun) *MetricDryRunUpdate {
	mdru.mutation.Where(ps...)
	return mdru
}

// SetUpdatedAt sets the "updated_at" field.
func (mdru *MetricDryRunUpdate) SetUpdatedAt(t time.Time) *MetricDryRunUpdate {
	mdru.mutation.SetUpdatedAt(t)
	return mdru
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mdru *MetricDryRunUpdate) SetNillableUpdatedAt(t *time.Time) *MetricDryRunUpdate {
	if t != nil {
		mdru.SetUpdatedAt(*t)
	}
	return mdru
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (mdru *MetricDryRunUpdate) ClearUpdatedAt() *MetricDryRunUpdate {
	mdru.mutation.ClearUpdatedAt()
	return mdru
}

// SetMetricName sets the "metric_name" field.
func (mdru *MetricDryRunUpdate) SetMetricName(s string) *MetricDryRunUpdate {
	mdru.mutation.SetMetricName(s)
	return mdru
}

// SetDate sets the "date" field.
func (mdru *MetricDryRunUpdate) SetDate(s string) *MetricDryRunUpdate {
	mdru.mutation.SetDate(s)
	return mdru
}

// SetValue sets the "value" field.
func (mdru *MetricDryRunUpdate) SetValue(f float64) *MetricDryRunUpdate {
	mdru.mutation.ResetValue()
	mdru.mutation.SetValue(f)
	return mdru
}

// AddValue adds f to the "value" field.
func (mdru *MetricDryRunUpdate) AddValue(f float64) *MetricDryRunUpdate {
	mdru.mutation.AddValue(f)
	return mdru
}

// SetOwnerUserID sets the "owner_user_id" field.
func (mdru *MetricDryRunUpdate) SetOwnerUserID(i int) *MetricDryRunUpdate {
	mdru.mutation.ResetOwnerUserID()
	mdru.mutation.SetOwnerUserID(i)
	return mdru
}

// SetNillableOwnerUserID sets the "owner_user_id" field if the given value is not nil.
func (mdru *MetricDryRunUpdate) SetNillableOwnerUserID(i *int) *MetricDryRunUpdate {
	if i != nil {
		mdru.SetOwnerUserID(*i)
	}
	return mdru
}

// AddOwnerUserID adds i to the "owner_user_id" field.
func (mdru *MetricDryRunUpdate) AddOwnerUserID(i int) *MetricDryRunUpdate {
	mdru.mutation.AddOwnerUserID(i)
	return mdru
}

// ClearOwnerUserID clears the value of the "owner_user_id" field.
func (mdru *MetricDryRunUpdate) ClearOwnerUserID() *MetricDryRunUpdate {
	mdru.mutation.ClearOwnerUserID()
	return mdru
}

// Mutation returns the MetricDryRunMutation object of the builder.
func (mdru *MetricDryRunUpdate) Mutation() *MetricDryRunMutation {
	return mdru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mdru *MetricDryRunUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, MetricDryRunMutation](ctx, mdru.sqlSave, mdru.mutation, mdru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mdru *MetricDryRunUpdate) SaveX(ctx context.Context) int {
	affected, err := mdru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mdru *MetricDryRunUpdate) Exec(ctx context.Context) error {
	_, err := mdru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mdru *MetricDryRunUpdate) ExecX(ctx context.Context) {
	if err := mdru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mdru *MetricDryRunUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(metricdryrun.Table, metricdryrun.Columns, sqlgraph.NewFieldSpec(metricdryrun.FieldID, field.TypeInt))
	if ps := mdru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if mdru.mutation.CreatedAtCleared() {
		_spec.ClearField(metricdryrun.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := mdru.mutation.UpdatedAt(); ok {
		_spec.SetField(metricdryrun.FieldUpdatedAt, field.TypeTime, value)
	}
	if mdru.mutation.UpdatedAtCleared() {
		_spec.ClearField(metricdryrun.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := mdru.mutation.MetricName(); ok {
		_spec.SetField(metricdryrun.FieldMetricName, field.TypeString, value)
	}
	if value, ok := mdru.mutation.Date(); ok {
		_spec.SetField(metricdryrun.FieldDate, field.TypeString, value)
	}
	if value, ok := mdru.mutation.Value(); ok {
		_spec.SetField(metricdryrun.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := mdru.mutation.AddedValue(); ok {
		_spec.AddField(metricdryrun.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := mdru.mutation.OwnerUserID(); ok {
		_spec.SetField(metricdryrun.FieldOwnerUserID, field.TypeInt, value)
	}
	if value, ok := mdru.mutation.AddedOwnerUserID(); ok {
		_spec.AddField(metricdryrun.FieldOwnerUserID, field.TypeInt, value)
	}
	if mdru.mutation.OwnerUserIDCleared() {
		_spec.ClearField(metricdryrun.FieldOwnerUserID, field.TypeInt)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mdru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{metricdryrun.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mdru.mutation.done = true
	return n, nil
}

// MetricDryRunUpdateOne is the builder for updating a single MetricDryRun entity.
type MetricDryRunUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MetricDryRunMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (mdruo *MetricDryRunUpdateOne) SetUpdatedAt(t time.Time) *MetricDryRunUpdateOne {
	mdruo.mutation.SetUpdatedAt(t)
	return mdruo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mdruo *MetricDryRunUpdateOne) SetNillableUpdatedAt(t *time.Time) *MetricDryRunUpdateOne {
	if t != nil {
		mdruo.SetUpdatedAt(*t)
	}
	return mdruo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (mdruo *MetricDryRunUpdateOne) ClearUpdatedAt() *MetricDryRunUpdateOne {
	mdruo.mutation.ClearUpdatedAt()
	return mdruo
}

// SetMetricName sets the "metric_name" field.
func (mdruo *MetricDryRunUpdateOne) SetMetricName(s string) *MetricDryRunUpdateOne {
	mdruo.mutation.SetMetricName(s)
	return mdruo
}

// SetDate sets the "date" field.
func (mdruo *MetricDryRunUpdateOne) SetDate(s string) *MetricDryRunUpdateOne {
	mdruo.mutation.SetDate(s)
	return mdruo
}

// SetValue sets the "value" field.
func (mdruo *MetricDryRunUpdateOne) SetValue(f float64) *MetricDryRunUpdateOne {
	mdruo.mutation.ResetValue()
	mdruo.mutation.SetValue(f)
	return mdruo
}

// AddValue adds f to the "value" field.
func (mdruo *MetricDryRunUpdateOne) AddValue(f float64) *MetricDryRunUpdateOne {
	mdruo.mutation.AddValue(f)
	return mdruo
}

// SetOwnerUserID sets the "owner_user_id" field.
func (mdruo *MetricDryRunUpdateOne) SetOwnerUserID(i int) *MetricDryRunUpdateOne {
	mdruo.mutation.ResetOwnerUserID()
	mdruo.mutation.SetOwnerUserID(i)
	return mdruo
}

// SetNillableOwnerUserID sets the "owner_user_id" field if the given value is not nil.
func (mdruo *MetricDryRunUpdateOne) SetNillableOwnerUserID(i *int) *MetricDryRunUpdateOne {
	if i != nil {
		mdruo.SetOwnerUserID(*i)
	}
	return mdruo
}

// AddOwnerUserID adds i to the "owner_user_id" field.
func (mdruo *MetricDryRunUpdateOne) AddOwnerUserID(i int) *MetricDryRunUpdateOne {
	mdruo.mutation.AddOwnerUserID(i)
	return mdruo
}

// ClearOwnerUserID clears the value of the "owner_user_id" field.
func (mdruo *MetricDryRunUpdateOne) ClearOwnerUserID() *MetricDryRunUpdateOne {
	mdruo.mutation.ClearOwnerUserID()
	return mdruo
}

// Mutation returns the MetricDryRunMutation object of the builder.
func (mdruo *MetricDryRunUpdateOne) Mutation() *MetricDryRunMutation {
	return mdruo.mutation
}

// Where appends a list predicates to the MetricDryRunUpdate builder.
func (mdruo *MetricDryRunUpdateOne) Where(ps ...predicate.MetricDryRun) *MetricDryRunUpdateOne {
	mdruo.mutation.Where(ps...)
	return mdruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mdruo *MetricDryRunUpdateOne) Select(field string, fields ...string) *MetricDryRunUpdateOne {
	mdruo.fields = append([]string{field}, fields...)
	return mdruo
}

// Save executes the query and returns the updated MetricDryRun entity.
func (mdruo *MetricDryRunUpdateOne) Save(ctx context.Context) (*MetricDryRun, error) {
	return withHooks[*MetricDryRun, MetricDryRunMutation](ctx, mdruo.sqlSave, mdruo.mutation, mdruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mdruo *MetricDryRunUpdateOne) SaveX(ctx context.Context) *MetricDryRun {
	node, err := mdruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mdruo *MetricDryRunUpdateOne) Exec(ctx context.Context) error {
	_, err := mdruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mdruo *MetricDryRunUpdateOne) ExecX(ctx context.Context) {
	if err := mdruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mdruo *MetricDryRunUpdateOne) sqlSave(ctx context.Context) (_node *MetricDryRun, err error) {
	_spec := sqlgraph.NewUpdateSpec(metricdryrun.Table, metricdryrun.Columns, sqlgraph.NewFieldSpec(metricdryrun.FieldID, field.TypeInt))
	id, ok := mdruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MetricDryRun.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mdruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, metricdryrun.FieldID)
		for _, f := range fields {
			if !metricdryrun.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != metricdryrun.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mdruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if mdruo.mutation.CreatedAtCleared() {
		_spec.ClearField(metricdryrun.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := mdruo.mutation.UpdatedAt(); ok {
		_spec.SetField(metricdryrun.FieldUpdatedAt, field.TypeTime, value)
	}
	if mdruo.mutation.UpdatedAtCleared() {
		_spec.ClearField(metricdryrun.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := mdruo.mutation.MetricName(); ok {
		_spec.SetField(metricdryrun.FieldMetricName, field.TypeString, value)
	}
	if value, ok := mdruo.mutation.Date(); ok {
		_spec.SetField(metricdryrun.FieldDate, field.TypeString, value)
	}
	if value, ok := mdruo.mutation.Value(); ok {
		_spec.SetField(metricdryrun.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := mdruo.mutation.AddedValue(); ok {
		_spec.AddField(metricdryrun.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := mdruo.mutation.OwnerUserID(); ok {
		_spec.SetField(metricdryrun.FieldOwnerUserID, field.TypeInt, value)
	}
	if value, ok := mdruo.mutation.AddedOwnerUserID(); ok {
		_spec.AddField(metricdryrun.FieldOwnerUserID, field.TypeInt, value)
	}
	if mdruo.mutation.OwnerUserIDCleared() {
		_spec.ClearField(metricdryrun.FieldOwnerUserID, field.TypeInt)
	}
	_node = &MetricDryRun{config: mdruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mdruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{metricdryrun.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mdruo.mutation.done = true
	return _node, nil
}
