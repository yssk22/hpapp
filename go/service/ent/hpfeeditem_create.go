// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yssk22/hpapp/go/service/ent/hpartist"
	"github.com/yssk22/hpapp/go/service/ent/hpfeeditem"
	"github.com/yssk22/hpapp/go/service/ent/hpmember"
	"github.com/yssk22/hpapp/go/service/ent/hpviewhistory"
	"github.com/yssk22/hpapp/go/service/schema/enums"
	"github.com/yssk22/hpapp/go/service/schema/jsonfields"
)

// HPFeedItemCreate is the builder for creating a HPFeedItem entity.
type HPFeedItemCreate struct {
	config
	mutation *HPFeedItemMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (hfic *HPFeedItemCreate) SetCreatedAt(t time.Time) *HPFeedItemCreate {
	hfic.mutation.SetCreatedAt(t)
	return hfic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (hfic *HPFeedItemCreate) SetNillableCreatedAt(t *time.Time) *HPFeedItemCreate {
	if t != nil {
		hfic.SetCreatedAt(*t)
	}
	return hfic
}

// SetUpdatedAt sets the "updated_at" field.
func (hfic *HPFeedItemCreate) SetUpdatedAt(t time.Time) *HPFeedItemCreate {
	hfic.mutation.SetUpdatedAt(t)
	return hfic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (hfic *HPFeedItemCreate) SetNillableUpdatedAt(t *time.Time) *HPFeedItemCreate {
	if t != nil {
		hfic.SetUpdatedAt(*t)
	}
	return hfic
}

// SetSourceID sets the "source_id" field.
func (hfic *HPFeedItemCreate) SetSourceID(i int) *HPFeedItemCreate {
	hfic.mutation.SetSourceID(i)
	return hfic
}

// SetAssetType sets the "asset_type" field.
func (hfic *HPFeedItemCreate) SetAssetType(eat enums.HPAssetType) *HPFeedItemCreate {
	hfic.mutation.SetAssetType(eat)
	return hfic
}

// SetNillableAssetType sets the "asset_type" field if the given value is not nil.
func (hfic *HPFeedItemCreate) SetNillableAssetType(eat *enums.HPAssetType) *HPFeedItemCreate {
	if eat != nil {
		hfic.SetAssetType(*eat)
	}
	return hfic
}

// SetTitle sets the "title" field.
func (hfic *HPFeedItemCreate) SetTitle(s string) *HPFeedItemCreate {
	hfic.mutation.SetTitle(s)
	return hfic
}

// SetPostAt sets the "post_at" field.
func (hfic *HPFeedItemCreate) SetPostAt(t time.Time) *HPFeedItemCreate {
	hfic.mutation.SetPostAt(t)
	return hfic
}

// SetSourceURL sets the "source_url" field.
func (hfic *HPFeedItemCreate) SetSourceURL(s string) *HPFeedItemCreate {
	hfic.mutation.SetSourceURL(s)
	return hfic
}

// SetImageURL sets the "image_url" field.
func (hfic *HPFeedItemCreate) SetImageURL(s string) *HPFeedItemCreate {
	hfic.mutation.SetImageURL(s)
	return hfic
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (hfic *HPFeedItemCreate) SetNillableImageURL(s *string) *HPFeedItemCreate {
	if s != nil {
		hfic.SetImageURL(*s)
	}
	return hfic
}

// SetMedia sets the "media" field.
func (hfic *HPFeedItemCreate) SetMedia(j []jsonfields.Media) *HPFeedItemCreate {
	hfic.mutation.SetMedia(j)
	return hfic
}

// SetOwnerArtistID sets the "owner_artist_id" field.
func (hfic *HPFeedItemCreate) SetOwnerArtistID(i int) *HPFeedItemCreate {
	hfic.mutation.SetOwnerArtistID(i)
	return hfic
}

// SetNillableOwnerArtistID sets the "owner_artist_id" field if the given value is not nil.
func (hfic *HPFeedItemCreate) SetNillableOwnerArtistID(i *int) *HPFeedItemCreate {
	if i != nil {
		hfic.SetOwnerArtistID(*i)
	}
	return hfic
}

// SetOwnerMemberID sets the "owner_member_id" field.
func (hfic *HPFeedItemCreate) SetOwnerMemberID(i int) *HPFeedItemCreate {
	hfic.mutation.SetOwnerMemberID(i)
	return hfic
}

// SetNillableOwnerMemberID sets the "owner_member_id" field if the given value is not nil.
func (hfic *HPFeedItemCreate) SetNillableOwnerMemberID(i *int) *HPFeedItemCreate {
	if i != nil {
		hfic.SetOwnerMemberID(*i)
	}
	return hfic
}

// AddViewHistoryIDs adds the "view_histories" edge to the HPViewHistory entity by IDs.
func (hfic *HPFeedItemCreate) AddViewHistoryIDs(ids ...int) *HPFeedItemCreate {
	hfic.mutation.AddViewHistoryIDs(ids...)
	return hfic
}

// AddViewHistories adds the "view_histories" edges to the HPViewHistory entity.
func (hfic *HPFeedItemCreate) AddViewHistories(h ...*HPViewHistory) *HPFeedItemCreate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hfic.AddViewHistoryIDs(ids...)
}

// SetOwnerArtist sets the "owner_artist" edge to the HPArtist entity.
func (hfic *HPFeedItemCreate) SetOwnerArtist(h *HPArtist) *HPFeedItemCreate {
	return hfic.SetOwnerArtistID(h.ID)
}

// SetOwnerMember sets the "owner_member" edge to the HPMember entity.
func (hfic *HPFeedItemCreate) SetOwnerMember(h *HPMember) *HPFeedItemCreate {
	return hfic.SetOwnerMemberID(h.ID)
}

// AddTaggedArtistIDs adds the "tagged_artists" edge to the HPArtist entity by IDs.
func (hfic *HPFeedItemCreate) AddTaggedArtistIDs(ids ...int) *HPFeedItemCreate {
	hfic.mutation.AddTaggedArtistIDs(ids...)
	return hfic
}

// AddTaggedArtists adds the "tagged_artists" edges to the HPArtist entity.
func (hfic *HPFeedItemCreate) AddTaggedArtists(h ...*HPArtist) *HPFeedItemCreate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hfic.AddTaggedArtistIDs(ids...)
}

// AddTaggedMemberIDs adds the "tagged_members" edge to the HPMember entity by IDs.
func (hfic *HPFeedItemCreate) AddTaggedMemberIDs(ids ...int) *HPFeedItemCreate {
	hfic.mutation.AddTaggedMemberIDs(ids...)
	return hfic
}

// AddTaggedMembers adds the "tagged_members" edges to the HPMember entity.
func (hfic *HPFeedItemCreate) AddTaggedMembers(h ...*HPMember) *HPFeedItemCreate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hfic.AddTaggedMemberIDs(ids...)
}

// Mutation returns the HPFeedItemMutation object of the builder.
func (hfic *HPFeedItemCreate) Mutation() *HPFeedItemMutation {
	return hfic.mutation
}

// Save creates the HPFeedItem in the database.
func (hfic *HPFeedItemCreate) Save(ctx context.Context) (*HPFeedItem, error) {
	if err := hfic.defaults(); err != nil {
		return nil, err
	}
	return withHooks[*HPFeedItem, HPFeedItemMutation](ctx, hfic.sqlSave, hfic.mutation, hfic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (hfic *HPFeedItemCreate) SaveX(ctx context.Context) *HPFeedItem {
	v, err := hfic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hfic *HPFeedItemCreate) Exec(ctx context.Context) error {
	_, err := hfic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hfic *HPFeedItemCreate) ExecX(ctx context.Context) {
	if err := hfic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hfic *HPFeedItemCreate) defaults() error {
	if _, ok := hfic.mutation.AssetType(); !ok {
		v := hpfeeditem.DefaultAssetType
		hfic.mutation.SetAssetType(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (hfic *HPFeedItemCreate) check() error {
	if _, ok := hfic.mutation.SourceID(); !ok {
		return &ValidationError{Name: "source_id", err: errors.New(`ent: missing required field "HPFeedItem.source_id"`)}
	}
	if _, ok := hfic.mutation.AssetType(); !ok {
		return &ValidationError{Name: "asset_type", err: errors.New(`ent: missing required field "HPFeedItem.asset_type"`)}
	}
	if v, ok := hfic.mutation.AssetType(); ok {
		if err := hpfeeditem.AssetTypeValidator(v); err != nil {
			return &ValidationError{Name: "asset_type", err: fmt.Errorf(`ent: validator failed for field "HPFeedItem.asset_type": %w`, err)}
		}
	}
	if _, ok := hfic.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "HPFeedItem.title"`)}
	}
	if _, ok := hfic.mutation.PostAt(); !ok {
		return &ValidationError{Name: "post_at", err: errors.New(`ent: missing required field "HPFeedItem.post_at"`)}
	}
	if _, ok := hfic.mutation.SourceURL(); !ok {
		return &ValidationError{Name: "source_url", err: errors.New(`ent: missing required field "HPFeedItem.source_url"`)}
	}
	if _, ok := hfic.mutation.Media(); !ok {
		return &ValidationError{Name: "media", err: errors.New(`ent: missing required field "HPFeedItem.media"`)}
	}
	return nil
}

func (hfic *HPFeedItemCreate) sqlSave(ctx context.Context) (*HPFeedItem, error) {
	if err := hfic.check(); err != nil {
		return nil, err
	}
	_node, _spec := hfic.createSpec()
	if err := sqlgraph.CreateNode(ctx, hfic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	hfic.mutation.id = &_node.ID
	hfic.mutation.done = true
	return _node, nil
}

func (hfic *HPFeedItemCreate) createSpec() (*HPFeedItem, *sqlgraph.CreateSpec) {
	var (
		_node = &HPFeedItem{config: hfic.config}
		_spec = sqlgraph.NewCreateSpec(hpfeeditem.Table, sqlgraph.NewFieldSpec(hpfeeditem.FieldID, field.TypeInt))
	)
	_spec.OnConflict = hfic.conflict
	if value, ok := hfic.mutation.CreatedAt(); ok {
		_spec.SetField(hpfeeditem.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := hfic.mutation.UpdatedAt(); ok {
		_spec.SetField(hpfeeditem.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := hfic.mutation.SourceID(); ok {
		_spec.SetField(hpfeeditem.FieldSourceID, field.TypeInt, value)
		_node.SourceID = value
	}
	if value, ok := hfic.mutation.AssetType(); ok {
		_spec.SetField(hpfeeditem.FieldAssetType, field.TypeEnum, value)
		_node.AssetType = value
	}
	if value, ok := hfic.mutation.Title(); ok {
		_spec.SetField(hpfeeditem.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := hfic.mutation.PostAt(); ok {
		_spec.SetField(hpfeeditem.FieldPostAt, field.TypeTime, value)
		_node.PostAt = value
	}
	if value, ok := hfic.mutation.SourceURL(); ok {
		_spec.SetField(hpfeeditem.FieldSourceURL, field.TypeString, value)
		_node.SourceURL = value
	}
	if value, ok := hfic.mutation.ImageURL(); ok {
		_spec.SetField(hpfeeditem.FieldImageURL, field.TypeString, value)
		_node.ImageURL = &value
	}
	if value, ok := hfic.mutation.Media(); ok {
		_spec.SetField(hpfeeditem.FieldMedia, field.TypeJSON, value)
		_node.Media = value
	}
	if nodes := hfic.mutation.ViewHistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpfeeditem.ViewHistoriesTable,
			Columns: []string{hpfeeditem.ViewHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpviewhistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hfic.mutation.OwnerArtistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpfeeditem.OwnerArtistTable,
			Columns: []string{hpfeeditem.OwnerArtistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpartist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerArtistID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hfic.mutation.OwnerMemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpfeeditem.OwnerMemberTable,
			Columns: []string{hpfeeditem.OwnerMemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerMemberID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hfic.mutation.TaggedArtistsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpfeeditem.TaggedArtistsTable,
			Columns: hpfeeditem.TaggedArtistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpartist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hfic.mutation.TaggedMembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpfeeditem.TaggedMembersTable,
			Columns: hpfeeditem.TaggedMembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.HPFeedItem.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.HPFeedItemUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (hfic *HPFeedItemCreate) OnConflict(opts ...sql.ConflictOption) *HPFeedItemUpsertOne {
	hfic.conflict = opts
	return &HPFeedItemUpsertOne{
		create: hfic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.HPFeedItem.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (hfic *HPFeedItemCreate) OnConflictColumns(columns ...string) *HPFeedItemUpsertOne {
	hfic.conflict = append(hfic.conflict, sql.ConflictColumns(columns...))
	return &HPFeedItemUpsertOne{
		create: hfic,
	}
}

type (
	// HPFeedItemUpsertOne is the builder for "upsert"-ing
	//  one HPFeedItem node.
	HPFeedItemUpsertOne struct {
		create *HPFeedItemCreate
	}

	// HPFeedItemUpsert is the "OnConflict" setter.
	HPFeedItemUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *HPFeedItemUpsert) SetUpdatedAt(v time.Time) *HPFeedItemUpsert {
	u.Set(hpfeeditem.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *HPFeedItemUpsert) UpdateUpdatedAt() *HPFeedItemUpsert {
	u.SetExcluded(hpfeeditem.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *HPFeedItemUpsert) ClearUpdatedAt() *HPFeedItemUpsert {
	u.SetNull(hpfeeditem.FieldUpdatedAt)
	return u
}

// SetSourceID sets the "source_id" field.
func (u *HPFeedItemUpsert) SetSourceID(v int) *HPFeedItemUpsert {
	u.Set(hpfeeditem.FieldSourceID, v)
	return u
}

// UpdateSourceID sets the "source_id" field to the value that was provided on create.
func (u *HPFeedItemUpsert) UpdateSourceID() *HPFeedItemUpsert {
	u.SetExcluded(hpfeeditem.FieldSourceID)
	return u
}

// AddSourceID adds v to the "source_id" field.
func (u *HPFeedItemUpsert) AddSourceID(v int) *HPFeedItemUpsert {
	u.Add(hpfeeditem.FieldSourceID, v)
	return u
}

// SetAssetType sets the "asset_type" field.
func (u *HPFeedItemUpsert) SetAssetType(v enums.HPAssetType) *HPFeedItemUpsert {
	u.Set(hpfeeditem.FieldAssetType, v)
	return u
}

// UpdateAssetType sets the "asset_type" field to the value that was provided on create.
func (u *HPFeedItemUpsert) UpdateAssetType() *HPFeedItemUpsert {
	u.SetExcluded(hpfeeditem.FieldAssetType)
	return u
}

// SetTitle sets the "title" field.
func (u *HPFeedItemUpsert) SetTitle(v string) *HPFeedItemUpsert {
	u.Set(hpfeeditem.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *HPFeedItemUpsert) UpdateTitle() *HPFeedItemUpsert {
	u.SetExcluded(hpfeeditem.FieldTitle)
	return u
}

// SetPostAt sets the "post_at" field.
func (u *HPFeedItemUpsert) SetPostAt(v time.Time) *HPFeedItemUpsert {
	u.Set(hpfeeditem.FieldPostAt, v)
	return u
}

// UpdatePostAt sets the "post_at" field to the value that was provided on create.
func (u *HPFeedItemUpsert) UpdatePostAt() *HPFeedItemUpsert {
	u.SetExcluded(hpfeeditem.FieldPostAt)
	return u
}

// SetSourceURL sets the "source_url" field.
func (u *HPFeedItemUpsert) SetSourceURL(v string) *HPFeedItemUpsert {
	u.Set(hpfeeditem.FieldSourceURL, v)
	return u
}

// UpdateSourceURL sets the "source_url" field to the value that was provided on create.
func (u *HPFeedItemUpsert) UpdateSourceURL() *HPFeedItemUpsert {
	u.SetExcluded(hpfeeditem.FieldSourceURL)
	return u
}

// SetImageURL sets the "image_url" field.
func (u *HPFeedItemUpsert) SetImageURL(v string) *HPFeedItemUpsert {
	u.Set(hpfeeditem.FieldImageURL, v)
	return u
}

// UpdateImageURL sets the "image_url" field to the value that was provided on create.
func (u *HPFeedItemUpsert) UpdateImageURL() *HPFeedItemUpsert {
	u.SetExcluded(hpfeeditem.FieldImageURL)
	return u
}

// ClearImageURL clears the value of the "image_url" field.
func (u *HPFeedItemUpsert) ClearImageURL() *HPFeedItemUpsert {
	u.SetNull(hpfeeditem.FieldImageURL)
	return u
}

// SetMedia sets the "media" field.
func (u *HPFeedItemUpsert) SetMedia(v []jsonfields.Media) *HPFeedItemUpsert {
	u.Set(hpfeeditem.FieldMedia, v)
	return u
}

// UpdateMedia sets the "media" field to the value that was provided on create.
func (u *HPFeedItemUpsert) UpdateMedia() *HPFeedItemUpsert {
	u.SetExcluded(hpfeeditem.FieldMedia)
	return u
}

// SetOwnerArtistID sets the "owner_artist_id" field.
func (u *HPFeedItemUpsert) SetOwnerArtistID(v int) *HPFeedItemUpsert {
	u.Set(hpfeeditem.FieldOwnerArtistID, v)
	return u
}

// UpdateOwnerArtistID sets the "owner_artist_id" field to the value that was provided on create.
func (u *HPFeedItemUpsert) UpdateOwnerArtistID() *HPFeedItemUpsert {
	u.SetExcluded(hpfeeditem.FieldOwnerArtistID)
	return u
}

// ClearOwnerArtistID clears the value of the "owner_artist_id" field.
func (u *HPFeedItemUpsert) ClearOwnerArtistID() *HPFeedItemUpsert {
	u.SetNull(hpfeeditem.FieldOwnerArtistID)
	return u
}

// SetOwnerMemberID sets the "owner_member_id" field.
func (u *HPFeedItemUpsert) SetOwnerMemberID(v int) *HPFeedItemUpsert {
	u.Set(hpfeeditem.FieldOwnerMemberID, v)
	return u
}

// UpdateOwnerMemberID sets the "owner_member_id" field to the value that was provided on create.
func (u *HPFeedItemUpsert) UpdateOwnerMemberID() *HPFeedItemUpsert {
	u.SetExcluded(hpfeeditem.FieldOwnerMemberID)
	return u
}

// ClearOwnerMemberID clears the value of the "owner_member_id" field.
func (u *HPFeedItemUpsert) ClearOwnerMemberID() *HPFeedItemUpsert {
	u.SetNull(hpfeeditem.FieldOwnerMemberID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.HPFeedItem.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *HPFeedItemUpsertOne) UpdateNewValues() *HPFeedItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(hpfeeditem.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.HPFeedItem.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *HPFeedItemUpsertOne) Ignore() *HPFeedItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *HPFeedItemUpsertOne) DoNothing() *HPFeedItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the HPFeedItemCreate.OnConflict
// documentation for more info.
func (u *HPFeedItemUpsertOne) Update(set func(*HPFeedItemUpsert)) *HPFeedItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&HPFeedItemUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *HPFeedItemUpsertOne) SetUpdatedAt(v time.Time) *HPFeedItemUpsertOne {
	return u.Update(func(s *HPFeedItemUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *HPFeedItemUpsertOne) UpdateUpdatedAt() *HPFeedItemUpsertOne {
	return u.Update(func(s *HPFeedItemUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *HPFeedItemUpsertOne) ClearUpdatedAt() *HPFeedItemUpsertOne {
	return u.Update(func(s *HPFeedItemUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetSourceID sets the "source_id" field.
func (u *HPFeedItemUpsertOne) SetSourceID(v int) *HPFeedItemUpsertOne {
	return u.Update(func(s *HPFeedItemUpsert) {
		s.SetSourceID(v)
	})
}

// AddSourceID adds v to the "source_id" field.
func (u *HPFeedItemUpsertOne) AddSourceID(v int) *HPFeedItemUpsertOne {
	return u.Update(func(s *HPFeedItemUpsert) {
		s.AddSourceID(v)
	})
}

// UpdateSourceID sets the "source_id" field to the value that was provided on create.
func (u *HPFeedItemUpsertOne) UpdateSourceID() *HPFeedItemUpsertOne {
	return u.Update(func(s *HPFeedItemUpsert) {
		s.UpdateSourceID()
	})
}

// SetAssetType sets the "asset_type" field.
func (u *HPFeedItemUpsertOne) SetAssetType(v enums.HPAssetType) *HPFeedItemUpsertOne {
	return u.Update(func(s *HPFeedItemUpsert) {
		s.SetAssetType(v)
	})
}

// UpdateAssetType sets the "asset_type" field to the value that was provided on create.
func (u *HPFeedItemUpsertOne) UpdateAssetType() *HPFeedItemUpsertOne {
	return u.Update(func(s *HPFeedItemUpsert) {
		s.UpdateAssetType()
	})
}

// SetTitle sets the "title" field.
func (u *HPFeedItemUpsertOne) SetTitle(v string) *HPFeedItemUpsertOne {
	return u.Update(func(s *HPFeedItemUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *HPFeedItemUpsertOne) UpdateTitle() *HPFeedItemUpsertOne {
	return u.Update(func(s *HPFeedItemUpsert) {
		s.UpdateTitle()
	})
}

// SetPostAt sets the "post_at" field.
func (u *HPFeedItemUpsertOne) SetPostAt(v time.Time) *HPFeedItemUpsertOne {
	return u.Update(func(s *HPFeedItemUpsert) {
		s.SetPostAt(v)
	})
}

// UpdatePostAt sets the "post_at" field to the value that was provided on create.
func (u *HPFeedItemUpsertOne) UpdatePostAt() *HPFeedItemUpsertOne {
	return u.Update(func(s *HPFeedItemUpsert) {
		s.UpdatePostAt()
	})
}

// SetSourceURL sets the "source_url" field.
func (u *HPFeedItemUpsertOne) SetSourceURL(v string) *HPFeedItemUpsertOne {
	return u.Update(func(s *HPFeedItemUpsert) {
		s.SetSourceURL(v)
	})
}

// UpdateSourceURL sets the "source_url" field to the value that was provided on create.
func (u *HPFeedItemUpsertOne) UpdateSourceURL() *HPFeedItemUpsertOne {
	return u.Update(func(s *HPFeedItemUpsert) {
		s.UpdateSourceURL()
	})
}

// SetImageURL sets the "image_url" field.
func (u *HPFeedItemUpsertOne) SetImageURL(v string) *HPFeedItemUpsertOne {
	return u.Update(func(s *HPFeedItemUpsert) {
		s.SetImageURL(v)
	})
}

// UpdateImageURL sets the "image_url" field to the value that was provided on create.
func (u *HPFeedItemUpsertOne) UpdateImageURL() *HPFeedItemUpsertOne {
	return u.Update(func(s *HPFeedItemUpsert) {
		s.UpdateImageURL()
	})
}

// ClearImageURL clears the value of the "image_url" field.
func (u *HPFeedItemUpsertOne) ClearImageURL() *HPFeedItemUpsertOne {
	return u.Update(func(s *HPFeedItemUpsert) {
		s.ClearImageURL()
	})
}

// SetMedia sets the "media" field.
func (u *HPFeedItemUpsertOne) SetMedia(v []jsonfields.Media) *HPFeedItemUpsertOne {
	return u.Update(func(s *HPFeedItemUpsert) {
		s.SetMedia(v)
	})
}

// UpdateMedia sets the "media" field to the value that was provided on create.
func (u *HPFeedItemUpsertOne) UpdateMedia() *HPFeedItemUpsertOne {
	return u.Update(func(s *HPFeedItemUpsert) {
		s.UpdateMedia()
	})
}

// SetOwnerArtistID sets the "owner_artist_id" field.
func (u *HPFeedItemUpsertOne) SetOwnerArtistID(v int) *HPFeedItemUpsertOne {
	return u.Update(func(s *HPFeedItemUpsert) {
		s.SetOwnerArtistID(v)
	})
}

// UpdateOwnerArtistID sets the "owner_artist_id" field to the value that was provided on create.
func (u *HPFeedItemUpsertOne) UpdateOwnerArtistID() *HPFeedItemUpsertOne {
	return u.Update(func(s *HPFeedItemUpsert) {
		s.UpdateOwnerArtistID()
	})
}

// ClearOwnerArtistID clears the value of the "owner_artist_id" field.
func (u *HPFeedItemUpsertOne) ClearOwnerArtistID() *HPFeedItemUpsertOne {
	return u.Update(func(s *HPFeedItemUpsert) {
		s.ClearOwnerArtistID()
	})
}

// SetOwnerMemberID sets the "owner_member_id" field.
func (u *HPFeedItemUpsertOne) SetOwnerMemberID(v int) *HPFeedItemUpsertOne {
	return u.Update(func(s *HPFeedItemUpsert) {
		s.SetOwnerMemberID(v)
	})
}

// UpdateOwnerMemberID sets the "owner_member_id" field to the value that was provided on create.
func (u *HPFeedItemUpsertOne) UpdateOwnerMemberID() *HPFeedItemUpsertOne {
	return u.Update(func(s *HPFeedItemUpsert) {
		s.UpdateOwnerMemberID()
	})
}

// ClearOwnerMemberID clears the value of the "owner_member_id" field.
func (u *HPFeedItemUpsertOne) ClearOwnerMemberID() *HPFeedItemUpsertOne {
	return u.Update(func(s *HPFeedItemUpsert) {
		s.ClearOwnerMemberID()
	})
}

// Exec executes the query.
func (u *HPFeedItemUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for HPFeedItemCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *HPFeedItemUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *HPFeedItemUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *HPFeedItemUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// HPFeedItemCreateBulk is the builder for creating many HPFeedItem entities in bulk.
type HPFeedItemCreateBulk struct {
	config
	builders []*HPFeedItemCreate
	conflict []sql.ConflictOption
}

// Save creates the HPFeedItem entities in the database.
func (hficb *HPFeedItemCreateBulk) Save(ctx context.Context) ([]*HPFeedItem, error) {
	specs := make([]*sqlgraph.CreateSpec, len(hficb.builders))
	nodes := make([]*HPFeedItem, len(hficb.builders))
	mutators := make([]Mutator, len(hficb.builders))
	for i := range hficb.builders {
		func(i int, root context.Context) {
			builder := hficb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HPFeedItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hficb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = hficb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hficb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hficb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hficb *HPFeedItemCreateBulk) SaveX(ctx context.Context) []*HPFeedItem {
	v, err := hficb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hficb *HPFeedItemCreateBulk) Exec(ctx context.Context) error {
	_, err := hficb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hficb *HPFeedItemCreateBulk) ExecX(ctx context.Context) {
	if err := hficb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.HPFeedItem.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.HPFeedItemUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (hficb *HPFeedItemCreateBulk) OnConflict(opts ...sql.ConflictOption) *HPFeedItemUpsertBulk {
	hficb.conflict = opts
	return &HPFeedItemUpsertBulk{
		create: hficb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.HPFeedItem.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (hficb *HPFeedItemCreateBulk) OnConflictColumns(columns ...string) *HPFeedItemUpsertBulk {
	hficb.conflict = append(hficb.conflict, sql.ConflictColumns(columns...))
	return &HPFeedItemUpsertBulk{
		create: hficb,
	}
}

// HPFeedItemUpsertBulk is the builder for "upsert"-ing
// a bulk of HPFeedItem nodes.
type HPFeedItemUpsertBulk struct {
	create *HPFeedItemCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.HPFeedItem.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *HPFeedItemUpsertBulk) UpdateNewValues() *HPFeedItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(hpfeeditem.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.HPFeedItem.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *HPFeedItemUpsertBulk) Ignore() *HPFeedItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *HPFeedItemUpsertBulk) DoNothing() *HPFeedItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the HPFeedItemCreateBulk.OnConflict
// documentation for more info.
func (u *HPFeedItemUpsertBulk) Update(set func(*HPFeedItemUpsert)) *HPFeedItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&HPFeedItemUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *HPFeedItemUpsertBulk) SetUpdatedAt(v time.Time) *HPFeedItemUpsertBulk {
	return u.Update(func(s *HPFeedItemUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *HPFeedItemUpsertBulk) UpdateUpdatedAt() *HPFeedItemUpsertBulk {
	return u.Update(func(s *HPFeedItemUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *HPFeedItemUpsertBulk) ClearUpdatedAt() *HPFeedItemUpsertBulk {
	return u.Update(func(s *HPFeedItemUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetSourceID sets the "source_id" field.
func (u *HPFeedItemUpsertBulk) SetSourceID(v int) *HPFeedItemUpsertBulk {
	return u.Update(func(s *HPFeedItemUpsert) {
		s.SetSourceID(v)
	})
}

// AddSourceID adds v to the "source_id" field.
func (u *HPFeedItemUpsertBulk) AddSourceID(v int) *HPFeedItemUpsertBulk {
	return u.Update(func(s *HPFeedItemUpsert) {
		s.AddSourceID(v)
	})
}

// UpdateSourceID sets the "source_id" field to the value that was provided on create.
func (u *HPFeedItemUpsertBulk) UpdateSourceID() *HPFeedItemUpsertBulk {
	return u.Update(func(s *HPFeedItemUpsert) {
		s.UpdateSourceID()
	})
}

// SetAssetType sets the "asset_type" field.
func (u *HPFeedItemUpsertBulk) SetAssetType(v enums.HPAssetType) *HPFeedItemUpsertBulk {
	return u.Update(func(s *HPFeedItemUpsert) {
		s.SetAssetType(v)
	})
}

// UpdateAssetType sets the "asset_type" field to the value that was provided on create.
func (u *HPFeedItemUpsertBulk) UpdateAssetType() *HPFeedItemUpsertBulk {
	return u.Update(func(s *HPFeedItemUpsert) {
		s.UpdateAssetType()
	})
}

// SetTitle sets the "title" field.
func (u *HPFeedItemUpsertBulk) SetTitle(v string) *HPFeedItemUpsertBulk {
	return u.Update(func(s *HPFeedItemUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *HPFeedItemUpsertBulk) UpdateTitle() *HPFeedItemUpsertBulk {
	return u.Update(func(s *HPFeedItemUpsert) {
		s.UpdateTitle()
	})
}

// SetPostAt sets the "post_at" field.
func (u *HPFeedItemUpsertBulk) SetPostAt(v time.Time) *HPFeedItemUpsertBulk {
	return u.Update(func(s *HPFeedItemUpsert) {
		s.SetPostAt(v)
	})
}

// UpdatePostAt sets the "post_at" field to the value that was provided on create.
func (u *HPFeedItemUpsertBulk) UpdatePostAt() *HPFeedItemUpsertBulk {
	return u.Update(func(s *HPFeedItemUpsert) {
		s.UpdatePostAt()
	})
}

// SetSourceURL sets the "source_url" field.
func (u *HPFeedItemUpsertBulk) SetSourceURL(v string) *HPFeedItemUpsertBulk {
	return u.Update(func(s *HPFeedItemUpsert) {
		s.SetSourceURL(v)
	})
}

// UpdateSourceURL sets the "source_url" field to the value that was provided on create.
func (u *HPFeedItemUpsertBulk) UpdateSourceURL() *HPFeedItemUpsertBulk {
	return u.Update(func(s *HPFeedItemUpsert) {
		s.UpdateSourceURL()
	})
}

// SetImageURL sets the "image_url" field.
func (u *HPFeedItemUpsertBulk) SetImageURL(v string) *HPFeedItemUpsertBulk {
	return u.Update(func(s *HPFeedItemUpsert) {
		s.SetImageURL(v)
	})
}

// UpdateImageURL sets the "image_url" field to the value that was provided on create.
func (u *HPFeedItemUpsertBulk) UpdateImageURL() *HPFeedItemUpsertBulk {
	return u.Update(func(s *HPFeedItemUpsert) {
		s.UpdateImageURL()
	})
}

// ClearImageURL clears the value of the "image_url" field.
func (u *HPFeedItemUpsertBulk) ClearImageURL() *HPFeedItemUpsertBulk {
	return u.Update(func(s *HPFeedItemUpsert) {
		s.ClearImageURL()
	})
}

// SetMedia sets the "media" field.
func (u *HPFeedItemUpsertBulk) SetMedia(v []jsonfields.Media) *HPFeedItemUpsertBulk {
	return u.Update(func(s *HPFeedItemUpsert) {
		s.SetMedia(v)
	})
}

// UpdateMedia sets the "media" field to the value that was provided on create.
func (u *HPFeedItemUpsertBulk) UpdateMedia() *HPFeedItemUpsertBulk {
	return u.Update(func(s *HPFeedItemUpsert) {
		s.UpdateMedia()
	})
}

// SetOwnerArtistID sets the "owner_artist_id" field.
func (u *HPFeedItemUpsertBulk) SetOwnerArtistID(v int) *HPFeedItemUpsertBulk {
	return u.Update(func(s *HPFeedItemUpsert) {
		s.SetOwnerArtistID(v)
	})
}

// UpdateOwnerArtistID sets the "owner_artist_id" field to the value that was provided on create.
func (u *HPFeedItemUpsertBulk) UpdateOwnerArtistID() *HPFeedItemUpsertBulk {
	return u.Update(func(s *HPFeedItemUpsert) {
		s.UpdateOwnerArtistID()
	})
}

// ClearOwnerArtistID clears the value of the "owner_artist_id" field.
func (u *HPFeedItemUpsertBulk) ClearOwnerArtistID() *HPFeedItemUpsertBulk {
	return u.Update(func(s *HPFeedItemUpsert) {
		s.ClearOwnerArtistID()
	})
}

// SetOwnerMemberID sets the "owner_member_id" field.
func (u *HPFeedItemUpsertBulk) SetOwnerMemberID(v int) *HPFeedItemUpsertBulk {
	return u.Update(func(s *HPFeedItemUpsert) {
		s.SetOwnerMemberID(v)
	})
}

// UpdateOwnerMemberID sets the "owner_member_id" field to the value that was provided on create.
func (u *HPFeedItemUpsertBulk) UpdateOwnerMemberID() *HPFeedItemUpsertBulk {
	return u.Update(func(s *HPFeedItemUpsert) {
		s.UpdateOwnerMemberID()
	})
}

// ClearOwnerMemberID clears the value of the "owner_member_id" field.
func (u *HPFeedItemUpsertBulk) ClearOwnerMemberID() *HPFeedItemUpsertBulk {
	return u.Update(func(s *HPFeedItemUpsert) {
		s.ClearOwnerMemberID()
	})
}

// Exec executes the query.
func (u *HPFeedItemUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the HPFeedItemCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for HPFeedItemCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *HPFeedItemUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
