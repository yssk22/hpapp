// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yssk22/hpapp/go/service/ent/hpartist"
	"github.com/yssk22/hpapp/go/service/ent/hpasset"
	"github.com/yssk22/hpapp/go/service/ent/hpblob"
	"github.com/yssk22/hpapp/go/service/ent/hpigpost"
	"github.com/yssk22/hpapp/go/service/ent/hpmember"
	"github.com/yssk22/hpapp/go/service/schema/jsonfields"
)

// HPIgPostCreate is the builder for creating a HPIgPost entity.
type HPIgPostCreate struct {
	config
	mutation *HPIgPostMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCrawledAt sets the "crawled_at" field.
func (hipc *HPIgPostCreate) SetCrawledAt(t time.Time) *HPIgPostCreate {
	hipc.mutation.SetCrawledAt(t)
	return hipc
}

// SetNillableCrawledAt sets the "crawled_at" field if the given value is not nil.
func (hipc *HPIgPostCreate) SetNillableCrawledAt(t *time.Time) *HPIgPostCreate {
	if t != nil {
		hipc.SetCrawledAt(*t)
	}
	return hipc
}

// SetErrorCount sets the "error_count" field.
func (hipc *HPIgPostCreate) SetErrorCount(i int) *HPIgPostCreate {
	hipc.mutation.SetErrorCount(i)
	return hipc
}

// SetNillableErrorCount sets the "error_count" field if the given value is not nil.
func (hipc *HPIgPostCreate) SetNillableErrorCount(i *int) *HPIgPostCreate {
	if i != nil {
		hipc.SetErrorCount(*i)
	}
	return hipc
}

// SetManuallyModified sets the "manually_modified" field.
func (hipc *HPIgPostCreate) SetManuallyModified(jm *jsonfields.ManuallyModified) *HPIgPostCreate {
	hipc.mutation.SetManuallyModified(jm)
	return hipc
}

// SetLastErrorMessage sets the "last_error_message" field.
func (hipc *HPIgPostCreate) SetLastErrorMessage(s string) *HPIgPostCreate {
	hipc.mutation.SetLastErrorMessage(s)
	return hipc
}

// SetNillableLastErrorMessage sets the "last_error_message" field if the given value is not nil.
func (hipc *HPIgPostCreate) SetNillableLastErrorMessage(s *string) *HPIgPostCreate {
	if s != nil {
		hipc.SetLastErrorMessage(*s)
	}
	return hipc
}

// SetRecrawlRequired sets the "recrawl_required" field.
func (hipc *HPIgPostCreate) SetRecrawlRequired(b bool) *HPIgPostCreate {
	hipc.mutation.SetRecrawlRequired(b)
	return hipc
}

// SetNillableRecrawlRequired sets the "recrawl_required" field if the given value is not nil.
func (hipc *HPIgPostCreate) SetNillableRecrawlRequired(b *bool) *HPIgPostCreate {
	if b != nil {
		hipc.SetRecrawlRequired(*b)
	}
	return hipc
}

// SetCreatedAt sets the "created_at" field.
func (hipc *HPIgPostCreate) SetCreatedAt(t time.Time) *HPIgPostCreate {
	hipc.mutation.SetCreatedAt(t)
	return hipc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (hipc *HPIgPostCreate) SetNillableCreatedAt(t *time.Time) *HPIgPostCreate {
	if t != nil {
		hipc.SetCreatedAt(*t)
	}
	return hipc
}

// SetUpdatedAt sets the "updated_at" field.
func (hipc *HPIgPostCreate) SetUpdatedAt(t time.Time) *HPIgPostCreate {
	hipc.mutation.SetUpdatedAt(t)
	return hipc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (hipc *HPIgPostCreate) SetNillableUpdatedAt(t *time.Time) *HPIgPostCreate {
	if t != nil {
		hipc.SetUpdatedAt(*t)
	}
	return hipc
}

// SetShortcode sets the "shortcode" field.
func (hipc *HPIgPostCreate) SetShortcode(s string) *HPIgPostCreate {
	hipc.mutation.SetShortcode(s)
	return hipc
}

// SetDescription sets the "description" field.
func (hipc *HPIgPostCreate) SetDescription(s string) *HPIgPostCreate {
	hipc.mutation.SetDescription(s)
	return hipc
}

// SetPostAt sets the "post_at" field.
func (hipc *HPIgPostCreate) SetPostAt(t time.Time) *HPIgPostCreate {
	hipc.mutation.SetPostAt(t)
	return hipc
}

// SetMedia sets the "media" field.
func (hipc *HPIgPostCreate) SetMedia(j []jsonfields.Media) *HPIgPostCreate {
	hipc.mutation.SetMedia(j)
	return hipc
}

// SetLikes sets the "likes" field.
func (hipc *HPIgPostCreate) SetLikes(i int) *HPIgPostCreate {
	hipc.mutation.SetLikes(i)
	return hipc
}

// SetComments sets the "comments" field.
func (hipc *HPIgPostCreate) SetComments(i int) *HPIgPostCreate {
	hipc.mutation.SetComments(i)
	return hipc
}

// SetRecrawlArgs sets the "recrawl_args" field.
func (hipc *HPIgPostCreate) SetRecrawlArgs(jica *jsonfields.HPIgCrawlArgs) *HPIgPostCreate {
	hipc.mutation.SetRecrawlArgs(jica)
	return hipc
}

// SetOwnerArtistID sets the "owner_artist_id" field.
func (hipc *HPIgPostCreate) SetOwnerArtistID(i int) *HPIgPostCreate {
	hipc.mutation.SetOwnerArtistID(i)
	return hipc
}

// SetNillableOwnerArtistID sets the "owner_artist_id" field if the given value is not nil.
func (hipc *HPIgPostCreate) SetNillableOwnerArtistID(i *int) *HPIgPostCreate {
	if i != nil {
		hipc.SetOwnerArtistID(*i)
	}
	return hipc
}

// SetOwnerMemberID sets the "owner_member_id" field.
func (hipc *HPIgPostCreate) SetOwnerMemberID(i int) *HPIgPostCreate {
	hipc.mutation.SetOwnerMemberID(i)
	return hipc
}

// SetNillableOwnerMemberID sets the "owner_member_id" field if the given value is not nil.
func (hipc *HPIgPostCreate) SetNillableOwnerMemberID(i *int) *HPIgPostCreate {
	if i != nil {
		hipc.SetOwnerMemberID(*i)
	}
	return hipc
}

// SetOwnerArtist sets the "owner_artist" edge to the HPArtist entity.
func (hipc *HPIgPostCreate) SetOwnerArtist(h *HPArtist) *HPIgPostCreate {
	return hipc.SetOwnerArtistID(h.ID)
}

// SetOwnerMember sets the "owner_member" edge to the HPMember entity.
func (hipc *HPIgPostCreate) SetOwnerMember(h *HPMember) *HPIgPostCreate {
	return hipc.SetOwnerMemberID(h.ID)
}

// SetAssetID sets the "asset" edge to the HPAsset entity by ID.
func (hipc *HPIgPostCreate) SetAssetID(id int) *HPIgPostCreate {
	hipc.mutation.SetAssetID(id)
	return hipc
}

// SetNillableAssetID sets the "asset" edge to the HPAsset entity by ID if the given value is not nil.
func (hipc *HPIgPostCreate) SetNillableAssetID(id *int) *HPIgPostCreate {
	if id != nil {
		hipc = hipc.SetAssetID(*id)
	}
	return hipc
}

// SetAsset sets the "asset" edge to the HPAsset entity.
func (hipc *HPIgPostCreate) SetAsset(h *HPAsset) *HPIgPostCreate {
	return hipc.SetAssetID(h.ID)
}

// AddTaggedArtistIDs adds the "tagged_artists" edge to the HPArtist entity by IDs.
func (hipc *HPIgPostCreate) AddTaggedArtistIDs(ids ...int) *HPIgPostCreate {
	hipc.mutation.AddTaggedArtistIDs(ids...)
	return hipc
}

// AddTaggedArtists adds the "tagged_artists" edges to the HPArtist entity.
func (hipc *HPIgPostCreate) AddTaggedArtists(h ...*HPArtist) *HPIgPostCreate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hipc.AddTaggedArtistIDs(ids...)
}

// AddTaggedMemberIDs adds the "tagged_members" edge to the HPMember entity by IDs.
func (hipc *HPIgPostCreate) AddTaggedMemberIDs(ids ...int) *HPIgPostCreate {
	hipc.mutation.AddTaggedMemberIDs(ids...)
	return hipc
}

// AddTaggedMembers adds the "tagged_members" edges to the HPMember entity.
func (hipc *HPIgPostCreate) AddTaggedMembers(h ...*HPMember) *HPIgPostCreate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hipc.AddTaggedMemberIDs(ids...)
}

// AddBlobIDs adds the "blobs" edge to the HPBlob entity by IDs.
func (hipc *HPIgPostCreate) AddBlobIDs(ids ...int) *HPIgPostCreate {
	hipc.mutation.AddBlobIDs(ids...)
	return hipc
}

// AddBlobs adds the "blobs" edges to the HPBlob entity.
func (hipc *HPIgPostCreate) AddBlobs(h ...*HPBlob) *HPIgPostCreate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hipc.AddBlobIDs(ids...)
}

// Mutation returns the HPIgPostMutation object of the builder.
func (hipc *HPIgPostCreate) Mutation() *HPIgPostMutation {
	return hipc.mutation
}

// Save creates the HPIgPost in the database.
func (hipc *HPIgPostCreate) Save(ctx context.Context) (*HPIgPost, error) {
	if err := hipc.defaults(); err != nil {
		return nil, err
	}
	return withHooks[*HPIgPost, HPIgPostMutation](ctx, hipc.sqlSave, hipc.mutation, hipc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (hipc *HPIgPostCreate) SaveX(ctx context.Context) *HPIgPost {
	v, err := hipc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hipc *HPIgPostCreate) Exec(ctx context.Context) error {
	_, err := hipc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hipc *HPIgPostCreate) ExecX(ctx context.Context) {
	if err := hipc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hipc *HPIgPostCreate) defaults() error {
	if _, ok := hipc.mutation.ErrorCount(); !ok {
		v := hpigpost.DefaultErrorCount
		hipc.mutation.SetErrorCount(v)
	}
	if _, ok := hipc.mutation.RecrawlRequired(); !ok {
		v := hpigpost.DefaultRecrawlRequired
		hipc.mutation.SetRecrawlRequired(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (hipc *HPIgPostCreate) check() error {
	if _, ok := hipc.mutation.ErrorCount(); !ok {
		return &ValidationError{Name: "error_count", err: errors.New(`ent: missing required field "HPIgPost.error_count"`)}
	}
	if _, ok := hipc.mutation.Shortcode(); !ok {
		return &ValidationError{Name: "shortcode", err: errors.New(`ent: missing required field "HPIgPost.shortcode"`)}
	}
	if _, ok := hipc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "HPIgPost.description"`)}
	}
	if _, ok := hipc.mutation.PostAt(); !ok {
		return &ValidationError{Name: "post_at", err: errors.New(`ent: missing required field "HPIgPost.post_at"`)}
	}
	if _, ok := hipc.mutation.Media(); !ok {
		return &ValidationError{Name: "media", err: errors.New(`ent: missing required field "HPIgPost.media"`)}
	}
	if _, ok := hipc.mutation.Likes(); !ok {
		return &ValidationError{Name: "likes", err: errors.New(`ent: missing required field "HPIgPost.likes"`)}
	}
	if _, ok := hipc.mutation.Comments(); !ok {
		return &ValidationError{Name: "comments", err: errors.New(`ent: missing required field "HPIgPost.comments"`)}
	}
	return nil
}

func (hipc *HPIgPostCreate) sqlSave(ctx context.Context) (*HPIgPost, error) {
	if err := hipc.check(); err != nil {
		return nil, err
	}
	_node, _spec := hipc.createSpec()
	if err := sqlgraph.CreateNode(ctx, hipc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	hipc.mutation.id = &_node.ID
	hipc.mutation.done = true
	return _node, nil
}

func (hipc *HPIgPostCreate) createSpec() (*HPIgPost, *sqlgraph.CreateSpec) {
	var (
		_node = &HPIgPost{config: hipc.config}
		_spec = sqlgraph.NewCreateSpec(hpigpost.Table, sqlgraph.NewFieldSpec(hpigpost.FieldID, field.TypeInt))
	)
	_spec.OnConflict = hipc.conflict
	if value, ok := hipc.mutation.CrawledAt(); ok {
		_spec.SetField(hpigpost.FieldCrawledAt, field.TypeTime, value)
		_node.CrawledAt = &value
	}
	if value, ok := hipc.mutation.ErrorCount(); ok {
		_spec.SetField(hpigpost.FieldErrorCount, field.TypeInt, value)
		_node.ErrorCount = value
	}
	if value, ok := hipc.mutation.ManuallyModified(); ok {
		_spec.SetField(hpigpost.FieldManuallyModified, field.TypeJSON, value)
		_node.ManuallyModified = value
	}
	if value, ok := hipc.mutation.LastErrorMessage(); ok {
		_spec.SetField(hpigpost.FieldLastErrorMessage, field.TypeString, value)
		_node.LastErrorMessage = &value
	}
	if value, ok := hipc.mutation.RecrawlRequired(); ok {
		_spec.SetField(hpigpost.FieldRecrawlRequired, field.TypeBool, value)
		_node.RecrawlRequired = value
	}
	if value, ok := hipc.mutation.CreatedAt(); ok {
		_spec.SetField(hpigpost.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := hipc.mutation.UpdatedAt(); ok {
		_spec.SetField(hpigpost.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := hipc.mutation.Shortcode(); ok {
		_spec.SetField(hpigpost.FieldShortcode, field.TypeString, value)
		_node.Shortcode = value
	}
	if value, ok := hipc.mutation.Description(); ok {
		_spec.SetField(hpigpost.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := hipc.mutation.PostAt(); ok {
		_spec.SetField(hpigpost.FieldPostAt, field.TypeTime, value)
		_node.PostAt = value
	}
	if value, ok := hipc.mutation.Media(); ok {
		_spec.SetField(hpigpost.FieldMedia, field.TypeJSON, value)
		_node.Media = value
	}
	if value, ok := hipc.mutation.Likes(); ok {
		_spec.SetField(hpigpost.FieldLikes, field.TypeInt, value)
		_node.Likes = value
	}
	if value, ok := hipc.mutation.Comments(); ok {
		_spec.SetField(hpigpost.FieldComments, field.TypeInt, value)
		_node.Comments = value
	}
	if value, ok := hipc.mutation.RecrawlArgs(); ok {
		_spec.SetField(hpigpost.FieldRecrawlArgs, field.TypeJSON, value)
		_node.RecrawlArgs = value
	}
	if nodes := hipc.mutation.OwnerArtistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpigpost.OwnerArtistTable,
			Columns: []string{hpigpost.OwnerArtistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpartist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerArtistID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hipc.mutation.OwnerMemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpigpost.OwnerMemberTable,
			Columns: []string{hpigpost.OwnerMemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerMemberID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hipc.mutation.AssetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpigpost.AssetTable,
			Columns: []string{hpigpost.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpasset.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.hp_asset_ig_posts = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hipc.mutation.TaggedArtistsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpigpost.TaggedArtistsTable,
			Columns: hpigpost.TaggedArtistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpartist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hipc.mutation.TaggedMembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hpigpost.TaggedMembersTable,
			Columns: hpigpost.TaggedMembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hipc.mutation.BlobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpigpost.BlobsTable,
			Columns: hpigpost.BlobsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpblob.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.HPIgPost.Create().
//		SetCrawledAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.HPIgPostUpsert) {
//			SetCrawledAt(v+v).
//		}).
//		Exec(ctx)
//
func (hipc *HPIgPostCreate) OnConflict(opts ...sql.ConflictOption) *HPIgPostUpsertOne {
	hipc.conflict = opts
	return &HPIgPostUpsertOne{
		create: hipc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.HPIgPost.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (hipc *HPIgPostCreate) OnConflictColumns(columns ...string) *HPIgPostUpsertOne {
	hipc.conflict = append(hipc.conflict, sql.ConflictColumns(columns...))
	return &HPIgPostUpsertOne{
		create: hipc,
	}
}

type (
	// HPIgPostUpsertOne is the builder for "upsert"-ing
	//  one HPIgPost node.
	HPIgPostUpsertOne struct {
		create *HPIgPostCreate
	}

	// HPIgPostUpsert is the "OnConflict" setter.
	HPIgPostUpsert struct {
		*sql.UpdateSet
	}
)

// SetCrawledAt sets the "crawled_at" field.
func (u *HPIgPostUpsert) SetCrawledAt(v time.Time) *HPIgPostUpsert {
	u.Set(hpigpost.FieldCrawledAt, v)
	return u
}

// UpdateCrawledAt sets the "crawled_at" field to the value that was provided on create.
func (u *HPIgPostUpsert) UpdateCrawledAt() *HPIgPostUpsert {
	u.SetExcluded(hpigpost.FieldCrawledAt)
	return u
}

// ClearCrawledAt clears the value of the "crawled_at" field.
func (u *HPIgPostUpsert) ClearCrawledAt() *HPIgPostUpsert {
	u.SetNull(hpigpost.FieldCrawledAt)
	return u
}

// SetErrorCount sets the "error_count" field.
func (u *HPIgPostUpsert) SetErrorCount(v int) *HPIgPostUpsert {
	u.Set(hpigpost.FieldErrorCount, v)
	return u
}

// UpdateErrorCount sets the "error_count" field to the value that was provided on create.
func (u *HPIgPostUpsert) UpdateErrorCount() *HPIgPostUpsert {
	u.SetExcluded(hpigpost.FieldErrorCount)
	return u
}

// AddErrorCount adds v to the "error_count" field.
func (u *HPIgPostUpsert) AddErrorCount(v int) *HPIgPostUpsert {
	u.Add(hpigpost.FieldErrorCount, v)
	return u
}

// SetManuallyModified sets the "manually_modified" field.
func (u *HPIgPostUpsert) SetManuallyModified(v *jsonfields.ManuallyModified) *HPIgPostUpsert {
	u.Set(hpigpost.FieldManuallyModified, v)
	return u
}

// UpdateManuallyModified sets the "manually_modified" field to the value that was provided on create.
func (u *HPIgPostUpsert) UpdateManuallyModified() *HPIgPostUpsert {
	u.SetExcluded(hpigpost.FieldManuallyModified)
	return u
}

// ClearManuallyModified clears the value of the "manually_modified" field.
func (u *HPIgPostUpsert) ClearManuallyModified() *HPIgPostUpsert {
	u.SetNull(hpigpost.FieldManuallyModified)
	return u
}

// SetLastErrorMessage sets the "last_error_message" field.
func (u *HPIgPostUpsert) SetLastErrorMessage(v string) *HPIgPostUpsert {
	u.Set(hpigpost.FieldLastErrorMessage, v)
	return u
}

// UpdateLastErrorMessage sets the "last_error_message" field to the value that was provided on create.
func (u *HPIgPostUpsert) UpdateLastErrorMessage() *HPIgPostUpsert {
	u.SetExcluded(hpigpost.FieldLastErrorMessage)
	return u
}

// ClearLastErrorMessage clears the value of the "last_error_message" field.
func (u *HPIgPostUpsert) ClearLastErrorMessage() *HPIgPostUpsert {
	u.SetNull(hpigpost.FieldLastErrorMessage)
	return u
}

// SetRecrawlRequired sets the "recrawl_required" field.
func (u *HPIgPostUpsert) SetRecrawlRequired(v bool) *HPIgPostUpsert {
	u.Set(hpigpost.FieldRecrawlRequired, v)
	return u
}

// UpdateRecrawlRequired sets the "recrawl_required" field to the value that was provided on create.
func (u *HPIgPostUpsert) UpdateRecrawlRequired() *HPIgPostUpsert {
	u.SetExcluded(hpigpost.FieldRecrawlRequired)
	return u
}

// ClearRecrawlRequired clears the value of the "recrawl_required" field.
func (u *HPIgPostUpsert) ClearRecrawlRequired() *HPIgPostUpsert {
	u.SetNull(hpigpost.FieldRecrawlRequired)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *HPIgPostUpsert) SetUpdatedAt(v time.Time) *HPIgPostUpsert {
	u.Set(hpigpost.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *HPIgPostUpsert) UpdateUpdatedAt() *HPIgPostUpsert {
	u.SetExcluded(hpigpost.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *HPIgPostUpsert) ClearUpdatedAt() *HPIgPostUpsert {
	u.SetNull(hpigpost.FieldUpdatedAt)
	return u
}

// SetShortcode sets the "shortcode" field.
func (u *HPIgPostUpsert) SetShortcode(v string) *HPIgPostUpsert {
	u.Set(hpigpost.FieldShortcode, v)
	return u
}

// UpdateShortcode sets the "shortcode" field to the value that was provided on create.
func (u *HPIgPostUpsert) UpdateShortcode() *HPIgPostUpsert {
	u.SetExcluded(hpigpost.FieldShortcode)
	return u
}

// SetDescription sets the "description" field.
func (u *HPIgPostUpsert) SetDescription(v string) *HPIgPostUpsert {
	u.Set(hpigpost.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *HPIgPostUpsert) UpdateDescription() *HPIgPostUpsert {
	u.SetExcluded(hpigpost.FieldDescription)
	return u
}

// SetPostAt sets the "post_at" field.
func (u *HPIgPostUpsert) SetPostAt(v time.Time) *HPIgPostUpsert {
	u.Set(hpigpost.FieldPostAt, v)
	return u
}

// UpdatePostAt sets the "post_at" field to the value that was provided on create.
func (u *HPIgPostUpsert) UpdatePostAt() *HPIgPostUpsert {
	u.SetExcluded(hpigpost.FieldPostAt)
	return u
}

// SetMedia sets the "media" field.
func (u *HPIgPostUpsert) SetMedia(v []jsonfields.Media) *HPIgPostUpsert {
	u.Set(hpigpost.FieldMedia, v)
	return u
}

// UpdateMedia sets the "media" field to the value that was provided on create.
func (u *HPIgPostUpsert) UpdateMedia() *HPIgPostUpsert {
	u.SetExcluded(hpigpost.FieldMedia)
	return u
}

// SetLikes sets the "likes" field.
func (u *HPIgPostUpsert) SetLikes(v int) *HPIgPostUpsert {
	u.Set(hpigpost.FieldLikes, v)
	return u
}

// UpdateLikes sets the "likes" field to the value that was provided on create.
func (u *HPIgPostUpsert) UpdateLikes() *HPIgPostUpsert {
	u.SetExcluded(hpigpost.FieldLikes)
	return u
}

// AddLikes adds v to the "likes" field.
func (u *HPIgPostUpsert) AddLikes(v int) *HPIgPostUpsert {
	u.Add(hpigpost.FieldLikes, v)
	return u
}

// SetComments sets the "comments" field.
func (u *HPIgPostUpsert) SetComments(v int) *HPIgPostUpsert {
	u.Set(hpigpost.FieldComments, v)
	return u
}

// UpdateComments sets the "comments" field to the value that was provided on create.
func (u *HPIgPostUpsert) UpdateComments() *HPIgPostUpsert {
	u.SetExcluded(hpigpost.FieldComments)
	return u
}

// AddComments adds v to the "comments" field.
func (u *HPIgPostUpsert) AddComments(v int) *HPIgPostUpsert {
	u.Add(hpigpost.FieldComments, v)
	return u
}

// SetRecrawlArgs sets the "recrawl_args" field.
func (u *HPIgPostUpsert) SetRecrawlArgs(v *jsonfields.HPIgCrawlArgs) *HPIgPostUpsert {
	u.Set(hpigpost.FieldRecrawlArgs, v)
	return u
}

// UpdateRecrawlArgs sets the "recrawl_args" field to the value that was provided on create.
func (u *HPIgPostUpsert) UpdateRecrawlArgs() *HPIgPostUpsert {
	u.SetExcluded(hpigpost.FieldRecrawlArgs)
	return u
}

// ClearRecrawlArgs clears the value of the "recrawl_args" field.
func (u *HPIgPostUpsert) ClearRecrawlArgs() *HPIgPostUpsert {
	u.SetNull(hpigpost.FieldRecrawlArgs)
	return u
}

// SetOwnerArtistID sets the "owner_artist_id" field.
func (u *HPIgPostUpsert) SetOwnerArtistID(v int) *HPIgPostUpsert {
	u.Set(hpigpost.FieldOwnerArtistID, v)
	return u
}

// UpdateOwnerArtistID sets the "owner_artist_id" field to the value that was provided on create.
func (u *HPIgPostUpsert) UpdateOwnerArtistID() *HPIgPostUpsert {
	u.SetExcluded(hpigpost.FieldOwnerArtistID)
	return u
}

// ClearOwnerArtistID clears the value of the "owner_artist_id" field.
func (u *HPIgPostUpsert) ClearOwnerArtistID() *HPIgPostUpsert {
	u.SetNull(hpigpost.FieldOwnerArtistID)
	return u
}

// SetOwnerMemberID sets the "owner_member_id" field.
func (u *HPIgPostUpsert) SetOwnerMemberID(v int) *HPIgPostUpsert {
	u.Set(hpigpost.FieldOwnerMemberID, v)
	return u
}

// UpdateOwnerMemberID sets the "owner_member_id" field to the value that was provided on create.
func (u *HPIgPostUpsert) UpdateOwnerMemberID() *HPIgPostUpsert {
	u.SetExcluded(hpigpost.FieldOwnerMemberID)
	return u
}

// ClearOwnerMemberID clears the value of the "owner_member_id" field.
func (u *HPIgPostUpsert) ClearOwnerMemberID() *HPIgPostUpsert {
	u.SetNull(hpigpost.FieldOwnerMemberID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.HPIgPost.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *HPIgPostUpsertOne) UpdateNewValues() *HPIgPostUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(hpigpost.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.HPIgPost.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *HPIgPostUpsertOne) Ignore() *HPIgPostUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *HPIgPostUpsertOne) DoNothing() *HPIgPostUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the HPIgPostCreate.OnConflict
// documentation for more info.
func (u *HPIgPostUpsertOne) Update(set func(*HPIgPostUpsert)) *HPIgPostUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&HPIgPostUpsert{UpdateSet: update})
	}))
	return u
}

// SetCrawledAt sets the "crawled_at" field.
func (u *HPIgPostUpsertOne) SetCrawledAt(v time.Time) *HPIgPostUpsertOne {
	return u.Update(func(s *HPIgPostUpsert) {
		s.SetCrawledAt(v)
	})
}

// UpdateCrawledAt sets the "crawled_at" field to the value that was provided on create.
func (u *HPIgPostUpsertOne) UpdateCrawledAt() *HPIgPostUpsertOne {
	return u.Update(func(s *HPIgPostUpsert) {
		s.UpdateCrawledAt()
	})
}

// ClearCrawledAt clears the value of the "crawled_at" field.
func (u *HPIgPostUpsertOne) ClearCrawledAt() *HPIgPostUpsertOne {
	return u.Update(func(s *HPIgPostUpsert) {
		s.ClearCrawledAt()
	})
}

// SetErrorCount sets the "error_count" field.
func (u *HPIgPostUpsertOne) SetErrorCount(v int) *HPIgPostUpsertOne {
	return u.Update(func(s *HPIgPostUpsert) {
		s.SetErrorCount(v)
	})
}

// AddErrorCount adds v to the "error_count" field.
func (u *HPIgPostUpsertOne) AddErrorCount(v int) *HPIgPostUpsertOne {
	return u.Update(func(s *HPIgPostUpsert) {
		s.AddErrorCount(v)
	})
}

// UpdateErrorCount sets the "error_count" field to the value that was provided on create.
func (u *HPIgPostUpsertOne) UpdateErrorCount() *HPIgPostUpsertOne {
	return u.Update(func(s *HPIgPostUpsert) {
		s.UpdateErrorCount()
	})
}

// SetManuallyModified sets the "manually_modified" field.
func (u *HPIgPostUpsertOne) SetManuallyModified(v *jsonfields.ManuallyModified) *HPIgPostUpsertOne {
	return u.Update(func(s *HPIgPostUpsert) {
		s.SetManuallyModified(v)
	})
}

// UpdateManuallyModified sets the "manually_modified" field to the value that was provided on create.
func (u *HPIgPostUpsertOne) UpdateManuallyModified() *HPIgPostUpsertOne {
	return u.Update(func(s *HPIgPostUpsert) {
		s.UpdateManuallyModified()
	})
}

// ClearManuallyModified clears the value of the "manually_modified" field.
func (u *HPIgPostUpsertOne) ClearManuallyModified() *HPIgPostUpsertOne {
	return u.Update(func(s *HPIgPostUpsert) {
		s.ClearManuallyModified()
	})
}

// SetLastErrorMessage sets the "last_error_message" field.
func (u *HPIgPostUpsertOne) SetLastErrorMessage(v string) *HPIgPostUpsertOne {
	return u.Update(func(s *HPIgPostUpsert) {
		s.SetLastErrorMessage(v)
	})
}

// UpdateLastErrorMessage sets the "last_error_message" field to the value that was provided on create.
func (u *HPIgPostUpsertOne) UpdateLastErrorMessage() *HPIgPostUpsertOne {
	return u.Update(func(s *HPIgPostUpsert) {
		s.UpdateLastErrorMessage()
	})
}

// ClearLastErrorMessage clears the value of the "last_error_message" field.
func (u *HPIgPostUpsertOne) ClearLastErrorMessage() *HPIgPostUpsertOne {
	return u.Update(func(s *HPIgPostUpsert) {
		s.ClearLastErrorMessage()
	})
}

// SetRecrawlRequired sets the "recrawl_required" field.
func (u *HPIgPostUpsertOne) SetRecrawlRequired(v bool) *HPIgPostUpsertOne {
	return u.Update(func(s *HPIgPostUpsert) {
		s.SetRecrawlRequired(v)
	})
}

// UpdateRecrawlRequired sets the "recrawl_required" field to the value that was provided on create.
func (u *HPIgPostUpsertOne) UpdateRecrawlRequired() *HPIgPostUpsertOne {
	return u.Update(func(s *HPIgPostUpsert) {
		s.UpdateRecrawlRequired()
	})
}

// ClearRecrawlRequired clears the value of the "recrawl_required" field.
func (u *HPIgPostUpsertOne) ClearRecrawlRequired() *HPIgPostUpsertOne {
	return u.Update(func(s *HPIgPostUpsert) {
		s.ClearRecrawlRequired()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *HPIgPostUpsertOne) SetUpdatedAt(v time.Time) *HPIgPostUpsertOne {
	return u.Update(func(s *HPIgPostUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *HPIgPostUpsertOne) UpdateUpdatedAt() *HPIgPostUpsertOne {
	return u.Update(func(s *HPIgPostUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *HPIgPostUpsertOne) ClearUpdatedAt() *HPIgPostUpsertOne {
	return u.Update(func(s *HPIgPostUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetShortcode sets the "shortcode" field.
func (u *HPIgPostUpsertOne) SetShortcode(v string) *HPIgPostUpsertOne {
	return u.Update(func(s *HPIgPostUpsert) {
		s.SetShortcode(v)
	})
}

// UpdateShortcode sets the "shortcode" field to the value that was provided on create.
func (u *HPIgPostUpsertOne) UpdateShortcode() *HPIgPostUpsertOne {
	return u.Update(func(s *HPIgPostUpsert) {
		s.UpdateShortcode()
	})
}

// SetDescription sets the "description" field.
func (u *HPIgPostUpsertOne) SetDescription(v string) *HPIgPostUpsertOne {
	return u.Update(func(s *HPIgPostUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *HPIgPostUpsertOne) UpdateDescription() *HPIgPostUpsertOne {
	return u.Update(func(s *HPIgPostUpsert) {
		s.UpdateDescription()
	})
}

// SetPostAt sets the "post_at" field.
func (u *HPIgPostUpsertOne) SetPostAt(v time.Time) *HPIgPostUpsertOne {
	return u.Update(func(s *HPIgPostUpsert) {
		s.SetPostAt(v)
	})
}

// UpdatePostAt sets the "post_at" field to the value that was provided on create.
func (u *HPIgPostUpsertOne) UpdatePostAt() *HPIgPostUpsertOne {
	return u.Update(func(s *HPIgPostUpsert) {
		s.UpdatePostAt()
	})
}

// SetMedia sets the "media" field.
func (u *HPIgPostUpsertOne) SetMedia(v []jsonfields.Media) *HPIgPostUpsertOne {
	return u.Update(func(s *HPIgPostUpsert) {
		s.SetMedia(v)
	})
}

// UpdateMedia sets the "media" field to the value that was provided on create.
func (u *HPIgPostUpsertOne) UpdateMedia() *HPIgPostUpsertOne {
	return u.Update(func(s *HPIgPostUpsert) {
		s.UpdateMedia()
	})
}

// SetLikes sets the "likes" field.
func (u *HPIgPostUpsertOne) SetLikes(v int) *HPIgPostUpsertOne {
	return u.Update(func(s *HPIgPostUpsert) {
		s.SetLikes(v)
	})
}

// AddLikes adds v to the "likes" field.
func (u *HPIgPostUpsertOne) AddLikes(v int) *HPIgPostUpsertOne {
	return u.Update(func(s *HPIgPostUpsert) {
		s.AddLikes(v)
	})
}

// UpdateLikes sets the "likes" field to the value that was provided on create.
func (u *HPIgPostUpsertOne) UpdateLikes() *HPIgPostUpsertOne {
	return u.Update(func(s *HPIgPostUpsert) {
		s.UpdateLikes()
	})
}

// SetComments sets the "comments" field.
func (u *HPIgPostUpsertOne) SetComments(v int) *HPIgPostUpsertOne {
	return u.Update(func(s *HPIgPostUpsert) {
		s.SetComments(v)
	})
}

// AddComments adds v to the "comments" field.
func (u *HPIgPostUpsertOne) AddComments(v int) *HPIgPostUpsertOne {
	return u.Update(func(s *HPIgPostUpsert) {
		s.AddComments(v)
	})
}

// UpdateComments sets the "comments" field to the value that was provided on create.
func (u *HPIgPostUpsertOne) UpdateComments() *HPIgPostUpsertOne {
	return u.Update(func(s *HPIgPostUpsert) {
		s.UpdateComments()
	})
}

// SetRecrawlArgs sets the "recrawl_args" field.
func (u *HPIgPostUpsertOne) SetRecrawlArgs(v *jsonfields.HPIgCrawlArgs) *HPIgPostUpsertOne {
	return u.Update(func(s *HPIgPostUpsert) {
		s.SetRecrawlArgs(v)
	})
}

// UpdateRecrawlArgs sets the "recrawl_args" field to the value that was provided on create.
func (u *HPIgPostUpsertOne) UpdateRecrawlArgs() *HPIgPostUpsertOne {
	return u.Update(func(s *HPIgPostUpsert) {
		s.UpdateRecrawlArgs()
	})
}

// ClearRecrawlArgs clears the value of the "recrawl_args" field.
func (u *HPIgPostUpsertOne) ClearRecrawlArgs() *HPIgPostUpsertOne {
	return u.Update(func(s *HPIgPostUpsert) {
		s.ClearRecrawlArgs()
	})
}

// SetOwnerArtistID sets the "owner_artist_id" field.
func (u *HPIgPostUpsertOne) SetOwnerArtistID(v int) *HPIgPostUpsertOne {
	return u.Update(func(s *HPIgPostUpsert) {
		s.SetOwnerArtistID(v)
	})
}

// UpdateOwnerArtistID sets the "owner_artist_id" field to the value that was provided on create.
func (u *HPIgPostUpsertOne) UpdateOwnerArtistID() *HPIgPostUpsertOne {
	return u.Update(func(s *HPIgPostUpsert) {
		s.UpdateOwnerArtistID()
	})
}

// ClearOwnerArtistID clears the value of the "owner_artist_id" field.
func (u *HPIgPostUpsertOne) ClearOwnerArtistID() *HPIgPostUpsertOne {
	return u.Update(func(s *HPIgPostUpsert) {
		s.ClearOwnerArtistID()
	})
}

// SetOwnerMemberID sets the "owner_member_id" field.
func (u *HPIgPostUpsertOne) SetOwnerMemberID(v int) *HPIgPostUpsertOne {
	return u.Update(func(s *HPIgPostUpsert) {
		s.SetOwnerMemberID(v)
	})
}

// UpdateOwnerMemberID sets the "owner_member_id" field to the value that was provided on create.
func (u *HPIgPostUpsertOne) UpdateOwnerMemberID() *HPIgPostUpsertOne {
	return u.Update(func(s *HPIgPostUpsert) {
		s.UpdateOwnerMemberID()
	})
}

// ClearOwnerMemberID clears the value of the "owner_member_id" field.
func (u *HPIgPostUpsertOne) ClearOwnerMemberID() *HPIgPostUpsertOne {
	return u.Update(func(s *HPIgPostUpsert) {
		s.ClearOwnerMemberID()
	})
}

// Exec executes the query.
func (u *HPIgPostUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for HPIgPostCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *HPIgPostUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *HPIgPostUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *HPIgPostUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// HPIgPostCreateBulk is the builder for creating many HPIgPost entities in bulk.
type HPIgPostCreateBulk struct {
	config
	builders []*HPIgPostCreate
	conflict []sql.ConflictOption
}

// Save creates the HPIgPost entities in the database.
func (hipcb *HPIgPostCreateBulk) Save(ctx context.Context) ([]*HPIgPost, error) {
	specs := make([]*sqlgraph.CreateSpec, len(hipcb.builders))
	nodes := make([]*HPIgPost, len(hipcb.builders))
	mutators := make([]Mutator, len(hipcb.builders))
	for i := range hipcb.builders {
		func(i int, root context.Context) {
			builder := hipcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HPIgPostMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hipcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = hipcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hipcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hipcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hipcb *HPIgPostCreateBulk) SaveX(ctx context.Context) []*HPIgPost {
	v, err := hipcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hipcb *HPIgPostCreateBulk) Exec(ctx context.Context) error {
	_, err := hipcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hipcb *HPIgPostCreateBulk) ExecX(ctx context.Context) {
	if err := hipcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.HPIgPost.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.HPIgPostUpsert) {
//			SetCrawledAt(v+v).
//		}).
//		Exec(ctx)
//
func (hipcb *HPIgPostCreateBulk) OnConflict(opts ...sql.ConflictOption) *HPIgPostUpsertBulk {
	hipcb.conflict = opts
	return &HPIgPostUpsertBulk{
		create: hipcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.HPIgPost.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (hipcb *HPIgPostCreateBulk) OnConflictColumns(columns ...string) *HPIgPostUpsertBulk {
	hipcb.conflict = append(hipcb.conflict, sql.ConflictColumns(columns...))
	return &HPIgPostUpsertBulk{
		create: hipcb,
	}
}

// HPIgPostUpsertBulk is the builder for "upsert"-ing
// a bulk of HPIgPost nodes.
type HPIgPostUpsertBulk struct {
	create *HPIgPostCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.HPIgPost.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *HPIgPostUpsertBulk) UpdateNewValues() *HPIgPostUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(hpigpost.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.HPIgPost.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *HPIgPostUpsertBulk) Ignore() *HPIgPostUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *HPIgPostUpsertBulk) DoNothing() *HPIgPostUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the HPIgPostCreateBulk.OnConflict
// documentation for more info.
func (u *HPIgPostUpsertBulk) Update(set func(*HPIgPostUpsert)) *HPIgPostUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&HPIgPostUpsert{UpdateSet: update})
	}))
	return u
}

// SetCrawledAt sets the "crawled_at" field.
func (u *HPIgPostUpsertBulk) SetCrawledAt(v time.Time) *HPIgPostUpsertBulk {
	return u.Update(func(s *HPIgPostUpsert) {
		s.SetCrawledAt(v)
	})
}

// UpdateCrawledAt sets the "crawled_at" field to the value that was provided on create.
func (u *HPIgPostUpsertBulk) UpdateCrawledAt() *HPIgPostUpsertBulk {
	return u.Update(func(s *HPIgPostUpsert) {
		s.UpdateCrawledAt()
	})
}

// ClearCrawledAt clears the value of the "crawled_at" field.
func (u *HPIgPostUpsertBulk) ClearCrawledAt() *HPIgPostUpsertBulk {
	return u.Update(func(s *HPIgPostUpsert) {
		s.ClearCrawledAt()
	})
}

// SetErrorCount sets the "error_count" field.
func (u *HPIgPostUpsertBulk) SetErrorCount(v int) *HPIgPostUpsertBulk {
	return u.Update(func(s *HPIgPostUpsert) {
		s.SetErrorCount(v)
	})
}

// AddErrorCount adds v to the "error_count" field.
func (u *HPIgPostUpsertBulk) AddErrorCount(v int) *HPIgPostUpsertBulk {
	return u.Update(func(s *HPIgPostUpsert) {
		s.AddErrorCount(v)
	})
}

// UpdateErrorCount sets the "error_count" field to the value that was provided on create.
func (u *HPIgPostUpsertBulk) UpdateErrorCount() *HPIgPostUpsertBulk {
	return u.Update(func(s *HPIgPostUpsert) {
		s.UpdateErrorCount()
	})
}

// SetManuallyModified sets the "manually_modified" field.
func (u *HPIgPostUpsertBulk) SetManuallyModified(v *jsonfields.ManuallyModified) *HPIgPostUpsertBulk {
	return u.Update(func(s *HPIgPostUpsert) {
		s.SetManuallyModified(v)
	})
}

// UpdateManuallyModified sets the "manually_modified" field to the value that was provided on create.
func (u *HPIgPostUpsertBulk) UpdateManuallyModified() *HPIgPostUpsertBulk {
	return u.Update(func(s *HPIgPostUpsert) {
		s.UpdateManuallyModified()
	})
}

// ClearManuallyModified clears the value of the "manually_modified" field.
func (u *HPIgPostUpsertBulk) ClearManuallyModified() *HPIgPostUpsertBulk {
	return u.Update(func(s *HPIgPostUpsert) {
		s.ClearManuallyModified()
	})
}

// SetLastErrorMessage sets the "last_error_message" field.
func (u *HPIgPostUpsertBulk) SetLastErrorMessage(v string) *HPIgPostUpsertBulk {
	return u.Update(func(s *HPIgPostUpsert) {
		s.SetLastErrorMessage(v)
	})
}

// UpdateLastErrorMessage sets the "last_error_message" field to the value that was provided on create.
func (u *HPIgPostUpsertBulk) UpdateLastErrorMessage() *HPIgPostUpsertBulk {
	return u.Update(func(s *HPIgPostUpsert) {
		s.UpdateLastErrorMessage()
	})
}

// ClearLastErrorMessage clears the value of the "last_error_message" field.
func (u *HPIgPostUpsertBulk) ClearLastErrorMessage() *HPIgPostUpsertBulk {
	return u.Update(func(s *HPIgPostUpsert) {
		s.ClearLastErrorMessage()
	})
}

// SetRecrawlRequired sets the "recrawl_required" field.
func (u *HPIgPostUpsertBulk) SetRecrawlRequired(v bool) *HPIgPostUpsertBulk {
	return u.Update(func(s *HPIgPostUpsert) {
		s.SetRecrawlRequired(v)
	})
}

// UpdateRecrawlRequired sets the "recrawl_required" field to the value that was provided on create.
func (u *HPIgPostUpsertBulk) UpdateRecrawlRequired() *HPIgPostUpsertBulk {
	return u.Update(func(s *HPIgPostUpsert) {
		s.UpdateRecrawlRequired()
	})
}

// ClearRecrawlRequired clears the value of the "recrawl_required" field.
func (u *HPIgPostUpsertBulk) ClearRecrawlRequired() *HPIgPostUpsertBulk {
	return u.Update(func(s *HPIgPostUpsert) {
		s.ClearRecrawlRequired()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *HPIgPostUpsertBulk) SetUpdatedAt(v time.Time) *HPIgPostUpsertBulk {
	return u.Update(func(s *HPIgPostUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *HPIgPostUpsertBulk) UpdateUpdatedAt() *HPIgPostUpsertBulk {
	return u.Update(func(s *HPIgPostUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *HPIgPostUpsertBulk) ClearUpdatedAt() *HPIgPostUpsertBulk {
	return u.Update(func(s *HPIgPostUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetShortcode sets the "shortcode" field.
func (u *HPIgPostUpsertBulk) SetShortcode(v string) *HPIgPostUpsertBulk {
	return u.Update(func(s *HPIgPostUpsert) {
		s.SetShortcode(v)
	})
}

// UpdateShortcode sets the "shortcode" field to the value that was provided on create.
func (u *HPIgPostUpsertBulk) UpdateShortcode() *HPIgPostUpsertBulk {
	return u.Update(func(s *HPIgPostUpsert) {
		s.UpdateShortcode()
	})
}

// SetDescription sets the "description" field.
func (u *HPIgPostUpsertBulk) SetDescription(v string) *HPIgPostUpsertBulk {
	return u.Update(func(s *HPIgPostUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *HPIgPostUpsertBulk) UpdateDescription() *HPIgPostUpsertBulk {
	return u.Update(func(s *HPIgPostUpsert) {
		s.UpdateDescription()
	})
}

// SetPostAt sets the "post_at" field.
func (u *HPIgPostUpsertBulk) SetPostAt(v time.Time) *HPIgPostUpsertBulk {
	return u.Update(func(s *HPIgPostUpsert) {
		s.SetPostAt(v)
	})
}

// UpdatePostAt sets the "post_at" field to the value that was provided on create.
func (u *HPIgPostUpsertBulk) UpdatePostAt() *HPIgPostUpsertBulk {
	return u.Update(func(s *HPIgPostUpsert) {
		s.UpdatePostAt()
	})
}

// SetMedia sets the "media" field.
func (u *HPIgPostUpsertBulk) SetMedia(v []jsonfields.Media) *HPIgPostUpsertBulk {
	return u.Update(func(s *HPIgPostUpsert) {
		s.SetMedia(v)
	})
}

// UpdateMedia sets the "media" field to the value that was provided on create.
func (u *HPIgPostUpsertBulk) UpdateMedia() *HPIgPostUpsertBulk {
	return u.Update(func(s *HPIgPostUpsert) {
		s.UpdateMedia()
	})
}

// SetLikes sets the "likes" field.
func (u *HPIgPostUpsertBulk) SetLikes(v int) *HPIgPostUpsertBulk {
	return u.Update(func(s *HPIgPostUpsert) {
		s.SetLikes(v)
	})
}

// AddLikes adds v to the "likes" field.
func (u *HPIgPostUpsertBulk) AddLikes(v int) *HPIgPostUpsertBulk {
	return u.Update(func(s *HPIgPostUpsert) {
		s.AddLikes(v)
	})
}

// UpdateLikes sets the "likes" field to the value that was provided on create.
func (u *HPIgPostUpsertBulk) UpdateLikes() *HPIgPostUpsertBulk {
	return u.Update(func(s *HPIgPostUpsert) {
		s.UpdateLikes()
	})
}

// SetComments sets the "comments" field.
func (u *HPIgPostUpsertBulk) SetComments(v int) *HPIgPostUpsertBulk {
	return u.Update(func(s *HPIgPostUpsert) {
		s.SetComments(v)
	})
}

// AddComments adds v to the "comments" field.
func (u *HPIgPostUpsertBulk) AddComments(v int) *HPIgPostUpsertBulk {
	return u.Update(func(s *HPIgPostUpsert) {
		s.AddComments(v)
	})
}

// UpdateComments sets the "comments" field to the value that was provided on create.
func (u *HPIgPostUpsertBulk) UpdateComments() *HPIgPostUpsertBulk {
	return u.Update(func(s *HPIgPostUpsert) {
		s.UpdateComments()
	})
}

// SetRecrawlArgs sets the "recrawl_args" field.
func (u *HPIgPostUpsertBulk) SetRecrawlArgs(v *jsonfields.HPIgCrawlArgs) *HPIgPostUpsertBulk {
	return u.Update(func(s *HPIgPostUpsert) {
		s.SetRecrawlArgs(v)
	})
}

// UpdateRecrawlArgs sets the "recrawl_args" field to the value that was provided on create.
func (u *HPIgPostUpsertBulk) UpdateRecrawlArgs() *HPIgPostUpsertBulk {
	return u.Update(func(s *HPIgPostUpsert) {
		s.UpdateRecrawlArgs()
	})
}

// ClearRecrawlArgs clears the value of the "recrawl_args" field.
func (u *HPIgPostUpsertBulk) ClearRecrawlArgs() *HPIgPostUpsertBulk {
	return u.Update(func(s *HPIgPostUpsert) {
		s.ClearRecrawlArgs()
	})
}

// SetOwnerArtistID sets the "owner_artist_id" field.
func (u *HPIgPostUpsertBulk) SetOwnerArtistID(v int) *HPIgPostUpsertBulk {
	return u.Update(func(s *HPIgPostUpsert) {
		s.SetOwnerArtistID(v)
	})
}

// UpdateOwnerArtistID sets the "owner_artist_id" field to the value that was provided on create.
func (u *HPIgPostUpsertBulk) UpdateOwnerArtistID() *HPIgPostUpsertBulk {
	return u.Update(func(s *HPIgPostUpsert) {
		s.UpdateOwnerArtistID()
	})
}

// ClearOwnerArtistID clears the value of the "owner_artist_id" field.
func (u *HPIgPostUpsertBulk) ClearOwnerArtistID() *HPIgPostUpsertBulk {
	return u.Update(func(s *HPIgPostUpsert) {
		s.ClearOwnerArtistID()
	})
}

// SetOwnerMemberID sets the "owner_member_id" field.
func (u *HPIgPostUpsertBulk) SetOwnerMemberID(v int) *HPIgPostUpsertBulk {
	return u.Update(func(s *HPIgPostUpsert) {
		s.SetOwnerMemberID(v)
	})
}

// UpdateOwnerMemberID sets the "owner_member_id" field to the value that was provided on create.
func (u *HPIgPostUpsertBulk) UpdateOwnerMemberID() *HPIgPostUpsertBulk {
	return u.Update(func(s *HPIgPostUpsert) {
		s.UpdateOwnerMemberID()
	})
}

// ClearOwnerMemberID clears the value of the "owner_member_id" field.
func (u *HPIgPostUpsertBulk) ClearOwnerMemberID() *HPIgPostUpsertBulk {
	return u.Update(func(s *HPIgPostUpsert) {
		s.ClearOwnerMemberID()
	})
}

// Exec executes the query.
func (u *HPIgPostUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the HPIgPostCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for HPIgPostCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *HPIgPostUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
