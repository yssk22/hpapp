// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yssk22/hpapp/go/service/ent/hpelineupmallitem"
	"github.com/yssk22/hpapp/go/service/ent/hpelineupmallitempurchasehistory"
	"github.com/yssk22/hpapp/go/service/ent/user"
)

// HPElineupMallItemPurchaseHistoryCreate is the builder for creating a HPElineupMallItemPurchaseHistory entity.
type HPElineupMallItemPurchaseHistoryCreate struct {
	config
	mutation *HPElineupMallItemPurchaseHistoryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (hemiphc *HPElineupMallItemPurchaseHistoryCreate) SetCreatedAt(t time.Time) *HPElineupMallItemPurchaseHistoryCreate {
	hemiphc.mutation.SetCreatedAt(t)
	return hemiphc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (hemiphc *HPElineupMallItemPurchaseHistoryCreate) SetNillableCreatedAt(t *time.Time) *HPElineupMallItemPurchaseHistoryCreate {
	if t != nil {
		hemiphc.SetCreatedAt(*t)
	}
	return hemiphc
}

// SetUpdatedAt sets the "updated_at" field.
func (hemiphc *HPElineupMallItemPurchaseHistoryCreate) SetUpdatedAt(t time.Time) *HPElineupMallItemPurchaseHistoryCreate {
	hemiphc.mutation.SetUpdatedAt(t)
	return hemiphc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (hemiphc *HPElineupMallItemPurchaseHistoryCreate) SetNillableUpdatedAt(t *time.Time) *HPElineupMallItemPurchaseHistoryCreate {
	if t != nil {
		hemiphc.SetUpdatedAt(*t)
	}
	return hemiphc
}

// SetOrderID sets the "order_id" field.
func (hemiphc *HPElineupMallItemPurchaseHistoryCreate) SetOrderID(s string) *HPElineupMallItemPurchaseHistoryCreate {
	hemiphc.mutation.SetOrderID(s)
	return hemiphc
}

// SetNum sets the "num" field.
func (hemiphc *HPElineupMallItemPurchaseHistoryCreate) SetNum(i int) *HPElineupMallItemPurchaseHistoryCreate {
	hemiphc.mutation.SetNum(i)
	return hemiphc
}

// SetPrice sets the "price" field.
func (hemiphc *HPElineupMallItemPurchaseHistoryCreate) SetPrice(i int) *HPElineupMallItemPurchaseHistoryCreate {
	hemiphc.mutation.SetPrice(i)
	return hemiphc
}

// SetOrderedAt sets the "ordered_at" field.
func (hemiphc *HPElineupMallItemPurchaseHistoryCreate) SetOrderedAt(t time.Time) *HPElineupMallItemPurchaseHistoryCreate {
	hemiphc.mutation.SetOrderedAt(t)
	return hemiphc
}

// SetPermalink sets the "permalink" field.
func (hemiphc *HPElineupMallItemPurchaseHistoryCreate) SetPermalink(s string) *HPElineupMallItemPurchaseHistoryCreate {
	hemiphc.mutation.SetPermalink(s)
	return hemiphc
}

// SetName sets the "name" field.
func (hemiphc *HPElineupMallItemPurchaseHistoryCreate) SetName(s string) *HPElineupMallItemPurchaseHistoryCreate {
	hemiphc.mutation.SetName(s)
	return hemiphc
}

// SetPurchasedItemID sets the "purchased_item_id" field.
func (hemiphc *HPElineupMallItemPurchaseHistoryCreate) SetPurchasedItemID(i int) *HPElineupMallItemPurchaseHistoryCreate {
	hemiphc.mutation.SetPurchasedItemID(i)
	return hemiphc
}

// SetNillablePurchasedItemID sets the "purchased_item_id" field if the given value is not nil.
func (hemiphc *HPElineupMallItemPurchaseHistoryCreate) SetNillablePurchasedItemID(i *int) *HPElineupMallItemPurchaseHistoryCreate {
	if i != nil {
		hemiphc.SetPurchasedItemID(*i)
	}
	return hemiphc
}

// SetOwnerUserID sets the "owner_user_id" field.
func (hemiphc *HPElineupMallItemPurchaseHistoryCreate) SetOwnerUserID(i int) *HPElineupMallItemPurchaseHistoryCreate {
	hemiphc.mutation.SetOwnerUserID(i)
	return hemiphc
}

// SetElineupMallItemID sets the "elineup_mall_item" edge to the HPElineupMallItem entity by ID.
func (hemiphc *HPElineupMallItemPurchaseHistoryCreate) SetElineupMallItemID(id int) *HPElineupMallItemPurchaseHistoryCreate {
	hemiphc.mutation.SetElineupMallItemID(id)
	return hemiphc
}

// SetNillableElineupMallItemID sets the "elineup_mall_item" edge to the HPElineupMallItem entity by ID if the given value is not nil.
func (hemiphc *HPElineupMallItemPurchaseHistoryCreate) SetNillableElineupMallItemID(id *int) *HPElineupMallItemPurchaseHistoryCreate {
	if id != nil {
		hemiphc = hemiphc.SetElineupMallItemID(*id)
	}
	return hemiphc
}

// SetElineupMallItem sets the "elineup_mall_item" edge to the HPElineupMallItem entity.
func (hemiphc *HPElineupMallItemPurchaseHistoryCreate) SetElineupMallItem(h *HPElineupMallItem) *HPElineupMallItemPurchaseHistoryCreate {
	return hemiphc.SetElineupMallItemID(h.ID)
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (hemiphc *HPElineupMallItemPurchaseHistoryCreate) SetOwnerID(id int) *HPElineupMallItemPurchaseHistoryCreate {
	hemiphc.mutation.SetOwnerID(id)
	return hemiphc
}

// SetOwner sets the "owner" edge to the User entity.
func (hemiphc *HPElineupMallItemPurchaseHistoryCreate) SetOwner(u *User) *HPElineupMallItemPurchaseHistoryCreate {
	return hemiphc.SetOwnerID(u.ID)
}

// Mutation returns the HPElineupMallItemPurchaseHistoryMutation object of the builder.
func (hemiphc *HPElineupMallItemPurchaseHistoryCreate) Mutation() *HPElineupMallItemPurchaseHistoryMutation {
	return hemiphc.mutation
}

// Save creates the HPElineupMallItemPurchaseHistory in the database.
func (hemiphc *HPElineupMallItemPurchaseHistoryCreate) Save(ctx context.Context) (*HPElineupMallItemPurchaseHistory, error) {
	return withHooks[*HPElineupMallItemPurchaseHistory, HPElineupMallItemPurchaseHistoryMutation](ctx, hemiphc.sqlSave, hemiphc.mutation, hemiphc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (hemiphc *HPElineupMallItemPurchaseHistoryCreate) SaveX(ctx context.Context) *HPElineupMallItemPurchaseHistory {
	v, err := hemiphc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hemiphc *HPElineupMallItemPurchaseHistoryCreate) Exec(ctx context.Context) error {
	_, err := hemiphc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hemiphc *HPElineupMallItemPurchaseHistoryCreate) ExecX(ctx context.Context) {
	if err := hemiphc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hemiphc *HPElineupMallItemPurchaseHistoryCreate) check() error {
	if _, ok := hemiphc.mutation.OrderID(); !ok {
		return &ValidationError{Name: "order_id", err: errors.New(`ent: missing required field "HPElineupMallItemPurchaseHistory.order_id"`)}
	}
	if _, ok := hemiphc.mutation.Num(); !ok {
		return &ValidationError{Name: "num", err: errors.New(`ent: missing required field "HPElineupMallItemPurchaseHistory.num"`)}
	}
	if _, ok := hemiphc.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "HPElineupMallItemPurchaseHistory.price"`)}
	}
	if _, ok := hemiphc.mutation.OrderedAt(); !ok {
		return &ValidationError{Name: "ordered_at", err: errors.New(`ent: missing required field "HPElineupMallItemPurchaseHistory.ordered_at"`)}
	}
	if _, ok := hemiphc.mutation.Permalink(); !ok {
		return &ValidationError{Name: "permalink", err: errors.New(`ent: missing required field "HPElineupMallItemPurchaseHistory.permalink"`)}
	}
	if _, ok := hemiphc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "HPElineupMallItemPurchaseHistory.name"`)}
	}
	if _, ok := hemiphc.mutation.OwnerUserID(); !ok {
		return &ValidationError{Name: "owner_user_id", err: errors.New(`ent: missing required field "HPElineupMallItemPurchaseHistory.owner_user_id"`)}
	}
	if _, ok := hemiphc.mutation.OwnerID(); !ok {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required edge "HPElineupMallItemPurchaseHistory.owner"`)}
	}
	return nil
}

func (hemiphc *HPElineupMallItemPurchaseHistoryCreate) sqlSave(ctx context.Context) (*HPElineupMallItemPurchaseHistory, error) {
	if err := hemiphc.check(); err != nil {
		return nil, err
	}
	_node, _spec := hemiphc.createSpec()
	if err := sqlgraph.CreateNode(ctx, hemiphc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	hemiphc.mutation.id = &_node.ID
	hemiphc.mutation.done = true
	return _node, nil
}

func (hemiphc *HPElineupMallItemPurchaseHistoryCreate) createSpec() (*HPElineupMallItemPurchaseHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &HPElineupMallItemPurchaseHistory{config: hemiphc.config}
		_spec = sqlgraph.NewCreateSpec(hpelineupmallitempurchasehistory.Table, sqlgraph.NewFieldSpec(hpelineupmallitempurchasehistory.FieldID, field.TypeInt))
	)
	_spec.OnConflict = hemiphc.conflict
	if value, ok := hemiphc.mutation.CreatedAt(); ok {
		_spec.SetField(hpelineupmallitempurchasehistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := hemiphc.mutation.UpdatedAt(); ok {
		_spec.SetField(hpelineupmallitempurchasehistory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := hemiphc.mutation.OrderID(); ok {
		_spec.SetField(hpelineupmallitempurchasehistory.FieldOrderID, field.TypeString, value)
		_node.OrderID = value
	}
	if value, ok := hemiphc.mutation.Num(); ok {
		_spec.SetField(hpelineupmallitempurchasehistory.FieldNum, field.TypeInt, value)
		_node.Num = value
	}
	if value, ok := hemiphc.mutation.Price(); ok {
		_spec.SetField(hpelineupmallitempurchasehistory.FieldPrice, field.TypeInt, value)
		_node.Price = value
	}
	if value, ok := hemiphc.mutation.OrderedAt(); ok {
		_spec.SetField(hpelineupmallitempurchasehistory.FieldOrderedAt, field.TypeTime, value)
		_node.OrderedAt = value
	}
	if value, ok := hemiphc.mutation.Permalink(); ok {
		_spec.SetField(hpelineupmallitempurchasehistory.FieldPermalink, field.TypeString, value)
		_node.Permalink = value
	}
	if value, ok := hemiphc.mutation.Name(); ok {
		_spec.SetField(hpelineupmallitempurchasehistory.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if nodes := hemiphc.mutation.ElineupMallItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpelineupmallitempurchasehistory.ElineupMallItemTable,
			Columns: []string{hpelineupmallitempurchasehistory.ElineupMallItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpelineupmallitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PurchasedItemID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hemiphc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpelineupmallitempurchasehistory.OwnerTable,
			Columns: []string{hpelineupmallitempurchasehistory.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerUserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.HPElineupMallItemPurchaseHistory.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.HPElineupMallItemPurchaseHistoryUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (hemiphc *HPElineupMallItemPurchaseHistoryCreate) OnConflict(opts ...sql.ConflictOption) *HPElineupMallItemPurchaseHistoryUpsertOne {
	hemiphc.conflict = opts
	return &HPElineupMallItemPurchaseHistoryUpsertOne{
		create: hemiphc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.HPElineupMallItemPurchaseHistory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (hemiphc *HPElineupMallItemPurchaseHistoryCreate) OnConflictColumns(columns ...string) *HPElineupMallItemPurchaseHistoryUpsertOne {
	hemiphc.conflict = append(hemiphc.conflict, sql.ConflictColumns(columns...))
	return &HPElineupMallItemPurchaseHistoryUpsertOne{
		create: hemiphc,
	}
}

type (
	// HPElineupMallItemPurchaseHistoryUpsertOne is the builder for "upsert"-ing
	//  one HPElineupMallItemPurchaseHistory node.
	HPElineupMallItemPurchaseHistoryUpsertOne struct {
		create *HPElineupMallItemPurchaseHistoryCreate
	}

	// HPElineupMallItemPurchaseHistoryUpsert is the "OnConflict" setter.
	HPElineupMallItemPurchaseHistoryUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *HPElineupMallItemPurchaseHistoryUpsert) SetUpdatedAt(v time.Time) *HPElineupMallItemPurchaseHistoryUpsert {
	u.Set(hpelineupmallitempurchasehistory.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *HPElineupMallItemPurchaseHistoryUpsert) UpdateUpdatedAt() *HPElineupMallItemPurchaseHistoryUpsert {
	u.SetExcluded(hpelineupmallitempurchasehistory.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *HPElineupMallItemPurchaseHistoryUpsert) ClearUpdatedAt() *HPElineupMallItemPurchaseHistoryUpsert {
	u.SetNull(hpelineupmallitempurchasehistory.FieldUpdatedAt)
	return u
}

// SetOrderID sets the "order_id" field.
func (u *HPElineupMallItemPurchaseHistoryUpsert) SetOrderID(v string) *HPElineupMallItemPurchaseHistoryUpsert {
	u.Set(hpelineupmallitempurchasehistory.FieldOrderID, v)
	return u
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *HPElineupMallItemPurchaseHistoryUpsert) UpdateOrderID() *HPElineupMallItemPurchaseHistoryUpsert {
	u.SetExcluded(hpelineupmallitempurchasehistory.FieldOrderID)
	return u
}

// SetNum sets the "num" field.
func (u *HPElineupMallItemPurchaseHistoryUpsert) SetNum(v int) *HPElineupMallItemPurchaseHistoryUpsert {
	u.Set(hpelineupmallitempurchasehistory.FieldNum, v)
	return u
}

// UpdateNum sets the "num" field to the value that was provided on create.
func (u *HPElineupMallItemPurchaseHistoryUpsert) UpdateNum() *HPElineupMallItemPurchaseHistoryUpsert {
	u.SetExcluded(hpelineupmallitempurchasehistory.FieldNum)
	return u
}

// AddNum adds v to the "num" field.
func (u *HPElineupMallItemPurchaseHistoryUpsert) AddNum(v int) *HPElineupMallItemPurchaseHistoryUpsert {
	u.Add(hpelineupmallitempurchasehistory.FieldNum, v)
	return u
}

// SetPrice sets the "price" field.
func (u *HPElineupMallItemPurchaseHistoryUpsert) SetPrice(v int) *HPElineupMallItemPurchaseHistoryUpsert {
	u.Set(hpelineupmallitempurchasehistory.FieldPrice, v)
	return u
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *HPElineupMallItemPurchaseHistoryUpsert) UpdatePrice() *HPElineupMallItemPurchaseHistoryUpsert {
	u.SetExcluded(hpelineupmallitempurchasehistory.FieldPrice)
	return u
}

// AddPrice adds v to the "price" field.
func (u *HPElineupMallItemPurchaseHistoryUpsert) AddPrice(v int) *HPElineupMallItemPurchaseHistoryUpsert {
	u.Add(hpelineupmallitempurchasehistory.FieldPrice, v)
	return u
}

// SetOrderedAt sets the "ordered_at" field.
func (u *HPElineupMallItemPurchaseHistoryUpsert) SetOrderedAt(v time.Time) *HPElineupMallItemPurchaseHistoryUpsert {
	u.Set(hpelineupmallitempurchasehistory.FieldOrderedAt, v)
	return u
}

// UpdateOrderedAt sets the "ordered_at" field to the value that was provided on create.
func (u *HPElineupMallItemPurchaseHistoryUpsert) UpdateOrderedAt() *HPElineupMallItemPurchaseHistoryUpsert {
	u.SetExcluded(hpelineupmallitempurchasehistory.FieldOrderedAt)
	return u
}

// SetPermalink sets the "permalink" field.
func (u *HPElineupMallItemPurchaseHistoryUpsert) SetPermalink(v string) *HPElineupMallItemPurchaseHistoryUpsert {
	u.Set(hpelineupmallitempurchasehistory.FieldPermalink, v)
	return u
}

// UpdatePermalink sets the "permalink" field to the value that was provided on create.
func (u *HPElineupMallItemPurchaseHistoryUpsert) UpdatePermalink() *HPElineupMallItemPurchaseHistoryUpsert {
	u.SetExcluded(hpelineupmallitempurchasehistory.FieldPermalink)
	return u
}

// SetName sets the "name" field.
func (u *HPElineupMallItemPurchaseHistoryUpsert) SetName(v string) *HPElineupMallItemPurchaseHistoryUpsert {
	u.Set(hpelineupmallitempurchasehistory.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *HPElineupMallItemPurchaseHistoryUpsert) UpdateName() *HPElineupMallItemPurchaseHistoryUpsert {
	u.SetExcluded(hpelineupmallitempurchasehistory.FieldName)
	return u
}

// SetPurchasedItemID sets the "purchased_item_id" field.
func (u *HPElineupMallItemPurchaseHistoryUpsert) SetPurchasedItemID(v int) *HPElineupMallItemPurchaseHistoryUpsert {
	u.Set(hpelineupmallitempurchasehistory.FieldPurchasedItemID, v)
	return u
}

// UpdatePurchasedItemID sets the "purchased_item_id" field to the value that was provided on create.
func (u *HPElineupMallItemPurchaseHistoryUpsert) UpdatePurchasedItemID() *HPElineupMallItemPurchaseHistoryUpsert {
	u.SetExcluded(hpelineupmallitempurchasehistory.FieldPurchasedItemID)
	return u
}

// ClearPurchasedItemID clears the value of the "purchased_item_id" field.
func (u *HPElineupMallItemPurchaseHistoryUpsert) ClearPurchasedItemID() *HPElineupMallItemPurchaseHistoryUpsert {
	u.SetNull(hpelineupmallitempurchasehistory.FieldPurchasedItemID)
	return u
}

// SetOwnerUserID sets the "owner_user_id" field.
func (u *HPElineupMallItemPurchaseHistoryUpsert) SetOwnerUserID(v int) *HPElineupMallItemPurchaseHistoryUpsert {
	u.Set(hpelineupmallitempurchasehistory.FieldOwnerUserID, v)
	return u
}

// UpdateOwnerUserID sets the "owner_user_id" field to the value that was provided on create.
func (u *HPElineupMallItemPurchaseHistoryUpsert) UpdateOwnerUserID() *HPElineupMallItemPurchaseHistoryUpsert {
	u.SetExcluded(hpelineupmallitempurchasehistory.FieldOwnerUserID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.HPElineupMallItemPurchaseHistory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *HPElineupMallItemPurchaseHistoryUpsertOne) UpdateNewValues() *HPElineupMallItemPurchaseHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(hpelineupmallitempurchasehistory.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.HPElineupMallItemPurchaseHistory.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *HPElineupMallItemPurchaseHistoryUpsertOne) Ignore() *HPElineupMallItemPurchaseHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *HPElineupMallItemPurchaseHistoryUpsertOne) DoNothing() *HPElineupMallItemPurchaseHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the HPElineupMallItemPurchaseHistoryCreate.OnConflict
// documentation for more info.
func (u *HPElineupMallItemPurchaseHistoryUpsertOne) Update(set func(*HPElineupMallItemPurchaseHistoryUpsert)) *HPElineupMallItemPurchaseHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&HPElineupMallItemPurchaseHistoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *HPElineupMallItemPurchaseHistoryUpsertOne) SetUpdatedAt(v time.Time) *HPElineupMallItemPurchaseHistoryUpsertOne {
	return u.Update(func(s *HPElineupMallItemPurchaseHistoryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *HPElineupMallItemPurchaseHistoryUpsertOne) UpdateUpdatedAt() *HPElineupMallItemPurchaseHistoryUpsertOne {
	return u.Update(func(s *HPElineupMallItemPurchaseHistoryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *HPElineupMallItemPurchaseHistoryUpsertOne) ClearUpdatedAt() *HPElineupMallItemPurchaseHistoryUpsertOne {
	return u.Update(func(s *HPElineupMallItemPurchaseHistoryUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetOrderID sets the "order_id" field.
func (u *HPElineupMallItemPurchaseHistoryUpsertOne) SetOrderID(v string) *HPElineupMallItemPurchaseHistoryUpsertOne {
	return u.Update(func(s *HPElineupMallItemPurchaseHistoryUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *HPElineupMallItemPurchaseHistoryUpsertOne) UpdateOrderID() *HPElineupMallItemPurchaseHistoryUpsertOne {
	return u.Update(func(s *HPElineupMallItemPurchaseHistoryUpsert) {
		s.UpdateOrderID()
	})
}

// SetNum sets the "num" field.
func (u *HPElineupMallItemPurchaseHistoryUpsertOne) SetNum(v int) *HPElineupMallItemPurchaseHistoryUpsertOne {
	return u.Update(func(s *HPElineupMallItemPurchaseHistoryUpsert) {
		s.SetNum(v)
	})
}

// AddNum adds v to the "num" field.
func (u *HPElineupMallItemPurchaseHistoryUpsertOne) AddNum(v int) *HPElineupMallItemPurchaseHistoryUpsertOne {
	return u.Update(func(s *HPElineupMallItemPurchaseHistoryUpsert) {
		s.AddNum(v)
	})
}

// UpdateNum sets the "num" field to the value that was provided on create.
func (u *HPElineupMallItemPurchaseHistoryUpsertOne) UpdateNum() *HPElineupMallItemPurchaseHistoryUpsertOne {
	return u.Update(func(s *HPElineupMallItemPurchaseHistoryUpsert) {
		s.UpdateNum()
	})
}

// SetPrice sets the "price" field.
func (u *HPElineupMallItemPurchaseHistoryUpsertOne) SetPrice(v int) *HPElineupMallItemPurchaseHistoryUpsertOne {
	return u.Update(func(s *HPElineupMallItemPurchaseHistoryUpsert) {
		s.SetPrice(v)
	})
}

// AddPrice adds v to the "price" field.
func (u *HPElineupMallItemPurchaseHistoryUpsertOne) AddPrice(v int) *HPElineupMallItemPurchaseHistoryUpsertOne {
	return u.Update(func(s *HPElineupMallItemPurchaseHistoryUpsert) {
		s.AddPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *HPElineupMallItemPurchaseHistoryUpsertOne) UpdatePrice() *HPElineupMallItemPurchaseHistoryUpsertOne {
	return u.Update(func(s *HPElineupMallItemPurchaseHistoryUpsert) {
		s.UpdatePrice()
	})
}

// SetOrderedAt sets the "ordered_at" field.
func (u *HPElineupMallItemPurchaseHistoryUpsertOne) SetOrderedAt(v time.Time) *HPElineupMallItemPurchaseHistoryUpsertOne {
	return u.Update(func(s *HPElineupMallItemPurchaseHistoryUpsert) {
		s.SetOrderedAt(v)
	})
}

// UpdateOrderedAt sets the "ordered_at" field to the value that was provided on create.
func (u *HPElineupMallItemPurchaseHistoryUpsertOne) UpdateOrderedAt() *HPElineupMallItemPurchaseHistoryUpsertOne {
	return u.Update(func(s *HPElineupMallItemPurchaseHistoryUpsert) {
		s.UpdateOrderedAt()
	})
}

// SetPermalink sets the "permalink" field.
func (u *HPElineupMallItemPurchaseHistoryUpsertOne) SetPermalink(v string) *HPElineupMallItemPurchaseHistoryUpsertOne {
	return u.Update(func(s *HPElineupMallItemPurchaseHistoryUpsert) {
		s.SetPermalink(v)
	})
}

// UpdatePermalink sets the "permalink" field to the value that was provided on create.
func (u *HPElineupMallItemPurchaseHistoryUpsertOne) UpdatePermalink() *HPElineupMallItemPurchaseHistoryUpsertOne {
	return u.Update(func(s *HPElineupMallItemPurchaseHistoryUpsert) {
		s.UpdatePermalink()
	})
}

// SetName sets the "name" field.
func (u *HPElineupMallItemPurchaseHistoryUpsertOne) SetName(v string) *HPElineupMallItemPurchaseHistoryUpsertOne {
	return u.Update(func(s *HPElineupMallItemPurchaseHistoryUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *HPElineupMallItemPurchaseHistoryUpsertOne) UpdateName() *HPElineupMallItemPurchaseHistoryUpsertOne {
	return u.Update(func(s *HPElineupMallItemPurchaseHistoryUpsert) {
		s.UpdateName()
	})
}

// SetPurchasedItemID sets the "purchased_item_id" field.
func (u *HPElineupMallItemPurchaseHistoryUpsertOne) SetPurchasedItemID(v int) *HPElineupMallItemPurchaseHistoryUpsertOne {
	return u.Update(func(s *HPElineupMallItemPurchaseHistoryUpsert) {
		s.SetPurchasedItemID(v)
	})
}

// UpdatePurchasedItemID sets the "purchased_item_id" field to the value that was provided on create.
func (u *HPElineupMallItemPurchaseHistoryUpsertOne) UpdatePurchasedItemID() *HPElineupMallItemPurchaseHistoryUpsertOne {
	return u.Update(func(s *HPElineupMallItemPurchaseHistoryUpsert) {
		s.UpdatePurchasedItemID()
	})
}

// ClearPurchasedItemID clears the value of the "purchased_item_id" field.
func (u *HPElineupMallItemPurchaseHistoryUpsertOne) ClearPurchasedItemID() *HPElineupMallItemPurchaseHistoryUpsertOne {
	return u.Update(func(s *HPElineupMallItemPurchaseHistoryUpsert) {
		s.ClearPurchasedItemID()
	})
}

// SetOwnerUserID sets the "owner_user_id" field.
func (u *HPElineupMallItemPurchaseHistoryUpsertOne) SetOwnerUserID(v int) *HPElineupMallItemPurchaseHistoryUpsertOne {
	return u.Update(func(s *HPElineupMallItemPurchaseHistoryUpsert) {
		s.SetOwnerUserID(v)
	})
}

// UpdateOwnerUserID sets the "owner_user_id" field to the value that was provided on create.
func (u *HPElineupMallItemPurchaseHistoryUpsertOne) UpdateOwnerUserID() *HPElineupMallItemPurchaseHistoryUpsertOne {
	return u.Update(func(s *HPElineupMallItemPurchaseHistoryUpsert) {
		s.UpdateOwnerUserID()
	})
}

// Exec executes the query.
func (u *HPElineupMallItemPurchaseHistoryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for HPElineupMallItemPurchaseHistoryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *HPElineupMallItemPurchaseHistoryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *HPElineupMallItemPurchaseHistoryUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *HPElineupMallItemPurchaseHistoryUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// HPElineupMallItemPurchaseHistoryCreateBulk is the builder for creating many HPElineupMallItemPurchaseHistory entities in bulk.
type HPElineupMallItemPurchaseHistoryCreateBulk struct {
	config
	builders []*HPElineupMallItemPurchaseHistoryCreate
	conflict []sql.ConflictOption
}

// Save creates the HPElineupMallItemPurchaseHistory entities in the database.
func (hemiphcb *HPElineupMallItemPurchaseHistoryCreateBulk) Save(ctx context.Context) ([]*HPElineupMallItemPurchaseHistory, error) {
	specs := make([]*sqlgraph.CreateSpec, len(hemiphcb.builders))
	nodes := make([]*HPElineupMallItemPurchaseHistory, len(hemiphcb.builders))
	mutators := make([]Mutator, len(hemiphcb.builders))
	for i := range hemiphcb.builders {
		func(i int, root context.Context) {
			builder := hemiphcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HPElineupMallItemPurchaseHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hemiphcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = hemiphcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hemiphcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hemiphcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hemiphcb *HPElineupMallItemPurchaseHistoryCreateBulk) SaveX(ctx context.Context) []*HPElineupMallItemPurchaseHistory {
	v, err := hemiphcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hemiphcb *HPElineupMallItemPurchaseHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := hemiphcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hemiphcb *HPElineupMallItemPurchaseHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := hemiphcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.HPElineupMallItemPurchaseHistory.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.HPElineupMallItemPurchaseHistoryUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (hemiphcb *HPElineupMallItemPurchaseHistoryCreateBulk) OnConflict(opts ...sql.ConflictOption) *HPElineupMallItemPurchaseHistoryUpsertBulk {
	hemiphcb.conflict = opts
	return &HPElineupMallItemPurchaseHistoryUpsertBulk{
		create: hemiphcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.HPElineupMallItemPurchaseHistory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (hemiphcb *HPElineupMallItemPurchaseHistoryCreateBulk) OnConflictColumns(columns ...string) *HPElineupMallItemPurchaseHistoryUpsertBulk {
	hemiphcb.conflict = append(hemiphcb.conflict, sql.ConflictColumns(columns...))
	return &HPElineupMallItemPurchaseHistoryUpsertBulk{
		create: hemiphcb,
	}
}

// HPElineupMallItemPurchaseHistoryUpsertBulk is the builder for "upsert"-ing
// a bulk of HPElineupMallItemPurchaseHistory nodes.
type HPElineupMallItemPurchaseHistoryUpsertBulk struct {
	create *HPElineupMallItemPurchaseHistoryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.HPElineupMallItemPurchaseHistory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *HPElineupMallItemPurchaseHistoryUpsertBulk) UpdateNewValues() *HPElineupMallItemPurchaseHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(hpelineupmallitempurchasehistory.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.HPElineupMallItemPurchaseHistory.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *HPElineupMallItemPurchaseHistoryUpsertBulk) Ignore() *HPElineupMallItemPurchaseHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *HPElineupMallItemPurchaseHistoryUpsertBulk) DoNothing() *HPElineupMallItemPurchaseHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the HPElineupMallItemPurchaseHistoryCreateBulk.OnConflict
// documentation for more info.
func (u *HPElineupMallItemPurchaseHistoryUpsertBulk) Update(set func(*HPElineupMallItemPurchaseHistoryUpsert)) *HPElineupMallItemPurchaseHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&HPElineupMallItemPurchaseHistoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *HPElineupMallItemPurchaseHistoryUpsertBulk) SetUpdatedAt(v time.Time) *HPElineupMallItemPurchaseHistoryUpsertBulk {
	return u.Update(func(s *HPElineupMallItemPurchaseHistoryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *HPElineupMallItemPurchaseHistoryUpsertBulk) UpdateUpdatedAt() *HPElineupMallItemPurchaseHistoryUpsertBulk {
	return u.Update(func(s *HPElineupMallItemPurchaseHistoryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *HPElineupMallItemPurchaseHistoryUpsertBulk) ClearUpdatedAt() *HPElineupMallItemPurchaseHistoryUpsertBulk {
	return u.Update(func(s *HPElineupMallItemPurchaseHistoryUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetOrderID sets the "order_id" field.
func (u *HPElineupMallItemPurchaseHistoryUpsertBulk) SetOrderID(v string) *HPElineupMallItemPurchaseHistoryUpsertBulk {
	return u.Update(func(s *HPElineupMallItemPurchaseHistoryUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *HPElineupMallItemPurchaseHistoryUpsertBulk) UpdateOrderID() *HPElineupMallItemPurchaseHistoryUpsertBulk {
	return u.Update(func(s *HPElineupMallItemPurchaseHistoryUpsert) {
		s.UpdateOrderID()
	})
}

// SetNum sets the "num" field.
func (u *HPElineupMallItemPurchaseHistoryUpsertBulk) SetNum(v int) *HPElineupMallItemPurchaseHistoryUpsertBulk {
	return u.Update(func(s *HPElineupMallItemPurchaseHistoryUpsert) {
		s.SetNum(v)
	})
}

// AddNum adds v to the "num" field.
func (u *HPElineupMallItemPurchaseHistoryUpsertBulk) AddNum(v int) *HPElineupMallItemPurchaseHistoryUpsertBulk {
	return u.Update(func(s *HPElineupMallItemPurchaseHistoryUpsert) {
		s.AddNum(v)
	})
}

// UpdateNum sets the "num" field to the value that was provided on create.
func (u *HPElineupMallItemPurchaseHistoryUpsertBulk) UpdateNum() *HPElineupMallItemPurchaseHistoryUpsertBulk {
	return u.Update(func(s *HPElineupMallItemPurchaseHistoryUpsert) {
		s.UpdateNum()
	})
}

// SetPrice sets the "price" field.
func (u *HPElineupMallItemPurchaseHistoryUpsertBulk) SetPrice(v int) *HPElineupMallItemPurchaseHistoryUpsertBulk {
	return u.Update(func(s *HPElineupMallItemPurchaseHistoryUpsert) {
		s.SetPrice(v)
	})
}

// AddPrice adds v to the "price" field.
func (u *HPElineupMallItemPurchaseHistoryUpsertBulk) AddPrice(v int) *HPElineupMallItemPurchaseHistoryUpsertBulk {
	return u.Update(func(s *HPElineupMallItemPurchaseHistoryUpsert) {
		s.AddPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *HPElineupMallItemPurchaseHistoryUpsertBulk) UpdatePrice() *HPElineupMallItemPurchaseHistoryUpsertBulk {
	return u.Update(func(s *HPElineupMallItemPurchaseHistoryUpsert) {
		s.UpdatePrice()
	})
}

// SetOrderedAt sets the "ordered_at" field.
func (u *HPElineupMallItemPurchaseHistoryUpsertBulk) SetOrderedAt(v time.Time) *HPElineupMallItemPurchaseHistoryUpsertBulk {
	return u.Update(func(s *HPElineupMallItemPurchaseHistoryUpsert) {
		s.SetOrderedAt(v)
	})
}

// UpdateOrderedAt sets the "ordered_at" field to the value that was provided on create.
func (u *HPElineupMallItemPurchaseHistoryUpsertBulk) UpdateOrderedAt() *HPElineupMallItemPurchaseHistoryUpsertBulk {
	return u.Update(func(s *HPElineupMallItemPurchaseHistoryUpsert) {
		s.UpdateOrderedAt()
	})
}

// SetPermalink sets the "permalink" field.
func (u *HPElineupMallItemPurchaseHistoryUpsertBulk) SetPermalink(v string) *HPElineupMallItemPurchaseHistoryUpsertBulk {
	return u.Update(func(s *HPElineupMallItemPurchaseHistoryUpsert) {
		s.SetPermalink(v)
	})
}

// UpdatePermalink sets the "permalink" field to the value that was provided on create.
func (u *HPElineupMallItemPurchaseHistoryUpsertBulk) UpdatePermalink() *HPElineupMallItemPurchaseHistoryUpsertBulk {
	return u.Update(func(s *HPElineupMallItemPurchaseHistoryUpsert) {
		s.UpdatePermalink()
	})
}

// SetName sets the "name" field.
func (u *HPElineupMallItemPurchaseHistoryUpsertBulk) SetName(v string) *HPElineupMallItemPurchaseHistoryUpsertBulk {
	return u.Update(func(s *HPElineupMallItemPurchaseHistoryUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *HPElineupMallItemPurchaseHistoryUpsertBulk) UpdateName() *HPElineupMallItemPurchaseHistoryUpsertBulk {
	return u.Update(func(s *HPElineupMallItemPurchaseHistoryUpsert) {
		s.UpdateName()
	})
}

// SetPurchasedItemID sets the "purchased_item_id" field.
func (u *HPElineupMallItemPurchaseHistoryUpsertBulk) SetPurchasedItemID(v int) *HPElineupMallItemPurchaseHistoryUpsertBulk {
	return u.Update(func(s *HPElineupMallItemPurchaseHistoryUpsert) {
		s.SetPurchasedItemID(v)
	})
}

// UpdatePurchasedItemID sets the "purchased_item_id" field to the value that was provided on create.
func (u *HPElineupMallItemPurchaseHistoryUpsertBulk) UpdatePurchasedItemID() *HPElineupMallItemPurchaseHistoryUpsertBulk {
	return u.Update(func(s *HPElineupMallItemPurchaseHistoryUpsert) {
		s.UpdatePurchasedItemID()
	})
}

// ClearPurchasedItemID clears the value of the "purchased_item_id" field.
func (u *HPElineupMallItemPurchaseHistoryUpsertBulk) ClearPurchasedItemID() *HPElineupMallItemPurchaseHistoryUpsertBulk {
	return u.Update(func(s *HPElineupMallItemPurchaseHistoryUpsert) {
		s.ClearPurchasedItemID()
	})
}

// SetOwnerUserID sets the "owner_user_id" field.
func (u *HPElineupMallItemPurchaseHistoryUpsertBulk) SetOwnerUserID(v int) *HPElineupMallItemPurchaseHistoryUpsertBulk {
	return u.Update(func(s *HPElineupMallItemPurchaseHistoryUpsert) {
		s.SetOwnerUserID(v)
	})
}

// UpdateOwnerUserID sets the "owner_user_id" field to the value that was provided on create.
func (u *HPElineupMallItemPurchaseHistoryUpsertBulk) UpdateOwnerUserID() *HPElineupMallItemPurchaseHistoryUpsertBulk {
	return u.Update(func(s *HPElineupMallItemPurchaseHistoryUpsert) {
		s.UpdateOwnerUserID()
	})
}

// Exec executes the query.
func (u *HPElineupMallItemPurchaseHistoryUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the HPElineupMallItemPurchaseHistoryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for HPElineupMallItemPurchaseHistoryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *HPElineupMallItemPurchaseHistoryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
