// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"hpapp.yssk22.dev/go/service/ent/hpartist"
	"hpapp.yssk22.dev/go/service/ent/hpblob"
	"hpapp.yssk22.dev/go/service/ent/hpmember"
	"hpapp.yssk22.dev/go/service/schema/enums"
	"hpapp.yssk22.dev/go/service/schema/jsonfields"
)

// HPBlob is the model entity for the HPBlob schema.
type HPBlob struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// StoragePath holds the value of the "storage_path" field.
	StoragePath string `json:"storage_path,omitempty"`
	// SourceURL holds the value of the "source_url" field.
	SourceURL string `json:"source_url,omitempty"`
	// SourceHTMLURL holds the value of the "source_html_url" field.
	SourceHTMLURL string `json:"source_html_url,omitempty"`
	// Status holds the value of the "status" field.
	Status enums.HPBlobStatus `json:"status,omitempty"`
	// StatusMessage holds the value of the "status_message" field.
	StatusMessage string `json:"status_message,omitempty"`
	// StatusErrorCount holds the value of the "status_error_count" field.
	StatusErrorCount int `json:"status_error_count,omitempty"`
	// Type holds the value of the "type" field.
	Type enums.HPBlobType `json:"type,omitempty"`
	// SubType holds the value of the "sub_type" field.
	SubType enums.HPBlobSubType `json:"sub_type,omitempty"`
	// Width holds the value of the "width" field.
	Width int `json:"width,omitempty"`
	// Height holds the value of the "height" field.
	Height int `json:"height,omitempty"`
	// Size holds the value of the "size" field.
	Size int64 `json:"size,omitempty"`
	// OwnerArtistID holds the value of the "owner_artist_id" field.
	OwnerArtistID int `json:"owner_artist_id,omitempty"`
	// OwnerMemberID holds the value of the "owner_member_id" field.
	OwnerMemberID int `json:"owner_member_id,omitempty"`
	// NumFaces holds the value of the "num_faces" field.
	NumFaces int `json:"num_faces,omitempty"`
	// Faces holds the value of the "faces" field.
	Faces jsonfields.HPBlobImageFace `json:"faces,omitempty"`
	// FaceRecognitionStatus holds the value of the "face_recognition_status" field.
	FaceRecognitionStatus enums.HPBlobFaceRecognitionStatus `json:"face_recognition_status,omitempty"`
	// Thumbnail holds the value of the "thumbnail" field.
	Thumbnail *jsonfields.HPBlobThumbnail `json:"thumbnail,omitempty"`
	// DurationSeconds holds the value of the "duration_seconds" field.
	DurationSeconds float64 `json:"duration_seconds,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HPBlobQuery when eager-loading is set.
	Edges        HPBlobEdges `json:"edges"`
	selectValues sql.SelectValues
}

// HPBlobEdges holds the relations/edges for other nodes in the graph.
type HPBlobEdges struct {
	// OwnerArtist holds the value of the owner_artist edge.
	OwnerArtist *HPArtist `json:"owner_artist,omitempty"`
	// OwnerMember holds the value of the owner_member edge.
	OwnerMember *HPMember `json:"owner_member,omitempty"`
	// AmebloPosts holds the value of the ameblo_posts edge.
	AmebloPosts []*HPAmebloPost `json:"ameblo_posts,omitempty"`
	// IgPosts holds the value of the ig_posts edge.
	IgPosts []*HPIgPost `json:"ig_posts,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
	// totalCount holds the count of the edges above.
	totalCount [4]map[string]int

	namedAmebloPosts map[string][]*HPAmebloPost
	namedIgPosts     map[string][]*HPIgPost
}

// OwnerArtistOrErr returns the OwnerArtist value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HPBlobEdges) OwnerArtistOrErr() (*HPArtist, error) {
	if e.loadedTypes[0] {
		if e.OwnerArtist == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: hpartist.Label}
		}
		return e.OwnerArtist, nil
	}
	return nil, &NotLoadedError{edge: "owner_artist"}
}

// OwnerMemberOrErr returns the OwnerMember value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HPBlobEdges) OwnerMemberOrErr() (*HPMember, error) {
	if e.loadedTypes[1] {
		if e.OwnerMember == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: hpmember.Label}
		}
		return e.OwnerMember, nil
	}
	return nil, &NotLoadedError{edge: "owner_member"}
}

// AmebloPostsOrErr returns the AmebloPosts value or an error if the edge
// was not loaded in eager-loading.
func (e HPBlobEdges) AmebloPostsOrErr() ([]*HPAmebloPost, error) {
	if e.loadedTypes[2] {
		return e.AmebloPosts, nil
	}
	return nil, &NotLoadedError{edge: "ameblo_posts"}
}

// IgPostsOrErr returns the IgPosts value or an error if the edge
// was not loaded in eager-loading.
func (e HPBlobEdges) IgPostsOrErr() ([]*HPIgPost, error) {
	if e.loadedTypes[3] {
		return e.IgPosts, nil
	}
	return nil, &NotLoadedError{edge: "ig_posts"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*HPBlob) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case hpblob.FieldFaces, hpblob.FieldThumbnail:
			values[i] = new([]byte)
		case hpblob.FieldDurationSeconds:
			values[i] = new(sql.NullFloat64)
		case hpblob.FieldID, hpblob.FieldStatusErrorCount, hpblob.FieldWidth, hpblob.FieldHeight, hpblob.FieldSize, hpblob.FieldOwnerArtistID, hpblob.FieldOwnerMemberID, hpblob.FieldNumFaces:
			values[i] = new(sql.NullInt64)
		case hpblob.FieldStoragePath, hpblob.FieldSourceURL, hpblob.FieldSourceHTMLURL, hpblob.FieldStatus, hpblob.FieldStatusMessage, hpblob.FieldType, hpblob.FieldSubType, hpblob.FieldFaceRecognitionStatus:
			values[i] = new(sql.NullString)
		case hpblob.FieldCreatedAt, hpblob.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the HPBlob fields.
func (hb *HPBlob) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case hpblob.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			hb.ID = int(value.Int64)
		case hpblob.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				hb.CreatedAt = value.Time
			}
		case hpblob.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				hb.UpdatedAt = value.Time
			}
		case hpblob.FieldStoragePath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field storage_path", values[i])
			} else if value.Valid {
				hb.StoragePath = value.String
			}
		case hpblob.FieldSourceURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source_url", values[i])
			} else if value.Valid {
				hb.SourceURL = value.String
			}
		case hpblob.FieldSourceHTMLURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source_html_url", values[i])
			} else if value.Valid {
				hb.SourceHTMLURL = value.String
			}
		case hpblob.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				hb.Status = enums.HPBlobStatus(value.String)
			}
		case hpblob.FieldStatusMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status_message", values[i])
			} else if value.Valid {
				hb.StatusMessage = value.String
			}
		case hpblob.FieldStatusErrorCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status_error_count", values[i])
			} else if value.Valid {
				hb.StatusErrorCount = int(value.Int64)
			}
		case hpblob.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				hb.Type = enums.HPBlobType(value.String)
			}
		case hpblob.FieldSubType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sub_type", values[i])
			} else if value.Valid {
				hb.SubType = enums.HPBlobSubType(value.String)
			}
		case hpblob.FieldWidth:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field width", values[i])
			} else if value.Valid {
				hb.Width = int(value.Int64)
			}
		case hpblob.FieldHeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field height", values[i])
			} else if value.Valid {
				hb.Height = int(value.Int64)
			}
		case hpblob.FieldSize:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field size", values[i])
			} else if value.Valid {
				hb.Size = value.Int64
			}
		case hpblob.FieldOwnerArtistID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field owner_artist_id", values[i])
			} else if value.Valid {
				hb.OwnerArtistID = int(value.Int64)
			}
		case hpblob.FieldOwnerMemberID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field owner_member_id", values[i])
			} else if value.Valid {
				hb.OwnerMemberID = int(value.Int64)
			}
		case hpblob.FieldNumFaces:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field num_faces", values[i])
			} else if value.Valid {
				hb.NumFaces = int(value.Int64)
			}
		case hpblob.FieldFaces:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field faces", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &hb.Faces); err != nil {
					return fmt.Errorf("unmarshal field faces: %w", err)
				}
			}
		case hpblob.FieldFaceRecognitionStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field face_recognition_status", values[i])
			} else if value.Valid {
				hb.FaceRecognitionStatus = enums.HPBlobFaceRecognitionStatus(value.String)
			}
		case hpblob.FieldThumbnail:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field thumbnail", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &hb.Thumbnail); err != nil {
					return fmt.Errorf("unmarshal field thumbnail: %w", err)
				}
			}
		case hpblob.FieldDurationSeconds:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field duration_seconds", values[i])
			} else if value.Valid {
				hb.DurationSeconds = value.Float64
			}
		default:
			hb.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the HPBlob.
// This includes values selected through modifiers, order, etc.
func (hb *HPBlob) Value(name string) (ent.Value, error) {
	return hb.selectValues.Get(name)
}

// QueryOwnerArtist queries the "owner_artist" edge of the HPBlob entity.
func (hb *HPBlob) QueryOwnerArtist() *HPArtistQuery {
	return NewHPBlobClient(hb.config).QueryOwnerArtist(hb)
}

// QueryOwnerMember queries the "owner_member" edge of the HPBlob entity.
func (hb *HPBlob) QueryOwnerMember() *HPMemberQuery {
	return NewHPBlobClient(hb.config).QueryOwnerMember(hb)
}

// QueryAmebloPosts queries the "ameblo_posts" edge of the HPBlob entity.
func (hb *HPBlob) QueryAmebloPosts() *HPAmebloPostQuery {
	return NewHPBlobClient(hb.config).QueryAmebloPosts(hb)
}

// QueryIgPosts queries the "ig_posts" edge of the HPBlob entity.
func (hb *HPBlob) QueryIgPosts() *HPIgPostQuery {
	return NewHPBlobClient(hb.config).QueryIgPosts(hb)
}

// Update returns a builder for updating this HPBlob.
// Note that you need to call HPBlob.Unwrap() before calling this method if this HPBlob
// was returned from a transaction, and the transaction was committed or rolled back.
func (hb *HPBlob) Update() *HPBlobUpdateOne {
	return NewHPBlobClient(hb.config).UpdateOne(hb)
}

// Unwrap unwraps the HPBlob entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (hb *HPBlob) Unwrap() *HPBlob {
	_tx, ok := hb.config.driver.(*txDriver)
	if !ok {
		panic("ent: HPBlob is not a transactional entity")
	}
	hb.config.driver = _tx.drv
	return hb
}

// String implements the fmt.Stringer.
func (hb *HPBlob) String() string {
	var builder strings.Builder
	builder.WriteString("HPBlob(")
	builder.WriteString(fmt.Sprintf("id=%v, ", hb.ID))
	builder.WriteString("created_at=")
	builder.WriteString(hb.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(hb.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("storage_path=")
	builder.WriteString(hb.StoragePath)
	builder.WriteString(", ")
	builder.WriteString("source_url=")
	builder.WriteString(hb.SourceURL)
	builder.WriteString(", ")
	builder.WriteString("source_html_url=")
	builder.WriteString(hb.SourceHTMLURL)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", hb.Status))
	builder.WriteString(", ")
	builder.WriteString("status_message=")
	builder.WriteString(hb.StatusMessage)
	builder.WriteString(", ")
	builder.WriteString("status_error_count=")
	builder.WriteString(fmt.Sprintf("%v", hb.StatusErrorCount))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", hb.Type))
	builder.WriteString(", ")
	builder.WriteString("sub_type=")
	builder.WriteString(fmt.Sprintf("%v", hb.SubType))
	builder.WriteString(", ")
	builder.WriteString("width=")
	builder.WriteString(fmt.Sprintf("%v", hb.Width))
	builder.WriteString(", ")
	builder.WriteString("height=")
	builder.WriteString(fmt.Sprintf("%v", hb.Height))
	builder.WriteString(", ")
	builder.WriteString("size=")
	builder.WriteString(fmt.Sprintf("%v", hb.Size))
	builder.WriteString(", ")
	builder.WriteString("owner_artist_id=")
	builder.WriteString(fmt.Sprintf("%v", hb.OwnerArtistID))
	builder.WriteString(", ")
	builder.WriteString("owner_member_id=")
	builder.WriteString(fmt.Sprintf("%v", hb.OwnerMemberID))
	builder.WriteString(", ")
	builder.WriteString("num_faces=")
	builder.WriteString(fmt.Sprintf("%v", hb.NumFaces))
	builder.WriteString(", ")
	builder.WriteString("faces=")
	builder.WriteString(fmt.Sprintf("%v", hb.Faces))
	builder.WriteString(", ")
	builder.WriteString("face_recognition_status=")
	builder.WriteString(fmt.Sprintf("%v", hb.FaceRecognitionStatus))
	builder.WriteString(", ")
	builder.WriteString("thumbnail=")
	builder.WriteString(fmt.Sprintf("%v", hb.Thumbnail))
	builder.WriteString(", ")
	builder.WriteString("duration_seconds=")
	builder.WriteString(fmt.Sprintf("%v", hb.DurationSeconds))
	builder.WriteByte(')')
	return builder.String()
}

// NamedAmebloPosts returns the AmebloPosts named value or an error if the edge was not
// loaded in eager-loading with this name.
func (hb *HPBlob) NamedAmebloPosts(name string) ([]*HPAmebloPost, error) {
	if hb.Edges.namedAmebloPosts == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := hb.Edges.namedAmebloPosts[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (hb *HPBlob) appendNamedAmebloPosts(name string, edges ...*HPAmebloPost) {
	if hb.Edges.namedAmebloPosts == nil {
		hb.Edges.namedAmebloPosts = make(map[string][]*HPAmebloPost)
	}
	if len(edges) == 0 {
		hb.Edges.namedAmebloPosts[name] = []*HPAmebloPost{}
	} else {
		hb.Edges.namedAmebloPosts[name] = append(hb.Edges.namedAmebloPosts[name], edges...)
	}
}

// NamedIgPosts returns the IgPosts named value or an error if the edge was not
// loaded in eager-loading with this name.
func (hb *HPBlob) NamedIgPosts(name string) ([]*HPIgPost, error) {
	if hb.Edges.namedIgPosts == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := hb.Edges.namedIgPosts[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (hb *HPBlob) appendNamedIgPosts(name string, edges ...*HPIgPost) {
	if hb.Edges.namedIgPosts == nil {
		hb.Edges.namedIgPosts = make(map[string][]*HPIgPost)
	}
	if len(edges) == 0 {
		hb.Edges.namedIgPosts[name] = []*HPIgPost{}
	} else {
		hb.Edges.namedIgPosts[name] = append(hb.Edges.namedIgPosts[name], edges...)
	}
}

// HPBlobs is a parsable slice of HPBlob.
type HPBlobs []*HPBlob
