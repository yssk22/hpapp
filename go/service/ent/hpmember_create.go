// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yssk22/hpapp/go/service/ent/hpameblopost"
	"github.com/yssk22/hpapp/go/service/ent/hpartist"
	"github.com/yssk22/hpapp/go/service/ent/hpasset"
	"github.com/yssk22/hpapp/go/service/ent/hpelineupmallitem"
	"github.com/yssk22/hpapp/go/service/ent/hpfeeditem"
	"github.com/yssk22/hpapp/go/service/ent/hpfollow"
	"github.com/yssk22/hpapp/go/service/ent/hpigpost"
	"github.com/yssk22/hpapp/go/service/ent/hpmember"
	"github.com/yssk22/hpapp/go/service/schema/jsonfields"
)

// HPMemberCreate is the builder for creating a HPMember entity.
type HPMemberCreate struct {
	config
	mutation *HPMemberMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCrawledAt sets the "crawled_at" field.
func (hmc *HPMemberCreate) SetCrawledAt(t time.Time) *HPMemberCreate {
	hmc.mutation.SetCrawledAt(t)
	return hmc
}

// SetNillableCrawledAt sets the "crawled_at" field if the given value is not nil.
func (hmc *HPMemberCreate) SetNillableCrawledAt(t *time.Time) *HPMemberCreate {
	if t != nil {
		hmc.SetCrawledAt(*t)
	}
	return hmc
}

// SetErrorCount sets the "error_count" field.
func (hmc *HPMemberCreate) SetErrorCount(i int) *HPMemberCreate {
	hmc.mutation.SetErrorCount(i)
	return hmc
}

// SetNillableErrorCount sets the "error_count" field if the given value is not nil.
func (hmc *HPMemberCreate) SetNillableErrorCount(i *int) *HPMemberCreate {
	if i != nil {
		hmc.SetErrorCount(*i)
	}
	return hmc
}

// SetManuallyModified sets the "manually_modified" field.
func (hmc *HPMemberCreate) SetManuallyModified(jm *jsonfields.ManuallyModified) *HPMemberCreate {
	hmc.mutation.SetManuallyModified(jm)
	return hmc
}

// SetLastErrorMessage sets the "last_error_message" field.
func (hmc *HPMemberCreate) SetLastErrorMessage(s string) *HPMemberCreate {
	hmc.mutation.SetLastErrorMessage(s)
	return hmc
}

// SetNillableLastErrorMessage sets the "last_error_message" field if the given value is not nil.
func (hmc *HPMemberCreate) SetNillableLastErrorMessage(s *string) *HPMemberCreate {
	if s != nil {
		hmc.SetLastErrorMessage(*s)
	}
	return hmc
}

// SetRecrawlRequired sets the "recrawl_required" field.
func (hmc *HPMemberCreate) SetRecrawlRequired(b bool) *HPMemberCreate {
	hmc.mutation.SetRecrawlRequired(b)
	return hmc
}

// SetNillableRecrawlRequired sets the "recrawl_required" field if the given value is not nil.
func (hmc *HPMemberCreate) SetNillableRecrawlRequired(b *bool) *HPMemberCreate {
	if b != nil {
		hmc.SetRecrawlRequired(*b)
	}
	return hmc
}

// SetCreatedAt sets the "created_at" field.
func (hmc *HPMemberCreate) SetCreatedAt(t time.Time) *HPMemberCreate {
	hmc.mutation.SetCreatedAt(t)
	return hmc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (hmc *HPMemberCreate) SetNillableCreatedAt(t *time.Time) *HPMemberCreate {
	if t != nil {
		hmc.SetCreatedAt(*t)
	}
	return hmc
}

// SetUpdatedAt sets the "updated_at" field.
func (hmc *HPMemberCreate) SetUpdatedAt(t time.Time) *HPMemberCreate {
	hmc.mutation.SetUpdatedAt(t)
	return hmc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (hmc *HPMemberCreate) SetNillableUpdatedAt(t *time.Time) *HPMemberCreate {
	if t != nil {
		hmc.SetUpdatedAt(*t)
	}
	return hmc
}

// SetKey sets the "key" field.
func (hmc *HPMemberCreate) SetKey(s string) *HPMemberCreate {
	hmc.mutation.SetKey(s)
	return hmc
}

// SetArtistKey sets the "artist_key" field.
func (hmc *HPMemberCreate) SetArtistKey(s string) *HPMemberCreate {
	hmc.mutation.SetArtistKey(s)
	return hmc
}

// SetName sets the "name" field.
func (hmc *HPMemberCreate) SetName(s string) *HPMemberCreate {
	hmc.mutation.SetName(s)
	return hmc
}

// SetNameKana sets the "name_kana" field.
func (hmc *HPMemberCreate) SetNameKana(s string) *HPMemberCreate {
	hmc.mutation.SetNameKana(s)
	return hmc
}

// SetThumbnailURL sets the "thumbnail_url" field.
func (hmc *HPMemberCreate) SetThumbnailURL(s string) *HPMemberCreate {
	hmc.mutation.SetThumbnailURL(s)
	return hmc
}

// SetDateOfBirth sets the "date_of_birth" field.
func (hmc *HPMemberCreate) SetDateOfBirth(t time.Time) *HPMemberCreate {
	hmc.mutation.SetDateOfBirth(t)
	return hmc
}

// SetBloodType sets the "blood_type" field.
func (hmc *HPMemberCreate) SetBloodType(s string) *HPMemberCreate {
	hmc.mutation.SetBloodType(s)
	return hmc
}

// SetHometown sets the "hometown" field.
func (hmc *HPMemberCreate) SetHometown(s string) *HPMemberCreate {
	hmc.mutation.SetHometown(s)
	return hmc
}

// SetJoinAt sets the "join_at" field.
func (hmc *HPMemberCreate) SetJoinAt(t time.Time) *HPMemberCreate {
	hmc.mutation.SetJoinAt(t)
	return hmc
}

// SetNillableJoinAt sets the "join_at" field if the given value is not nil.
func (hmc *HPMemberCreate) SetNillableJoinAt(t *time.Time) *HPMemberCreate {
	if t != nil {
		hmc.SetJoinAt(*t)
	}
	return hmc
}

// SetGraduateAt sets the "graduate_at" field.
func (hmc *HPMemberCreate) SetGraduateAt(t time.Time) *HPMemberCreate {
	hmc.mutation.SetGraduateAt(t)
	return hmc
}

// SetNillableGraduateAt sets the "graduate_at" field if the given value is not nil.
func (hmc *HPMemberCreate) SetNillableGraduateAt(t *time.Time) *HPMemberCreate {
	if t != nil {
		hmc.SetGraduateAt(*t)
	}
	return hmc
}

// SetArtistID sets the "artist_id" field.
func (hmc *HPMemberCreate) SetArtistID(i int) *HPMemberCreate {
	hmc.mutation.SetArtistID(i)
	return hmc
}

// SetNillableArtistID sets the "artist_id" field if the given value is not nil.
func (hmc *HPMemberCreate) SetNillableArtistID(i *int) *HPMemberCreate {
	if i != nil {
		hmc.SetArtistID(*i)
	}
	return hmc
}

// AddAssetIDs adds the "assets" edge to the HPAsset entity by IDs.
func (hmc *HPMemberCreate) AddAssetIDs(ids ...int) *HPMemberCreate {
	hmc.mutation.AddAssetIDs(ids...)
	return hmc
}

// AddAssets adds the "assets" edges to the HPAsset entity.
func (hmc *HPMemberCreate) AddAssets(h ...*HPAsset) *HPMemberCreate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hmc.AddAssetIDs(ids...)
}

// SetArtist sets the "artist" edge to the HPArtist entity.
func (hmc *HPMemberCreate) SetArtist(h *HPArtist) *HPMemberCreate {
	return hmc.SetArtistID(h.ID)
}

// AddOwningFeedIDs adds the "owning_feed" edge to the HPFeedItem entity by IDs.
func (hmc *HPMemberCreate) AddOwningFeedIDs(ids ...int) *HPMemberCreate {
	hmc.mutation.AddOwningFeedIDs(ids...)
	return hmc
}

// AddOwningFeed adds the "owning_feed" edges to the HPFeedItem entity.
func (hmc *HPMemberCreate) AddOwningFeed(h ...*HPFeedItem) *HPMemberCreate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hmc.AddOwningFeedIDs(ids...)
}

// AddTaggedFeedIDs adds the "tagged_feed" edge to the HPFeedItem entity by IDs.
func (hmc *HPMemberCreate) AddTaggedFeedIDs(ids ...int) *HPMemberCreate {
	hmc.mutation.AddTaggedFeedIDs(ids...)
	return hmc
}

// AddTaggedFeed adds the "tagged_feed" edges to the HPFeedItem entity.
func (hmc *HPMemberCreate) AddTaggedFeed(h ...*HPFeedItem) *HPMemberCreate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hmc.AddTaggedFeedIDs(ids...)
}

// AddOwningIgPostIDs adds the "owning_ig_posts" edge to the HPIgPost entity by IDs.
func (hmc *HPMemberCreate) AddOwningIgPostIDs(ids ...int) *HPMemberCreate {
	hmc.mutation.AddOwningIgPostIDs(ids...)
	return hmc
}

// AddOwningIgPosts adds the "owning_ig_posts" edges to the HPIgPost entity.
func (hmc *HPMemberCreate) AddOwningIgPosts(h ...*HPIgPost) *HPMemberCreate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hmc.AddOwningIgPostIDs(ids...)
}

// AddTaggedIgPostIDs adds the "tagged_ig_posts" edge to the HPIgPost entity by IDs.
func (hmc *HPMemberCreate) AddTaggedIgPostIDs(ids ...int) *HPMemberCreate {
	hmc.mutation.AddTaggedIgPostIDs(ids...)
	return hmc
}

// AddTaggedIgPosts adds the "tagged_ig_posts" edges to the HPIgPost entity.
func (hmc *HPMemberCreate) AddTaggedIgPosts(h ...*HPIgPost) *HPMemberCreate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hmc.AddTaggedIgPostIDs(ids...)
}

// AddOwningAmebloPostIDs adds the "owning_ameblo_posts" edge to the HPAmebloPost entity by IDs.
func (hmc *HPMemberCreate) AddOwningAmebloPostIDs(ids ...int) *HPMemberCreate {
	hmc.mutation.AddOwningAmebloPostIDs(ids...)
	return hmc
}

// AddOwningAmebloPosts adds the "owning_ameblo_posts" edges to the HPAmebloPost entity.
func (hmc *HPMemberCreate) AddOwningAmebloPosts(h ...*HPAmebloPost) *HPMemberCreate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hmc.AddOwningAmebloPostIDs(ids...)
}

// AddTaggedAmebloPostIDs adds the "tagged_ameblo_posts" edge to the HPAmebloPost entity by IDs.
func (hmc *HPMemberCreate) AddTaggedAmebloPostIDs(ids ...int) *HPMemberCreate {
	hmc.mutation.AddTaggedAmebloPostIDs(ids...)
	return hmc
}

// AddTaggedAmebloPosts adds the "tagged_ameblo_posts" edges to the HPAmebloPost entity.
func (hmc *HPMemberCreate) AddTaggedAmebloPosts(h ...*HPAmebloPost) *HPMemberCreate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hmc.AddTaggedAmebloPostIDs(ids...)
}

// AddTaggedElineupMallItemIDs adds the "tagged_elineup_mall_items" edge to the HPElineupMallItem entity by IDs.
func (hmc *HPMemberCreate) AddTaggedElineupMallItemIDs(ids ...int) *HPMemberCreate {
	hmc.mutation.AddTaggedElineupMallItemIDs(ids...)
	return hmc
}

// AddTaggedElineupMallItems adds the "tagged_elineup_mall_items" edges to the HPElineupMallItem entity.
func (hmc *HPMemberCreate) AddTaggedElineupMallItems(h ...*HPElineupMallItem) *HPMemberCreate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hmc.AddTaggedElineupMallItemIDs(ids...)
}

// AddFollowedByIDs adds the "followed_by" edge to the HPFollow entity by IDs.
func (hmc *HPMemberCreate) AddFollowedByIDs(ids ...int) *HPMemberCreate {
	hmc.mutation.AddFollowedByIDs(ids...)
	return hmc
}

// AddFollowedBy adds the "followed_by" edges to the HPFollow entity.
func (hmc *HPMemberCreate) AddFollowedBy(h ...*HPFollow) *HPMemberCreate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hmc.AddFollowedByIDs(ids...)
}

// Mutation returns the HPMemberMutation object of the builder.
func (hmc *HPMemberCreate) Mutation() *HPMemberMutation {
	return hmc.mutation
}

// Save creates the HPMember in the database.
func (hmc *HPMemberCreate) Save(ctx context.Context) (*HPMember, error) {
	if err := hmc.defaults(); err != nil {
		return nil, err
	}
	return withHooks[*HPMember, HPMemberMutation](ctx, hmc.sqlSave, hmc.mutation, hmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (hmc *HPMemberCreate) SaveX(ctx context.Context) *HPMember {
	v, err := hmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hmc *HPMemberCreate) Exec(ctx context.Context) error {
	_, err := hmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hmc *HPMemberCreate) ExecX(ctx context.Context) {
	if err := hmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hmc *HPMemberCreate) defaults() error {
	if _, ok := hmc.mutation.ErrorCount(); !ok {
		v := hpmember.DefaultErrorCount
		hmc.mutation.SetErrorCount(v)
	}
	if _, ok := hmc.mutation.RecrawlRequired(); !ok {
		v := hpmember.DefaultRecrawlRequired
		hmc.mutation.SetRecrawlRequired(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (hmc *HPMemberCreate) check() error {
	if _, ok := hmc.mutation.ErrorCount(); !ok {
		return &ValidationError{Name: "error_count", err: errors.New(`ent: missing required field "HPMember.error_count"`)}
	}
	if _, ok := hmc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "HPMember.key"`)}
	}
	if _, ok := hmc.mutation.ArtistKey(); !ok {
		return &ValidationError{Name: "artist_key", err: errors.New(`ent: missing required field "HPMember.artist_key"`)}
	}
	if _, ok := hmc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "HPMember.name"`)}
	}
	if _, ok := hmc.mutation.NameKana(); !ok {
		return &ValidationError{Name: "name_kana", err: errors.New(`ent: missing required field "HPMember.name_kana"`)}
	}
	if _, ok := hmc.mutation.ThumbnailURL(); !ok {
		return &ValidationError{Name: "thumbnail_url", err: errors.New(`ent: missing required field "HPMember.thumbnail_url"`)}
	}
	if _, ok := hmc.mutation.DateOfBirth(); !ok {
		return &ValidationError{Name: "date_of_birth", err: errors.New(`ent: missing required field "HPMember.date_of_birth"`)}
	}
	if _, ok := hmc.mutation.BloodType(); !ok {
		return &ValidationError{Name: "blood_type", err: errors.New(`ent: missing required field "HPMember.blood_type"`)}
	}
	if _, ok := hmc.mutation.Hometown(); !ok {
		return &ValidationError{Name: "hometown", err: errors.New(`ent: missing required field "HPMember.hometown"`)}
	}
	return nil
}

func (hmc *HPMemberCreate) sqlSave(ctx context.Context) (*HPMember, error) {
	if err := hmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := hmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, hmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	hmc.mutation.id = &_node.ID
	hmc.mutation.done = true
	return _node, nil
}

func (hmc *HPMemberCreate) createSpec() (*HPMember, *sqlgraph.CreateSpec) {
	var (
		_node = &HPMember{config: hmc.config}
		_spec = sqlgraph.NewCreateSpec(hpmember.Table, sqlgraph.NewFieldSpec(hpmember.FieldID, field.TypeInt))
	)
	_spec.OnConflict = hmc.conflict
	if value, ok := hmc.mutation.CrawledAt(); ok {
		_spec.SetField(hpmember.FieldCrawledAt, field.TypeTime, value)
		_node.CrawledAt = &value
	}
	if value, ok := hmc.mutation.ErrorCount(); ok {
		_spec.SetField(hpmember.FieldErrorCount, field.TypeInt, value)
		_node.ErrorCount = value
	}
	if value, ok := hmc.mutation.ManuallyModified(); ok {
		_spec.SetField(hpmember.FieldManuallyModified, field.TypeJSON, value)
		_node.ManuallyModified = value
	}
	if value, ok := hmc.mutation.LastErrorMessage(); ok {
		_spec.SetField(hpmember.FieldLastErrorMessage, field.TypeString, value)
		_node.LastErrorMessage = &value
	}
	if value, ok := hmc.mutation.RecrawlRequired(); ok {
		_spec.SetField(hpmember.FieldRecrawlRequired, field.TypeBool, value)
		_node.RecrawlRequired = value
	}
	if value, ok := hmc.mutation.CreatedAt(); ok {
		_spec.SetField(hpmember.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := hmc.mutation.UpdatedAt(); ok {
		_spec.SetField(hpmember.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := hmc.mutation.Key(); ok {
		_spec.SetField(hpmember.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := hmc.mutation.ArtistKey(); ok {
		_spec.SetField(hpmember.FieldArtistKey, field.TypeString, value)
		_node.ArtistKey = value
	}
	if value, ok := hmc.mutation.Name(); ok {
		_spec.SetField(hpmember.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := hmc.mutation.NameKana(); ok {
		_spec.SetField(hpmember.FieldNameKana, field.TypeString, value)
		_node.NameKana = value
	}
	if value, ok := hmc.mutation.ThumbnailURL(); ok {
		_spec.SetField(hpmember.FieldThumbnailURL, field.TypeString, value)
		_node.ThumbnailURL = value
	}
	if value, ok := hmc.mutation.DateOfBirth(); ok {
		_spec.SetField(hpmember.FieldDateOfBirth, field.TypeTime, value)
		_node.DateOfBirth = value
	}
	if value, ok := hmc.mutation.BloodType(); ok {
		_spec.SetField(hpmember.FieldBloodType, field.TypeString, value)
		_node.BloodType = value
	}
	if value, ok := hmc.mutation.Hometown(); ok {
		_spec.SetField(hpmember.FieldHometown, field.TypeString, value)
		_node.Hometown = value
	}
	if value, ok := hmc.mutation.JoinAt(); ok {
		_spec.SetField(hpmember.FieldJoinAt, field.TypeTime, value)
		_node.JoinAt = &value
	}
	if value, ok := hmc.mutation.GraduateAt(); ok {
		_spec.SetField(hpmember.FieldGraduateAt, field.TypeTime, value)
		_node.GraduateAt = &value
	}
	if nodes := hmc.mutation.AssetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpmember.AssetsTable,
			Columns: hpmember.AssetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpasset.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hmc.mutation.ArtistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpmember.ArtistTable,
			Columns: []string{hpmember.ArtistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpartist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ArtistID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hmc.mutation.OwningFeedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpmember.OwningFeedTable,
			Columns: []string{hpmember.OwningFeedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpfeeditem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hmc.mutation.TaggedFeedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpmember.TaggedFeedTable,
			Columns: hpmember.TaggedFeedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpfeeditem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hmc.mutation.OwningIgPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpmember.OwningIgPostsTable,
			Columns: []string{hpmember.OwningIgPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpigpost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hmc.mutation.TaggedIgPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpmember.TaggedIgPostsTable,
			Columns: hpmember.TaggedIgPostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpigpost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hmc.mutation.OwningAmebloPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpmember.OwningAmebloPostsTable,
			Columns: []string{hpmember.OwningAmebloPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpameblopost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hmc.mutation.TaggedAmebloPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpmember.TaggedAmebloPostsTable,
			Columns: hpmember.TaggedAmebloPostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpameblopost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hmc.mutation.TaggedElineupMallItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hpmember.TaggedElineupMallItemsTable,
			Columns: hpmember.TaggedElineupMallItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpelineupmallitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hmc.mutation.FollowedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hpmember.FollowedByTable,
			Columns: []string{hpmember.FollowedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpfollow.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.HPMember.Create().
//		SetCrawledAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.HPMemberUpsert) {
//			SetCrawledAt(v+v).
//		}).
//		Exec(ctx)
func (hmc *HPMemberCreate) OnConflict(opts ...sql.ConflictOption) *HPMemberUpsertOne {
	hmc.conflict = opts
	return &HPMemberUpsertOne{
		create: hmc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.HPMember.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (hmc *HPMemberCreate) OnConflictColumns(columns ...string) *HPMemberUpsertOne {
	hmc.conflict = append(hmc.conflict, sql.ConflictColumns(columns...))
	return &HPMemberUpsertOne{
		create: hmc,
	}
}

type (
	// HPMemberUpsertOne is the builder for "upsert"-ing
	//  one HPMember node.
	HPMemberUpsertOne struct {
		create *HPMemberCreate
	}

	// HPMemberUpsert is the "OnConflict" setter.
	HPMemberUpsert struct {
		*sql.UpdateSet
	}
)

// SetCrawledAt sets the "crawled_at" field.
func (u *HPMemberUpsert) SetCrawledAt(v time.Time) *HPMemberUpsert {
	u.Set(hpmember.FieldCrawledAt, v)
	return u
}

// UpdateCrawledAt sets the "crawled_at" field to the value that was provided on create.
func (u *HPMemberUpsert) UpdateCrawledAt() *HPMemberUpsert {
	u.SetExcluded(hpmember.FieldCrawledAt)
	return u
}

// ClearCrawledAt clears the value of the "crawled_at" field.
func (u *HPMemberUpsert) ClearCrawledAt() *HPMemberUpsert {
	u.SetNull(hpmember.FieldCrawledAt)
	return u
}

// SetErrorCount sets the "error_count" field.
func (u *HPMemberUpsert) SetErrorCount(v int) *HPMemberUpsert {
	u.Set(hpmember.FieldErrorCount, v)
	return u
}

// UpdateErrorCount sets the "error_count" field to the value that was provided on create.
func (u *HPMemberUpsert) UpdateErrorCount() *HPMemberUpsert {
	u.SetExcluded(hpmember.FieldErrorCount)
	return u
}

// AddErrorCount adds v to the "error_count" field.
func (u *HPMemberUpsert) AddErrorCount(v int) *HPMemberUpsert {
	u.Add(hpmember.FieldErrorCount, v)
	return u
}

// SetManuallyModified sets the "manually_modified" field.
func (u *HPMemberUpsert) SetManuallyModified(v *jsonfields.ManuallyModified) *HPMemberUpsert {
	u.Set(hpmember.FieldManuallyModified, v)
	return u
}

// UpdateManuallyModified sets the "manually_modified" field to the value that was provided on create.
func (u *HPMemberUpsert) UpdateManuallyModified() *HPMemberUpsert {
	u.SetExcluded(hpmember.FieldManuallyModified)
	return u
}

// ClearManuallyModified clears the value of the "manually_modified" field.
func (u *HPMemberUpsert) ClearManuallyModified() *HPMemberUpsert {
	u.SetNull(hpmember.FieldManuallyModified)
	return u
}

// SetLastErrorMessage sets the "last_error_message" field.
func (u *HPMemberUpsert) SetLastErrorMessage(v string) *HPMemberUpsert {
	u.Set(hpmember.FieldLastErrorMessage, v)
	return u
}

// UpdateLastErrorMessage sets the "last_error_message" field to the value that was provided on create.
func (u *HPMemberUpsert) UpdateLastErrorMessage() *HPMemberUpsert {
	u.SetExcluded(hpmember.FieldLastErrorMessage)
	return u
}

// ClearLastErrorMessage clears the value of the "last_error_message" field.
func (u *HPMemberUpsert) ClearLastErrorMessage() *HPMemberUpsert {
	u.SetNull(hpmember.FieldLastErrorMessage)
	return u
}

// SetRecrawlRequired sets the "recrawl_required" field.
func (u *HPMemberUpsert) SetRecrawlRequired(v bool) *HPMemberUpsert {
	u.Set(hpmember.FieldRecrawlRequired, v)
	return u
}

// UpdateRecrawlRequired sets the "recrawl_required" field to the value that was provided on create.
func (u *HPMemberUpsert) UpdateRecrawlRequired() *HPMemberUpsert {
	u.SetExcluded(hpmember.FieldRecrawlRequired)
	return u
}

// ClearRecrawlRequired clears the value of the "recrawl_required" field.
func (u *HPMemberUpsert) ClearRecrawlRequired() *HPMemberUpsert {
	u.SetNull(hpmember.FieldRecrawlRequired)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *HPMemberUpsert) SetUpdatedAt(v time.Time) *HPMemberUpsert {
	u.Set(hpmember.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *HPMemberUpsert) UpdateUpdatedAt() *HPMemberUpsert {
	u.SetExcluded(hpmember.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *HPMemberUpsert) ClearUpdatedAt() *HPMemberUpsert {
	u.SetNull(hpmember.FieldUpdatedAt)
	return u
}

// SetKey sets the "key" field.
func (u *HPMemberUpsert) SetKey(v string) *HPMemberUpsert {
	u.Set(hpmember.FieldKey, v)
	return u
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *HPMemberUpsert) UpdateKey() *HPMemberUpsert {
	u.SetExcluded(hpmember.FieldKey)
	return u
}

// SetArtistKey sets the "artist_key" field.
func (u *HPMemberUpsert) SetArtistKey(v string) *HPMemberUpsert {
	u.Set(hpmember.FieldArtistKey, v)
	return u
}

// UpdateArtistKey sets the "artist_key" field to the value that was provided on create.
func (u *HPMemberUpsert) UpdateArtistKey() *HPMemberUpsert {
	u.SetExcluded(hpmember.FieldArtistKey)
	return u
}

// SetName sets the "name" field.
func (u *HPMemberUpsert) SetName(v string) *HPMemberUpsert {
	u.Set(hpmember.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *HPMemberUpsert) UpdateName() *HPMemberUpsert {
	u.SetExcluded(hpmember.FieldName)
	return u
}

// SetNameKana sets the "name_kana" field.
func (u *HPMemberUpsert) SetNameKana(v string) *HPMemberUpsert {
	u.Set(hpmember.FieldNameKana, v)
	return u
}

// UpdateNameKana sets the "name_kana" field to the value that was provided on create.
func (u *HPMemberUpsert) UpdateNameKana() *HPMemberUpsert {
	u.SetExcluded(hpmember.FieldNameKana)
	return u
}

// SetThumbnailURL sets the "thumbnail_url" field.
func (u *HPMemberUpsert) SetThumbnailURL(v string) *HPMemberUpsert {
	u.Set(hpmember.FieldThumbnailURL, v)
	return u
}

// UpdateThumbnailURL sets the "thumbnail_url" field to the value that was provided on create.
func (u *HPMemberUpsert) UpdateThumbnailURL() *HPMemberUpsert {
	u.SetExcluded(hpmember.FieldThumbnailURL)
	return u
}

// SetDateOfBirth sets the "date_of_birth" field.
func (u *HPMemberUpsert) SetDateOfBirth(v time.Time) *HPMemberUpsert {
	u.Set(hpmember.FieldDateOfBirth, v)
	return u
}

// UpdateDateOfBirth sets the "date_of_birth" field to the value that was provided on create.
func (u *HPMemberUpsert) UpdateDateOfBirth() *HPMemberUpsert {
	u.SetExcluded(hpmember.FieldDateOfBirth)
	return u
}

// SetBloodType sets the "blood_type" field.
func (u *HPMemberUpsert) SetBloodType(v string) *HPMemberUpsert {
	u.Set(hpmember.FieldBloodType, v)
	return u
}

// UpdateBloodType sets the "blood_type" field to the value that was provided on create.
func (u *HPMemberUpsert) UpdateBloodType() *HPMemberUpsert {
	u.SetExcluded(hpmember.FieldBloodType)
	return u
}

// SetHometown sets the "hometown" field.
func (u *HPMemberUpsert) SetHometown(v string) *HPMemberUpsert {
	u.Set(hpmember.FieldHometown, v)
	return u
}

// UpdateHometown sets the "hometown" field to the value that was provided on create.
func (u *HPMemberUpsert) UpdateHometown() *HPMemberUpsert {
	u.SetExcluded(hpmember.FieldHometown)
	return u
}

// SetJoinAt sets the "join_at" field.
func (u *HPMemberUpsert) SetJoinAt(v time.Time) *HPMemberUpsert {
	u.Set(hpmember.FieldJoinAt, v)
	return u
}

// UpdateJoinAt sets the "join_at" field to the value that was provided on create.
func (u *HPMemberUpsert) UpdateJoinAt() *HPMemberUpsert {
	u.SetExcluded(hpmember.FieldJoinAt)
	return u
}

// ClearJoinAt clears the value of the "join_at" field.
func (u *HPMemberUpsert) ClearJoinAt() *HPMemberUpsert {
	u.SetNull(hpmember.FieldJoinAt)
	return u
}

// SetGraduateAt sets the "graduate_at" field.
func (u *HPMemberUpsert) SetGraduateAt(v time.Time) *HPMemberUpsert {
	u.Set(hpmember.FieldGraduateAt, v)
	return u
}

// UpdateGraduateAt sets the "graduate_at" field to the value that was provided on create.
func (u *HPMemberUpsert) UpdateGraduateAt() *HPMemberUpsert {
	u.SetExcluded(hpmember.FieldGraduateAt)
	return u
}

// ClearGraduateAt clears the value of the "graduate_at" field.
func (u *HPMemberUpsert) ClearGraduateAt() *HPMemberUpsert {
	u.SetNull(hpmember.FieldGraduateAt)
	return u
}

// SetArtistID sets the "artist_id" field.
func (u *HPMemberUpsert) SetArtistID(v int) *HPMemberUpsert {
	u.Set(hpmember.FieldArtistID, v)
	return u
}

// UpdateArtistID sets the "artist_id" field to the value that was provided on create.
func (u *HPMemberUpsert) UpdateArtistID() *HPMemberUpsert {
	u.SetExcluded(hpmember.FieldArtistID)
	return u
}

// ClearArtistID clears the value of the "artist_id" field.
func (u *HPMemberUpsert) ClearArtistID() *HPMemberUpsert {
	u.SetNull(hpmember.FieldArtistID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.HPMember.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *HPMemberUpsertOne) UpdateNewValues() *HPMemberUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(hpmember.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.HPMember.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *HPMemberUpsertOne) Ignore() *HPMemberUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *HPMemberUpsertOne) DoNothing() *HPMemberUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the HPMemberCreate.OnConflict
// documentation for more info.
func (u *HPMemberUpsertOne) Update(set func(*HPMemberUpsert)) *HPMemberUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&HPMemberUpsert{UpdateSet: update})
	}))
	return u
}

// SetCrawledAt sets the "crawled_at" field.
func (u *HPMemberUpsertOne) SetCrawledAt(v time.Time) *HPMemberUpsertOne {
	return u.Update(func(s *HPMemberUpsert) {
		s.SetCrawledAt(v)
	})
}

// UpdateCrawledAt sets the "crawled_at" field to the value that was provided on create.
func (u *HPMemberUpsertOne) UpdateCrawledAt() *HPMemberUpsertOne {
	return u.Update(func(s *HPMemberUpsert) {
		s.UpdateCrawledAt()
	})
}

// ClearCrawledAt clears the value of the "crawled_at" field.
func (u *HPMemberUpsertOne) ClearCrawledAt() *HPMemberUpsertOne {
	return u.Update(func(s *HPMemberUpsert) {
		s.ClearCrawledAt()
	})
}

// SetErrorCount sets the "error_count" field.
func (u *HPMemberUpsertOne) SetErrorCount(v int) *HPMemberUpsertOne {
	return u.Update(func(s *HPMemberUpsert) {
		s.SetErrorCount(v)
	})
}

// AddErrorCount adds v to the "error_count" field.
func (u *HPMemberUpsertOne) AddErrorCount(v int) *HPMemberUpsertOne {
	return u.Update(func(s *HPMemberUpsert) {
		s.AddErrorCount(v)
	})
}

// UpdateErrorCount sets the "error_count" field to the value that was provided on create.
func (u *HPMemberUpsertOne) UpdateErrorCount() *HPMemberUpsertOne {
	return u.Update(func(s *HPMemberUpsert) {
		s.UpdateErrorCount()
	})
}

// SetManuallyModified sets the "manually_modified" field.
func (u *HPMemberUpsertOne) SetManuallyModified(v *jsonfields.ManuallyModified) *HPMemberUpsertOne {
	return u.Update(func(s *HPMemberUpsert) {
		s.SetManuallyModified(v)
	})
}

// UpdateManuallyModified sets the "manually_modified" field to the value that was provided on create.
func (u *HPMemberUpsertOne) UpdateManuallyModified() *HPMemberUpsertOne {
	return u.Update(func(s *HPMemberUpsert) {
		s.UpdateManuallyModified()
	})
}

// ClearManuallyModified clears the value of the "manually_modified" field.
func (u *HPMemberUpsertOne) ClearManuallyModified() *HPMemberUpsertOne {
	return u.Update(func(s *HPMemberUpsert) {
		s.ClearManuallyModified()
	})
}

// SetLastErrorMessage sets the "last_error_message" field.
func (u *HPMemberUpsertOne) SetLastErrorMessage(v string) *HPMemberUpsertOne {
	return u.Update(func(s *HPMemberUpsert) {
		s.SetLastErrorMessage(v)
	})
}

// UpdateLastErrorMessage sets the "last_error_message" field to the value that was provided on create.
func (u *HPMemberUpsertOne) UpdateLastErrorMessage() *HPMemberUpsertOne {
	return u.Update(func(s *HPMemberUpsert) {
		s.UpdateLastErrorMessage()
	})
}

// ClearLastErrorMessage clears the value of the "last_error_message" field.
func (u *HPMemberUpsertOne) ClearLastErrorMessage() *HPMemberUpsertOne {
	return u.Update(func(s *HPMemberUpsert) {
		s.ClearLastErrorMessage()
	})
}

// SetRecrawlRequired sets the "recrawl_required" field.
func (u *HPMemberUpsertOne) SetRecrawlRequired(v bool) *HPMemberUpsertOne {
	return u.Update(func(s *HPMemberUpsert) {
		s.SetRecrawlRequired(v)
	})
}

// UpdateRecrawlRequired sets the "recrawl_required" field to the value that was provided on create.
func (u *HPMemberUpsertOne) UpdateRecrawlRequired() *HPMemberUpsertOne {
	return u.Update(func(s *HPMemberUpsert) {
		s.UpdateRecrawlRequired()
	})
}

// ClearRecrawlRequired clears the value of the "recrawl_required" field.
func (u *HPMemberUpsertOne) ClearRecrawlRequired() *HPMemberUpsertOne {
	return u.Update(func(s *HPMemberUpsert) {
		s.ClearRecrawlRequired()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *HPMemberUpsertOne) SetUpdatedAt(v time.Time) *HPMemberUpsertOne {
	return u.Update(func(s *HPMemberUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *HPMemberUpsertOne) UpdateUpdatedAt() *HPMemberUpsertOne {
	return u.Update(func(s *HPMemberUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *HPMemberUpsertOne) ClearUpdatedAt() *HPMemberUpsertOne {
	return u.Update(func(s *HPMemberUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetKey sets the "key" field.
func (u *HPMemberUpsertOne) SetKey(v string) *HPMemberUpsertOne {
	return u.Update(func(s *HPMemberUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *HPMemberUpsertOne) UpdateKey() *HPMemberUpsertOne {
	return u.Update(func(s *HPMemberUpsert) {
		s.UpdateKey()
	})
}

// SetArtistKey sets the "artist_key" field.
func (u *HPMemberUpsertOne) SetArtistKey(v string) *HPMemberUpsertOne {
	return u.Update(func(s *HPMemberUpsert) {
		s.SetArtistKey(v)
	})
}

// UpdateArtistKey sets the "artist_key" field to the value that was provided on create.
func (u *HPMemberUpsertOne) UpdateArtistKey() *HPMemberUpsertOne {
	return u.Update(func(s *HPMemberUpsert) {
		s.UpdateArtistKey()
	})
}

// SetName sets the "name" field.
func (u *HPMemberUpsertOne) SetName(v string) *HPMemberUpsertOne {
	return u.Update(func(s *HPMemberUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *HPMemberUpsertOne) UpdateName() *HPMemberUpsertOne {
	return u.Update(func(s *HPMemberUpsert) {
		s.UpdateName()
	})
}

// SetNameKana sets the "name_kana" field.
func (u *HPMemberUpsertOne) SetNameKana(v string) *HPMemberUpsertOne {
	return u.Update(func(s *HPMemberUpsert) {
		s.SetNameKana(v)
	})
}

// UpdateNameKana sets the "name_kana" field to the value that was provided on create.
func (u *HPMemberUpsertOne) UpdateNameKana() *HPMemberUpsertOne {
	return u.Update(func(s *HPMemberUpsert) {
		s.UpdateNameKana()
	})
}

// SetThumbnailURL sets the "thumbnail_url" field.
func (u *HPMemberUpsertOne) SetThumbnailURL(v string) *HPMemberUpsertOne {
	return u.Update(func(s *HPMemberUpsert) {
		s.SetThumbnailURL(v)
	})
}

// UpdateThumbnailURL sets the "thumbnail_url" field to the value that was provided on create.
func (u *HPMemberUpsertOne) UpdateThumbnailURL() *HPMemberUpsertOne {
	return u.Update(func(s *HPMemberUpsert) {
		s.UpdateThumbnailURL()
	})
}

// SetDateOfBirth sets the "date_of_birth" field.
func (u *HPMemberUpsertOne) SetDateOfBirth(v time.Time) *HPMemberUpsertOne {
	return u.Update(func(s *HPMemberUpsert) {
		s.SetDateOfBirth(v)
	})
}

// UpdateDateOfBirth sets the "date_of_birth" field to the value that was provided on create.
func (u *HPMemberUpsertOne) UpdateDateOfBirth() *HPMemberUpsertOne {
	return u.Update(func(s *HPMemberUpsert) {
		s.UpdateDateOfBirth()
	})
}

// SetBloodType sets the "blood_type" field.
func (u *HPMemberUpsertOne) SetBloodType(v string) *HPMemberUpsertOne {
	return u.Update(func(s *HPMemberUpsert) {
		s.SetBloodType(v)
	})
}

// UpdateBloodType sets the "blood_type" field to the value that was provided on create.
func (u *HPMemberUpsertOne) UpdateBloodType() *HPMemberUpsertOne {
	return u.Update(func(s *HPMemberUpsert) {
		s.UpdateBloodType()
	})
}

// SetHometown sets the "hometown" field.
func (u *HPMemberUpsertOne) SetHometown(v string) *HPMemberUpsertOne {
	return u.Update(func(s *HPMemberUpsert) {
		s.SetHometown(v)
	})
}

// UpdateHometown sets the "hometown" field to the value that was provided on create.
func (u *HPMemberUpsertOne) UpdateHometown() *HPMemberUpsertOne {
	return u.Update(func(s *HPMemberUpsert) {
		s.UpdateHometown()
	})
}

// SetJoinAt sets the "join_at" field.
func (u *HPMemberUpsertOne) SetJoinAt(v time.Time) *HPMemberUpsertOne {
	return u.Update(func(s *HPMemberUpsert) {
		s.SetJoinAt(v)
	})
}

// UpdateJoinAt sets the "join_at" field to the value that was provided on create.
func (u *HPMemberUpsertOne) UpdateJoinAt() *HPMemberUpsertOne {
	return u.Update(func(s *HPMemberUpsert) {
		s.UpdateJoinAt()
	})
}

// ClearJoinAt clears the value of the "join_at" field.
func (u *HPMemberUpsertOne) ClearJoinAt() *HPMemberUpsertOne {
	return u.Update(func(s *HPMemberUpsert) {
		s.ClearJoinAt()
	})
}

// SetGraduateAt sets the "graduate_at" field.
func (u *HPMemberUpsertOne) SetGraduateAt(v time.Time) *HPMemberUpsertOne {
	return u.Update(func(s *HPMemberUpsert) {
		s.SetGraduateAt(v)
	})
}

// UpdateGraduateAt sets the "graduate_at" field to the value that was provided on create.
func (u *HPMemberUpsertOne) UpdateGraduateAt() *HPMemberUpsertOne {
	return u.Update(func(s *HPMemberUpsert) {
		s.UpdateGraduateAt()
	})
}

// ClearGraduateAt clears the value of the "graduate_at" field.
func (u *HPMemberUpsertOne) ClearGraduateAt() *HPMemberUpsertOne {
	return u.Update(func(s *HPMemberUpsert) {
		s.ClearGraduateAt()
	})
}

// SetArtistID sets the "artist_id" field.
func (u *HPMemberUpsertOne) SetArtistID(v int) *HPMemberUpsertOne {
	return u.Update(func(s *HPMemberUpsert) {
		s.SetArtistID(v)
	})
}

// UpdateArtistID sets the "artist_id" field to the value that was provided on create.
func (u *HPMemberUpsertOne) UpdateArtistID() *HPMemberUpsertOne {
	return u.Update(func(s *HPMemberUpsert) {
		s.UpdateArtistID()
	})
}

// ClearArtistID clears the value of the "artist_id" field.
func (u *HPMemberUpsertOne) ClearArtistID() *HPMemberUpsertOne {
	return u.Update(func(s *HPMemberUpsert) {
		s.ClearArtistID()
	})
}

// Exec executes the query.
func (u *HPMemberUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for HPMemberCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *HPMemberUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *HPMemberUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *HPMemberUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// HPMemberCreateBulk is the builder for creating many HPMember entities in bulk.
type HPMemberCreateBulk struct {
	config
	builders []*HPMemberCreate
	conflict []sql.ConflictOption
}

// Save creates the HPMember entities in the database.
func (hmcb *HPMemberCreateBulk) Save(ctx context.Context) ([]*HPMember, error) {
	specs := make([]*sqlgraph.CreateSpec, len(hmcb.builders))
	nodes := make([]*HPMember, len(hmcb.builders))
	mutators := make([]Mutator, len(hmcb.builders))
	for i := range hmcb.builders {
		func(i int, root context.Context) {
			builder := hmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HPMemberMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = hmcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hmcb *HPMemberCreateBulk) SaveX(ctx context.Context) []*HPMember {
	v, err := hmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hmcb *HPMemberCreateBulk) Exec(ctx context.Context) error {
	_, err := hmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hmcb *HPMemberCreateBulk) ExecX(ctx context.Context) {
	if err := hmcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.HPMember.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.HPMemberUpsert) {
//			SetCrawledAt(v+v).
//		}).
//		Exec(ctx)
func (hmcb *HPMemberCreateBulk) OnConflict(opts ...sql.ConflictOption) *HPMemberUpsertBulk {
	hmcb.conflict = opts
	return &HPMemberUpsertBulk{
		create: hmcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.HPMember.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (hmcb *HPMemberCreateBulk) OnConflictColumns(columns ...string) *HPMemberUpsertBulk {
	hmcb.conflict = append(hmcb.conflict, sql.ConflictColumns(columns...))
	return &HPMemberUpsertBulk{
		create: hmcb,
	}
}

// HPMemberUpsertBulk is the builder for "upsert"-ing
// a bulk of HPMember nodes.
type HPMemberUpsertBulk struct {
	create *HPMemberCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.HPMember.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *HPMemberUpsertBulk) UpdateNewValues() *HPMemberUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(hpmember.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.HPMember.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *HPMemberUpsertBulk) Ignore() *HPMemberUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *HPMemberUpsertBulk) DoNothing() *HPMemberUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the HPMemberCreateBulk.OnConflict
// documentation for more info.
func (u *HPMemberUpsertBulk) Update(set func(*HPMemberUpsert)) *HPMemberUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&HPMemberUpsert{UpdateSet: update})
	}))
	return u
}

// SetCrawledAt sets the "crawled_at" field.
func (u *HPMemberUpsertBulk) SetCrawledAt(v time.Time) *HPMemberUpsertBulk {
	return u.Update(func(s *HPMemberUpsert) {
		s.SetCrawledAt(v)
	})
}

// UpdateCrawledAt sets the "crawled_at" field to the value that was provided on create.
func (u *HPMemberUpsertBulk) UpdateCrawledAt() *HPMemberUpsertBulk {
	return u.Update(func(s *HPMemberUpsert) {
		s.UpdateCrawledAt()
	})
}

// ClearCrawledAt clears the value of the "crawled_at" field.
func (u *HPMemberUpsertBulk) ClearCrawledAt() *HPMemberUpsertBulk {
	return u.Update(func(s *HPMemberUpsert) {
		s.ClearCrawledAt()
	})
}

// SetErrorCount sets the "error_count" field.
func (u *HPMemberUpsertBulk) SetErrorCount(v int) *HPMemberUpsertBulk {
	return u.Update(func(s *HPMemberUpsert) {
		s.SetErrorCount(v)
	})
}

// AddErrorCount adds v to the "error_count" field.
func (u *HPMemberUpsertBulk) AddErrorCount(v int) *HPMemberUpsertBulk {
	return u.Update(func(s *HPMemberUpsert) {
		s.AddErrorCount(v)
	})
}

// UpdateErrorCount sets the "error_count" field to the value that was provided on create.
func (u *HPMemberUpsertBulk) UpdateErrorCount() *HPMemberUpsertBulk {
	return u.Update(func(s *HPMemberUpsert) {
		s.UpdateErrorCount()
	})
}

// SetManuallyModified sets the "manually_modified" field.
func (u *HPMemberUpsertBulk) SetManuallyModified(v *jsonfields.ManuallyModified) *HPMemberUpsertBulk {
	return u.Update(func(s *HPMemberUpsert) {
		s.SetManuallyModified(v)
	})
}

// UpdateManuallyModified sets the "manually_modified" field to the value that was provided on create.
func (u *HPMemberUpsertBulk) UpdateManuallyModified() *HPMemberUpsertBulk {
	return u.Update(func(s *HPMemberUpsert) {
		s.UpdateManuallyModified()
	})
}

// ClearManuallyModified clears the value of the "manually_modified" field.
func (u *HPMemberUpsertBulk) ClearManuallyModified() *HPMemberUpsertBulk {
	return u.Update(func(s *HPMemberUpsert) {
		s.ClearManuallyModified()
	})
}

// SetLastErrorMessage sets the "last_error_message" field.
func (u *HPMemberUpsertBulk) SetLastErrorMessage(v string) *HPMemberUpsertBulk {
	return u.Update(func(s *HPMemberUpsert) {
		s.SetLastErrorMessage(v)
	})
}

// UpdateLastErrorMessage sets the "last_error_message" field to the value that was provided on create.
func (u *HPMemberUpsertBulk) UpdateLastErrorMessage() *HPMemberUpsertBulk {
	return u.Update(func(s *HPMemberUpsert) {
		s.UpdateLastErrorMessage()
	})
}

// ClearLastErrorMessage clears the value of the "last_error_message" field.
func (u *HPMemberUpsertBulk) ClearLastErrorMessage() *HPMemberUpsertBulk {
	return u.Update(func(s *HPMemberUpsert) {
		s.ClearLastErrorMessage()
	})
}

// SetRecrawlRequired sets the "recrawl_required" field.
func (u *HPMemberUpsertBulk) SetRecrawlRequired(v bool) *HPMemberUpsertBulk {
	return u.Update(func(s *HPMemberUpsert) {
		s.SetRecrawlRequired(v)
	})
}

// UpdateRecrawlRequired sets the "recrawl_required" field to the value that was provided on create.
func (u *HPMemberUpsertBulk) UpdateRecrawlRequired() *HPMemberUpsertBulk {
	return u.Update(func(s *HPMemberUpsert) {
		s.UpdateRecrawlRequired()
	})
}

// ClearRecrawlRequired clears the value of the "recrawl_required" field.
func (u *HPMemberUpsertBulk) ClearRecrawlRequired() *HPMemberUpsertBulk {
	return u.Update(func(s *HPMemberUpsert) {
		s.ClearRecrawlRequired()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *HPMemberUpsertBulk) SetUpdatedAt(v time.Time) *HPMemberUpsertBulk {
	return u.Update(func(s *HPMemberUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *HPMemberUpsertBulk) UpdateUpdatedAt() *HPMemberUpsertBulk {
	return u.Update(func(s *HPMemberUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *HPMemberUpsertBulk) ClearUpdatedAt() *HPMemberUpsertBulk {
	return u.Update(func(s *HPMemberUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetKey sets the "key" field.
func (u *HPMemberUpsertBulk) SetKey(v string) *HPMemberUpsertBulk {
	return u.Update(func(s *HPMemberUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *HPMemberUpsertBulk) UpdateKey() *HPMemberUpsertBulk {
	return u.Update(func(s *HPMemberUpsert) {
		s.UpdateKey()
	})
}

// SetArtistKey sets the "artist_key" field.
func (u *HPMemberUpsertBulk) SetArtistKey(v string) *HPMemberUpsertBulk {
	return u.Update(func(s *HPMemberUpsert) {
		s.SetArtistKey(v)
	})
}

// UpdateArtistKey sets the "artist_key" field to the value that was provided on create.
func (u *HPMemberUpsertBulk) UpdateArtistKey() *HPMemberUpsertBulk {
	return u.Update(func(s *HPMemberUpsert) {
		s.UpdateArtistKey()
	})
}

// SetName sets the "name" field.
func (u *HPMemberUpsertBulk) SetName(v string) *HPMemberUpsertBulk {
	return u.Update(func(s *HPMemberUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *HPMemberUpsertBulk) UpdateName() *HPMemberUpsertBulk {
	return u.Update(func(s *HPMemberUpsert) {
		s.UpdateName()
	})
}

// SetNameKana sets the "name_kana" field.
func (u *HPMemberUpsertBulk) SetNameKana(v string) *HPMemberUpsertBulk {
	return u.Update(func(s *HPMemberUpsert) {
		s.SetNameKana(v)
	})
}

// UpdateNameKana sets the "name_kana" field to the value that was provided on create.
func (u *HPMemberUpsertBulk) UpdateNameKana() *HPMemberUpsertBulk {
	return u.Update(func(s *HPMemberUpsert) {
		s.UpdateNameKana()
	})
}

// SetThumbnailURL sets the "thumbnail_url" field.
func (u *HPMemberUpsertBulk) SetThumbnailURL(v string) *HPMemberUpsertBulk {
	return u.Update(func(s *HPMemberUpsert) {
		s.SetThumbnailURL(v)
	})
}

// UpdateThumbnailURL sets the "thumbnail_url" field to the value that was provided on create.
func (u *HPMemberUpsertBulk) UpdateThumbnailURL() *HPMemberUpsertBulk {
	return u.Update(func(s *HPMemberUpsert) {
		s.UpdateThumbnailURL()
	})
}

// SetDateOfBirth sets the "date_of_birth" field.
func (u *HPMemberUpsertBulk) SetDateOfBirth(v time.Time) *HPMemberUpsertBulk {
	return u.Update(func(s *HPMemberUpsert) {
		s.SetDateOfBirth(v)
	})
}

// UpdateDateOfBirth sets the "date_of_birth" field to the value that was provided on create.
func (u *HPMemberUpsertBulk) UpdateDateOfBirth() *HPMemberUpsertBulk {
	return u.Update(func(s *HPMemberUpsert) {
		s.UpdateDateOfBirth()
	})
}

// SetBloodType sets the "blood_type" field.
func (u *HPMemberUpsertBulk) SetBloodType(v string) *HPMemberUpsertBulk {
	return u.Update(func(s *HPMemberUpsert) {
		s.SetBloodType(v)
	})
}

// UpdateBloodType sets the "blood_type" field to the value that was provided on create.
func (u *HPMemberUpsertBulk) UpdateBloodType() *HPMemberUpsertBulk {
	return u.Update(func(s *HPMemberUpsert) {
		s.UpdateBloodType()
	})
}

// SetHometown sets the "hometown" field.
func (u *HPMemberUpsertBulk) SetHometown(v string) *HPMemberUpsertBulk {
	return u.Update(func(s *HPMemberUpsert) {
		s.SetHometown(v)
	})
}

// UpdateHometown sets the "hometown" field to the value that was provided on create.
func (u *HPMemberUpsertBulk) UpdateHometown() *HPMemberUpsertBulk {
	return u.Update(func(s *HPMemberUpsert) {
		s.UpdateHometown()
	})
}

// SetJoinAt sets the "join_at" field.
func (u *HPMemberUpsertBulk) SetJoinAt(v time.Time) *HPMemberUpsertBulk {
	return u.Update(func(s *HPMemberUpsert) {
		s.SetJoinAt(v)
	})
}

// UpdateJoinAt sets the "join_at" field to the value that was provided on create.
func (u *HPMemberUpsertBulk) UpdateJoinAt() *HPMemberUpsertBulk {
	return u.Update(func(s *HPMemberUpsert) {
		s.UpdateJoinAt()
	})
}

// ClearJoinAt clears the value of the "join_at" field.
func (u *HPMemberUpsertBulk) ClearJoinAt() *HPMemberUpsertBulk {
	return u.Update(func(s *HPMemberUpsert) {
		s.ClearJoinAt()
	})
}

// SetGraduateAt sets the "graduate_at" field.
func (u *HPMemberUpsertBulk) SetGraduateAt(v time.Time) *HPMemberUpsertBulk {
	return u.Update(func(s *HPMemberUpsert) {
		s.SetGraduateAt(v)
	})
}

// UpdateGraduateAt sets the "graduate_at" field to the value that was provided on create.
func (u *HPMemberUpsertBulk) UpdateGraduateAt() *HPMemberUpsertBulk {
	return u.Update(func(s *HPMemberUpsert) {
		s.UpdateGraduateAt()
	})
}

// ClearGraduateAt clears the value of the "graduate_at" field.
func (u *HPMemberUpsertBulk) ClearGraduateAt() *HPMemberUpsertBulk {
	return u.Update(func(s *HPMemberUpsert) {
		s.ClearGraduateAt()
	})
}

// SetArtistID sets the "artist_id" field.
func (u *HPMemberUpsertBulk) SetArtistID(v int) *HPMemberUpsertBulk {
	return u.Update(func(s *HPMemberUpsert) {
		s.SetArtistID(v)
	})
}

// UpdateArtistID sets the "artist_id" field to the value that was provided on create.
func (u *HPMemberUpsertBulk) UpdateArtistID() *HPMemberUpsertBulk {
	return u.Update(func(s *HPMemberUpsert) {
		s.UpdateArtistID()
	})
}

// ClearArtistID clears the value of the "artist_id" field.
func (u *HPMemberUpsertBulk) ClearArtistID() *HPMemberUpsertBulk {
	return u.Update(func(s *HPMemberUpsert) {
		s.ClearArtistID()
	})
}

// Exec executes the query.
func (u *HPMemberUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the HPMemberCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for HPMemberCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *HPMemberUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
