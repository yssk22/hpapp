// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/yssk22/hpapp/go/service/ent/hpartist"
	"github.com/yssk22/hpapp/go/service/ent/hpfeeditem"
	"github.com/yssk22/hpapp/go/service/ent/hpmember"
	"github.com/yssk22/hpapp/go/service/schema/enums"
	"github.com/yssk22/hpapp/go/service/schema/jsonfields"
)

// HPFeedItem is the model entity for the HPFeedItem schema.
type HPFeedItem struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// SourceID holds the value of the "source_id" field.
	SourceID int `json:"source_id,omitempty"`
	// AssetType holds the value of the "asset_type" field.
	AssetType enums.HPAssetType `json:"asset_type,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// PostAt holds the value of the "post_at" field.
	PostAt time.Time `json:"post_at,omitempty"`
	// SourceURL holds the value of the "source_url" field.
	SourceURL string `json:"source_url,omitempty"`
	// ImageURL holds the value of the "image_url" field.
	ImageURL *string `json:"image_url,omitempty"`
	// Media holds the value of the "media" field.
	Media []jsonfields.Media `json:"media,omitempty"`
	// OwnerArtistID holds the value of the "owner_artist_id" field.
	OwnerArtistID *int `json:"owner_artist_id,omitempty"`
	// OwnerMemberID holds the value of the "owner_member_id" field.
	OwnerMemberID *int `json:"owner_member_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HPFeedItemQuery when eager-loading is set.
	Edges        HPFeedItemEdges `json:"edges"`
	selectValues sql.SelectValues
}

// HPFeedItemEdges holds the relations/edges for other nodes in the graph.
type HPFeedItemEdges struct {
	// ViewHistories holds the value of the view_histories edge.
	ViewHistories []*HPViewHistory `json:"view_histories,omitempty"`
	// OwnerArtist holds the value of the owner_artist edge.
	OwnerArtist *HPArtist `json:"owner_artist,omitempty"`
	// OwnerMember holds the value of the owner_member edge.
	OwnerMember *HPMember `json:"owner_member,omitempty"`
	// TaggedArtists holds the value of the tagged_artists edge.
	TaggedArtists []*HPArtist `json:"tagged_artists,omitempty"`
	// TaggedMembers holds the value of the tagged_members edge.
	TaggedMembers []*HPMember `json:"tagged_members,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
	// totalCount holds the count of the edges above.
	totalCount [4]map[string]int

	namedViewHistories map[string][]*HPViewHistory
	namedTaggedArtists map[string][]*HPArtist
	namedTaggedMembers map[string][]*HPMember
}

// ViewHistoriesOrErr returns the ViewHistories value or an error if the edge
// was not loaded in eager-loading.
func (e HPFeedItemEdges) ViewHistoriesOrErr() ([]*HPViewHistory, error) {
	if e.loadedTypes[0] {
		return e.ViewHistories, nil
	}
	return nil, &NotLoadedError{edge: "view_histories"}
}

// OwnerArtistOrErr returns the OwnerArtist value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HPFeedItemEdges) OwnerArtistOrErr() (*HPArtist, error) {
	if e.loadedTypes[1] {
		if e.OwnerArtist == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: hpartist.Label}
		}
		return e.OwnerArtist, nil
	}
	return nil, &NotLoadedError{edge: "owner_artist"}
}

// OwnerMemberOrErr returns the OwnerMember value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HPFeedItemEdges) OwnerMemberOrErr() (*HPMember, error) {
	if e.loadedTypes[2] {
		if e.OwnerMember == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: hpmember.Label}
		}
		return e.OwnerMember, nil
	}
	return nil, &NotLoadedError{edge: "owner_member"}
}

// TaggedArtistsOrErr returns the TaggedArtists value or an error if the edge
// was not loaded in eager-loading.
func (e HPFeedItemEdges) TaggedArtistsOrErr() ([]*HPArtist, error) {
	if e.loadedTypes[3] {
		return e.TaggedArtists, nil
	}
	return nil, &NotLoadedError{edge: "tagged_artists"}
}

// TaggedMembersOrErr returns the TaggedMembers value or an error if the edge
// was not loaded in eager-loading.
func (e HPFeedItemEdges) TaggedMembersOrErr() ([]*HPMember, error) {
	if e.loadedTypes[4] {
		return e.TaggedMembers, nil
	}
	return nil, &NotLoadedError{edge: "tagged_members"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*HPFeedItem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case hpfeeditem.FieldMedia:
			values[i] = new([]byte)
		case hpfeeditem.FieldID, hpfeeditem.FieldSourceID, hpfeeditem.FieldOwnerArtistID, hpfeeditem.FieldOwnerMemberID:
			values[i] = new(sql.NullInt64)
		case hpfeeditem.FieldAssetType, hpfeeditem.FieldTitle, hpfeeditem.FieldSourceURL, hpfeeditem.FieldImageURL:
			values[i] = new(sql.NullString)
		case hpfeeditem.FieldCreatedAt, hpfeeditem.FieldUpdatedAt, hpfeeditem.FieldPostAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the HPFeedItem fields.
func (hfi *HPFeedItem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case hpfeeditem.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			hfi.ID = int(value.Int64)
		case hpfeeditem.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				hfi.CreatedAt = value.Time
			}
		case hpfeeditem.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				hfi.UpdatedAt = value.Time
			}
		case hpfeeditem.FieldSourceID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field source_id", values[i])
			} else if value.Valid {
				hfi.SourceID = int(value.Int64)
			}
		case hpfeeditem.FieldAssetType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field asset_type", values[i])
			} else if value.Valid {
				hfi.AssetType = enums.HPAssetType(value.String)
			}
		case hpfeeditem.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				hfi.Title = value.String
			}
		case hpfeeditem.FieldPostAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field post_at", values[i])
			} else if value.Valid {
				hfi.PostAt = value.Time
			}
		case hpfeeditem.FieldSourceURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source_url", values[i])
			} else if value.Valid {
				hfi.SourceURL = value.String
			}
		case hpfeeditem.FieldImageURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image_url", values[i])
			} else if value.Valid {
				hfi.ImageURL = new(string)
				*hfi.ImageURL = value.String
			}
		case hpfeeditem.FieldMedia:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field media", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &hfi.Media); err != nil {
					return fmt.Errorf("unmarshal field media: %w", err)
				}
			}
		case hpfeeditem.FieldOwnerArtistID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field owner_artist_id", values[i])
			} else if value.Valid {
				hfi.OwnerArtistID = new(int)
				*hfi.OwnerArtistID = int(value.Int64)
			}
		case hpfeeditem.FieldOwnerMemberID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field owner_member_id", values[i])
			} else if value.Valid {
				hfi.OwnerMemberID = new(int)
				*hfi.OwnerMemberID = int(value.Int64)
			}
		default:
			hfi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the HPFeedItem.
// This includes values selected through modifiers, order, etc.
func (hfi *HPFeedItem) Value(name string) (ent.Value, error) {
	return hfi.selectValues.Get(name)
}

// QueryViewHistories queries the "view_histories" edge of the HPFeedItem entity.
func (hfi *HPFeedItem) QueryViewHistories() *HPViewHistoryQuery {
	return NewHPFeedItemClient(hfi.config).QueryViewHistories(hfi)
}

// QueryOwnerArtist queries the "owner_artist" edge of the HPFeedItem entity.
func (hfi *HPFeedItem) QueryOwnerArtist() *HPArtistQuery {
	return NewHPFeedItemClient(hfi.config).QueryOwnerArtist(hfi)
}

// QueryOwnerMember queries the "owner_member" edge of the HPFeedItem entity.
func (hfi *HPFeedItem) QueryOwnerMember() *HPMemberQuery {
	return NewHPFeedItemClient(hfi.config).QueryOwnerMember(hfi)
}

// QueryTaggedArtists queries the "tagged_artists" edge of the HPFeedItem entity.
func (hfi *HPFeedItem) QueryTaggedArtists() *HPArtistQuery {
	return NewHPFeedItemClient(hfi.config).QueryTaggedArtists(hfi)
}

// QueryTaggedMembers queries the "tagged_members" edge of the HPFeedItem entity.
func (hfi *HPFeedItem) QueryTaggedMembers() *HPMemberQuery {
	return NewHPFeedItemClient(hfi.config).QueryTaggedMembers(hfi)
}

// Update returns a builder for updating this HPFeedItem.
// Note that you need to call HPFeedItem.Unwrap() before calling this method if this HPFeedItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (hfi *HPFeedItem) Update() *HPFeedItemUpdateOne {
	return NewHPFeedItemClient(hfi.config).UpdateOne(hfi)
}

// Unwrap unwraps the HPFeedItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (hfi *HPFeedItem) Unwrap() *HPFeedItem {
	_tx, ok := hfi.config.driver.(*txDriver)
	if !ok {
		panic("ent: HPFeedItem is not a transactional entity")
	}
	hfi.config.driver = _tx.drv
	return hfi
}

// String implements the fmt.Stringer.
func (hfi *HPFeedItem) String() string {
	var builder strings.Builder
	builder.WriteString("HPFeedItem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", hfi.ID))
	builder.WriteString("created_at=")
	builder.WriteString(hfi.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(hfi.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("source_id=")
	builder.WriteString(fmt.Sprintf("%v", hfi.SourceID))
	builder.WriteString(", ")
	builder.WriteString("asset_type=")
	builder.WriteString(fmt.Sprintf("%v", hfi.AssetType))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(hfi.Title)
	builder.WriteString(", ")
	builder.WriteString("post_at=")
	builder.WriteString(hfi.PostAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("source_url=")
	builder.WriteString(hfi.SourceURL)
	builder.WriteString(", ")
	if v := hfi.ImageURL; v != nil {
		builder.WriteString("image_url=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("media=")
	builder.WriteString(fmt.Sprintf("%v", hfi.Media))
	builder.WriteString(", ")
	if v := hfi.OwnerArtistID; v != nil {
		builder.WriteString("owner_artist_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := hfi.OwnerMemberID; v != nil {
		builder.WriteString("owner_member_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// NamedViewHistories returns the ViewHistories named value or an error if the edge was not
// loaded in eager-loading with this name.
func (hfi *HPFeedItem) NamedViewHistories(name string) ([]*HPViewHistory, error) {
	if hfi.Edges.namedViewHistories == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := hfi.Edges.namedViewHistories[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (hfi *HPFeedItem) appendNamedViewHistories(name string, edges ...*HPViewHistory) {
	if hfi.Edges.namedViewHistories == nil {
		hfi.Edges.namedViewHistories = make(map[string][]*HPViewHistory)
	}
	if len(edges) == 0 {
		hfi.Edges.namedViewHistories[name] = []*HPViewHistory{}
	} else {
		hfi.Edges.namedViewHistories[name] = append(hfi.Edges.namedViewHistories[name], edges...)
	}
}

// NamedTaggedArtists returns the TaggedArtists named value or an error if the edge was not
// loaded in eager-loading with this name.
func (hfi *HPFeedItem) NamedTaggedArtists(name string) ([]*HPArtist, error) {
	if hfi.Edges.namedTaggedArtists == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := hfi.Edges.namedTaggedArtists[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (hfi *HPFeedItem) appendNamedTaggedArtists(name string, edges ...*HPArtist) {
	if hfi.Edges.namedTaggedArtists == nil {
		hfi.Edges.namedTaggedArtists = make(map[string][]*HPArtist)
	}
	if len(edges) == 0 {
		hfi.Edges.namedTaggedArtists[name] = []*HPArtist{}
	} else {
		hfi.Edges.namedTaggedArtists[name] = append(hfi.Edges.namedTaggedArtists[name], edges...)
	}
}

// NamedTaggedMembers returns the TaggedMembers named value or an error if the edge was not
// loaded in eager-loading with this name.
func (hfi *HPFeedItem) NamedTaggedMembers(name string) ([]*HPMember, error) {
	if hfi.Edges.namedTaggedMembers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := hfi.Edges.namedTaggedMembers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (hfi *HPFeedItem) appendNamedTaggedMembers(name string, edges ...*HPMember) {
	if hfi.Edges.namedTaggedMembers == nil {
		hfi.Edges.namedTaggedMembers = make(map[string][]*HPMember)
	}
	if len(edges) == 0 {
		hfi.Edges.namedTaggedMembers[name] = []*HPMember{}
	} else {
		hfi.Edges.namedTaggedMembers[name] = append(hfi.Edges.namedTaggedMembers[name], edges...)
	}
}

// HPFeedItems is a parsable slice of HPFeedItem.
type HPFeedItems []*HPFeedItem
