// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yssk22/hpapp/go/service/ent/hpartist"
	"github.com/yssk22/hpapp/go/service/ent/hpfeeditem"
	"github.com/yssk22/hpapp/go/service/ent/hpmember"
	"github.com/yssk22/hpapp/go/service/ent/hpviewhistory"
	"github.com/yssk22/hpapp/go/service/ent/predicate"
)

// HPFeedItemQuery is the builder for querying HPFeedItem entities.
type HPFeedItemQuery struct {
	config
	ctx                    *QueryContext
	order                  []hpfeeditem.Order
	inters                 []Interceptor
	predicates             []predicate.HPFeedItem
	withViewHistories      *HPViewHistoryQuery
	withOwnerArtist        *HPArtistQuery
	withOwnerMember        *HPMemberQuery
	withTaggedArtists      *HPArtistQuery
	withTaggedMembers      *HPMemberQuery
	modifiers              []func(*sql.Selector)
	loadTotal              []func(context.Context, []*HPFeedItem) error
	withNamedViewHistories map[string]*HPViewHistoryQuery
	withNamedTaggedArtists map[string]*HPArtistQuery
	withNamedTaggedMembers map[string]*HPMemberQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the HPFeedItemQuery builder.
func (hfiq *HPFeedItemQuery) Where(ps ...predicate.HPFeedItem) *HPFeedItemQuery {
	hfiq.predicates = append(hfiq.predicates, ps...)
	return hfiq
}

// Limit the number of records to be returned by this query.
func (hfiq *HPFeedItemQuery) Limit(limit int) *HPFeedItemQuery {
	hfiq.ctx.Limit = &limit
	return hfiq
}

// Offset to start from.
func (hfiq *HPFeedItemQuery) Offset(offset int) *HPFeedItemQuery {
	hfiq.ctx.Offset = &offset
	return hfiq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (hfiq *HPFeedItemQuery) Unique(unique bool) *HPFeedItemQuery {
	hfiq.ctx.Unique = &unique
	return hfiq
}

// Order specifies how the records should be ordered.
func (hfiq *HPFeedItemQuery) Order(o ...hpfeeditem.Order) *HPFeedItemQuery {
	hfiq.order = append(hfiq.order, o...)
	return hfiq
}

// QueryViewHistories chains the current query on the "view_histories" edge.
func (hfiq *HPFeedItemQuery) QueryViewHistories() *HPViewHistoryQuery {
	query := (&HPViewHistoryClient{config: hfiq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hfiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hfiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hpfeeditem.Table, hpfeeditem.FieldID, selector),
			sqlgraph.To(hpviewhistory.Table, hpviewhistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, hpfeeditem.ViewHistoriesTable, hpfeeditem.ViewHistoriesColumn),
		)
		fromU = sqlgraph.SetNeighbors(hfiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOwnerArtist chains the current query on the "owner_artist" edge.
func (hfiq *HPFeedItemQuery) QueryOwnerArtist() *HPArtistQuery {
	query := (&HPArtistClient{config: hfiq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hfiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hfiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hpfeeditem.Table, hpfeeditem.FieldID, selector),
			sqlgraph.To(hpartist.Table, hpartist.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hpfeeditem.OwnerArtistTable, hpfeeditem.OwnerArtistColumn),
		)
		fromU = sqlgraph.SetNeighbors(hfiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOwnerMember chains the current query on the "owner_member" edge.
func (hfiq *HPFeedItemQuery) QueryOwnerMember() *HPMemberQuery {
	query := (&HPMemberClient{config: hfiq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hfiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hfiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hpfeeditem.Table, hpfeeditem.FieldID, selector),
			sqlgraph.To(hpmember.Table, hpmember.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hpfeeditem.OwnerMemberTable, hpfeeditem.OwnerMemberColumn),
		)
		fromU = sqlgraph.SetNeighbors(hfiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTaggedArtists chains the current query on the "tagged_artists" edge.
func (hfiq *HPFeedItemQuery) QueryTaggedArtists() *HPArtistQuery {
	query := (&HPArtistClient{config: hfiq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hfiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hfiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hpfeeditem.Table, hpfeeditem.FieldID, selector),
			sqlgraph.To(hpartist.Table, hpartist.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, hpfeeditem.TaggedArtistsTable, hpfeeditem.TaggedArtistsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(hfiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTaggedMembers chains the current query on the "tagged_members" edge.
func (hfiq *HPFeedItemQuery) QueryTaggedMembers() *HPMemberQuery {
	query := (&HPMemberClient{config: hfiq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hfiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hfiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hpfeeditem.Table, hpfeeditem.FieldID, selector),
			sqlgraph.To(hpmember.Table, hpmember.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, hpfeeditem.TaggedMembersTable, hpfeeditem.TaggedMembersPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(hfiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first HPFeedItem entity from the query.
// Returns a *NotFoundError when no HPFeedItem was found.
func (hfiq *HPFeedItemQuery) First(ctx context.Context) (*HPFeedItem, error) {
	nodes, err := hfiq.Limit(1).All(setContextOp(ctx, hfiq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{hpfeeditem.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (hfiq *HPFeedItemQuery) FirstX(ctx context.Context) *HPFeedItem {
	node, err := hfiq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first HPFeedItem ID from the query.
// Returns a *NotFoundError when no HPFeedItem ID was found.
func (hfiq *HPFeedItemQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = hfiq.Limit(1).IDs(setContextOp(ctx, hfiq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{hpfeeditem.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (hfiq *HPFeedItemQuery) FirstIDX(ctx context.Context) int {
	id, err := hfiq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single HPFeedItem entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one HPFeedItem entity is found.
// Returns a *NotFoundError when no HPFeedItem entities are found.
func (hfiq *HPFeedItemQuery) Only(ctx context.Context) (*HPFeedItem, error) {
	nodes, err := hfiq.Limit(2).All(setContextOp(ctx, hfiq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{hpfeeditem.Label}
	default:
		return nil, &NotSingularError{hpfeeditem.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (hfiq *HPFeedItemQuery) OnlyX(ctx context.Context) *HPFeedItem {
	node, err := hfiq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only HPFeedItem ID in the query.
// Returns a *NotSingularError when more than one HPFeedItem ID is found.
// Returns a *NotFoundError when no entities are found.
func (hfiq *HPFeedItemQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = hfiq.Limit(2).IDs(setContextOp(ctx, hfiq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{hpfeeditem.Label}
	default:
		err = &NotSingularError{hpfeeditem.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (hfiq *HPFeedItemQuery) OnlyIDX(ctx context.Context) int {
	id, err := hfiq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of HPFeedItems.
func (hfiq *HPFeedItemQuery) All(ctx context.Context) ([]*HPFeedItem, error) {
	ctx = setContextOp(ctx, hfiq.ctx, "All")
	if err := hfiq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*HPFeedItem, *HPFeedItemQuery]()
	return withInterceptors[[]*HPFeedItem](ctx, hfiq, qr, hfiq.inters)
}

// AllX is like All, but panics if an error occurs.
func (hfiq *HPFeedItemQuery) AllX(ctx context.Context) []*HPFeedItem {
	nodes, err := hfiq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of HPFeedItem IDs.
func (hfiq *HPFeedItemQuery) IDs(ctx context.Context) (ids []int, err error) {
	if hfiq.ctx.Unique == nil && hfiq.path != nil {
		hfiq.Unique(true)
	}
	ctx = setContextOp(ctx, hfiq.ctx, "IDs")
	if err = hfiq.Select(hpfeeditem.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (hfiq *HPFeedItemQuery) IDsX(ctx context.Context) []int {
	ids, err := hfiq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (hfiq *HPFeedItemQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, hfiq.ctx, "Count")
	if err := hfiq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, hfiq, querierCount[*HPFeedItemQuery](), hfiq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (hfiq *HPFeedItemQuery) CountX(ctx context.Context) int {
	count, err := hfiq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (hfiq *HPFeedItemQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, hfiq.ctx, "Exist")
	switch _, err := hfiq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (hfiq *HPFeedItemQuery) ExistX(ctx context.Context) bool {
	exist, err := hfiq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the HPFeedItemQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (hfiq *HPFeedItemQuery) Clone() *HPFeedItemQuery {
	if hfiq == nil {
		return nil
	}
	return &HPFeedItemQuery{
		config:            hfiq.config,
		ctx:               hfiq.ctx.Clone(),
		order:             append([]hpfeeditem.Order{}, hfiq.order...),
		inters:            append([]Interceptor{}, hfiq.inters...),
		predicates:        append([]predicate.HPFeedItem{}, hfiq.predicates...),
		withViewHistories: hfiq.withViewHistories.Clone(),
		withOwnerArtist:   hfiq.withOwnerArtist.Clone(),
		withOwnerMember:   hfiq.withOwnerMember.Clone(),
		withTaggedArtists: hfiq.withTaggedArtists.Clone(),
		withTaggedMembers: hfiq.withTaggedMembers.Clone(),
		// clone intermediate query.
		sql:  hfiq.sql.Clone(),
		path: hfiq.path,
	}
}

// WithViewHistories tells the query-builder to eager-load the nodes that are connected to
// the "view_histories" edge. The optional arguments are used to configure the query builder of the edge.
func (hfiq *HPFeedItemQuery) WithViewHistories(opts ...func(*HPViewHistoryQuery)) *HPFeedItemQuery {
	query := (&HPViewHistoryClient{config: hfiq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hfiq.withViewHistories = query
	return hfiq
}

// WithOwnerArtist tells the query-builder to eager-load the nodes that are connected to
// the "owner_artist" edge. The optional arguments are used to configure the query builder of the edge.
func (hfiq *HPFeedItemQuery) WithOwnerArtist(opts ...func(*HPArtistQuery)) *HPFeedItemQuery {
	query := (&HPArtistClient{config: hfiq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hfiq.withOwnerArtist = query
	return hfiq
}

// WithOwnerMember tells the query-builder to eager-load the nodes that are connected to
// the "owner_member" edge. The optional arguments are used to configure the query builder of the edge.
func (hfiq *HPFeedItemQuery) WithOwnerMember(opts ...func(*HPMemberQuery)) *HPFeedItemQuery {
	query := (&HPMemberClient{config: hfiq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hfiq.withOwnerMember = query
	return hfiq
}

// WithTaggedArtists tells the query-builder to eager-load the nodes that are connected to
// the "tagged_artists" edge. The optional arguments are used to configure the query builder of the edge.
func (hfiq *HPFeedItemQuery) WithTaggedArtists(opts ...func(*HPArtistQuery)) *HPFeedItemQuery {
	query := (&HPArtistClient{config: hfiq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hfiq.withTaggedArtists = query
	return hfiq
}

// WithTaggedMembers tells the query-builder to eager-load the nodes that are connected to
// the "tagged_members" edge. The optional arguments are used to configure the query builder of the edge.
func (hfiq *HPFeedItemQuery) WithTaggedMembers(opts ...func(*HPMemberQuery)) *HPFeedItemQuery {
	query := (&HPMemberClient{config: hfiq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hfiq.withTaggedMembers = query
	return hfiq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.HPFeedItem.Query().
//		GroupBy(hpfeeditem.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (hfiq *HPFeedItemQuery) GroupBy(field string, fields ...string) *HPFeedItemGroupBy {
	hfiq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &HPFeedItemGroupBy{build: hfiq}
	grbuild.flds = &hfiq.ctx.Fields
	grbuild.label = hpfeeditem.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.HPFeedItem.Query().
//		Select(hpfeeditem.FieldCreatedAt).
//		Scan(ctx, &v)
func (hfiq *HPFeedItemQuery) Select(fields ...string) *HPFeedItemSelect {
	hfiq.ctx.Fields = append(hfiq.ctx.Fields, fields...)
	sbuild := &HPFeedItemSelect{HPFeedItemQuery: hfiq}
	sbuild.label = hpfeeditem.Label
	sbuild.flds, sbuild.scan = &hfiq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a HPFeedItemSelect configured with the given aggregations.
func (hfiq *HPFeedItemQuery) Aggregate(fns ...AggregateFunc) *HPFeedItemSelect {
	return hfiq.Select().Aggregate(fns...)
}

func (hfiq *HPFeedItemQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range hfiq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, hfiq); err != nil {
				return err
			}
		}
	}
	for _, f := range hfiq.ctx.Fields {
		if !hpfeeditem.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if hfiq.path != nil {
		prev, err := hfiq.path(ctx)
		if err != nil {
			return err
		}
		hfiq.sql = prev
	}
	return nil
}

func (hfiq *HPFeedItemQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*HPFeedItem, error) {
	var (
		nodes       = []*HPFeedItem{}
		_spec       = hfiq.querySpec()
		loadedTypes = [5]bool{
			hfiq.withViewHistories != nil,
			hfiq.withOwnerArtist != nil,
			hfiq.withOwnerMember != nil,
			hfiq.withTaggedArtists != nil,
			hfiq.withTaggedMembers != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*HPFeedItem).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &HPFeedItem{config: hfiq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(hfiq.modifiers) > 0 {
		_spec.Modifiers = hfiq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, hfiq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := hfiq.withViewHistories; query != nil {
		if err := hfiq.loadViewHistories(ctx, query, nodes,
			func(n *HPFeedItem) { n.Edges.ViewHistories = []*HPViewHistory{} },
			func(n *HPFeedItem, e *HPViewHistory) { n.Edges.ViewHistories = append(n.Edges.ViewHistories, e) }); err != nil {
			return nil, err
		}
	}
	if query := hfiq.withOwnerArtist; query != nil {
		if err := hfiq.loadOwnerArtist(ctx, query, nodes, nil,
			func(n *HPFeedItem, e *HPArtist) { n.Edges.OwnerArtist = e }); err != nil {
			return nil, err
		}
	}
	if query := hfiq.withOwnerMember; query != nil {
		if err := hfiq.loadOwnerMember(ctx, query, nodes, nil,
			func(n *HPFeedItem, e *HPMember) { n.Edges.OwnerMember = e }); err != nil {
			return nil, err
		}
	}
	if query := hfiq.withTaggedArtists; query != nil {
		if err := hfiq.loadTaggedArtists(ctx, query, nodes,
			func(n *HPFeedItem) { n.Edges.TaggedArtists = []*HPArtist{} },
			func(n *HPFeedItem, e *HPArtist) { n.Edges.TaggedArtists = append(n.Edges.TaggedArtists, e) }); err != nil {
			return nil, err
		}
	}
	if query := hfiq.withTaggedMembers; query != nil {
		if err := hfiq.loadTaggedMembers(ctx, query, nodes,
			func(n *HPFeedItem) { n.Edges.TaggedMembers = []*HPMember{} },
			func(n *HPFeedItem, e *HPMember) { n.Edges.TaggedMembers = append(n.Edges.TaggedMembers, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range hfiq.withNamedViewHistories {
		if err := hfiq.loadViewHistories(ctx, query, nodes,
			func(n *HPFeedItem) { n.appendNamedViewHistories(name) },
			func(n *HPFeedItem, e *HPViewHistory) { n.appendNamedViewHistories(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range hfiq.withNamedTaggedArtists {
		if err := hfiq.loadTaggedArtists(ctx, query, nodes,
			func(n *HPFeedItem) { n.appendNamedTaggedArtists(name) },
			func(n *HPFeedItem, e *HPArtist) { n.appendNamedTaggedArtists(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range hfiq.withNamedTaggedMembers {
		if err := hfiq.loadTaggedMembers(ctx, query, nodes,
			func(n *HPFeedItem) { n.appendNamedTaggedMembers(name) },
			func(n *HPFeedItem, e *HPMember) { n.appendNamedTaggedMembers(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range hfiq.loadTotal {
		if err := hfiq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (hfiq *HPFeedItemQuery) loadViewHistories(ctx context.Context, query *HPViewHistoryQuery, nodes []*HPFeedItem, init func(*HPFeedItem), assign func(*HPFeedItem, *HPViewHistory)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*HPFeedItem)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.HPViewHistory(func(s *sql.Selector) {
		s.Where(sql.InValues(hpfeeditem.ViewHistoriesColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.hp_feed_item_view_histories
		if fk == nil {
			return fmt.Errorf(`foreign-key "hp_feed_item_view_histories" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "hp_feed_item_view_histories" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (hfiq *HPFeedItemQuery) loadOwnerArtist(ctx context.Context, query *HPArtistQuery, nodes []*HPFeedItem, init func(*HPFeedItem), assign func(*HPFeedItem, *HPArtist)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*HPFeedItem)
	for i := range nodes {
		if nodes[i].OwnerArtistID == nil {
			continue
		}
		fk := *nodes[i].OwnerArtistID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(hpartist.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "owner_artist_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (hfiq *HPFeedItemQuery) loadOwnerMember(ctx context.Context, query *HPMemberQuery, nodes []*HPFeedItem, init func(*HPFeedItem), assign func(*HPFeedItem, *HPMember)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*HPFeedItem)
	for i := range nodes {
		if nodes[i].OwnerMemberID == nil {
			continue
		}
		fk := *nodes[i].OwnerMemberID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(hpmember.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "owner_member_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (hfiq *HPFeedItemQuery) loadTaggedArtists(ctx context.Context, query *HPArtistQuery, nodes []*HPFeedItem, init func(*HPFeedItem), assign func(*HPFeedItem, *HPArtist)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*HPFeedItem)
	nids := make(map[int]map[*HPFeedItem]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(hpfeeditem.TaggedArtistsTable)
		s.Join(joinT).On(s.C(hpartist.FieldID), joinT.C(hpfeeditem.TaggedArtistsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(hpfeeditem.TaggedArtistsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(hpfeeditem.TaggedArtistsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*HPFeedItem]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*HPArtist](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "tagged_artists" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (hfiq *HPFeedItemQuery) loadTaggedMembers(ctx context.Context, query *HPMemberQuery, nodes []*HPFeedItem, init func(*HPFeedItem), assign func(*HPFeedItem, *HPMember)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*HPFeedItem)
	nids := make(map[int]map[*HPFeedItem]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(hpfeeditem.TaggedMembersTable)
		s.Join(joinT).On(s.C(hpmember.FieldID), joinT.C(hpfeeditem.TaggedMembersPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(hpfeeditem.TaggedMembersPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(hpfeeditem.TaggedMembersPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*HPFeedItem]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*HPMember](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "tagged_members" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (hfiq *HPFeedItemQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := hfiq.querySpec()
	if len(hfiq.modifiers) > 0 {
		_spec.Modifiers = hfiq.modifiers
	}
	_spec.Node.Columns = hfiq.ctx.Fields
	if len(hfiq.ctx.Fields) > 0 {
		_spec.Unique = hfiq.ctx.Unique != nil && *hfiq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, hfiq.driver, _spec)
}

func (hfiq *HPFeedItemQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(hpfeeditem.Table, hpfeeditem.Columns, sqlgraph.NewFieldSpec(hpfeeditem.FieldID, field.TypeInt))
	_spec.From = hfiq.sql
	if unique := hfiq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if hfiq.path != nil {
		_spec.Unique = true
	}
	if fields := hfiq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hpfeeditem.FieldID)
		for i := range fields {
			if fields[i] != hpfeeditem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if hfiq.withOwnerArtist != nil {
			_spec.Node.AddColumnOnce(hpfeeditem.FieldOwnerArtistID)
		}
		if hfiq.withOwnerMember != nil {
			_spec.Node.AddColumnOnce(hpfeeditem.FieldOwnerMemberID)
		}
	}
	if ps := hfiq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := hfiq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := hfiq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := hfiq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (hfiq *HPFeedItemQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(hfiq.driver.Dialect())
	t1 := builder.Table(hpfeeditem.Table)
	columns := hfiq.ctx.Fields
	if len(columns) == 0 {
		columns = hpfeeditem.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if hfiq.sql != nil {
		selector = hfiq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if hfiq.ctx.Unique != nil && *hfiq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range hfiq.predicates {
		p(selector)
	}
	for _, p := range hfiq.order {
		p(selector)
	}
	if offset := hfiq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := hfiq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedViewHistories tells the query-builder to eager-load the nodes that are connected to the "view_histories"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (hfiq *HPFeedItemQuery) WithNamedViewHistories(name string, opts ...func(*HPViewHistoryQuery)) *HPFeedItemQuery {
	query := (&HPViewHistoryClient{config: hfiq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if hfiq.withNamedViewHistories == nil {
		hfiq.withNamedViewHistories = make(map[string]*HPViewHistoryQuery)
	}
	hfiq.withNamedViewHistories[name] = query
	return hfiq
}

// WithNamedTaggedArtists tells the query-builder to eager-load the nodes that are connected to the "tagged_artists"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (hfiq *HPFeedItemQuery) WithNamedTaggedArtists(name string, opts ...func(*HPArtistQuery)) *HPFeedItemQuery {
	query := (&HPArtistClient{config: hfiq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if hfiq.withNamedTaggedArtists == nil {
		hfiq.withNamedTaggedArtists = make(map[string]*HPArtistQuery)
	}
	hfiq.withNamedTaggedArtists[name] = query
	return hfiq
}

// WithNamedTaggedMembers tells the query-builder to eager-load the nodes that are connected to the "tagged_members"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (hfiq *HPFeedItemQuery) WithNamedTaggedMembers(name string, opts ...func(*HPMemberQuery)) *HPFeedItemQuery {
	query := (&HPMemberClient{config: hfiq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if hfiq.withNamedTaggedMembers == nil {
		hfiq.withNamedTaggedMembers = make(map[string]*HPMemberQuery)
	}
	hfiq.withNamedTaggedMembers[name] = query
	return hfiq
}

// HPFeedItemGroupBy is the group-by builder for HPFeedItem entities.
type HPFeedItemGroupBy struct {
	selector
	build *HPFeedItemQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (hfigb *HPFeedItemGroupBy) Aggregate(fns ...AggregateFunc) *HPFeedItemGroupBy {
	hfigb.fns = append(hfigb.fns, fns...)
	return hfigb
}

// Scan applies the selector query and scans the result into the given value.
func (hfigb *HPFeedItemGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, hfigb.build.ctx, "GroupBy")
	if err := hfigb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*HPFeedItemQuery, *HPFeedItemGroupBy](ctx, hfigb.build, hfigb, hfigb.build.inters, v)
}

func (hfigb *HPFeedItemGroupBy) sqlScan(ctx context.Context, root *HPFeedItemQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(hfigb.fns))
	for _, fn := range hfigb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*hfigb.flds)+len(hfigb.fns))
		for _, f := range *hfigb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*hfigb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := hfigb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// HPFeedItemSelect is the builder for selecting fields of HPFeedItem entities.
type HPFeedItemSelect struct {
	*HPFeedItemQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (hfis *HPFeedItemSelect) Aggregate(fns ...AggregateFunc) *HPFeedItemSelect {
	hfis.fns = append(hfis.fns, fns...)
	return hfis
}

// Scan applies the selector query and scans the result into the given value.
func (hfis *HPFeedItemSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, hfis.ctx, "Select")
	if err := hfis.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*HPFeedItemQuery, *HPFeedItemSelect](ctx, hfis.HPFeedItemQuery, hfis, hfis.inters, v)
}

func (hfis *HPFeedItemSelect) sqlScan(ctx context.Context, root *HPFeedItemQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(hfis.fns))
	for _, fn := range hfis.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*hfis.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := hfis.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
