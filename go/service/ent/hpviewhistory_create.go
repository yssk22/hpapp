// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yssk22/hpapp/go/service/ent/hpfeeditem"
	"github.com/yssk22/hpapp/go/service/ent/hpviewhistory"
	"github.com/yssk22/hpapp/go/service/ent/user"
	"github.com/yssk22/hpapp/go/service/schema/enums"
)

// HPViewHistoryCreate is the builder for creating a HPViewHistory entity.
type HPViewHistoryCreate struct {
	config
	mutation *HPViewHistoryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (hvhc *HPViewHistoryCreate) SetCreatedAt(t time.Time) *HPViewHistoryCreate {
	hvhc.mutation.SetCreatedAt(t)
	return hvhc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (hvhc *HPViewHistoryCreate) SetNillableCreatedAt(t *time.Time) *HPViewHistoryCreate {
	if t != nil {
		hvhc.SetCreatedAt(*t)
	}
	return hvhc
}

// SetUpdatedAt sets the "updated_at" field.
func (hvhc *HPViewHistoryCreate) SetUpdatedAt(t time.Time) *HPViewHistoryCreate {
	hvhc.mutation.SetUpdatedAt(t)
	return hvhc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (hvhc *HPViewHistoryCreate) SetNillableUpdatedAt(t *time.Time) *HPViewHistoryCreate {
	if t != nil {
		hvhc.SetUpdatedAt(*t)
	}
	return hvhc
}

// SetContentID sets the "content_id" field.
func (hvhc *HPViewHistoryCreate) SetContentID(i int) *HPViewHistoryCreate {
	hvhc.mutation.SetContentID(i)
	return hvhc
}

// SetContentPostAt sets the "content_post_at" field.
func (hvhc *HPViewHistoryCreate) SetContentPostAt(t time.Time) *HPViewHistoryCreate {
	hvhc.mutation.SetContentPostAt(t)
	return hvhc
}

// SetAssetType sets the "asset_type" field.
func (hvhc *HPViewHistoryCreate) SetAssetType(eat enums.HPAssetType) *HPViewHistoryCreate {
	hvhc.mutation.SetAssetType(eat)
	return hvhc
}

// SetIsFavorite sets the "is_favorite" field.
func (hvhc *HPViewHistoryCreate) SetIsFavorite(b bool) *HPViewHistoryCreate {
	hvhc.mutation.SetIsFavorite(b)
	return hvhc
}

// SetNillableIsFavorite sets the "is_favorite" field if the given value is not nil.
func (hvhc *HPViewHistoryCreate) SetNillableIsFavorite(b *bool) *HPViewHistoryCreate {
	if b != nil {
		hvhc.SetIsFavorite(*b)
	}
	return hvhc
}

// SetOwnerUserID sets the "owner_user_id" field.
func (hvhc *HPViewHistoryCreate) SetOwnerUserID(i int) *HPViewHistoryCreate {
	hvhc.mutation.SetOwnerUserID(i)
	return hvhc
}

// SetFeedID sets the "feed" edge to the HPFeedItem entity by ID.
func (hvhc *HPViewHistoryCreate) SetFeedID(id int) *HPViewHistoryCreate {
	hvhc.mutation.SetFeedID(id)
	return hvhc
}

// SetNillableFeedID sets the "feed" edge to the HPFeedItem entity by ID if the given value is not nil.
func (hvhc *HPViewHistoryCreate) SetNillableFeedID(id *int) *HPViewHistoryCreate {
	if id != nil {
		hvhc = hvhc.SetFeedID(*id)
	}
	return hvhc
}

// SetFeed sets the "feed" edge to the HPFeedItem entity.
func (hvhc *HPViewHistoryCreate) SetFeed(h *HPFeedItem) *HPViewHistoryCreate {
	return hvhc.SetFeedID(h.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (hvhc *HPViewHistoryCreate) SetUserID(id int) *HPViewHistoryCreate {
	hvhc.mutation.SetUserID(id)
	return hvhc
}

// SetUser sets the "user" edge to the User entity.
func (hvhc *HPViewHistoryCreate) SetUser(u *User) *HPViewHistoryCreate {
	return hvhc.SetUserID(u.ID)
}

// Mutation returns the HPViewHistoryMutation object of the builder.
func (hvhc *HPViewHistoryCreate) Mutation() *HPViewHistoryMutation {
	return hvhc.mutation
}

// Save creates the HPViewHistory in the database.
func (hvhc *HPViewHistoryCreate) Save(ctx context.Context) (*HPViewHistory, error) {
	if err := hvhc.defaults(); err != nil {
		return nil, err
	}
	return withHooks[*HPViewHistory, HPViewHistoryMutation](ctx, hvhc.sqlSave, hvhc.mutation, hvhc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (hvhc *HPViewHistoryCreate) SaveX(ctx context.Context) *HPViewHistory {
	v, err := hvhc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hvhc *HPViewHistoryCreate) Exec(ctx context.Context) error {
	_, err := hvhc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hvhc *HPViewHistoryCreate) ExecX(ctx context.Context) {
	if err := hvhc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hvhc *HPViewHistoryCreate) defaults() error {
	if _, ok := hvhc.mutation.IsFavorite(); !ok {
		v := hpviewhistory.DefaultIsFavorite
		hvhc.mutation.SetIsFavorite(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (hvhc *HPViewHistoryCreate) check() error {
	if _, ok := hvhc.mutation.ContentID(); !ok {
		return &ValidationError{Name: "content_id", err: errors.New(`ent: missing required field "HPViewHistory.content_id"`)}
	}
	if _, ok := hvhc.mutation.ContentPostAt(); !ok {
		return &ValidationError{Name: "content_post_at", err: errors.New(`ent: missing required field "HPViewHistory.content_post_at"`)}
	}
	if _, ok := hvhc.mutation.AssetType(); !ok {
		return &ValidationError{Name: "asset_type", err: errors.New(`ent: missing required field "HPViewHistory.asset_type"`)}
	}
	if v, ok := hvhc.mutation.AssetType(); ok {
		if err := hpviewhistory.AssetTypeValidator(v); err != nil {
			return &ValidationError{Name: "asset_type", err: fmt.Errorf(`ent: validator failed for field "HPViewHistory.asset_type": %w`, err)}
		}
	}
	if _, ok := hvhc.mutation.IsFavorite(); !ok {
		return &ValidationError{Name: "is_favorite", err: errors.New(`ent: missing required field "HPViewHistory.is_favorite"`)}
	}
	if _, ok := hvhc.mutation.OwnerUserID(); !ok {
		return &ValidationError{Name: "owner_user_id", err: errors.New(`ent: missing required field "HPViewHistory.owner_user_id"`)}
	}
	if _, ok := hvhc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "HPViewHistory.user"`)}
	}
	return nil
}

func (hvhc *HPViewHistoryCreate) sqlSave(ctx context.Context) (*HPViewHistory, error) {
	if err := hvhc.check(); err != nil {
		return nil, err
	}
	_node, _spec := hvhc.createSpec()
	if err := sqlgraph.CreateNode(ctx, hvhc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	hvhc.mutation.id = &_node.ID
	hvhc.mutation.done = true
	return _node, nil
}

func (hvhc *HPViewHistoryCreate) createSpec() (*HPViewHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &HPViewHistory{config: hvhc.config}
		_spec = sqlgraph.NewCreateSpec(hpviewhistory.Table, sqlgraph.NewFieldSpec(hpviewhistory.FieldID, field.TypeInt))
	)
	_spec.OnConflict = hvhc.conflict
	if value, ok := hvhc.mutation.CreatedAt(); ok {
		_spec.SetField(hpviewhistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := hvhc.mutation.UpdatedAt(); ok {
		_spec.SetField(hpviewhistory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := hvhc.mutation.ContentID(); ok {
		_spec.SetField(hpviewhistory.FieldContentID, field.TypeInt, value)
		_node.ContentID = value
	}
	if value, ok := hvhc.mutation.ContentPostAt(); ok {
		_spec.SetField(hpviewhistory.FieldContentPostAt, field.TypeTime, value)
		_node.ContentPostAt = value
	}
	if value, ok := hvhc.mutation.AssetType(); ok {
		_spec.SetField(hpviewhistory.FieldAssetType, field.TypeEnum, value)
		_node.AssetType = value
	}
	if value, ok := hvhc.mutation.IsFavorite(); ok {
		_spec.SetField(hpviewhistory.FieldIsFavorite, field.TypeBool, value)
		_node.IsFavorite = value
	}
	if nodes := hvhc.mutation.FeedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpviewhistory.FeedTable,
			Columns: []string{hpviewhistory.FeedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpfeeditem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.hp_feed_item_view_histories = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hvhc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpviewhistory.UserTable,
			Columns: []string{hpviewhistory.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerUserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.HPViewHistory.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.HPViewHistoryUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (hvhc *HPViewHistoryCreate) OnConflict(opts ...sql.ConflictOption) *HPViewHistoryUpsertOne {
	hvhc.conflict = opts
	return &HPViewHistoryUpsertOne{
		create: hvhc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.HPViewHistory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (hvhc *HPViewHistoryCreate) OnConflictColumns(columns ...string) *HPViewHistoryUpsertOne {
	hvhc.conflict = append(hvhc.conflict, sql.ConflictColumns(columns...))
	return &HPViewHistoryUpsertOne{
		create: hvhc,
	}
}

type (
	// HPViewHistoryUpsertOne is the builder for "upsert"-ing
	//  one HPViewHistory node.
	HPViewHistoryUpsertOne struct {
		create *HPViewHistoryCreate
	}

	// HPViewHistoryUpsert is the "OnConflict" setter.
	HPViewHistoryUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *HPViewHistoryUpsert) SetUpdatedAt(v time.Time) *HPViewHistoryUpsert {
	u.Set(hpviewhistory.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *HPViewHistoryUpsert) UpdateUpdatedAt() *HPViewHistoryUpsert {
	u.SetExcluded(hpviewhistory.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *HPViewHistoryUpsert) ClearUpdatedAt() *HPViewHistoryUpsert {
	u.SetNull(hpviewhistory.FieldUpdatedAt)
	return u
}

// SetContentID sets the "content_id" field.
func (u *HPViewHistoryUpsert) SetContentID(v int) *HPViewHistoryUpsert {
	u.Set(hpviewhistory.FieldContentID, v)
	return u
}

// UpdateContentID sets the "content_id" field to the value that was provided on create.
func (u *HPViewHistoryUpsert) UpdateContentID() *HPViewHistoryUpsert {
	u.SetExcluded(hpviewhistory.FieldContentID)
	return u
}

// AddContentID adds v to the "content_id" field.
func (u *HPViewHistoryUpsert) AddContentID(v int) *HPViewHistoryUpsert {
	u.Add(hpviewhistory.FieldContentID, v)
	return u
}

// SetContentPostAt sets the "content_post_at" field.
func (u *HPViewHistoryUpsert) SetContentPostAt(v time.Time) *HPViewHistoryUpsert {
	u.Set(hpviewhistory.FieldContentPostAt, v)
	return u
}

// UpdateContentPostAt sets the "content_post_at" field to the value that was provided on create.
func (u *HPViewHistoryUpsert) UpdateContentPostAt() *HPViewHistoryUpsert {
	u.SetExcluded(hpviewhistory.FieldContentPostAt)
	return u
}

// SetAssetType sets the "asset_type" field.
func (u *HPViewHistoryUpsert) SetAssetType(v enums.HPAssetType) *HPViewHistoryUpsert {
	u.Set(hpviewhistory.FieldAssetType, v)
	return u
}

// UpdateAssetType sets the "asset_type" field to the value that was provided on create.
func (u *HPViewHistoryUpsert) UpdateAssetType() *HPViewHistoryUpsert {
	u.SetExcluded(hpviewhistory.FieldAssetType)
	return u
}

// SetIsFavorite sets the "is_favorite" field.
func (u *HPViewHistoryUpsert) SetIsFavorite(v bool) *HPViewHistoryUpsert {
	u.Set(hpviewhistory.FieldIsFavorite, v)
	return u
}

// UpdateIsFavorite sets the "is_favorite" field to the value that was provided on create.
func (u *HPViewHistoryUpsert) UpdateIsFavorite() *HPViewHistoryUpsert {
	u.SetExcluded(hpviewhistory.FieldIsFavorite)
	return u
}

// SetOwnerUserID sets the "owner_user_id" field.
func (u *HPViewHistoryUpsert) SetOwnerUserID(v int) *HPViewHistoryUpsert {
	u.Set(hpviewhistory.FieldOwnerUserID, v)
	return u
}

// UpdateOwnerUserID sets the "owner_user_id" field to the value that was provided on create.
func (u *HPViewHistoryUpsert) UpdateOwnerUserID() *HPViewHistoryUpsert {
	u.SetExcluded(hpviewhistory.FieldOwnerUserID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.HPViewHistory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *HPViewHistoryUpsertOne) UpdateNewValues() *HPViewHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(hpviewhistory.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.HPViewHistory.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *HPViewHistoryUpsertOne) Ignore() *HPViewHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *HPViewHistoryUpsertOne) DoNothing() *HPViewHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the HPViewHistoryCreate.OnConflict
// documentation for more info.
func (u *HPViewHistoryUpsertOne) Update(set func(*HPViewHistoryUpsert)) *HPViewHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&HPViewHistoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *HPViewHistoryUpsertOne) SetUpdatedAt(v time.Time) *HPViewHistoryUpsertOne {
	return u.Update(func(s *HPViewHistoryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *HPViewHistoryUpsertOne) UpdateUpdatedAt() *HPViewHistoryUpsertOne {
	return u.Update(func(s *HPViewHistoryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *HPViewHistoryUpsertOne) ClearUpdatedAt() *HPViewHistoryUpsertOne {
	return u.Update(func(s *HPViewHistoryUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetContentID sets the "content_id" field.
func (u *HPViewHistoryUpsertOne) SetContentID(v int) *HPViewHistoryUpsertOne {
	return u.Update(func(s *HPViewHistoryUpsert) {
		s.SetContentID(v)
	})
}

// AddContentID adds v to the "content_id" field.
func (u *HPViewHistoryUpsertOne) AddContentID(v int) *HPViewHistoryUpsertOne {
	return u.Update(func(s *HPViewHistoryUpsert) {
		s.AddContentID(v)
	})
}

// UpdateContentID sets the "content_id" field to the value that was provided on create.
func (u *HPViewHistoryUpsertOne) UpdateContentID() *HPViewHistoryUpsertOne {
	return u.Update(func(s *HPViewHistoryUpsert) {
		s.UpdateContentID()
	})
}

// SetContentPostAt sets the "content_post_at" field.
func (u *HPViewHistoryUpsertOne) SetContentPostAt(v time.Time) *HPViewHistoryUpsertOne {
	return u.Update(func(s *HPViewHistoryUpsert) {
		s.SetContentPostAt(v)
	})
}

// UpdateContentPostAt sets the "content_post_at" field to the value that was provided on create.
func (u *HPViewHistoryUpsertOne) UpdateContentPostAt() *HPViewHistoryUpsertOne {
	return u.Update(func(s *HPViewHistoryUpsert) {
		s.UpdateContentPostAt()
	})
}

// SetAssetType sets the "asset_type" field.
func (u *HPViewHistoryUpsertOne) SetAssetType(v enums.HPAssetType) *HPViewHistoryUpsertOne {
	return u.Update(func(s *HPViewHistoryUpsert) {
		s.SetAssetType(v)
	})
}

// UpdateAssetType sets the "asset_type" field to the value that was provided on create.
func (u *HPViewHistoryUpsertOne) UpdateAssetType() *HPViewHistoryUpsertOne {
	return u.Update(func(s *HPViewHistoryUpsert) {
		s.UpdateAssetType()
	})
}

// SetIsFavorite sets the "is_favorite" field.
func (u *HPViewHistoryUpsertOne) SetIsFavorite(v bool) *HPViewHistoryUpsertOne {
	return u.Update(func(s *HPViewHistoryUpsert) {
		s.SetIsFavorite(v)
	})
}

// UpdateIsFavorite sets the "is_favorite" field to the value that was provided on create.
func (u *HPViewHistoryUpsertOne) UpdateIsFavorite() *HPViewHistoryUpsertOne {
	return u.Update(func(s *HPViewHistoryUpsert) {
		s.UpdateIsFavorite()
	})
}

// SetOwnerUserID sets the "owner_user_id" field.
func (u *HPViewHistoryUpsertOne) SetOwnerUserID(v int) *HPViewHistoryUpsertOne {
	return u.Update(func(s *HPViewHistoryUpsert) {
		s.SetOwnerUserID(v)
	})
}

// UpdateOwnerUserID sets the "owner_user_id" field to the value that was provided on create.
func (u *HPViewHistoryUpsertOne) UpdateOwnerUserID() *HPViewHistoryUpsertOne {
	return u.Update(func(s *HPViewHistoryUpsert) {
		s.UpdateOwnerUserID()
	})
}

// Exec executes the query.
func (u *HPViewHistoryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for HPViewHistoryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *HPViewHistoryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *HPViewHistoryUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *HPViewHistoryUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// HPViewHistoryCreateBulk is the builder for creating many HPViewHistory entities in bulk.
type HPViewHistoryCreateBulk struct {
	config
	builders []*HPViewHistoryCreate
	conflict []sql.ConflictOption
}

// Save creates the HPViewHistory entities in the database.
func (hvhcb *HPViewHistoryCreateBulk) Save(ctx context.Context) ([]*HPViewHistory, error) {
	specs := make([]*sqlgraph.CreateSpec, len(hvhcb.builders))
	nodes := make([]*HPViewHistory, len(hvhcb.builders))
	mutators := make([]Mutator, len(hvhcb.builders))
	for i := range hvhcb.builders {
		func(i int, root context.Context) {
			builder := hvhcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HPViewHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hvhcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = hvhcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hvhcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hvhcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hvhcb *HPViewHistoryCreateBulk) SaveX(ctx context.Context) []*HPViewHistory {
	v, err := hvhcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hvhcb *HPViewHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := hvhcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hvhcb *HPViewHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := hvhcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.HPViewHistory.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.HPViewHistoryUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (hvhcb *HPViewHistoryCreateBulk) OnConflict(opts ...sql.ConflictOption) *HPViewHistoryUpsertBulk {
	hvhcb.conflict = opts
	return &HPViewHistoryUpsertBulk{
		create: hvhcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.HPViewHistory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (hvhcb *HPViewHistoryCreateBulk) OnConflictColumns(columns ...string) *HPViewHistoryUpsertBulk {
	hvhcb.conflict = append(hvhcb.conflict, sql.ConflictColumns(columns...))
	return &HPViewHistoryUpsertBulk{
		create: hvhcb,
	}
}

// HPViewHistoryUpsertBulk is the builder for "upsert"-ing
// a bulk of HPViewHistory nodes.
type HPViewHistoryUpsertBulk struct {
	create *HPViewHistoryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.HPViewHistory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *HPViewHistoryUpsertBulk) UpdateNewValues() *HPViewHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(hpviewhistory.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.HPViewHistory.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *HPViewHistoryUpsertBulk) Ignore() *HPViewHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *HPViewHistoryUpsertBulk) DoNothing() *HPViewHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the HPViewHistoryCreateBulk.OnConflict
// documentation for more info.
func (u *HPViewHistoryUpsertBulk) Update(set func(*HPViewHistoryUpsert)) *HPViewHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&HPViewHistoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *HPViewHistoryUpsertBulk) SetUpdatedAt(v time.Time) *HPViewHistoryUpsertBulk {
	return u.Update(func(s *HPViewHistoryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *HPViewHistoryUpsertBulk) UpdateUpdatedAt() *HPViewHistoryUpsertBulk {
	return u.Update(func(s *HPViewHistoryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *HPViewHistoryUpsertBulk) ClearUpdatedAt() *HPViewHistoryUpsertBulk {
	return u.Update(func(s *HPViewHistoryUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetContentID sets the "content_id" field.
func (u *HPViewHistoryUpsertBulk) SetContentID(v int) *HPViewHistoryUpsertBulk {
	return u.Update(func(s *HPViewHistoryUpsert) {
		s.SetContentID(v)
	})
}

// AddContentID adds v to the "content_id" field.
func (u *HPViewHistoryUpsertBulk) AddContentID(v int) *HPViewHistoryUpsertBulk {
	return u.Update(func(s *HPViewHistoryUpsert) {
		s.AddContentID(v)
	})
}

// UpdateContentID sets the "content_id" field to the value that was provided on create.
func (u *HPViewHistoryUpsertBulk) UpdateContentID() *HPViewHistoryUpsertBulk {
	return u.Update(func(s *HPViewHistoryUpsert) {
		s.UpdateContentID()
	})
}

// SetContentPostAt sets the "content_post_at" field.
func (u *HPViewHistoryUpsertBulk) SetContentPostAt(v time.Time) *HPViewHistoryUpsertBulk {
	return u.Update(func(s *HPViewHistoryUpsert) {
		s.SetContentPostAt(v)
	})
}

// UpdateContentPostAt sets the "content_post_at" field to the value that was provided on create.
func (u *HPViewHistoryUpsertBulk) UpdateContentPostAt() *HPViewHistoryUpsertBulk {
	return u.Update(func(s *HPViewHistoryUpsert) {
		s.UpdateContentPostAt()
	})
}

// SetAssetType sets the "asset_type" field.
func (u *HPViewHistoryUpsertBulk) SetAssetType(v enums.HPAssetType) *HPViewHistoryUpsertBulk {
	return u.Update(func(s *HPViewHistoryUpsert) {
		s.SetAssetType(v)
	})
}

// UpdateAssetType sets the "asset_type" field to the value that was provided on create.
func (u *HPViewHistoryUpsertBulk) UpdateAssetType() *HPViewHistoryUpsertBulk {
	return u.Update(func(s *HPViewHistoryUpsert) {
		s.UpdateAssetType()
	})
}

// SetIsFavorite sets the "is_favorite" field.
func (u *HPViewHistoryUpsertBulk) SetIsFavorite(v bool) *HPViewHistoryUpsertBulk {
	return u.Update(func(s *HPViewHistoryUpsert) {
		s.SetIsFavorite(v)
	})
}

// UpdateIsFavorite sets the "is_favorite" field to the value that was provided on create.
func (u *HPViewHistoryUpsertBulk) UpdateIsFavorite() *HPViewHistoryUpsertBulk {
	return u.Update(func(s *HPViewHistoryUpsert) {
		s.UpdateIsFavorite()
	})
}

// SetOwnerUserID sets the "owner_user_id" field.
func (u *HPViewHistoryUpsertBulk) SetOwnerUserID(v int) *HPViewHistoryUpsertBulk {
	return u.Update(func(s *HPViewHistoryUpsert) {
		s.SetOwnerUserID(v)
	})
}

// UpdateOwnerUserID sets the "owner_user_id" field to the value that was provided on create.
func (u *HPViewHistoryUpsertBulk) UpdateOwnerUserID() *HPViewHistoryUpsertBulk {
	return u.Update(func(s *HPViewHistoryUpsert) {
		s.UpdateOwnerUserID()
	})
}

// Exec executes the query.
func (u *HPViewHistoryUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the HPViewHistoryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for HPViewHistoryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *HPViewHistoryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
