// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yssk22/hpapp/go/service/ent/hpameblopost"
	"github.com/yssk22/hpapp/go/service/ent/hpartist"
	"github.com/yssk22/hpapp/go/service/ent/hpasset"
	"github.com/yssk22/hpapp/go/service/ent/hpelineupmallitem"
	"github.com/yssk22/hpapp/go/service/ent/hpfeeditem"
	"github.com/yssk22/hpapp/go/service/ent/hpfollow"
	"github.com/yssk22/hpapp/go/service/ent/hpigpost"
	"github.com/yssk22/hpapp/go/service/ent/hpmember"
	"github.com/yssk22/hpapp/go/service/ent/predicate"
)

// HPMemberQuery is the builder for querying HPMember entities.
type HPMemberQuery struct {
	config
	ctx                             *QueryContext
	order                           []hpmember.Order
	inters                          []Interceptor
	predicates                      []predicate.HPMember
	withAssets                      *HPAssetQuery
	withArtist                      *HPArtistQuery
	withOwningFeed                  *HPFeedItemQuery
	withTaggedFeed                  *HPFeedItemQuery
	withOwningIgPosts               *HPIgPostQuery
	withTaggedIgPosts               *HPIgPostQuery
	withOwningAmebloPosts           *HPAmebloPostQuery
	withTaggedAmebloPosts           *HPAmebloPostQuery
	withTaggedElineupMallItems      *HPElineupMallItemQuery
	withFollowedBy                  *HPFollowQuery
	withFKs                         bool
	modifiers                       []func(*sql.Selector)
	loadTotal                       []func(context.Context, []*HPMember) error
	withNamedAssets                 map[string]*HPAssetQuery
	withNamedOwningFeed             map[string]*HPFeedItemQuery
	withNamedTaggedFeed             map[string]*HPFeedItemQuery
	withNamedOwningIgPosts          map[string]*HPIgPostQuery
	withNamedTaggedIgPosts          map[string]*HPIgPostQuery
	withNamedOwningAmebloPosts      map[string]*HPAmebloPostQuery
	withNamedTaggedAmebloPosts      map[string]*HPAmebloPostQuery
	withNamedTaggedElineupMallItems map[string]*HPElineupMallItemQuery
	withNamedFollowedBy             map[string]*HPFollowQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the HPMemberQuery builder.
func (hmq *HPMemberQuery) Where(ps ...predicate.HPMember) *HPMemberQuery {
	hmq.predicates = append(hmq.predicates, ps...)
	return hmq
}

// Limit the number of records to be returned by this query.
func (hmq *HPMemberQuery) Limit(limit int) *HPMemberQuery {
	hmq.ctx.Limit = &limit
	return hmq
}

// Offset to start from.
func (hmq *HPMemberQuery) Offset(offset int) *HPMemberQuery {
	hmq.ctx.Offset = &offset
	return hmq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (hmq *HPMemberQuery) Unique(unique bool) *HPMemberQuery {
	hmq.ctx.Unique = &unique
	return hmq
}

// Order specifies how the records should be ordered.
func (hmq *HPMemberQuery) Order(o ...hpmember.Order) *HPMemberQuery {
	hmq.order = append(hmq.order, o...)
	return hmq
}

// QueryAssets chains the current query on the "assets" edge.
func (hmq *HPMemberQuery) QueryAssets() *HPAssetQuery {
	query := (&HPAssetClient{config: hmq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hpmember.Table, hpmember.FieldID, selector),
			sqlgraph.To(hpasset.Table, hpasset.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, hpmember.AssetsTable, hpmember.AssetsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(hmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryArtist chains the current query on the "artist" edge.
func (hmq *HPMemberQuery) QueryArtist() *HPArtistQuery {
	query := (&HPArtistClient{config: hmq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hpmember.Table, hpmember.FieldID, selector),
			sqlgraph.To(hpartist.Table, hpartist.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hpmember.ArtistTable, hpmember.ArtistColumn),
		)
		fromU = sqlgraph.SetNeighbors(hmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOwningFeed chains the current query on the "owning_feed" edge.
func (hmq *HPMemberQuery) QueryOwningFeed() *HPFeedItemQuery {
	query := (&HPFeedItemClient{config: hmq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hpmember.Table, hpmember.FieldID, selector),
			sqlgraph.To(hpfeeditem.Table, hpfeeditem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, hpmember.OwningFeedTable, hpmember.OwningFeedColumn),
		)
		fromU = sqlgraph.SetNeighbors(hmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTaggedFeed chains the current query on the "tagged_feed" edge.
func (hmq *HPMemberQuery) QueryTaggedFeed() *HPFeedItemQuery {
	query := (&HPFeedItemClient{config: hmq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hpmember.Table, hpmember.FieldID, selector),
			sqlgraph.To(hpfeeditem.Table, hpfeeditem.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, hpmember.TaggedFeedTable, hpmember.TaggedFeedPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(hmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOwningIgPosts chains the current query on the "owning_ig_posts" edge.
func (hmq *HPMemberQuery) QueryOwningIgPosts() *HPIgPostQuery {
	query := (&HPIgPostClient{config: hmq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hpmember.Table, hpmember.FieldID, selector),
			sqlgraph.To(hpigpost.Table, hpigpost.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, hpmember.OwningIgPostsTable, hpmember.OwningIgPostsColumn),
		)
		fromU = sqlgraph.SetNeighbors(hmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTaggedIgPosts chains the current query on the "tagged_ig_posts" edge.
func (hmq *HPMemberQuery) QueryTaggedIgPosts() *HPIgPostQuery {
	query := (&HPIgPostClient{config: hmq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hpmember.Table, hpmember.FieldID, selector),
			sqlgraph.To(hpigpost.Table, hpigpost.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, hpmember.TaggedIgPostsTable, hpmember.TaggedIgPostsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(hmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOwningAmebloPosts chains the current query on the "owning_ameblo_posts" edge.
func (hmq *HPMemberQuery) QueryOwningAmebloPosts() *HPAmebloPostQuery {
	query := (&HPAmebloPostClient{config: hmq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hpmember.Table, hpmember.FieldID, selector),
			sqlgraph.To(hpameblopost.Table, hpameblopost.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, hpmember.OwningAmebloPostsTable, hpmember.OwningAmebloPostsColumn),
		)
		fromU = sqlgraph.SetNeighbors(hmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTaggedAmebloPosts chains the current query on the "tagged_ameblo_posts" edge.
func (hmq *HPMemberQuery) QueryTaggedAmebloPosts() *HPAmebloPostQuery {
	query := (&HPAmebloPostClient{config: hmq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hpmember.Table, hpmember.FieldID, selector),
			sqlgraph.To(hpameblopost.Table, hpameblopost.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, hpmember.TaggedAmebloPostsTable, hpmember.TaggedAmebloPostsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(hmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTaggedElineupMallItems chains the current query on the "tagged_elineup_mall_items" edge.
func (hmq *HPMemberQuery) QueryTaggedElineupMallItems() *HPElineupMallItemQuery {
	query := (&HPElineupMallItemClient{config: hmq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hpmember.Table, hpmember.FieldID, selector),
			sqlgraph.To(hpelineupmallitem.Table, hpelineupmallitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, hpmember.TaggedElineupMallItemsTable, hpmember.TaggedElineupMallItemsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(hmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFollowedBy chains the current query on the "followed_by" edge.
func (hmq *HPMemberQuery) QueryFollowedBy() *HPFollowQuery {
	query := (&HPFollowClient{config: hmq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hpmember.Table, hpmember.FieldID, selector),
			sqlgraph.To(hpfollow.Table, hpfollow.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, hpmember.FollowedByTable, hpmember.FollowedByColumn),
		)
		fromU = sqlgraph.SetNeighbors(hmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first HPMember entity from the query.
// Returns a *NotFoundError when no HPMember was found.
func (hmq *HPMemberQuery) First(ctx context.Context) (*HPMember, error) {
	nodes, err := hmq.Limit(1).All(setContextOp(ctx, hmq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{hpmember.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (hmq *HPMemberQuery) FirstX(ctx context.Context) *HPMember {
	node, err := hmq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first HPMember ID from the query.
// Returns a *NotFoundError when no HPMember ID was found.
func (hmq *HPMemberQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = hmq.Limit(1).IDs(setContextOp(ctx, hmq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{hpmember.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (hmq *HPMemberQuery) FirstIDX(ctx context.Context) int {
	id, err := hmq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single HPMember entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one HPMember entity is found.
// Returns a *NotFoundError when no HPMember entities are found.
func (hmq *HPMemberQuery) Only(ctx context.Context) (*HPMember, error) {
	nodes, err := hmq.Limit(2).All(setContextOp(ctx, hmq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{hpmember.Label}
	default:
		return nil, &NotSingularError{hpmember.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (hmq *HPMemberQuery) OnlyX(ctx context.Context) *HPMember {
	node, err := hmq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only HPMember ID in the query.
// Returns a *NotSingularError when more than one HPMember ID is found.
// Returns a *NotFoundError when no entities are found.
func (hmq *HPMemberQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = hmq.Limit(2).IDs(setContextOp(ctx, hmq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{hpmember.Label}
	default:
		err = &NotSingularError{hpmember.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (hmq *HPMemberQuery) OnlyIDX(ctx context.Context) int {
	id, err := hmq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of HPMembers.
func (hmq *HPMemberQuery) All(ctx context.Context) ([]*HPMember, error) {
	ctx = setContextOp(ctx, hmq.ctx, "All")
	if err := hmq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*HPMember, *HPMemberQuery]()
	return withInterceptors[[]*HPMember](ctx, hmq, qr, hmq.inters)
}

// AllX is like All, but panics if an error occurs.
func (hmq *HPMemberQuery) AllX(ctx context.Context) []*HPMember {
	nodes, err := hmq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of HPMember IDs.
func (hmq *HPMemberQuery) IDs(ctx context.Context) (ids []int, err error) {
	if hmq.ctx.Unique == nil && hmq.path != nil {
		hmq.Unique(true)
	}
	ctx = setContextOp(ctx, hmq.ctx, "IDs")
	if err = hmq.Select(hpmember.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (hmq *HPMemberQuery) IDsX(ctx context.Context) []int {
	ids, err := hmq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (hmq *HPMemberQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, hmq.ctx, "Count")
	if err := hmq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, hmq, querierCount[*HPMemberQuery](), hmq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (hmq *HPMemberQuery) CountX(ctx context.Context) int {
	count, err := hmq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (hmq *HPMemberQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, hmq.ctx, "Exist")
	switch _, err := hmq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (hmq *HPMemberQuery) ExistX(ctx context.Context) bool {
	exist, err := hmq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the HPMemberQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (hmq *HPMemberQuery) Clone() *HPMemberQuery {
	if hmq == nil {
		return nil
	}
	return &HPMemberQuery{
		config:                     hmq.config,
		ctx:                        hmq.ctx.Clone(),
		order:                      append([]hpmember.Order{}, hmq.order...),
		inters:                     append([]Interceptor{}, hmq.inters...),
		predicates:                 append([]predicate.HPMember{}, hmq.predicates...),
		withAssets:                 hmq.withAssets.Clone(),
		withArtist:                 hmq.withArtist.Clone(),
		withOwningFeed:             hmq.withOwningFeed.Clone(),
		withTaggedFeed:             hmq.withTaggedFeed.Clone(),
		withOwningIgPosts:          hmq.withOwningIgPosts.Clone(),
		withTaggedIgPosts:          hmq.withTaggedIgPosts.Clone(),
		withOwningAmebloPosts:      hmq.withOwningAmebloPosts.Clone(),
		withTaggedAmebloPosts:      hmq.withTaggedAmebloPosts.Clone(),
		withTaggedElineupMallItems: hmq.withTaggedElineupMallItems.Clone(),
		withFollowedBy:             hmq.withFollowedBy.Clone(),
		// clone intermediate query.
		sql:  hmq.sql.Clone(),
		path: hmq.path,
	}
}

// WithAssets tells the query-builder to eager-load the nodes that are connected to
// the "assets" edge. The optional arguments are used to configure the query builder of the edge.
func (hmq *HPMemberQuery) WithAssets(opts ...func(*HPAssetQuery)) *HPMemberQuery {
	query := (&HPAssetClient{config: hmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hmq.withAssets = query
	return hmq
}

// WithArtist tells the query-builder to eager-load the nodes that are connected to
// the "artist" edge. The optional arguments are used to configure the query builder of the edge.
func (hmq *HPMemberQuery) WithArtist(opts ...func(*HPArtistQuery)) *HPMemberQuery {
	query := (&HPArtistClient{config: hmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hmq.withArtist = query
	return hmq
}

// WithOwningFeed tells the query-builder to eager-load the nodes that are connected to
// the "owning_feed" edge. The optional arguments are used to configure the query builder of the edge.
func (hmq *HPMemberQuery) WithOwningFeed(opts ...func(*HPFeedItemQuery)) *HPMemberQuery {
	query := (&HPFeedItemClient{config: hmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hmq.withOwningFeed = query
	return hmq
}

// WithTaggedFeed tells the query-builder to eager-load the nodes that are connected to
// the "tagged_feed" edge. The optional arguments are used to configure the query builder of the edge.
func (hmq *HPMemberQuery) WithTaggedFeed(opts ...func(*HPFeedItemQuery)) *HPMemberQuery {
	query := (&HPFeedItemClient{config: hmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hmq.withTaggedFeed = query
	return hmq
}

// WithOwningIgPosts tells the query-builder to eager-load the nodes that are connected to
// the "owning_ig_posts" edge. The optional arguments are used to configure the query builder of the edge.
func (hmq *HPMemberQuery) WithOwningIgPosts(opts ...func(*HPIgPostQuery)) *HPMemberQuery {
	query := (&HPIgPostClient{config: hmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hmq.withOwningIgPosts = query
	return hmq
}

// WithTaggedIgPosts tells the query-builder to eager-load the nodes that are connected to
// the "tagged_ig_posts" edge. The optional arguments are used to configure the query builder of the edge.
func (hmq *HPMemberQuery) WithTaggedIgPosts(opts ...func(*HPIgPostQuery)) *HPMemberQuery {
	query := (&HPIgPostClient{config: hmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hmq.withTaggedIgPosts = query
	return hmq
}

// WithOwningAmebloPosts tells the query-builder to eager-load the nodes that are connected to
// the "owning_ameblo_posts" edge. The optional arguments are used to configure the query builder of the edge.
func (hmq *HPMemberQuery) WithOwningAmebloPosts(opts ...func(*HPAmebloPostQuery)) *HPMemberQuery {
	query := (&HPAmebloPostClient{config: hmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hmq.withOwningAmebloPosts = query
	return hmq
}

// WithTaggedAmebloPosts tells the query-builder to eager-load the nodes that are connected to
// the "tagged_ameblo_posts" edge. The optional arguments are used to configure the query builder of the edge.
func (hmq *HPMemberQuery) WithTaggedAmebloPosts(opts ...func(*HPAmebloPostQuery)) *HPMemberQuery {
	query := (&HPAmebloPostClient{config: hmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hmq.withTaggedAmebloPosts = query
	return hmq
}

// WithTaggedElineupMallItems tells the query-builder to eager-load the nodes that are connected to
// the "tagged_elineup_mall_items" edge. The optional arguments are used to configure the query builder of the edge.
func (hmq *HPMemberQuery) WithTaggedElineupMallItems(opts ...func(*HPElineupMallItemQuery)) *HPMemberQuery {
	query := (&HPElineupMallItemClient{config: hmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hmq.withTaggedElineupMallItems = query
	return hmq
}

// WithFollowedBy tells the query-builder to eager-load the nodes that are connected to
// the "followed_by" edge. The optional arguments are used to configure the query builder of the edge.
func (hmq *HPMemberQuery) WithFollowedBy(opts ...func(*HPFollowQuery)) *HPMemberQuery {
	query := (&HPFollowClient{config: hmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hmq.withFollowedBy = query
	return hmq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CrawledAt time.Time `json:"crawled_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.HPMember.Query().
//		GroupBy(hpmember.FieldCrawledAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (hmq *HPMemberQuery) GroupBy(field string, fields ...string) *HPMemberGroupBy {
	hmq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &HPMemberGroupBy{build: hmq}
	grbuild.flds = &hmq.ctx.Fields
	grbuild.label = hpmember.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CrawledAt time.Time `json:"crawled_at,omitempty"`
//	}
//
//	client.HPMember.Query().
//		Select(hpmember.FieldCrawledAt).
//		Scan(ctx, &v)
func (hmq *HPMemberQuery) Select(fields ...string) *HPMemberSelect {
	hmq.ctx.Fields = append(hmq.ctx.Fields, fields...)
	sbuild := &HPMemberSelect{HPMemberQuery: hmq}
	sbuild.label = hpmember.Label
	sbuild.flds, sbuild.scan = &hmq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a HPMemberSelect configured with the given aggregations.
func (hmq *HPMemberQuery) Aggregate(fns ...AggregateFunc) *HPMemberSelect {
	return hmq.Select().Aggregate(fns...)
}

func (hmq *HPMemberQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range hmq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, hmq); err != nil {
				return err
			}
		}
	}
	for _, f := range hmq.ctx.Fields {
		if !hpmember.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if hmq.path != nil {
		prev, err := hmq.path(ctx)
		if err != nil {
			return err
		}
		hmq.sql = prev
	}
	if hpmember.Policy == nil {
		return errors.New("ent: uninitialized hpmember.Policy (forgotten import ent/runtime?)")
	}
	if err := hpmember.Policy.EvalQuery(ctx, hmq); err != nil {
		return err
	}
	return nil
}

func (hmq *HPMemberQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*HPMember, error) {
	var (
		nodes       = []*HPMember{}
		withFKs     = hmq.withFKs
		_spec       = hmq.querySpec()
		loadedTypes = [10]bool{
			hmq.withAssets != nil,
			hmq.withArtist != nil,
			hmq.withOwningFeed != nil,
			hmq.withTaggedFeed != nil,
			hmq.withOwningIgPosts != nil,
			hmq.withTaggedIgPosts != nil,
			hmq.withOwningAmebloPosts != nil,
			hmq.withTaggedAmebloPosts != nil,
			hmq.withTaggedElineupMallItems != nil,
			hmq.withFollowedBy != nil,
		}
	)
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, hpmember.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*HPMember).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &HPMember{config: hmq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(hmq.modifiers) > 0 {
		_spec.Modifiers = hmq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, hmq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := hmq.withAssets; query != nil {
		if err := hmq.loadAssets(ctx, query, nodes,
			func(n *HPMember) { n.Edges.Assets = []*HPAsset{} },
			func(n *HPMember, e *HPAsset) { n.Edges.Assets = append(n.Edges.Assets, e) }); err != nil {
			return nil, err
		}
	}
	if query := hmq.withArtist; query != nil {
		if err := hmq.loadArtist(ctx, query, nodes, nil,
			func(n *HPMember, e *HPArtist) { n.Edges.Artist = e }); err != nil {
			return nil, err
		}
	}
	if query := hmq.withOwningFeed; query != nil {
		if err := hmq.loadOwningFeed(ctx, query, nodes,
			func(n *HPMember) { n.Edges.OwningFeed = []*HPFeedItem{} },
			func(n *HPMember, e *HPFeedItem) { n.Edges.OwningFeed = append(n.Edges.OwningFeed, e) }); err != nil {
			return nil, err
		}
	}
	if query := hmq.withTaggedFeed; query != nil {
		if err := hmq.loadTaggedFeed(ctx, query, nodes,
			func(n *HPMember) { n.Edges.TaggedFeed = []*HPFeedItem{} },
			func(n *HPMember, e *HPFeedItem) { n.Edges.TaggedFeed = append(n.Edges.TaggedFeed, e) }); err != nil {
			return nil, err
		}
	}
	if query := hmq.withOwningIgPosts; query != nil {
		if err := hmq.loadOwningIgPosts(ctx, query, nodes,
			func(n *HPMember) { n.Edges.OwningIgPosts = []*HPIgPost{} },
			func(n *HPMember, e *HPIgPost) { n.Edges.OwningIgPosts = append(n.Edges.OwningIgPosts, e) }); err != nil {
			return nil, err
		}
	}
	if query := hmq.withTaggedIgPosts; query != nil {
		if err := hmq.loadTaggedIgPosts(ctx, query, nodes,
			func(n *HPMember) { n.Edges.TaggedIgPosts = []*HPIgPost{} },
			func(n *HPMember, e *HPIgPost) { n.Edges.TaggedIgPosts = append(n.Edges.TaggedIgPosts, e) }); err != nil {
			return nil, err
		}
	}
	if query := hmq.withOwningAmebloPosts; query != nil {
		if err := hmq.loadOwningAmebloPosts(ctx, query, nodes,
			func(n *HPMember) { n.Edges.OwningAmebloPosts = []*HPAmebloPost{} },
			func(n *HPMember, e *HPAmebloPost) { n.Edges.OwningAmebloPosts = append(n.Edges.OwningAmebloPosts, e) }); err != nil {
			return nil, err
		}
	}
	if query := hmq.withTaggedAmebloPosts; query != nil {
		if err := hmq.loadTaggedAmebloPosts(ctx, query, nodes,
			func(n *HPMember) { n.Edges.TaggedAmebloPosts = []*HPAmebloPost{} },
			func(n *HPMember, e *HPAmebloPost) { n.Edges.TaggedAmebloPosts = append(n.Edges.TaggedAmebloPosts, e) }); err != nil {
			return nil, err
		}
	}
	if query := hmq.withTaggedElineupMallItems; query != nil {
		if err := hmq.loadTaggedElineupMallItems(ctx, query, nodes,
			func(n *HPMember) { n.Edges.TaggedElineupMallItems = []*HPElineupMallItem{} },
			func(n *HPMember, e *HPElineupMallItem) {
				n.Edges.TaggedElineupMallItems = append(n.Edges.TaggedElineupMallItems, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := hmq.withFollowedBy; query != nil {
		if err := hmq.loadFollowedBy(ctx, query, nodes,
			func(n *HPMember) { n.Edges.FollowedBy = []*HPFollow{} },
			func(n *HPMember, e *HPFollow) { n.Edges.FollowedBy = append(n.Edges.FollowedBy, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range hmq.withNamedAssets {
		if err := hmq.loadAssets(ctx, query, nodes,
			func(n *HPMember) { n.appendNamedAssets(name) },
			func(n *HPMember, e *HPAsset) { n.appendNamedAssets(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range hmq.withNamedOwningFeed {
		if err := hmq.loadOwningFeed(ctx, query, nodes,
			func(n *HPMember) { n.appendNamedOwningFeed(name) },
			func(n *HPMember, e *HPFeedItem) { n.appendNamedOwningFeed(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range hmq.withNamedTaggedFeed {
		if err := hmq.loadTaggedFeed(ctx, query, nodes,
			func(n *HPMember) { n.appendNamedTaggedFeed(name) },
			func(n *HPMember, e *HPFeedItem) { n.appendNamedTaggedFeed(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range hmq.withNamedOwningIgPosts {
		if err := hmq.loadOwningIgPosts(ctx, query, nodes,
			func(n *HPMember) { n.appendNamedOwningIgPosts(name) },
			func(n *HPMember, e *HPIgPost) { n.appendNamedOwningIgPosts(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range hmq.withNamedTaggedIgPosts {
		if err := hmq.loadTaggedIgPosts(ctx, query, nodes,
			func(n *HPMember) { n.appendNamedTaggedIgPosts(name) },
			func(n *HPMember, e *HPIgPost) { n.appendNamedTaggedIgPosts(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range hmq.withNamedOwningAmebloPosts {
		if err := hmq.loadOwningAmebloPosts(ctx, query, nodes,
			func(n *HPMember) { n.appendNamedOwningAmebloPosts(name) },
			func(n *HPMember, e *HPAmebloPost) { n.appendNamedOwningAmebloPosts(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range hmq.withNamedTaggedAmebloPosts {
		if err := hmq.loadTaggedAmebloPosts(ctx, query, nodes,
			func(n *HPMember) { n.appendNamedTaggedAmebloPosts(name) },
			func(n *HPMember, e *HPAmebloPost) { n.appendNamedTaggedAmebloPosts(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range hmq.withNamedTaggedElineupMallItems {
		if err := hmq.loadTaggedElineupMallItems(ctx, query, nodes,
			func(n *HPMember) { n.appendNamedTaggedElineupMallItems(name) },
			func(n *HPMember, e *HPElineupMallItem) { n.appendNamedTaggedElineupMallItems(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range hmq.withNamedFollowedBy {
		if err := hmq.loadFollowedBy(ctx, query, nodes,
			func(n *HPMember) { n.appendNamedFollowedBy(name) },
			func(n *HPMember, e *HPFollow) { n.appendNamedFollowedBy(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range hmq.loadTotal {
		if err := hmq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (hmq *HPMemberQuery) loadAssets(ctx context.Context, query *HPAssetQuery, nodes []*HPMember, init func(*HPMember), assign func(*HPMember, *HPAsset)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*HPMember)
	nids := make(map[int]map[*HPMember]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(hpmember.AssetsTable)
		s.Join(joinT).On(s.C(hpasset.FieldID), joinT.C(hpmember.AssetsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(hpmember.AssetsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(hpmember.AssetsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*HPMember]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*HPAsset](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "assets" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (hmq *HPMemberQuery) loadArtist(ctx context.Context, query *HPArtistQuery, nodes []*HPMember, init func(*HPMember), assign func(*HPMember, *HPArtist)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*HPMember)
	for i := range nodes {
		if nodes[i].ArtistID == nil {
			continue
		}
		fk := *nodes[i].ArtistID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(hpartist.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "artist_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (hmq *HPMemberQuery) loadOwningFeed(ctx context.Context, query *HPFeedItemQuery, nodes []*HPMember, init func(*HPMember), assign func(*HPMember, *HPFeedItem)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*HPMember)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.HPFeedItem(func(s *sql.Selector) {
		s.Where(sql.InValues(hpmember.OwningFeedColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerMemberID
		if fk == nil {
			return fmt.Errorf(`foreign-key "owner_member_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "owner_member_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (hmq *HPMemberQuery) loadTaggedFeed(ctx context.Context, query *HPFeedItemQuery, nodes []*HPMember, init func(*HPMember), assign func(*HPMember, *HPFeedItem)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*HPMember)
	nids := make(map[int]map[*HPMember]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(hpmember.TaggedFeedTable)
		s.Join(joinT).On(s.C(hpfeeditem.FieldID), joinT.C(hpmember.TaggedFeedPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(hpmember.TaggedFeedPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(hpmember.TaggedFeedPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*HPMember]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*HPFeedItem](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "tagged_feed" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (hmq *HPMemberQuery) loadOwningIgPosts(ctx context.Context, query *HPIgPostQuery, nodes []*HPMember, init func(*HPMember), assign func(*HPMember, *HPIgPost)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*HPMember)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.HPIgPost(func(s *sql.Selector) {
		s.Where(sql.InValues(hpmember.OwningIgPostsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerMemberID
		if fk == nil {
			return fmt.Errorf(`foreign-key "owner_member_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "owner_member_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (hmq *HPMemberQuery) loadTaggedIgPosts(ctx context.Context, query *HPIgPostQuery, nodes []*HPMember, init func(*HPMember), assign func(*HPMember, *HPIgPost)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*HPMember)
	nids := make(map[int]map[*HPMember]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(hpmember.TaggedIgPostsTable)
		s.Join(joinT).On(s.C(hpigpost.FieldID), joinT.C(hpmember.TaggedIgPostsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(hpmember.TaggedIgPostsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(hpmember.TaggedIgPostsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*HPMember]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*HPIgPost](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "tagged_ig_posts" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (hmq *HPMemberQuery) loadOwningAmebloPosts(ctx context.Context, query *HPAmebloPostQuery, nodes []*HPMember, init func(*HPMember), assign func(*HPMember, *HPAmebloPost)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*HPMember)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.HPAmebloPost(func(s *sql.Selector) {
		s.Where(sql.InValues(hpmember.OwningAmebloPostsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerMemberID
		if fk == nil {
			return fmt.Errorf(`foreign-key "owner_member_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "owner_member_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (hmq *HPMemberQuery) loadTaggedAmebloPosts(ctx context.Context, query *HPAmebloPostQuery, nodes []*HPMember, init func(*HPMember), assign func(*HPMember, *HPAmebloPost)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*HPMember)
	nids := make(map[int]map[*HPMember]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(hpmember.TaggedAmebloPostsTable)
		s.Join(joinT).On(s.C(hpameblopost.FieldID), joinT.C(hpmember.TaggedAmebloPostsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(hpmember.TaggedAmebloPostsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(hpmember.TaggedAmebloPostsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*HPMember]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*HPAmebloPost](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "tagged_ameblo_posts" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (hmq *HPMemberQuery) loadTaggedElineupMallItems(ctx context.Context, query *HPElineupMallItemQuery, nodes []*HPMember, init func(*HPMember), assign func(*HPMember, *HPElineupMallItem)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*HPMember)
	nids := make(map[int]map[*HPMember]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(hpmember.TaggedElineupMallItemsTable)
		s.Join(joinT).On(s.C(hpelineupmallitem.FieldID), joinT.C(hpmember.TaggedElineupMallItemsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(hpmember.TaggedElineupMallItemsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(hpmember.TaggedElineupMallItemsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*HPMember]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*HPElineupMallItem](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "tagged_elineup_mall_items" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (hmq *HPMemberQuery) loadFollowedBy(ctx context.Context, query *HPFollowQuery, nodes []*HPMember, init func(*HPMember), assign func(*HPMember, *HPFollow)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*HPMember)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.HPFollow(func(s *sql.Selector) {
		s.Where(sql.InValues(hpmember.FollowedByColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.hp_follow_member
		if fk == nil {
			return fmt.Errorf(`foreign-key "hp_follow_member" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "hp_follow_member" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (hmq *HPMemberQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := hmq.querySpec()
	if len(hmq.modifiers) > 0 {
		_spec.Modifiers = hmq.modifiers
	}
	_spec.Node.Columns = hmq.ctx.Fields
	if len(hmq.ctx.Fields) > 0 {
		_spec.Unique = hmq.ctx.Unique != nil && *hmq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, hmq.driver, _spec)
}

func (hmq *HPMemberQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(hpmember.Table, hpmember.Columns, sqlgraph.NewFieldSpec(hpmember.FieldID, field.TypeInt))
	_spec.From = hmq.sql
	if unique := hmq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if hmq.path != nil {
		_spec.Unique = true
	}
	if fields := hmq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hpmember.FieldID)
		for i := range fields {
			if fields[i] != hpmember.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if hmq.withArtist != nil {
			_spec.Node.AddColumnOnce(hpmember.FieldArtistID)
		}
	}
	if ps := hmq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := hmq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := hmq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := hmq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (hmq *HPMemberQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(hmq.driver.Dialect())
	t1 := builder.Table(hpmember.Table)
	columns := hmq.ctx.Fields
	if len(columns) == 0 {
		columns = hpmember.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if hmq.sql != nil {
		selector = hmq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if hmq.ctx.Unique != nil && *hmq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range hmq.predicates {
		p(selector)
	}
	for _, p := range hmq.order {
		p(selector)
	}
	if offset := hmq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := hmq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedAssets tells the query-builder to eager-load the nodes that are connected to the "assets"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (hmq *HPMemberQuery) WithNamedAssets(name string, opts ...func(*HPAssetQuery)) *HPMemberQuery {
	query := (&HPAssetClient{config: hmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if hmq.withNamedAssets == nil {
		hmq.withNamedAssets = make(map[string]*HPAssetQuery)
	}
	hmq.withNamedAssets[name] = query
	return hmq
}

// WithNamedOwningFeed tells the query-builder to eager-load the nodes that are connected to the "owning_feed"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (hmq *HPMemberQuery) WithNamedOwningFeed(name string, opts ...func(*HPFeedItemQuery)) *HPMemberQuery {
	query := (&HPFeedItemClient{config: hmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if hmq.withNamedOwningFeed == nil {
		hmq.withNamedOwningFeed = make(map[string]*HPFeedItemQuery)
	}
	hmq.withNamedOwningFeed[name] = query
	return hmq
}

// WithNamedTaggedFeed tells the query-builder to eager-load the nodes that are connected to the "tagged_feed"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (hmq *HPMemberQuery) WithNamedTaggedFeed(name string, opts ...func(*HPFeedItemQuery)) *HPMemberQuery {
	query := (&HPFeedItemClient{config: hmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if hmq.withNamedTaggedFeed == nil {
		hmq.withNamedTaggedFeed = make(map[string]*HPFeedItemQuery)
	}
	hmq.withNamedTaggedFeed[name] = query
	return hmq
}

// WithNamedOwningIgPosts tells the query-builder to eager-load the nodes that are connected to the "owning_ig_posts"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (hmq *HPMemberQuery) WithNamedOwningIgPosts(name string, opts ...func(*HPIgPostQuery)) *HPMemberQuery {
	query := (&HPIgPostClient{config: hmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if hmq.withNamedOwningIgPosts == nil {
		hmq.withNamedOwningIgPosts = make(map[string]*HPIgPostQuery)
	}
	hmq.withNamedOwningIgPosts[name] = query
	return hmq
}

// WithNamedTaggedIgPosts tells the query-builder to eager-load the nodes that are connected to the "tagged_ig_posts"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (hmq *HPMemberQuery) WithNamedTaggedIgPosts(name string, opts ...func(*HPIgPostQuery)) *HPMemberQuery {
	query := (&HPIgPostClient{config: hmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if hmq.withNamedTaggedIgPosts == nil {
		hmq.withNamedTaggedIgPosts = make(map[string]*HPIgPostQuery)
	}
	hmq.withNamedTaggedIgPosts[name] = query
	return hmq
}

// WithNamedOwningAmebloPosts tells the query-builder to eager-load the nodes that are connected to the "owning_ameblo_posts"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (hmq *HPMemberQuery) WithNamedOwningAmebloPosts(name string, opts ...func(*HPAmebloPostQuery)) *HPMemberQuery {
	query := (&HPAmebloPostClient{config: hmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if hmq.withNamedOwningAmebloPosts == nil {
		hmq.withNamedOwningAmebloPosts = make(map[string]*HPAmebloPostQuery)
	}
	hmq.withNamedOwningAmebloPosts[name] = query
	return hmq
}

// WithNamedTaggedAmebloPosts tells the query-builder to eager-load the nodes that are connected to the "tagged_ameblo_posts"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (hmq *HPMemberQuery) WithNamedTaggedAmebloPosts(name string, opts ...func(*HPAmebloPostQuery)) *HPMemberQuery {
	query := (&HPAmebloPostClient{config: hmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if hmq.withNamedTaggedAmebloPosts == nil {
		hmq.withNamedTaggedAmebloPosts = make(map[string]*HPAmebloPostQuery)
	}
	hmq.withNamedTaggedAmebloPosts[name] = query
	return hmq
}

// WithNamedTaggedElineupMallItems tells the query-builder to eager-load the nodes that are connected to the "tagged_elineup_mall_items"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (hmq *HPMemberQuery) WithNamedTaggedElineupMallItems(name string, opts ...func(*HPElineupMallItemQuery)) *HPMemberQuery {
	query := (&HPElineupMallItemClient{config: hmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if hmq.withNamedTaggedElineupMallItems == nil {
		hmq.withNamedTaggedElineupMallItems = make(map[string]*HPElineupMallItemQuery)
	}
	hmq.withNamedTaggedElineupMallItems[name] = query
	return hmq
}

// WithNamedFollowedBy tells the query-builder to eager-load the nodes that are connected to the "followed_by"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (hmq *HPMemberQuery) WithNamedFollowedBy(name string, opts ...func(*HPFollowQuery)) *HPMemberQuery {
	query := (&HPFollowClient{config: hmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if hmq.withNamedFollowedBy == nil {
		hmq.withNamedFollowedBy = make(map[string]*HPFollowQuery)
	}
	hmq.withNamedFollowedBy[name] = query
	return hmq
}

// HPMemberGroupBy is the group-by builder for HPMember entities.
type HPMemberGroupBy struct {
	selector
	build *HPMemberQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (hmgb *HPMemberGroupBy) Aggregate(fns ...AggregateFunc) *HPMemberGroupBy {
	hmgb.fns = append(hmgb.fns, fns...)
	return hmgb
}

// Scan applies the selector query and scans the result into the given value.
func (hmgb *HPMemberGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, hmgb.build.ctx, "GroupBy")
	if err := hmgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*HPMemberQuery, *HPMemberGroupBy](ctx, hmgb.build, hmgb, hmgb.build.inters, v)
}

func (hmgb *HPMemberGroupBy) sqlScan(ctx context.Context, root *HPMemberQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(hmgb.fns))
	for _, fn := range hmgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*hmgb.flds)+len(hmgb.fns))
		for _, f := range *hmgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*hmgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := hmgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// HPMemberSelect is the builder for selecting fields of HPMember entities.
type HPMemberSelect struct {
	*HPMemberQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (hms *HPMemberSelect) Aggregate(fns ...AggregateFunc) *HPMemberSelect {
	hms.fns = append(hms.fns, fns...)
	return hms
}

// Scan applies the selector query and scans the result into the given value.
func (hms *HPMemberSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, hms.ctx, "Select")
	if err := hms.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*HPMemberQuery, *HPMemberSelect](ctx, hms.HPMemberQuery, hms, hms.inters, v)
}

func (hms *HPMemberSelect) sqlScan(ctx context.Context, root *HPMemberQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(hms.fns))
	for _, fn := range hms.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*hms.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := hms.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
