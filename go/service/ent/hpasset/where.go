// Code generated by ent, DO NOT EDIT.

package hpasset

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/yssk22/hpapp/go/service/ent/predicate"
	"github.com/yssk22/hpapp/go/service/schema/enums"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.HPAsset {
	return predicate.HPAsset(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.HPAsset {
	return predicate.HPAsset(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.HPAsset {
	return predicate.HPAsset(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.HPAsset {
	return predicate.HPAsset(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.HPAsset {
	return predicate.HPAsset(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.HPAsset {
	return predicate.HPAsset(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.HPAsset {
	return predicate.HPAsset(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.HPAsset {
	return predicate.HPAsset(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.HPAsset {
	return predicate.HPAsset(sql.FieldLTE(FieldID, id))
}

// Key applies equality check predicate on the "key" field. It's identical to KeyEQ.
func Key(v string) predicate.HPAsset {
	return predicate.HPAsset(sql.FieldEQ(FieldKey, v))
}

// KeyEQ applies the EQ predicate on the "key" field.
func KeyEQ(v string) predicate.HPAsset {
	return predicate.HPAsset(sql.FieldEQ(FieldKey, v))
}

// KeyNEQ applies the NEQ predicate on the "key" field.
func KeyNEQ(v string) predicate.HPAsset {
	return predicate.HPAsset(sql.FieldNEQ(FieldKey, v))
}

// KeyIn applies the In predicate on the "key" field.
func KeyIn(vs ...string) predicate.HPAsset {
	return predicate.HPAsset(sql.FieldIn(FieldKey, vs...))
}

// KeyNotIn applies the NotIn predicate on the "key" field.
func KeyNotIn(vs ...string) predicate.HPAsset {
	return predicate.HPAsset(sql.FieldNotIn(FieldKey, vs...))
}

// KeyGT applies the GT predicate on the "key" field.
func KeyGT(v string) predicate.HPAsset {
	return predicate.HPAsset(sql.FieldGT(FieldKey, v))
}

// KeyGTE applies the GTE predicate on the "key" field.
func KeyGTE(v string) predicate.HPAsset {
	return predicate.HPAsset(sql.FieldGTE(FieldKey, v))
}

// KeyLT applies the LT predicate on the "key" field.
func KeyLT(v string) predicate.HPAsset {
	return predicate.HPAsset(sql.FieldLT(FieldKey, v))
}

// KeyLTE applies the LTE predicate on the "key" field.
func KeyLTE(v string) predicate.HPAsset {
	return predicate.HPAsset(sql.FieldLTE(FieldKey, v))
}

// KeyContains applies the Contains predicate on the "key" field.
func KeyContains(v string) predicate.HPAsset {
	return predicate.HPAsset(sql.FieldContains(FieldKey, v))
}

// KeyHasPrefix applies the HasPrefix predicate on the "key" field.
func KeyHasPrefix(v string) predicate.HPAsset {
	return predicate.HPAsset(sql.FieldHasPrefix(FieldKey, v))
}

// KeyHasSuffix applies the HasSuffix predicate on the "key" field.
func KeyHasSuffix(v string) predicate.HPAsset {
	return predicate.HPAsset(sql.FieldHasSuffix(FieldKey, v))
}

// KeyEqualFold applies the EqualFold predicate on the "key" field.
func KeyEqualFold(v string) predicate.HPAsset {
	return predicate.HPAsset(sql.FieldEqualFold(FieldKey, v))
}

// KeyContainsFold applies the ContainsFold predicate on the "key" field.
func KeyContainsFold(v string) predicate.HPAsset {
	return predicate.HPAsset(sql.FieldContainsFold(FieldKey, v))
}

// AssetTypeEQ applies the EQ predicate on the "asset_type" field.
func AssetTypeEQ(v enums.HPAssetType) predicate.HPAsset {
	vc := v
	return predicate.HPAsset(sql.FieldEQ(FieldAssetType, vc))
}

// AssetTypeNEQ applies the NEQ predicate on the "asset_type" field.
func AssetTypeNEQ(v enums.HPAssetType) predicate.HPAsset {
	vc := v
	return predicate.HPAsset(sql.FieldNEQ(FieldAssetType, vc))
}

// AssetTypeIn applies the In predicate on the "asset_type" field.
func AssetTypeIn(vs ...enums.HPAssetType) predicate.HPAsset {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HPAsset(sql.FieldIn(FieldAssetType, v...))
}

// AssetTypeNotIn applies the NotIn predicate on the "asset_type" field.
func AssetTypeNotIn(vs ...enums.HPAssetType) predicate.HPAsset {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HPAsset(sql.FieldNotIn(FieldAssetType, v...))
}

// HasArtist applies the HasEdge predicate on the "artist" edge.
func HasArtist() predicate.HPAsset {
	return predicate.HPAsset(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ArtistTable, ArtistColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasArtistWith applies the HasEdge predicate on the "artist" edge with a given conditions (other predicates).
func HasArtistWith(preds ...predicate.HPArtist) predicate.HPAsset {
	return predicate.HPAsset(func(s *sql.Selector) {
		step := newArtistStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMembers applies the HasEdge predicate on the "members" edge.
func HasMembers() predicate.HPAsset {
	return predicate.HPAsset(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, MembersTable, MembersPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMembersWith applies the HasEdge predicate on the "members" edge with a given conditions (other predicates).
func HasMembersWith(preds ...predicate.HPMember) predicate.HPAsset {
	return predicate.HPAsset(func(s *sql.Selector) {
		step := newMembersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAmebloPosts applies the HasEdge predicate on the "ameblo_posts" edge.
func HasAmebloPosts() predicate.HPAsset {
	return predicate.HPAsset(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AmebloPostsTable, AmebloPostsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAmebloPostsWith applies the HasEdge predicate on the "ameblo_posts" edge with a given conditions (other predicates).
func HasAmebloPostsWith(preds ...predicate.HPAmebloPost) predicate.HPAsset {
	return predicate.HPAsset(func(s *sql.Selector) {
		step := newAmebloPostsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasIgPosts applies the HasEdge predicate on the "ig_posts" edge.
func HasIgPosts() predicate.HPAsset {
	return predicate.HPAsset(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, IgPostsTable, IgPostsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIgPostsWith applies the HasEdge predicate on the "ig_posts" edge with a given conditions (other predicates).
func HasIgPostsWith(preds ...predicate.HPIgPost) predicate.HPAsset {
	return predicate.HPAsset(func(s *sql.Selector) {
		step := newIgPostsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.HPAsset) predicate.HPAsset {
	return predicate.HPAsset(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.HPAsset) predicate.HPAsset {
	return predicate.HPAsset(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.HPAsset) predicate.HPAsset {
	return predicate.HPAsset(func(s *sql.Selector) {
		p(s.Not())
	})
}
