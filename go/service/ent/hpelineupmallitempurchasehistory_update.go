// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yssk22/hpapp/go/service/ent/hpelineupmallitem"
	"github.com/yssk22/hpapp/go/service/ent/hpelineupmallitempurchasehistory"
	"github.com/yssk22/hpapp/go/service/ent/predicate"
	"github.com/yssk22/hpapp/go/service/ent/user"
)

// HPElineupMallItemPurchaseHistoryUpdate is the builder for updating HPElineupMallItemPurchaseHistory entities.
type HPElineupMallItemPurchaseHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *HPElineupMallItemPurchaseHistoryMutation
}

// Where appends a list predicates to the HPElineupMallItemPurchaseHistoryUpdate builder.
func (hemiphu *HPElineupMallItemPurchaseHistoryUpdate) Where(ps ...predicate.HPElineupMallItemPurchaseHistory) *HPElineupMallItemPurchaseHistoryUpdate {
	hemiphu.mutation.Where(ps...)
	return hemiphu
}

// SetUpdatedAt sets the "updated_at" field.
func (hemiphu *HPElineupMallItemPurchaseHistoryUpdate) SetUpdatedAt(t time.Time) *HPElineupMallItemPurchaseHistoryUpdate {
	hemiphu.mutation.SetUpdatedAt(t)
	return hemiphu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (hemiphu *HPElineupMallItemPurchaseHistoryUpdate) SetNillableUpdatedAt(t *time.Time) *HPElineupMallItemPurchaseHistoryUpdate {
	if t != nil {
		hemiphu.SetUpdatedAt(*t)
	}
	return hemiphu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (hemiphu *HPElineupMallItemPurchaseHistoryUpdate) ClearUpdatedAt() *HPElineupMallItemPurchaseHistoryUpdate {
	hemiphu.mutation.ClearUpdatedAt()
	return hemiphu
}

// SetOrderID sets the "order_id" field.
func (hemiphu *HPElineupMallItemPurchaseHistoryUpdate) SetOrderID(s string) *HPElineupMallItemPurchaseHistoryUpdate {
	hemiphu.mutation.SetOrderID(s)
	return hemiphu
}

// SetNum sets the "num" field.
func (hemiphu *HPElineupMallItemPurchaseHistoryUpdate) SetNum(i int) *HPElineupMallItemPurchaseHistoryUpdate {
	hemiphu.mutation.ResetNum()
	hemiphu.mutation.SetNum(i)
	return hemiphu
}

// AddNum adds i to the "num" field.
func (hemiphu *HPElineupMallItemPurchaseHistoryUpdate) AddNum(i int) *HPElineupMallItemPurchaseHistoryUpdate {
	hemiphu.mutation.AddNum(i)
	return hemiphu
}

// SetPrice sets the "price" field.
func (hemiphu *HPElineupMallItemPurchaseHistoryUpdate) SetPrice(i int) *HPElineupMallItemPurchaseHistoryUpdate {
	hemiphu.mutation.ResetPrice()
	hemiphu.mutation.SetPrice(i)
	return hemiphu
}

// AddPrice adds i to the "price" field.
func (hemiphu *HPElineupMallItemPurchaseHistoryUpdate) AddPrice(i int) *HPElineupMallItemPurchaseHistoryUpdate {
	hemiphu.mutation.AddPrice(i)
	return hemiphu
}

// SetOrderedAt sets the "ordered_at" field.
func (hemiphu *HPElineupMallItemPurchaseHistoryUpdate) SetOrderedAt(t time.Time) *HPElineupMallItemPurchaseHistoryUpdate {
	hemiphu.mutation.SetOrderedAt(t)
	return hemiphu
}

// SetPermalink sets the "permalink" field.
func (hemiphu *HPElineupMallItemPurchaseHistoryUpdate) SetPermalink(s string) *HPElineupMallItemPurchaseHistoryUpdate {
	hemiphu.mutation.SetPermalink(s)
	return hemiphu
}

// SetName sets the "name" field.
func (hemiphu *HPElineupMallItemPurchaseHistoryUpdate) SetName(s string) *HPElineupMallItemPurchaseHistoryUpdate {
	hemiphu.mutation.SetName(s)
	return hemiphu
}

// SetPurchasedItemID sets the "purchased_item_id" field.
func (hemiphu *HPElineupMallItemPurchaseHistoryUpdate) SetPurchasedItemID(i int) *HPElineupMallItemPurchaseHistoryUpdate {
	hemiphu.mutation.SetPurchasedItemID(i)
	return hemiphu
}

// SetNillablePurchasedItemID sets the "purchased_item_id" field if the given value is not nil.
func (hemiphu *HPElineupMallItemPurchaseHistoryUpdate) SetNillablePurchasedItemID(i *int) *HPElineupMallItemPurchaseHistoryUpdate {
	if i != nil {
		hemiphu.SetPurchasedItemID(*i)
	}
	return hemiphu
}

// ClearPurchasedItemID clears the value of the "purchased_item_id" field.
func (hemiphu *HPElineupMallItemPurchaseHistoryUpdate) ClearPurchasedItemID() *HPElineupMallItemPurchaseHistoryUpdate {
	hemiphu.mutation.ClearPurchasedItemID()
	return hemiphu
}

// SetOwnerUserID sets the "owner_user_id" field.
func (hemiphu *HPElineupMallItemPurchaseHistoryUpdate) SetOwnerUserID(i int) *HPElineupMallItemPurchaseHistoryUpdate {
	hemiphu.mutation.SetOwnerUserID(i)
	return hemiphu
}

// SetElineupMallItemID sets the "elineup_mall_item" edge to the HPElineupMallItem entity by ID.
func (hemiphu *HPElineupMallItemPurchaseHistoryUpdate) SetElineupMallItemID(id int) *HPElineupMallItemPurchaseHistoryUpdate {
	hemiphu.mutation.SetElineupMallItemID(id)
	return hemiphu
}

// SetNillableElineupMallItemID sets the "elineup_mall_item" edge to the HPElineupMallItem entity by ID if the given value is not nil.
func (hemiphu *HPElineupMallItemPurchaseHistoryUpdate) SetNillableElineupMallItemID(id *int) *HPElineupMallItemPurchaseHistoryUpdate {
	if id != nil {
		hemiphu = hemiphu.SetElineupMallItemID(*id)
	}
	return hemiphu
}

// SetElineupMallItem sets the "elineup_mall_item" edge to the HPElineupMallItem entity.
func (hemiphu *HPElineupMallItemPurchaseHistoryUpdate) SetElineupMallItem(h *HPElineupMallItem) *HPElineupMallItemPurchaseHistoryUpdate {
	return hemiphu.SetElineupMallItemID(h.ID)
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (hemiphu *HPElineupMallItemPurchaseHistoryUpdate) SetOwnerID(id int) *HPElineupMallItemPurchaseHistoryUpdate {
	hemiphu.mutation.SetOwnerID(id)
	return hemiphu
}

// SetOwner sets the "owner" edge to the User entity.
func (hemiphu *HPElineupMallItemPurchaseHistoryUpdate) SetOwner(u *User) *HPElineupMallItemPurchaseHistoryUpdate {
	return hemiphu.SetOwnerID(u.ID)
}

// Mutation returns the HPElineupMallItemPurchaseHistoryMutation object of the builder.
func (hemiphu *HPElineupMallItemPurchaseHistoryUpdate) Mutation() *HPElineupMallItemPurchaseHistoryMutation {
	return hemiphu.mutation
}

// ClearElineupMallItem clears the "elineup_mall_item" edge to the HPElineupMallItem entity.
func (hemiphu *HPElineupMallItemPurchaseHistoryUpdate) ClearElineupMallItem() *HPElineupMallItemPurchaseHistoryUpdate {
	hemiphu.mutation.ClearElineupMallItem()
	return hemiphu
}

// ClearOwner clears the "owner" edge to the User entity.
func (hemiphu *HPElineupMallItemPurchaseHistoryUpdate) ClearOwner() *HPElineupMallItemPurchaseHistoryUpdate {
	hemiphu.mutation.ClearOwner()
	return hemiphu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hemiphu *HPElineupMallItemPurchaseHistoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, HPElineupMallItemPurchaseHistoryMutation](ctx, hemiphu.sqlSave, hemiphu.mutation, hemiphu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hemiphu *HPElineupMallItemPurchaseHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := hemiphu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hemiphu *HPElineupMallItemPurchaseHistoryUpdate) Exec(ctx context.Context) error {
	_, err := hemiphu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hemiphu *HPElineupMallItemPurchaseHistoryUpdate) ExecX(ctx context.Context) {
	if err := hemiphu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hemiphu *HPElineupMallItemPurchaseHistoryUpdate) check() error {
	if _, ok := hemiphu.mutation.OwnerID(); hemiphu.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "HPElineupMallItemPurchaseHistory.owner"`)
	}
	return nil
}

func (hemiphu *HPElineupMallItemPurchaseHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := hemiphu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(hpelineupmallitempurchasehistory.Table, hpelineupmallitempurchasehistory.Columns, sqlgraph.NewFieldSpec(hpelineupmallitempurchasehistory.FieldID, field.TypeInt))
	if ps := hemiphu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if hemiphu.mutation.CreatedAtCleared() {
		_spec.ClearField(hpelineupmallitempurchasehistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := hemiphu.mutation.UpdatedAt(); ok {
		_spec.SetField(hpelineupmallitempurchasehistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if hemiphu.mutation.UpdatedAtCleared() {
		_spec.ClearField(hpelineupmallitempurchasehistory.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := hemiphu.mutation.OrderID(); ok {
		_spec.SetField(hpelineupmallitempurchasehistory.FieldOrderID, field.TypeString, value)
	}
	if value, ok := hemiphu.mutation.Num(); ok {
		_spec.SetField(hpelineupmallitempurchasehistory.FieldNum, field.TypeInt, value)
	}
	if value, ok := hemiphu.mutation.AddedNum(); ok {
		_spec.AddField(hpelineupmallitempurchasehistory.FieldNum, field.TypeInt, value)
	}
	if value, ok := hemiphu.mutation.Price(); ok {
		_spec.SetField(hpelineupmallitempurchasehistory.FieldPrice, field.TypeInt, value)
	}
	if value, ok := hemiphu.mutation.AddedPrice(); ok {
		_spec.AddField(hpelineupmallitempurchasehistory.FieldPrice, field.TypeInt, value)
	}
	if value, ok := hemiphu.mutation.OrderedAt(); ok {
		_spec.SetField(hpelineupmallitempurchasehistory.FieldOrderedAt, field.TypeTime, value)
	}
	if value, ok := hemiphu.mutation.Permalink(); ok {
		_spec.SetField(hpelineupmallitempurchasehistory.FieldPermalink, field.TypeString, value)
	}
	if value, ok := hemiphu.mutation.Name(); ok {
		_spec.SetField(hpelineupmallitempurchasehistory.FieldName, field.TypeString, value)
	}
	if hemiphu.mutation.ElineupMallItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpelineupmallitempurchasehistory.ElineupMallItemTable,
			Columns: []string{hpelineupmallitempurchasehistory.ElineupMallItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpelineupmallitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hemiphu.mutation.ElineupMallItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpelineupmallitempurchasehistory.ElineupMallItemTable,
			Columns: []string{hpelineupmallitempurchasehistory.ElineupMallItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpelineupmallitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hemiphu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpelineupmallitempurchasehistory.OwnerTable,
			Columns: []string{hpelineupmallitempurchasehistory.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hemiphu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpelineupmallitempurchasehistory.OwnerTable,
			Columns: []string{hpelineupmallitempurchasehistory.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hemiphu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hpelineupmallitempurchasehistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	hemiphu.mutation.done = true
	return n, nil
}

// HPElineupMallItemPurchaseHistoryUpdateOne is the builder for updating a single HPElineupMallItemPurchaseHistory entity.
type HPElineupMallItemPurchaseHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HPElineupMallItemPurchaseHistoryMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (hemiphuo *HPElineupMallItemPurchaseHistoryUpdateOne) SetUpdatedAt(t time.Time) *HPElineupMallItemPurchaseHistoryUpdateOne {
	hemiphuo.mutation.SetUpdatedAt(t)
	return hemiphuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (hemiphuo *HPElineupMallItemPurchaseHistoryUpdateOne) SetNillableUpdatedAt(t *time.Time) *HPElineupMallItemPurchaseHistoryUpdateOne {
	if t != nil {
		hemiphuo.SetUpdatedAt(*t)
	}
	return hemiphuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (hemiphuo *HPElineupMallItemPurchaseHistoryUpdateOne) ClearUpdatedAt() *HPElineupMallItemPurchaseHistoryUpdateOne {
	hemiphuo.mutation.ClearUpdatedAt()
	return hemiphuo
}

// SetOrderID sets the "order_id" field.
func (hemiphuo *HPElineupMallItemPurchaseHistoryUpdateOne) SetOrderID(s string) *HPElineupMallItemPurchaseHistoryUpdateOne {
	hemiphuo.mutation.SetOrderID(s)
	return hemiphuo
}

// SetNum sets the "num" field.
func (hemiphuo *HPElineupMallItemPurchaseHistoryUpdateOne) SetNum(i int) *HPElineupMallItemPurchaseHistoryUpdateOne {
	hemiphuo.mutation.ResetNum()
	hemiphuo.mutation.SetNum(i)
	return hemiphuo
}

// AddNum adds i to the "num" field.
func (hemiphuo *HPElineupMallItemPurchaseHistoryUpdateOne) AddNum(i int) *HPElineupMallItemPurchaseHistoryUpdateOne {
	hemiphuo.mutation.AddNum(i)
	return hemiphuo
}

// SetPrice sets the "price" field.
func (hemiphuo *HPElineupMallItemPurchaseHistoryUpdateOne) SetPrice(i int) *HPElineupMallItemPurchaseHistoryUpdateOne {
	hemiphuo.mutation.ResetPrice()
	hemiphuo.mutation.SetPrice(i)
	return hemiphuo
}

// AddPrice adds i to the "price" field.
func (hemiphuo *HPElineupMallItemPurchaseHistoryUpdateOne) AddPrice(i int) *HPElineupMallItemPurchaseHistoryUpdateOne {
	hemiphuo.mutation.AddPrice(i)
	return hemiphuo
}

// SetOrderedAt sets the "ordered_at" field.
func (hemiphuo *HPElineupMallItemPurchaseHistoryUpdateOne) SetOrderedAt(t time.Time) *HPElineupMallItemPurchaseHistoryUpdateOne {
	hemiphuo.mutation.SetOrderedAt(t)
	return hemiphuo
}

// SetPermalink sets the "permalink" field.
func (hemiphuo *HPElineupMallItemPurchaseHistoryUpdateOne) SetPermalink(s string) *HPElineupMallItemPurchaseHistoryUpdateOne {
	hemiphuo.mutation.SetPermalink(s)
	return hemiphuo
}

// SetName sets the "name" field.
func (hemiphuo *HPElineupMallItemPurchaseHistoryUpdateOne) SetName(s string) *HPElineupMallItemPurchaseHistoryUpdateOne {
	hemiphuo.mutation.SetName(s)
	return hemiphuo
}

// SetPurchasedItemID sets the "purchased_item_id" field.
func (hemiphuo *HPElineupMallItemPurchaseHistoryUpdateOne) SetPurchasedItemID(i int) *HPElineupMallItemPurchaseHistoryUpdateOne {
	hemiphuo.mutation.SetPurchasedItemID(i)
	return hemiphuo
}

// SetNillablePurchasedItemID sets the "purchased_item_id" field if the given value is not nil.
func (hemiphuo *HPElineupMallItemPurchaseHistoryUpdateOne) SetNillablePurchasedItemID(i *int) *HPElineupMallItemPurchaseHistoryUpdateOne {
	if i != nil {
		hemiphuo.SetPurchasedItemID(*i)
	}
	return hemiphuo
}

// ClearPurchasedItemID clears the value of the "purchased_item_id" field.
func (hemiphuo *HPElineupMallItemPurchaseHistoryUpdateOne) ClearPurchasedItemID() *HPElineupMallItemPurchaseHistoryUpdateOne {
	hemiphuo.mutation.ClearPurchasedItemID()
	return hemiphuo
}

// SetOwnerUserID sets the "owner_user_id" field.
func (hemiphuo *HPElineupMallItemPurchaseHistoryUpdateOne) SetOwnerUserID(i int) *HPElineupMallItemPurchaseHistoryUpdateOne {
	hemiphuo.mutation.SetOwnerUserID(i)
	return hemiphuo
}

// SetElineupMallItemID sets the "elineup_mall_item" edge to the HPElineupMallItem entity by ID.
func (hemiphuo *HPElineupMallItemPurchaseHistoryUpdateOne) SetElineupMallItemID(id int) *HPElineupMallItemPurchaseHistoryUpdateOne {
	hemiphuo.mutation.SetElineupMallItemID(id)
	return hemiphuo
}

// SetNillableElineupMallItemID sets the "elineup_mall_item" edge to the HPElineupMallItem entity by ID if the given value is not nil.
func (hemiphuo *HPElineupMallItemPurchaseHistoryUpdateOne) SetNillableElineupMallItemID(id *int) *HPElineupMallItemPurchaseHistoryUpdateOne {
	if id != nil {
		hemiphuo = hemiphuo.SetElineupMallItemID(*id)
	}
	return hemiphuo
}

// SetElineupMallItem sets the "elineup_mall_item" edge to the HPElineupMallItem entity.
func (hemiphuo *HPElineupMallItemPurchaseHistoryUpdateOne) SetElineupMallItem(h *HPElineupMallItem) *HPElineupMallItemPurchaseHistoryUpdateOne {
	return hemiphuo.SetElineupMallItemID(h.ID)
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (hemiphuo *HPElineupMallItemPurchaseHistoryUpdateOne) SetOwnerID(id int) *HPElineupMallItemPurchaseHistoryUpdateOne {
	hemiphuo.mutation.SetOwnerID(id)
	return hemiphuo
}

// SetOwner sets the "owner" edge to the User entity.
func (hemiphuo *HPElineupMallItemPurchaseHistoryUpdateOne) SetOwner(u *User) *HPElineupMallItemPurchaseHistoryUpdateOne {
	return hemiphuo.SetOwnerID(u.ID)
}

// Mutation returns the HPElineupMallItemPurchaseHistoryMutation object of the builder.
func (hemiphuo *HPElineupMallItemPurchaseHistoryUpdateOne) Mutation() *HPElineupMallItemPurchaseHistoryMutation {
	return hemiphuo.mutation
}

// ClearElineupMallItem clears the "elineup_mall_item" edge to the HPElineupMallItem entity.
func (hemiphuo *HPElineupMallItemPurchaseHistoryUpdateOne) ClearElineupMallItem() *HPElineupMallItemPurchaseHistoryUpdateOne {
	hemiphuo.mutation.ClearElineupMallItem()
	return hemiphuo
}

// ClearOwner clears the "owner" edge to the User entity.
func (hemiphuo *HPElineupMallItemPurchaseHistoryUpdateOne) ClearOwner() *HPElineupMallItemPurchaseHistoryUpdateOne {
	hemiphuo.mutation.ClearOwner()
	return hemiphuo
}

// Where appends a list predicates to the HPElineupMallItemPurchaseHistoryUpdate builder.
func (hemiphuo *HPElineupMallItemPurchaseHistoryUpdateOne) Where(ps ...predicate.HPElineupMallItemPurchaseHistory) *HPElineupMallItemPurchaseHistoryUpdateOne {
	hemiphuo.mutation.Where(ps...)
	return hemiphuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (hemiphuo *HPElineupMallItemPurchaseHistoryUpdateOne) Select(field string, fields ...string) *HPElineupMallItemPurchaseHistoryUpdateOne {
	hemiphuo.fields = append([]string{field}, fields...)
	return hemiphuo
}

// Save executes the query and returns the updated HPElineupMallItemPurchaseHistory entity.
func (hemiphuo *HPElineupMallItemPurchaseHistoryUpdateOne) Save(ctx context.Context) (*HPElineupMallItemPurchaseHistory, error) {
	return withHooks[*HPElineupMallItemPurchaseHistory, HPElineupMallItemPurchaseHistoryMutation](ctx, hemiphuo.sqlSave, hemiphuo.mutation, hemiphuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hemiphuo *HPElineupMallItemPurchaseHistoryUpdateOne) SaveX(ctx context.Context) *HPElineupMallItemPurchaseHistory {
	node, err := hemiphuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (hemiphuo *HPElineupMallItemPurchaseHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := hemiphuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hemiphuo *HPElineupMallItemPurchaseHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := hemiphuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hemiphuo *HPElineupMallItemPurchaseHistoryUpdateOne) check() error {
	if _, ok := hemiphuo.mutation.OwnerID(); hemiphuo.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "HPElineupMallItemPurchaseHistory.owner"`)
	}
	return nil
}

func (hemiphuo *HPElineupMallItemPurchaseHistoryUpdateOne) sqlSave(ctx context.Context) (_node *HPElineupMallItemPurchaseHistory, err error) {
	if err := hemiphuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(hpelineupmallitempurchasehistory.Table, hpelineupmallitempurchasehistory.Columns, sqlgraph.NewFieldSpec(hpelineupmallitempurchasehistory.FieldID, field.TypeInt))
	id, ok := hemiphuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "HPElineupMallItemPurchaseHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := hemiphuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hpelineupmallitempurchasehistory.FieldID)
		for _, f := range fields {
			if !hpelineupmallitempurchasehistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != hpelineupmallitempurchasehistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := hemiphuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if hemiphuo.mutation.CreatedAtCleared() {
		_spec.ClearField(hpelineupmallitempurchasehistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := hemiphuo.mutation.UpdatedAt(); ok {
		_spec.SetField(hpelineupmallitempurchasehistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if hemiphuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(hpelineupmallitempurchasehistory.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := hemiphuo.mutation.OrderID(); ok {
		_spec.SetField(hpelineupmallitempurchasehistory.FieldOrderID, field.TypeString, value)
	}
	if value, ok := hemiphuo.mutation.Num(); ok {
		_spec.SetField(hpelineupmallitempurchasehistory.FieldNum, field.TypeInt, value)
	}
	if value, ok := hemiphuo.mutation.AddedNum(); ok {
		_spec.AddField(hpelineupmallitempurchasehistory.FieldNum, field.TypeInt, value)
	}
	if value, ok := hemiphuo.mutation.Price(); ok {
		_spec.SetField(hpelineupmallitempurchasehistory.FieldPrice, field.TypeInt, value)
	}
	if value, ok := hemiphuo.mutation.AddedPrice(); ok {
		_spec.AddField(hpelineupmallitempurchasehistory.FieldPrice, field.TypeInt, value)
	}
	if value, ok := hemiphuo.mutation.OrderedAt(); ok {
		_spec.SetField(hpelineupmallitempurchasehistory.FieldOrderedAt, field.TypeTime, value)
	}
	if value, ok := hemiphuo.mutation.Permalink(); ok {
		_spec.SetField(hpelineupmallitempurchasehistory.FieldPermalink, field.TypeString, value)
	}
	if value, ok := hemiphuo.mutation.Name(); ok {
		_spec.SetField(hpelineupmallitempurchasehistory.FieldName, field.TypeString, value)
	}
	if hemiphuo.mutation.ElineupMallItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpelineupmallitempurchasehistory.ElineupMallItemTable,
			Columns: []string{hpelineupmallitempurchasehistory.ElineupMallItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpelineupmallitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hemiphuo.mutation.ElineupMallItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpelineupmallitempurchasehistory.ElineupMallItemTable,
			Columns: []string{hpelineupmallitempurchasehistory.ElineupMallItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hpelineupmallitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hemiphuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpelineupmallitempurchasehistory.OwnerTable,
			Columns: []string{hpelineupmallitempurchasehistory.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hemiphuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hpelineupmallitempurchasehistory.OwnerTable,
			Columns: []string{hpelineupmallitempurchasehistory.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &HPElineupMallItemPurchaseHistory{config: hemiphuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, hemiphuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hpelineupmallitempurchasehistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	hemiphuo.mutation.done = true
	return _node, nil
}
