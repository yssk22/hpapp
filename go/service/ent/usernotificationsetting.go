// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/yssk22/hpapp/go/service/ent/user"
	"github.com/yssk22/hpapp/go/service/ent/usernotificationsetting"
)

// UserNotificationSetting is the model entity for the UserNotificationSetting schema.
type UserNotificationSetting struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// expo token
	Token string `json:"token,omitempty"`
	// expo slug value (project name)
	Slug string `json:"slug,omitempty"`
	// human friendly name (taken on client side)
	Name string `json:"name,omitempty"`
	// notify when a new post is created
	EnableNewPosts bool `json:"enable_new_posts,omitempty"`
	// notify when a payment is started
	EnablePaymentStart bool `json:"enable_payment_start,omitempty"`
	// notify when a payment due date is close
	EnablePaymentDue bool `json:"enable_payment_due,omitempty"`
	// OwnerUserID holds the value of the "owner_user_id" field.
	OwnerUserID *int `json:"owner_user_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserNotificationSettingQuery when eager-loading is set.
	Edges        UserNotificationSettingEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserNotificationSettingEdges holds the relations/edges for other nodes in the graph.
type UserNotificationSettingEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// NotificationLogs holds the value of the notification_logs edge.
	NotificationLogs []*UserNotificationLog `json:"notification_logs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedNotificationLogs map[string][]*UserNotificationLog
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserNotificationSettingEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// NotificationLogsOrErr returns the NotificationLogs value or an error if the edge
// was not loaded in eager-loading.
func (e UserNotificationSettingEdges) NotificationLogsOrErr() ([]*UserNotificationLog, error) {
	if e.loadedTypes[1] {
		return e.NotificationLogs, nil
	}
	return nil, &NotLoadedError{edge: "notification_logs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserNotificationSetting) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case usernotificationsetting.FieldEnableNewPosts, usernotificationsetting.FieldEnablePaymentStart, usernotificationsetting.FieldEnablePaymentDue:
			values[i] = new(sql.NullBool)
		case usernotificationsetting.FieldID, usernotificationsetting.FieldOwnerUserID:
			values[i] = new(sql.NullInt64)
		case usernotificationsetting.FieldToken, usernotificationsetting.FieldSlug, usernotificationsetting.FieldName:
			values[i] = new(sql.NullString)
		case usernotificationsetting.FieldCreatedAt, usernotificationsetting.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserNotificationSetting fields.
func (uns *UserNotificationSetting) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case usernotificationsetting.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			uns.ID = int(value.Int64)
		case usernotificationsetting.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				uns.CreatedAt = value.Time
			}
		case usernotificationsetting.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				uns.UpdatedAt = value.Time
			}
		case usernotificationsetting.FieldToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token", values[i])
			} else if value.Valid {
				uns.Token = value.String
			}
		case usernotificationsetting.FieldSlug:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slug", values[i])
			} else if value.Valid {
				uns.Slug = value.String
			}
		case usernotificationsetting.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				uns.Name = value.String
			}
		case usernotificationsetting.FieldEnableNewPosts:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enable_new_posts", values[i])
			} else if value.Valid {
				uns.EnableNewPosts = value.Bool
			}
		case usernotificationsetting.FieldEnablePaymentStart:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enable_payment_start", values[i])
			} else if value.Valid {
				uns.EnablePaymentStart = value.Bool
			}
		case usernotificationsetting.FieldEnablePaymentDue:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enable_payment_due", values[i])
			} else if value.Valid {
				uns.EnablePaymentDue = value.Bool
			}
		case usernotificationsetting.FieldOwnerUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field owner_user_id", values[i])
			} else if value.Valid {
				uns.OwnerUserID = new(int)
				*uns.OwnerUserID = int(value.Int64)
			}
		default:
			uns.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserNotificationSetting.
// This includes values selected through modifiers, order, etc.
func (uns *UserNotificationSetting) Value(name string) (ent.Value, error) {
	return uns.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the UserNotificationSetting entity.
func (uns *UserNotificationSetting) QueryUser() *UserQuery {
	return NewUserNotificationSettingClient(uns.config).QueryUser(uns)
}

// QueryNotificationLogs queries the "notification_logs" edge of the UserNotificationSetting entity.
func (uns *UserNotificationSetting) QueryNotificationLogs() *UserNotificationLogQuery {
	return NewUserNotificationSettingClient(uns.config).QueryNotificationLogs(uns)
}

// Update returns a builder for updating this UserNotificationSetting.
// Note that you need to call UserNotificationSetting.Unwrap() before calling this method if this UserNotificationSetting
// was returned from a transaction, and the transaction was committed or rolled back.
func (uns *UserNotificationSetting) Update() *UserNotificationSettingUpdateOne {
	return NewUserNotificationSettingClient(uns.config).UpdateOne(uns)
}

// Unwrap unwraps the UserNotificationSetting entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uns *UserNotificationSetting) Unwrap() *UserNotificationSetting {
	_tx, ok := uns.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserNotificationSetting is not a transactional entity")
	}
	uns.config.driver = _tx.drv
	return uns
}

// String implements the fmt.Stringer.
func (uns *UserNotificationSetting) String() string {
	var builder strings.Builder
	builder.WriteString("UserNotificationSetting(")
	builder.WriteString(fmt.Sprintf("id=%v, ", uns.ID))
	builder.WriteString("created_at=")
	builder.WriteString(uns.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(uns.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("token=")
	builder.WriteString(uns.Token)
	builder.WriteString(", ")
	builder.WriteString("slug=")
	builder.WriteString(uns.Slug)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(uns.Name)
	builder.WriteString(", ")
	builder.WriteString("enable_new_posts=")
	builder.WriteString(fmt.Sprintf("%v", uns.EnableNewPosts))
	builder.WriteString(", ")
	builder.WriteString("enable_payment_start=")
	builder.WriteString(fmt.Sprintf("%v", uns.EnablePaymentStart))
	builder.WriteString(", ")
	builder.WriteString("enable_payment_due=")
	builder.WriteString(fmt.Sprintf("%v", uns.EnablePaymentDue))
	builder.WriteString(", ")
	if v := uns.OwnerUserID; v != nil {
		builder.WriteString("owner_user_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// NamedNotificationLogs returns the NotificationLogs named value or an error if the edge was not
// loaded in eager-loading with this name.
func (uns *UserNotificationSetting) NamedNotificationLogs(name string) ([]*UserNotificationLog, error) {
	if uns.Edges.namedNotificationLogs == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := uns.Edges.namedNotificationLogs[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (uns *UserNotificationSetting) appendNamedNotificationLogs(name string, edges ...*UserNotificationLog) {
	if uns.Edges.namedNotificationLogs == nil {
		uns.Edges.namedNotificationLogs = make(map[string][]*UserNotificationLog)
	}
	if len(edges) == 0 {
		uns.Edges.namedNotificationLogs[name] = []*UserNotificationLog{}
	} else {
		uns.Edges.namedNotificationLogs[name] = append(uns.Edges.namedNotificationLogs[name], edges...)
	}
}

// UserNotificationSettings is a parsable slice of UserNotificationSetting.
type UserNotificationSettings []*UserNotificationSetting
