// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yssk22/hpapp/go/service/ent/hpmember"
	"github.com/yssk22/hpapp/go/service/ent/predicate"
)

// HPMemberDelete is the builder for deleting a HPMember entity.
type HPMemberDelete struct {
	config
	hooks    []Hook
	mutation *HPMemberMutation
}

// Where appends a list predicates to the HPMemberDelete builder.
func (hmd *HPMemberDelete) Where(ps ...predicate.HPMember) *HPMemberDelete {
	hmd.mutation.Where(ps...)
	return hmd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (hmd *HPMemberDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, HPMemberMutation](ctx, hmd.sqlExec, hmd.mutation, hmd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (hmd *HPMemberDelete) ExecX(ctx context.Context) int {
	n, err := hmd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (hmd *HPMemberDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(hpmember.Table, sqlgraph.NewFieldSpec(hpmember.FieldID, field.TypeInt))
	if ps := hmd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, hmd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	hmd.mutation.done = true
	return affected, err
}

// HPMemberDeleteOne is the builder for deleting a single HPMember entity.
type HPMemberDeleteOne struct {
	hmd *HPMemberDelete
}

// Where appends a list predicates to the HPMemberDelete builder.
func (hmdo *HPMemberDeleteOne) Where(ps ...predicate.HPMember) *HPMemberDeleteOne {
	hmdo.hmd.mutation.Where(ps...)
	return hmdo
}

// Exec executes the deletion query.
func (hmdo *HPMemberDeleteOne) Exec(ctx context.Context) error {
	n, err := hmdo.hmd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{hpmember.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (hmdo *HPMemberDeleteOne) ExecX(ctx context.Context) {
	if err := hmdo.Exec(ctx); err != nil {
		panic(err)
	}
}
