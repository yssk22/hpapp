type HelloProjectQuery implements Node @goModel(model: "github.com/yssk22/hpapp/go/graphql/v3/helloproject.HelloProjectQuery") {
  id: ID!
  artists(after: Cursor, first: Int, before: Cursor, last: Int): [HPArtist]
  feed(params: HPFeedQueryParamsInput!, after: Cursor, first: Int, before: Cursor, last: Int): HPFeedItemConnection
  elineupMallItems(params: HPElineumpMallItemsParamsInput!, after: Cursor, first: Int, before: Cursor, last: Int): HPElineupMallItemConnection
}

input HPFeedQueryParamsInput @goModel(model: "github.com/yssk22/hpapp/go/graphql/v3/helloproject.HPFeedQueryParams") {
  memberIDs: [String!]
  assetTypes: [HPAssetType!]
  useMemberTaggings: Boolean
  minPostAt: Time
}

input HPElineumpMallItemsParamsInput @goModel(model: "github.com/yssk22/hpapp/go/graphql/v3/helloproject.HPElineumpMallItemsParams") {
  memberIDs: [String!]
  categories: [HPElineupMallItemCategory!]
  memberCategories: [HPElineumpMallItemsParamsMemberCategoriesInput!]
}

enum HPAssetType @goModel(model: "github.com/yssk22/hpapp/go/service/schema/enums.HPAssetType") {
  ameblo
  elineup_mall
  instagram
  tiktok
  twitter
  youtube
}

enum HPElineupMallItemCategory @goModel(model: "github.com/yssk22/hpapp/go/service/schema/enums.HPElineupMallItemCategory") {
  blueray
  clear_file
  colllection_other
  colllection_photo
  colllection_pinnap_poster
  dvd
  dvd_magazine
  dvd_magazine_other
  fsk
  keyring_other
  microfiber_towel
  muffler_towel
  other
  penlight
  photo2_l
  photo_a4
  photo_a5
  photo_album
  photo_album_other
  photo_book
  photo_book_other
  photo_daily
  photo_other
  t_shirt
}

input HPElineumpMallItemsParamsMemberCategoriesInput @goModel(model: "github.com/yssk22/hpapp/go/graphql/v3/helloproject.HPElineumpMallItemsParamsMemberCategories") {
  memberId: String!
  categories: [HPElineupMallItemCategory!]
}

type MeQuery implements Node @goModel(model: "github.com/yssk22/hpapp/go/graphql/v3/me.MeQuery") {
  id: ID!
  userId: String!
  username: String!
  clientId: String
  clientName: String
  clientIsVerified: Boolean
  authentications: [Auth]
  notificationSettings(slug: String!): [UserNotificationSetting]
  followings: [HPFollow]
  sortHistories(after: Cursor, first: Int, before: Cursor, last: Int): HPSortHistoryConnection
  events(after: Cursor, first: Int, before: Cursor, last: Int): HPEventConnection
  favorites(params: MeFavoriteQueryParamsInput!, after: Cursor, first: Int, before: Cursor, last: Int): HPFeedItemConnection
}

input MeFavoriteQueryParamsInput @goModel(model: "github.com/yssk22/hpapp/go/graphql/v3/me.MeFavoriteQueryParams") {
  memberIDs: [String!]
  assetTypes: [HPAssetType!]
}

type Misc @goModel(model: "github.com/yssk22/hpapp/go/graphql/v3.Misc") {
  version: String!
}

type Mutation @goModel(model: "github.com/yssk22/hpapp/go/graphql/v3.Mutation") {
  authenticate: User
  me: MeMutation
}

type MeMutation @goModel(model: "github.com/yssk22/hpapp/go/graphql/v3/me.MeMutation") {
  authenticate: User
  removeAuthentication: Auth
  delete: Boolean!
  upsertNotificationToken(token: String!, params: NotificationSettingsInput!): UserNotificationSetting
  removeNotificationToken(tokenId: Int!): UserNotificationSetting
  upsertFollow(params: HPFollowUpsertParamsInput!): HPFollow
  upsertEvents(params: HPFCEventTicketApplicationUpsertParamsInput!): [HPEvent]
  upsertViewHistory(params: HPViewHistoryUpsertParamsInput!): HPViewHistory
  createSortHistory(params: HPSortHistoryCreateParamsInput!): HPSortHistory
}

input NotificationSettingsInput @goModel(model: "github.com/yssk22/hpapp/go/service/push.NotificationSettings") {
  name: String!
  slug: String!
  enableNewPosts: Boolean
  enablePaymentStart: Boolean
  enablePaymentDue: Boolean
}

input HPFollowUpsertParamsInput @goModel(model: "github.com/yssk22/hpapp/go/service/helloproject/user.HPFollowUpsertParams") {
  memberId: Int!
  followType: HPFollowType!
}

input HPFCEventTicketApplicationUpsertParamsInput @goModel(model: "github.com/yssk22/hpapp/go/service/helloproject/upfc.HPFCEventTicketApplicationUpsertParams") {
  userId: Int!
  applications: [HPFCEventTicketApplicationInput!]
}

input HPViewHistoryUpsertParamsInput @goModel(model: "github.com/yssk22/hpapp/go/service/helloproject/feed.HPViewHistoryUpsertParams") {
  feedId: Int!
  userId: Int!
  isFavorite: Boolean!
}

input HPSortHistoryCreateParamsInput @goModel(model: "github.com/yssk22/hpapp/go/service/helloproject/user.HPSortHistoryCreateParams") {
  records: [HPSortResultRecordInput!]
}

enum HPFollowType @goModel(model: "github.com/yssk22/hpapp/go/service/schema/enums.HPFollowType") {
  follow
  follow_with_notification
  unfollow
  unknown
}

input HPFCEventTicketApplicationInput @goModel(model: "github.com/yssk22/hpapp/go/service/helloproject/upfc.HPFCEventTicketApplication") {
  memberSha256: String!
  title: String!
  openAt: Time
  startAt: Time!
  fullyQualifiedVenueName: String!
  num: Int!
  status: HPFCEventTicketApplicationStatus!
  applicationSite: HPFCEventTicketApplicationSite!
  applicationId: String
  applicationStartDate: Time
  applicationDueDate: Time
  paymentStartDate: Time
  paymentDueDate: Time
}

input HPSortResultRecordInput @goModel(model: "github.com/yssk22/hpapp/go/service/schema/jsonfields.HPSortResultRecord") {
  artistId: Int!
  artistKey: String!
  memberId: Int!
  memberKey: String!
  point: Int
  rank: Int
}

enum HPFCEventTicketApplicationStatus @goModel(model: "github.com/yssk22/hpapp/go/service/schema/enums.HPFCEventTicketApplicationStatus") {
  before_lottery
  completed
  payment_overdue
  pending_payment
  rejected
  submitted
  unknown
}

enum HPFCEventTicketApplicationSite @goModel(model: "github.com/yssk22/hpapp/go/service/schema/enums.HPFCEventTicketApplicationSite") {
  hello_project
  m_line
}

type Media @goModel(model: "github.com/yssk22/hpapp/go/service/schema/jsonfields.Media") {
  url: String!
  blobId: Int!
  type: HPBlobType!
  width: Int!
  height: Int!
  thumbnailUrl: String!
  thumbnailWidth: Int!
  thumbnailHeight: Int!
}

enum HPBlobType @goModel(model: "github.com/yssk22/hpapp/go/service/schema/enums.HPBlobType") {
  image
  text
  unknown
  video
}

type HPBlobThumbnail @goModel(model: "github.com/yssk22/hpapp/go/service/schema/jsonfields.HPBlobThumbnail") {
  storagePath: String!
  sourceImageUrl: String!
  width: Int!
  height: Int!
}

type ReactNavigationPush @goModel(model: "github.com/yssk22/hpapp/go/service/schema/jsonfields.ReactNavigationPush") {
  path: String!
  params: Map
  pushMessage: ExpoPushMessage!

  toPushMessage(tokens: [String!]): Message
}

type ExpoPushMessage @goModel(model: "github.com/yssk22/hpapp/go/service/schema/jsonfields.ExpoPushMessage") {
  title: String!
  body: String!
  ttlSeconds: Int!
  priority: MessagePriority!
  sound: String!
  badge: Int!
  imageUrl: String!
}

type Message @goModel(model: "github.com/yssk22/hpapp/go/system/push.Message") {
  to: [String!]
  title: String!
  body: String!
  ttlSeconds: Int!
  priority: MessagePriority!
  sound: String!
  badge: Int!
  imageUrl: String!
  data: Map
}

enum MessagePriority @goModel(model: "github.com/yssk22/hpapp/go/system/push.MessagePriority") {
  default
  high
  normal
}

type HPSortResult @goModel(model: "github.com/yssk22/hpapp/go/service/schema/jsonfields.HPSortResult") {
  records: [HPSortResultRecord!]
}

type HPSortResultRecord @goModel(model: "github.com/yssk22/hpapp/go/service/schema/jsonfields.HPSortResultRecord") {
  artistId: Int!
  artistKey: String!
  memberId: Int!
  memberKey: String!
  point: Int
  rank: Int
}

type HPIgCrawlArgs @goModel(model: "github.com/yssk22/hpapp/go/service/schema/jsonfields.HPIgCrawlArgs") {
  id: ID!
  shortcode: String!
  caption: String!
  displayUrl: String!
  videoUrl: String!
  ownerUsername: String!
  ownerId: String!
  hashtags: [String!]
  childPosts: [HPIgCrawlArgsChildPost!]
  timestamp: Time!
  commentsCount: Int!
  likesCount: Int!
  videoViewCount: Int!
}

type HPIgCrawlArgsChildPost @goModel(model: "github.com/yssk22/hpapp/go/service/schema/jsonfields.HPIgCrawlArgsChildPost") {
  id: ID!
  type: String!
  displayUrl: String!
  videoUrl: String!
  likesCount: Int!
  videoViewCount: Int!
}

