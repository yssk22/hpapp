// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"embed"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"entgo.io/contrib/entgql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
	"github.com/yssk22/hpapp/go/graphql/v3"
	"github.com/yssk22/hpapp/go/graphql/v3/helloproject"
	"github.com/yssk22/hpapp/go/graphql/v3/me"
	"github.com/yssk22/hpapp/go/service/ent"
	"github.com/yssk22/hpapp/go/service/ent/hpameblopost"
	"github.com/yssk22/hpapp/go/service/helloproject/feed"
	"github.com/yssk22/hpapp/go/service/helloproject/upfc"
	"github.com/yssk22/hpapp/go/service/helloproject/user"
	"github.com/yssk22/hpapp/go/service/schema/enums"
	"github.com/yssk22/hpapp/go/service/schema/jsonfields"
	"github.com/yssk22/hpapp/go/system/push"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	HPEvent() HPEventResolver
	HPFeedItem() HPFeedItemResolver
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Auth struct {
		CreatedAt    func(childComplexity int) int
		ID           func(childComplexity int) int
		ProviderName func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
	}

	ExpoPushMessage struct {
		Badge      func(childComplexity int) int
		Body       func(childComplexity int) int
		ImageUrl   func(childComplexity int) int
		Priority   func(childComplexity int) int
		Sound      func(childComplexity int) int
		TTLSeconds func(childComplexity int) int
		Title      func(childComplexity int) int
	}

	HPAmebloPost struct {
		ArtistKey        func(childComplexity int) int
		Blobs            func(childComplexity int) int
		Comments         func(childComplexity int) int
		CrawledAt        func(childComplexity int) int
		CreatedAt        func(childComplexity int) int
		Description      func(childComplexity int) int
		ErrorCount       func(childComplexity int) int
		ID               func(childComplexity int) int
		Images           func(childComplexity int) int
		LastErrorMessage func(childComplexity int) int
		Likes            func(childComplexity int) int
		MemberKey        func(childComplexity int) int
		NextPath         func(childComplexity int) int
		OwnerArtist      func(childComplexity int) int
		OwnerArtistID    func(childComplexity int) int
		OwnerMember      func(childComplexity int) int
		OwnerMemberID    func(childComplexity int) int
		Path             func(childComplexity int) int
		PostAt           func(childComplexity int) int
		PrevPath         func(childComplexity int) int
		Reblogs          func(childComplexity int) int
		RecrawlRequired  func(childComplexity int) int
		Source           func(childComplexity int) int
		TaggedArtists    func(childComplexity int) int
		TaggedMembers    func(childComplexity int) int
		Theme            func(childComplexity int) int
		Title            func(childComplexity int) int
		UpdatedAt        func(childComplexity int) int
	}

	HPArtist struct {
		CrawledAt        func(childComplexity int) int
		CreatedAt        func(childComplexity int) int
		ErrorCount       func(childComplexity int) int
		ID               func(childComplexity int) int
		Index            func(childComplexity int) int
		Key              func(childComplexity int) int
		LastErrorMessage func(childComplexity int) int
		Members          func(childComplexity int) int
		Name             func(childComplexity int) int
		RecrawlRequired  func(childComplexity int) int
		ThumbnailURL     func(childComplexity int) int
		UpdatedAt        func(childComplexity int) int
	}

	HPBlob struct {
		AmebloPosts           func(childComplexity int) int
		CreatedAt             func(childComplexity int) int
		DurationSeconds       func(childComplexity int) int
		FaceRecognitionStatus func(childComplexity int) int
		Height                func(childComplexity int) int
		ID                    func(childComplexity int) int
		IgPosts               func(childComplexity int) int
		NumFaces              func(childComplexity int) int
		OwnerArtist           func(childComplexity int) int
		OwnerArtistID         func(childComplexity int) int
		OwnerMember           func(childComplexity int) int
		OwnerMemberID         func(childComplexity int) int
		Size                  func(childComplexity int) int
		SourceHTMLURL         func(childComplexity int) int
		SourceURL             func(childComplexity int) int
		Status                func(childComplexity int) int
		StatusErrorCount      func(childComplexity int) int
		StatusMessage         func(childComplexity int) int
		StoragePath           func(childComplexity int) int
		SubType               func(childComplexity int) int
		Thumbnail             func(childComplexity int) int
		Type                  func(childComplexity int) int
		UpdatedAt             func(childComplexity int) int
		Width                 func(childComplexity int) int
	}

	HPBlobThumbnail struct {
		Height         func(childComplexity int) int
		SourceImageURL func(childComplexity int) int
		StoragePath    func(childComplexity int) int
		Width          func(childComplexity int) int
	}

	HPElineupMallItem struct {
		Category         func(childComplexity int) int
		CrawledAt        func(childComplexity int) int
		CreatedAt        func(childComplexity int) int
		Description      func(childComplexity int) int
		ErrorCount       func(childComplexity int) int
		ID               func(childComplexity int) int
		Images           func(childComplexity int) int
		IsLimitedToFc    func(childComplexity int) int
		IsOutOfStock     func(childComplexity int) int
		LastErrorMessage func(childComplexity int) int
		Name             func(childComplexity int) int
		OrderEndAt       func(childComplexity int) int
		OrderStartAt     func(childComplexity int) int
		Permalink        func(childComplexity int) int
		Price            func(childComplexity int) int
		RecrawlRequired  func(childComplexity int) int
		Supplier         func(childComplexity int) int
		TaggedArtists    func(childComplexity int) int
		TaggedMembers    func(childComplexity int) int
		UpdatedAt        func(childComplexity int) int
	}

	HPElineupMallItemConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	HPElineupMallItemEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	HPEvent struct {
		CreatedAt     func(childComplexity int) int
		DisplayTitles func(childComplexity int) int
		ID            func(childComplexity int) int
		Key           func(childComplexity int) int
		OpenAt        func(childComplexity int) int
		Prefecture    func(childComplexity int) int
		Source        func(childComplexity int) int
		StartAt       func(childComplexity int) int
		Tickets       func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
		Venue         func(childComplexity int) int
	}

	HPEventConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	HPEventEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	HPFCEventTicket struct {
		ApplicationDueDate   func(childComplexity int) int
		ApplicationID        func(childComplexity int) int
		ApplicationSite      func(childComplexity int) int
		ApplicationStartDate func(childComplexity int) int
		ApplicationTitle     func(childComplexity int) int
		CreatedAt            func(childComplexity int) int
		FcMemberSha256       func(childComplexity int) int
		ID                   func(childComplexity int) int
		Num                  func(childComplexity int) int
		PaymentDueDate       func(childComplexity int) int
		PaymentStartDate     func(childComplexity int) int
		Status               func(childComplexity int) int
		UpdatedAt            func(childComplexity int) int
	}

	HPFeedItem struct {
		AssetType     func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		ID            func(childComplexity int) int
		ImageURL      func(childComplexity int) int
		Media         func(childComplexity int) int
		MyViewHistory func(childComplexity int) int
		OwnerArtist   func(childComplexity int) int
		OwnerArtistID func(childComplexity int) int
		OwnerMember   func(childComplexity int) int
		OwnerMemberID func(childComplexity int) int
		PostAt        func(childComplexity int) int
		SourceID      func(childComplexity int) int
		SourceURL     func(childComplexity int) int
		TaggedArtists func(childComplexity int) int
		TaggedMembers func(childComplexity int) int
		Title         func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
	}

	HPFeedItemConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	HPFeedItemEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	HPFollow struct {
		CreatedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		Member    func(childComplexity int) int
		Type      func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
		User      func(childComplexity int) int
	}

	HPIgCrawlArgs struct {
		Caption        func(childComplexity int) int
		ChildPosts     func(childComplexity int) int
		CommentsCount  func(childComplexity int) int
		DisplayURL     func(childComplexity int) int
		Hashtags       func(childComplexity int) int
		ID             func(childComplexity int) int
		LikesCount     func(childComplexity int) int
		OwnerID        func(childComplexity int) int
		OwnerUsername  func(childComplexity int) int
		Shortcode      func(childComplexity int) int
		Timestamp      func(childComplexity int) int
		VideoURL       func(childComplexity int) int
		VideoViewCount func(childComplexity int) int
	}

	HPIgCrawlArgsChildPost struct {
		DisplayURL     func(childComplexity int) int
		ID             func(childComplexity int) int
		LikesCount     func(childComplexity int) int
		Type           func(childComplexity int) int
		VideoURL       func(childComplexity int) int
		VideoViewCount func(childComplexity int) int
	}

	HPIgPost struct {
		Blobs            func(childComplexity int) int
		Comments         func(childComplexity int) int
		CrawledAt        func(childComplexity int) int
		CreatedAt        func(childComplexity int) int
		Description      func(childComplexity int) int
		ErrorCount       func(childComplexity int) int
		ID               func(childComplexity int) int
		LastErrorMessage func(childComplexity int) int
		Likes            func(childComplexity int) int
		Media            func(childComplexity int) int
		OwnerArtist      func(childComplexity int) int
		OwnerArtistID    func(childComplexity int) int
		OwnerMember      func(childComplexity int) int
		OwnerMemberID    func(childComplexity int) int
		PostAt           func(childComplexity int) int
		RecrawlArgs      func(childComplexity int) int
		RecrawlRequired  func(childComplexity int) int
		Shortcode        func(childComplexity int) int
		TaggedArtists    func(childComplexity int) int
		TaggedMembers    func(childComplexity int) int
		UpdatedAt        func(childComplexity int) int
	}

	HPIgPostConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	HPIgPostEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	HPMember struct {
		Artist           func(childComplexity int) int
		ArtistID         func(childComplexity int) int
		ArtistKey        func(childComplexity int) int
		BloodType        func(childComplexity int) int
		CrawledAt        func(childComplexity int) int
		CreatedAt        func(childComplexity int) int
		DateOfBirth      func(childComplexity int) int
		ErrorCount       func(childComplexity int) int
		GraduateAt       func(childComplexity int) int
		Hometown         func(childComplexity int) int
		ID               func(childComplexity int) int
		JoinAt           func(childComplexity int) int
		Key              func(childComplexity int) int
		LastErrorMessage func(childComplexity int) int
		Name             func(childComplexity int) int
		NameKana         func(childComplexity int) int
		RecrawlRequired  func(childComplexity int) int
		ThumbnailURL     func(childComplexity int) int
		UpdatedAt        func(childComplexity int) int
	}

	HPMemberConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	HPMemberEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	HPSortHistory struct {
		CreatedAt  func(childComplexity int) int
		ID         func(childComplexity int) int
		Owner      func(childComplexity int) int
		SortResult func(childComplexity int) int
		UpdatedAt  func(childComplexity int) int
	}

	HPSortHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	HPSortHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	HPSortResult struct {
		Records func(childComplexity int) int
	}

	HPSortResultRecord struct {
		ArtistID  func(childComplexity int) int
		ArtistKey func(childComplexity int) int
		MemberID  func(childComplexity int) int
		MemberKey func(childComplexity int) int
	}

	HPViewHistory struct {
		AssetType     func(childComplexity int) int
		ContentID     func(childComplexity int) int
		ContentPostAt func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		Feed          func(childComplexity int) int
		ID            func(childComplexity int) int
		IsFavorite    func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
	}

	HPViewHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	HPViewHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	HelloProjectQuery struct {
		Artists          func(childComplexity int, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int) int
		ElineupMallItems func(childComplexity int, params helloproject.HPElineumpMallItemsParams, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int) int
		Feed             func(childComplexity int, params helloproject.HPFeedQueryParams, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int) int
		ID               func(childComplexity int) int
	}

	MeMutation struct {
		Authenticate         func(childComplexity int) int
		RemoveAuthentication func(childComplexity int) int
		UpsertEvents         func(childComplexity int, params upfc.HPFCEventTicketApplicationUpsertParams) int
		UpsertFollow         func(childComplexity int, params user.HPFollowUpsertParams) int
		UpsertViewHistory    func(childComplexity int, params feed.HPViewHistoryUpsertParams) int
	}

	MeQuery struct {
		Authentications  func(childComplexity int) int
		ClientID         func(childComplexity int) int
		ClientIsVerified func(childComplexity int) int
		ClientName       func(childComplexity int) int
		Events           func(childComplexity int, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int) int
		Favorites        func(childComplexity int, params me.MeFavoriteQueryParams, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int) int
		Followings       func(childComplexity int) int
		ID               func(childComplexity int) int
		SortHistories    func(childComplexity int, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int) int
		UserID           func(childComplexity int) int
		Username         func(childComplexity int) int
	}

	Media struct {
		BlobID          func(childComplexity int) int
		Height          func(childComplexity int) int
		ThumbnailHeight func(childComplexity int) int
		ThumbnailUrl    func(childComplexity int) int
		ThumbnailWidth  func(childComplexity int) int
		Type            func(childComplexity int) int
		Url             func(childComplexity int) int
		Width           func(childComplexity int) int
	}

	Message struct {
		Badge      func(childComplexity int) int
		Body       func(childComplexity int) int
		Data       func(childComplexity int) int
		ImageUrl   func(childComplexity int) int
		Priority   func(childComplexity int) int
		Sound      func(childComplexity int) int
		TTLSeconds func(childComplexity int) int
		Title      func(childComplexity int) int
		To         func(childComplexity int) int
	}

	Misc struct {
		Version func(childComplexity int) int
	}

	Mutation struct {
		Authenticate func(childComplexity int) int
		Me           func(childComplexity int) int
	}

	PageInfo struct {
		EndCursor       func(childComplexity int) int
		HasNextPage     func(childComplexity int) int
		HasPreviousPage func(childComplexity int) int
		StartCursor     func(childComplexity int) int
	}

	Query struct {
		Helloproject func(childComplexity int) int
		Me           func(childComplexity int) int
		Node         func(childComplexity int, id string) int
		Nodes        func(childComplexity int, ids []string) int
	}

	ReactNavigationPush struct {
		Params        func(childComplexity int) int
		Path          func(childComplexity int) int
		PushMessage   func(childComplexity int) int
		ToPushMessage func(childComplexity int, tokens []string) int
	}

	User struct {
		AccessToken          func(childComplexity int) int
		Auth                 func(childComplexity int) int
		CreatedAt            func(childComplexity int) int
		HpfcEventTickets     func(childComplexity int) int
		HpmemberFollowing    func(childComplexity int) int
		HpsortHistory        func(childComplexity int) int
		HpviewHistory        func(childComplexity int) int
		ID                   func(childComplexity int) int
		NotificationSettings func(childComplexity int) int
		UpdatedAt            func(childComplexity int) int
		Username             func(childComplexity int) int
	}

	UserNotificationSetting struct {
		CreatedAt          func(childComplexity int) int
		EnableNewPosts     func(childComplexity int) int
		EnablePaymentDue   func(childComplexity int) int
		EnablePaymentStart func(childComplexity int) int
		ID                 func(childComplexity int) int
		Name               func(childComplexity int) int
		Slug               func(childComplexity int) int
		Token              func(childComplexity int) int
		UpdatedAt          func(childComplexity int) int
		User               func(childComplexity int) int
	}
}

type HPEventResolver interface {
	Tickets(ctx context.Context, obj *ent.HPEvent) ([]*ent.HPFCEventTicket, error)
}
type HPFeedItemResolver interface {
	MyViewHistory(ctx context.Context, obj *ent.HPFeedItem) (*ent.HPViewHistory, error)
}
type MutationResolver interface {
	Authenticate(ctx context.Context) (*ent.User, error)
	Me(ctx context.Context) (*me.MeMutation, error)
}
type QueryResolver interface {
	Node(ctx context.Context, id string) (ent.Noder, error)
	Nodes(ctx context.Context, ids []string) ([]ent.Noder, error)
	Helloproject(ctx context.Context) (*helloproject.HelloProjectQuery, error)
	Me(ctx context.Context) (*me.MeQuery, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "Auth.createdAt":
		if e.complexity.Auth.CreatedAt == nil {
			break
		}

		return e.complexity.Auth.CreatedAt(childComplexity), true

	case "Auth.id":
		if e.complexity.Auth.ID == nil {
			break
		}

		return e.complexity.Auth.ID(childComplexity), true

	case "Auth.providerName":
		if e.complexity.Auth.ProviderName == nil {
			break
		}

		return e.complexity.Auth.ProviderName(childComplexity), true

	case "Auth.updatedAt":
		if e.complexity.Auth.UpdatedAt == nil {
			break
		}

		return e.complexity.Auth.UpdatedAt(childComplexity), true

	case "ExpoPushMessage.badge":
		if e.complexity.ExpoPushMessage.Badge == nil {
			break
		}

		return e.complexity.ExpoPushMessage.Badge(childComplexity), true

	case "ExpoPushMessage.body":
		if e.complexity.ExpoPushMessage.Body == nil {
			break
		}

		return e.complexity.ExpoPushMessage.Body(childComplexity), true

	case "ExpoPushMessage.imageUrl":
		if e.complexity.ExpoPushMessage.ImageUrl == nil {
			break
		}

		return e.complexity.ExpoPushMessage.ImageUrl(childComplexity), true

	case "ExpoPushMessage.priority":
		if e.complexity.ExpoPushMessage.Priority == nil {
			break
		}

		return e.complexity.ExpoPushMessage.Priority(childComplexity), true

	case "ExpoPushMessage.sound":
		if e.complexity.ExpoPushMessage.Sound == nil {
			break
		}

		return e.complexity.ExpoPushMessage.Sound(childComplexity), true

	case "ExpoPushMessage.ttlSeconds":
		if e.complexity.ExpoPushMessage.TTLSeconds == nil {
			break
		}

		return e.complexity.ExpoPushMessage.TTLSeconds(childComplexity), true

	case "ExpoPushMessage.title":
		if e.complexity.ExpoPushMessage.Title == nil {
			break
		}

		return e.complexity.ExpoPushMessage.Title(childComplexity), true

	case "HPAmebloPost.artistKey":
		if e.complexity.HPAmebloPost.ArtistKey == nil {
			break
		}

		return e.complexity.HPAmebloPost.ArtistKey(childComplexity), true

	case "HPAmebloPost.blobs":
		if e.complexity.HPAmebloPost.Blobs == nil {
			break
		}

		return e.complexity.HPAmebloPost.Blobs(childComplexity), true

	case "HPAmebloPost.comments":
		if e.complexity.HPAmebloPost.Comments == nil {
			break
		}

		return e.complexity.HPAmebloPost.Comments(childComplexity), true

	case "HPAmebloPost.crawledAt":
		if e.complexity.HPAmebloPost.CrawledAt == nil {
			break
		}

		return e.complexity.HPAmebloPost.CrawledAt(childComplexity), true

	case "HPAmebloPost.createdAt":
		if e.complexity.HPAmebloPost.CreatedAt == nil {
			break
		}

		return e.complexity.HPAmebloPost.CreatedAt(childComplexity), true

	case "HPAmebloPost.description":
		if e.complexity.HPAmebloPost.Description == nil {
			break
		}

		return e.complexity.HPAmebloPost.Description(childComplexity), true

	case "HPAmebloPost.errorCount":
		if e.complexity.HPAmebloPost.ErrorCount == nil {
			break
		}

		return e.complexity.HPAmebloPost.ErrorCount(childComplexity), true

	case "HPAmebloPost.id":
		if e.complexity.HPAmebloPost.ID == nil {
			break
		}

		return e.complexity.HPAmebloPost.ID(childComplexity), true

	case "HPAmebloPost.images":
		if e.complexity.HPAmebloPost.Images == nil {
			break
		}

		return e.complexity.HPAmebloPost.Images(childComplexity), true

	case "HPAmebloPost.lastErrorMessage":
		if e.complexity.HPAmebloPost.LastErrorMessage == nil {
			break
		}

		return e.complexity.HPAmebloPost.LastErrorMessage(childComplexity), true

	case "HPAmebloPost.likes":
		if e.complexity.HPAmebloPost.Likes == nil {
			break
		}

		return e.complexity.HPAmebloPost.Likes(childComplexity), true

	case "HPAmebloPost.memberKey":
		if e.complexity.HPAmebloPost.MemberKey == nil {
			break
		}

		return e.complexity.HPAmebloPost.MemberKey(childComplexity), true

	case "HPAmebloPost.nextPath":
		if e.complexity.HPAmebloPost.NextPath == nil {
			break
		}

		return e.complexity.HPAmebloPost.NextPath(childComplexity), true

	case "HPAmebloPost.ownerArtist":
		if e.complexity.HPAmebloPost.OwnerArtist == nil {
			break
		}

		return e.complexity.HPAmebloPost.OwnerArtist(childComplexity), true

	case "HPAmebloPost.ownerArtistID":
		if e.complexity.HPAmebloPost.OwnerArtistID == nil {
			break
		}

		return e.complexity.HPAmebloPost.OwnerArtistID(childComplexity), true

	case "HPAmebloPost.ownerMember":
		if e.complexity.HPAmebloPost.OwnerMember == nil {
			break
		}

		return e.complexity.HPAmebloPost.OwnerMember(childComplexity), true

	case "HPAmebloPost.ownerMemberID":
		if e.complexity.HPAmebloPost.OwnerMemberID == nil {
			break
		}

		return e.complexity.HPAmebloPost.OwnerMemberID(childComplexity), true

	case "HPAmebloPost.path":
		if e.complexity.HPAmebloPost.Path == nil {
			break
		}

		return e.complexity.HPAmebloPost.Path(childComplexity), true

	case "HPAmebloPost.postAt":
		if e.complexity.HPAmebloPost.PostAt == nil {
			break
		}

		return e.complexity.HPAmebloPost.PostAt(childComplexity), true

	case "HPAmebloPost.prevPath":
		if e.complexity.HPAmebloPost.PrevPath == nil {
			break
		}

		return e.complexity.HPAmebloPost.PrevPath(childComplexity), true

	case "HPAmebloPost.reblogs":
		if e.complexity.HPAmebloPost.Reblogs == nil {
			break
		}

		return e.complexity.HPAmebloPost.Reblogs(childComplexity), true

	case "HPAmebloPost.recrawlRequired":
		if e.complexity.HPAmebloPost.RecrawlRequired == nil {
			break
		}

		return e.complexity.HPAmebloPost.RecrawlRequired(childComplexity), true

	case "HPAmebloPost.source":
		if e.complexity.HPAmebloPost.Source == nil {
			break
		}

		return e.complexity.HPAmebloPost.Source(childComplexity), true

	case "HPAmebloPost.taggedArtists":
		if e.complexity.HPAmebloPost.TaggedArtists == nil {
			break
		}

		return e.complexity.HPAmebloPost.TaggedArtists(childComplexity), true

	case "HPAmebloPost.taggedMembers":
		if e.complexity.HPAmebloPost.TaggedMembers == nil {
			break
		}

		return e.complexity.HPAmebloPost.TaggedMembers(childComplexity), true

	case "HPAmebloPost.theme":
		if e.complexity.HPAmebloPost.Theme == nil {
			break
		}

		return e.complexity.HPAmebloPost.Theme(childComplexity), true

	case "HPAmebloPost.title":
		if e.complexity.HPAmebloPost.Title == nil {
			break
		}

		return e.complexity.HPAmebloPost.Title(childComplexity), true

	case "HPAmebloPost.updatedAt":
		if e.complexity.HPAmebloPost.UpdatedAt == nil {
			break
		}

		return e.complexity.HPAmebloPost.UpdatedAt(childComplexity), true

	case "HPArtist.crawledAt":
		if e.complexity.HPArtist.CrawledAt == nil {
			break
		}

		return e.complexity.HPArtist.CrawledAt(childComplexity), true

	case "HPArtist.createdAt":
		if e.complexity.HPArtist.CreatedAt == nil {
			break
		}

		return e.complexity.HPArtist.CreatedAt(childComplexity), true

	case "HPArtist.errorCount":
		if e.complexity.HPArtist.ErrorCount == nil {
			break
		}

		return e.complexity.HPArtist.ErrorCount(childComplexity), true

	case "HPArtist.id":
		if e.complexity.HPArtist.ID == nil {
			break
		}

		return e.complexity.HPArtist.ID(childComplexity), true

	case "HPArtist.index":
		if e.complexity.HPArtist.Index == nil {
			break
		}

		return e.complexity.HPArtist.Index(childComplexity), true

	case "HPArtist.key":
		if e.complexity.HPArtist.Key == nil {
			break
		}

		return e.complexity.HPArtist.Key(childComplexity), true

	case "HPArtist.lastErrorMessage":
		if e.complexity.HPArtist.LastErrorMessage == nil {
			break
		}

		return e.complexity.HPArtist.LastErrorMessage(childComplexity), true

	case "HPArtist.members":
		if e.complexity.HPArtist.Members == nil {
			break
		}

		return e.complexity.HPArtist.Members(childComplexity), true

	case "HPArtist.name":
		if e.complexity.HPArtist.Name == nil {
			break
		}

		return e.complexity.HPArtist.Name(childComplexity), true

	case "HPArtist.recrawlRequired":
		if e.complexity.HPArtist.RecrawlRequired == nil {
			break
		}

		return e.complexity.HPArtist.RecrawlRequired(childComplexity), true

	case "HPArtist.thumbnailURL":
		if e.complexity.HPArtist.ThumbnailURL == nil {
			break
		}

		return e.complexity.HPArtist.ThumbnailURL(childComplexity), true

	case "HPArtist.updatedAt":
		if e.complexity.HPArtist.UpdatedAt == nil {
			break
		}

		return e.complexity.HPArtist.UpdatedAt(childComplexity), true

	case "HPBlob.amebloPosts":
		if e.complexity.HPBlob.AmebloPosts == nil {
			break
		}

		return e.complexity.HPBlob.AmebloPosts(childComplexity), true

	case "HPBlob.createdAt":
		if e.complexity.HPBlob.CreatedAt == nil {
			break
		}

		return e.complexity.HPBlob.CreatedAt(childComplexity), true

	case "HPBlob.durationSeconds":
		if e.complexity.HPBlob.DurationSeconds == nil {
			break
		}

		return e.complexity.HPBlob.DurationSeconds(childComplexity), true

	case "HPBlob.faceRecognitionStatus":
		if e.complexity.HPBlob.FaceRecognitionStatus == nil {
			break
		}

		return e.complexity.HPBlob.FaceRecognitionStatus(childComplexity), true

	case "HPBlob.height":
		if e.complexity.HPBlob.Height == nil {
			break
		}

		return e.complexity.HPBlob.Height(childComplexity), true

	case "HPBlob.id":
		if e.complexity.HPBlob.ID == nil {
			break
		}

		return e.complexity.HPBlob.ID(childComplexity), true

	case "HPBlob.igPosts":
		if e.complexity.HPBlob.IgPosts == nil {
			break
		}

		return e.complexity.HPBlob.IgPosts(childComplexity), true

	case "HPBlob.numFaces":
		if e.complexity.HPBlob.NumFaces == nil {
			break
		}

		return e.complexity.HPBlob.NumFaces(childComplexity), true

	case "HPBlob.ownerArtist":
		if e.complexity.HPBlob.OwnerArtist == nil {
			break
		}

		return e.complexity.HPBlob.OwnerArtist(childComplexity), true

	case "HPBlob.ownerArtistID":
		if e.complexity.HPBlob.OwnerArtistID == nil {
			break
		}

		return e.complexity.HPBlob.OwnerArtistID(childComplexity), true

	case "HPBlob.ownerMember":
		if e.complexity.HPBlob.OwnerMember == nil {
			break
		}

		return e.complexity.HPBlob.OwnerMember(childComplexity), true

	case "HPBlob.ownerMemberID":
		if e.complexity.HPBlob.OwnerMemberID == nil {
			break
		}

		return e.complexity.HPBlob.OwnerMemberID(childComplexity), true

	case "HPBlob.size":
		if e.complexity.HPBlob.Size == nil {
			break
		}

		return e.complexity.HPBlob.Size(childComplexity), true

	case "HPBlob.sourceHTMLURL":
		if e.complexity.HPBlob.SourceHTMLURL == nil {
			break
		}

		return e.complexity.HPBlob.SourceHTMLURL(childComplexity), true

	case "HPBlob.sourceURL":
		if e.complexity.HPBlob.SourceURL == nil {
			break
		}

		return e.complexity.HPBlob.SourceURL(childComplexity), true

	case "HPBlob.status":
		if e.complexity.HPBlob.Status == nil {
			break
		}

		return e.complexity.HPBlob.Status(childComplexity), true

	case "HPBlob.statusErrorCount":
		if e.complexity.HPBlob.StatusErrorCount == nil {
			break
		}

		return e.complexity.HPBlob.StatusErrorCount(childComplexity), true

	case "HPBlob.statusMessage":
		if e.complexity.HPBlob.StatusMessage == nil {
			break
		}

		return e.complexity.HPBlob.StatusMessage(childComplexity), true

	case "HPBlob.storagePath":
		if e.complexity.HPBlob.StoragePath == nil {
			break
		}

		return e.complexity.HPBlob.StoragePath(childComplexity), true

	case "HPBlob.subType":
		if e.complexity.HPBlob.SubType == nil {
			break
		}

		return e.complexity.HPBlob.SubType(childComplexity), true

	case "HPBlob.thumbnail":
		if e.complexity.HPBlob.Thumbnail == nil {
			break
		}

		return e.complexity.HPBlob.Thumbnail(childComplexity), true

	case "HPBlob.type":
		if e.complexity.HPBlob.Type == nil {
			break
		}

		return e.complexity.HPBlob.Type(childComplexity), true

	case "HPBlob.updatedAt":
		if e.complexity.HPBlob.UpdatedAt == nil {
			break
		}

		return e.complexity.HPBlob.UpdatedAt(childComplexity), true

	case "HPBlob.width":
		if e.complexity.HPBlob.Width == nil {
			break
		}

		return e.complexity.HPBlob.Width(childComplexity), true

	case "HPBlobThumbnail.height":
		if e.complexity.HPBlobThumbnail.Height == nil {
			break
		}

		return e.complexity.HPBlobThumbnail.Height(childComplexity), true

	case "HPBlobThumbnail.sourceImageUrl":
		if e.complexity.HPBlobThumbnail.SourceImageURL == nil {
			break
		}

		return e.complexity.HPBlobThumbnail.SourceImageURL(childComplexity), true

	case "HPBlobThumbnail.storagePath":
		if e.complexity.HPBlobThumbnail.StoragePath == nil {
			break
		}

		return e.complexity.HPBlobThumbnail.StoragePath(childComplexity), true

	case "HPBlobThumbnail.width":
		if e.complexity.HPBlobThumbnail.Width == nil {
			break
		}

		return e.complexity.HPBlobThumbnail.Width(childComplexity), true

	case "HPElineupMallItem.category":
		if e.complexity.HPElineupMallItem.Category == nil {
			break
		}

		return e.complexity.HPElineupMallItem.Category(childComplexity), true

	case "HPElineupMallItem.crawledAt":
		if e.complexity.HPElineupMallItem.CrawledAt == nil {
			break
		}

		return e.complexity.HPElineupMallItem.CrawledAt(childComplexity), true

	case "HPElineupMallItem.createdAt":
		if e.complexity.HPElineupMallItem.CreatedAt == nil {
			break
		}

		return e.complexity.HPElineupMallItem.CreatedAt(childComplexity), true

	case "HPElineupMallItem.description":
		if e.complexity.HPElineupMallItem.Description == nil {
			break
		}

		return e.complexity.HPElineupMallItem.Description(childComplexity), true

	case "HPElineupMallItem.errorCount":
		if e.complexity.HPElineupMallItem.ErrorCount == nil {
			break
		}

		return e.complexity.HPElineupMallItem.ErrorCount(childComplexity), true

	case "HPElineupMallItem.id":
		if e.complexity.HPElineupMallItem.ID == nil {
			break
		}

		return e.complexity.HPElineupMallItem.ID(childComplexity), true

	case "HPElineupMallItem.images":
		if e.complexity.HPElineupMallItem.Images == nil {
			break
		}

		return e.complexity.HPElineupMallItem.Images(childComplexity), true

	case "HPElineupMallItem.isLimitedToFc":
		if e.complexity.HPElineupMallItem.IsLimitedToFc == nil {
			break
		}

		return e.complexity.HPElineupMallItem.IsLimitedToFc(childComplexity), true

	case "HPElineupMallItem.isOutOfStock":
		if e.complexity.HPElineupMallItem.IsOutOfStock == nil {
			break
		}

		return e.complexity.HPElineupMallItem.IsOutOfStock(childComplexity), true

	case "HPElineupMallItem.lastErrorMessage":
		if e.complexity.HPElineupMallItem.LastErrorMessage == nil {
			break
		}

		return e.complexity.HPElineupMallItem.LastErrorMessage(childComplexity), true

	case "HPElineupMallItem.name":
		if e.complexity.HPElineupMallItem.Name == nil {
			break
		}

		return e.complexity.HPElineupMallItem.Name(childComplexity), true

	case "HPElineupMallItem.orderEndAt":
		if e.complexity.HPElineupMallItem.OrderEndAt == nil {
			break
		}

		return e.complexity.HPElineupMallItem.OrderEndAt(childComplexity), true

	case "HPElineupMallItem.orderStartAt":
		if e.complexity.HPElineupMallItem.OrderStartAt == nil {
			break
		}

		return e.complexity.HPElineupMallItem.OrderStartAt(childComplexity), true

	case "HPElineupMallItem.permalink":
		if e.complexity.HPElineupMallItem.Permalink == nil {
			break
		}

		return e.complexity.HPElineupMallItem.Permalink(childComplexity), true

	case "HPElineupMallItem.price":
		if e.complexity.HPElineupMallItem.Price == nil {
			break
		}

		return e.complexity.HPElineupMallItem.Price(childComplexity), true

	case "HPElineupMallItem.recrawlRequired":
		if e.complexity.HPElineupMallItem.RecrawlRequired == nil {
			break
		}

		return e.complexity.HPElineupMallItem.RecrawlRequired(childComplexity), true

	case "HPElineupMallItem.supplier":
		if e.complexity.HPElineupMallItem.Supplier == nil {
			break
		}

		return e.complexity.HPElineupMallItem.Supplier(childComplexity), true

	case "HPElineupMallItem.taggedArtists":
		if e.complexity.HPElineupMallItem.TaggedArtists == nil {
			break
		}

		return e.complexity.HPElineupMallItem.TaggedArtists(childComplexity), true

	case "HPElineupMallItem.taggedMembers":
		if e.complexity.HPElineupMallItem.TaggedMembers == nil {
			break
		}

		return e.complexity.HPElineupMallItem.TaggedMembers(childComplexity), true

	case "HPElineupMallItem.updatedAt":
		if e.complexity.HPElineupMallItem.UpdatedAt == nil {
			break
		}

		return e.complexity.HPElineupMallItem.UpdatedAt(childComplexity), true

	case "HPElineupMallItemConnection.edges":
		if e.complexity.HPElineupMallItemConnection.Edges == nil {
			break
		}

		return e.complexity.HPElineupMallItemConnection.Edges(childComplexity), true

	case "HPElineupMallItemConnection.pageInfo":
		if e.complexity.HPElineupMallItemConnection.PageInfo == nil {
			break
		}

		return e.complexity.HPElineupMallItemConnection.PageInfo(childComplexity), true

	case "HPElineupMallItemConnection.totalCount":
		if e.complexity.HPElineupMallItemConnection.TotalCount == nil {
			break
		}

		return e.complexity.HPElineupMallItemConnection.TotalCount(childComplexity), true

	case "HPElineupMallItemEdge.cursor":
		if e.complexity.HPElineupMallItemEdge.Cursor == nil {
			break
		}

		return e.complexity.HPElineupMallItemEdge.Cursor(childComplexity), true

	case "HPElineupMallItemEdge.node":
		if e.complexity.HPElineupMallItemEdge.Node == nil {
			break
		}

		return e.complexity.HPElineupMallItemEdge.Node(childComplexity), true

	case "HPEvent.createdAt":
		if e.complexity.HPEvent.CreatedAt == nil {
			break
		}

		return e.complexity.HPEvent.CreatedAt(childComplexity), true

	case "HPEvent.displayTitles":
		if e.complexity.HPEvent.DisplayTitles == nil {
			break
		}

		return e.complexity.HPEvent.DisplayTitles(childComplexity), true

	case "HPEvent.id":
		if e.complexity.HPEvent.ID == nil {
			break
		}

		return e.complexity.HPEvent.ID(childComplexity), true

	case "HPEvent.key":
		if e.complexity.HPEvent.Key == nil {
			break
		}

		return e.complexity.HPEvent.Key(childComplexity), true

	case "HPEvent.openAt":
		if e.complexity.HPEvent.OpenAt == nil {
			break
		}

		return e.complexity.HPEvent.OpenAt(childComplexity), true

	case "HPEvent.prefecture":
		if e.complexity.HPEvent.Prefecture == nil {
			break
		}

		return e.complexity.HPEvent.Prefecture(childComplexity), true

	case "HPEvent.source":
		if e.complexity.HPEvent.Source == nil {
			break
		}

		return e.complexity.HPEvent.Source(childComplexity), true

	case "HPEvent.startAt":
		if e.complexity.HPEvent.StartAt == nil {
			break
		}

		return e.complexity.HPEvent.StartAt(childComplexity), true

	case "HPEvent.tickets":
		if e.complexity.HPEvent.Tickets == nil {
			break
		}

		return e.complexity.HPEvent.Tickets(childComplexity), true

	case "HPEvent.updatedAt":
		if e.complexity.HPEvent.UpdatedAt == nil {
			break
		}

		return e.complexity.HPEvent.UpdatedAt(childComplexity), true

	case "HPEvent.venue":
		if e.complexity.HPEvent.Venue == nil {
			break
		}

		return e.complexity.HPEvent.Venue(childComplexity), true

	case "HPEventConnection.edges":
		if e.complexity.HPEventConnection.Edges == nil {
			break
		}

		return e.complexity.HPEventConnection.Edges(childComplexity), true

	case "HPEventConnection.pageInfo":
		if e.complexity.HPEventConnection.PageInfo == nil {
			break
		}

		return e.complexity.HPEventConnection.PageInfo(childComplexity), true

	case "HPEventConnection.totalCount":
		if e.complexity.HPEventConnection.TotalCount == nil {
			break
		}

		return e.complexity.HPEventConnection.TotalCount(childComplexity), true

	case "HPEventEdge.cursor":
		if e.complexity.HPEventEdge.Cursor == nil {
			break
		}

		return e.complexity.HPEventEdge.Cursor(childComplexity), true

	case "HPEventEdge.node":
		if e.complexity.HPEventEdge.Node == nil {
			break
		}

		return e.complexity.HPEventEdge.Node(childComplexity), true

	case "HPFCEventTicket.applicationDueDate":
		if e.complexity.HPFCEventTicket.ApplicationDueDate == nil {
			break
		}

		return e.complexity.HPFCEventTicket.ApplicationDueDate(childComplexity), true

	case "HPFCEventTicket.applicationID":
		if e.complexity.HPFCEventTicket.ApplicationID == nil {
			break
		}

		return e.complexity.HPFCEventTicket.ApplicationID(childComplexity), true

	case "HPFCEventTicket.applicationSite":
		if e.complexity.HPFCEventTicket.ApplicationSite == nil {
			break
		}

		return e.complexity.HPFCEventTicket.ApplicationSite(childComplexity), true

	case "HPFCEventTicket.applicationStartDate":
		if e.complexity.HPFCEventTicket.ApplicationStartDate == nil {
			break
		}

		return e.complexity.HPFCEventTicket.ApplicationStartDate(childComplexity), true

	case "HPFCEventTicket.applicationTitle":
		if e.complexity.HPFCEventTicket.ApplicationTitle == nil {
			break
		}

		return e.complexity.HPFCEventTicket.ApplicationTitle(childComplexity), true

	case "HPFCEventTicket.createdAt":
		if e.complexity.HPFCEventTicket.CreatedAt == nil {
			break
		}

		return e.complexity.HPFCEventTicket.CreatedAt(childComplexity), true

	case "HPFCEventTicket.fcMemberSha256":
		if e.complexity.HPFCEventTicket.FcMemberSha256 == nil {
			break
		}

		return e.complexity.HPFCEventTicket.FcMemberSha256(childComplexity), true

	case "HPFCEventTicket.id":
		if e.complexity.HPFCEventTicket.ID == nil {
			break
		}

		return e.complexity.HPFCEventTicket.ID(childComplexity), true

	case "HPFCEventTicket.num":
		if e.complexity.HPFCEventTicket.Num == nil {
			break
		}

		return e.complexity.HPFCEventTicket.Num(childComplexity), true

	case "HPFCEventTicket.paymentDueDate":
		if e.complexity.HPFCEventTicket.PaymentDueDate == nil {
			break
		}

		return e.complexity.HPFCEventTicket.PaymentDueDate(childComplexity), true

	case "HPFCEventTicket.paymentStartDate":
		if e.complexity.HPFCEventTicket.PaymentStartDate == nil {
			break
		}

		return e.complexity.HPFCEventTicket.PaymentStartDate(childComplexity), true

	case "HPFCEventTicket.status":
		if e.complexity.HPFCEventTicket.Status == nil {
			break
		}

		return e.complexity.HPFCEventTicket.Status(childComplexity), true

	case "HPFCEventTicket.updatedAt":
		if e.complexity.HPFCEventTicket.UpdatedAt == nil {
			break
		}

		return e.complexity.HPFCEventTicket.UpdatedAt(childComplexity), true

	case "HPFeedItem.assetType":
		if e.complexity.HPFeedItem.AssetType == nil {
			break
		}

		return e.complexity.HPFeedItem.AssetType(childComplexity), true

	case "HPFeedItem.createdAt":
		if e.complexity.HPFeedItem.CreatedAt == nil {
			break
		}

		return e.complexity.HPFeedItem.CreatedAt(childComplexity), true

	case "HPFeedItem.id":
		if e.complexity.HPFeedItem.ID == nil {
			break
		}

		return e.complexity.HPFeedItem.ID(childComplexity), true

	case "HPFeedItem.imageURL":
		if e.complexity.HPFeedItem.ImageURL == nil {
			break
		}

		return e.complexity.HPFeedItem.ImageURL(childComplexity), true

	case "HPFeedItem.media":
		if e.complexity.HPFeedItem.Media == nil {
			break
		}

		return e.complexity.HPFeedItem.Media(childComplexity), true

	case "HPFeedItem.myViewHistory":
		if e.complexity.HPFeedItem.MyViewHistory == nil {
			break
		}

		return e.complexity.HPFeedItem.MyViewHistory(childComplexity), true

	case "HPFeedItem.ownerArtist":
		if e.complexity.HPFeedItem.OwnerArtist == nil {
			break
		}

		return e.complexity.HPFeedItem.OwnerArtist(childComplexity), true

	case "HPFeedItem.ownerArtistID":
		if e.complexity.HPFeedItem.OwnerArtistID == nil {
			break
		}

		return e.complexity.HPFeedItem.OwnerArtistID(childComplexity), true

	case "HPFeedItem.ownerMember":
		if e.complexity.HPFeedItem.OwnerMember == nil {
			break
		}

		return e.complexity.HPFeedItem.OwnerMember(childComplexity), true

	case "HPFeedItem.ownerMemberID":
		if e.complexity.HPFeedItem.OwnerMemberID == nil {
			break
		}

		return e.complexity.HPFeedItem.OwnerMemberID(childComplexity), true

	case "HPFeedItem.postAt":
		if e.complexity.HPFeedItem.PostAt == nil {
			break
		}

		return e.complexity.HPFeedItem.PostAt(childComplexity), true

	case "HPFeedItem.sourceID":
		if e.complexity.HPFeedItem.SourceID == nil {
			break
		}

		return e.complexity.HPFeedItem.SourceID(childComplexity), true

	case "HPFeedItem.sourceURL":
		if e.complexity.HPFeedItem.SourceURL == nil {
			break
		}

		return e.complexity.HPFeedItem.SourceURL(childComplexity), true

	case "HPFeedItem.taggedArtists":
		if e.complexity.HPFeedItem.TaggedArtists == nil {
			break
		}

		return e.complexity.HPFeedItem.TaggedArtists(childComplexity), true

	case "HPFeedItem.taggedMembers":
		if e.complexity.HPFeedItem.TaggedMembers == nil {
			break
		}

		return e.complexity.HPFeedItem.TaggedMembers(childComplexity), true

	case "HPFeedItem.title":
		if e.complexity.HPFeedItem.Title == nil {
			break
		}

		return e.complexity.HPFeedItem.Title(childComplexity), true

	case "HPFeedItem.updatedAt":
		if e.complexity.HPFeedItem.UpdatedAt == nil {
			break
		}

		return e.complexity.HPFeedItem.UpdatedAt(childComplexity), true

	case "HPFeedItemConnection.edges":
		if e.complexity.HPFeedItemConnection.Edges == nil {
			break
		}

		return e.complexity.HPFeedItemConnection.Edges(childComplexity), true

	case "HPFeedItemConnection.pageInfo":
		if e.complexity.HPFeedItemConnection.PageInfo == nil {
			break
		}

		return e.complexity.HPFeedItemConnection.PageInfo(childComplexity), true

	case "HPFeedItemConnection.totalCount":
		if e.complexity.HPFeedItemConnection.TotalCount == nil {
			break
		}

		return e.complexity.HPFeedItemConnection.TotalCount(childComplexity), true

	case "HPFeedItemEdge.cursor":
		if e.complexity.HPFeedItemEdge.Cursor == nil {
			break
		}

		return e.complexity.HPFeedItemEdge.Cursor(childComplexity), true

	case "HPFeedItemEdge.node":
		if e.complexity.HPFeedItemEdge.Node == nil {
			break
		}

		return e.complexity.HPFeedItemEdge.Node(childComplexity), true

	case "HPFollow.createdAt":
		if e.complexity.HPFollow.CreatedAt == nil {
			break
		}

		return e.complexity.HPFollow.CreatedAt(childComplexity), true

	case "HPFollow.id":
		if e.complexity.HPFollow.ID == nil {
			break
		}

		return e.complexity.HPFollow.ID(childComplexity), true

	case "HPFollow.member":
		if e.complexity.HPFollow.Member == nil {
			break
		}

		return e.complexity.HPFollow.Member(childComplexity), true

	case "HPFollow.type":
		if e.complexity.HPFollow.Type == nil {
			break
		}

		return e.complexity.HPFollow.Type(childComplexity), true

	case "HPFollow.updatedAt":
		if e.complexity.HPFollow.UpdatedAt == nil {
			break
		}

		return e.complexity.HPFollow.UpdatedAt(childComplexity), true

	case "HPFollow.user":
		if e.complexity.HPFollow.User == nil {
			break
		}

		return e.complexity.HPFollow.User(childComplexity), true

	case "HPIgCrawlArgs.caption":
		if e.complexity.HPIgCrawlArgs.Caption == nil {
			break
		}

		return e.complexity.HPIgCrawlArgs.Caption(childComplexity), true

	case "HPIgCrawlArgs.childPosts":
		if e.complexity.HPIgCrawlArgs.ChildPosts == nil {
			break
		}

		return e.complexity.HPIgCrawlArgs.ChildPosts(childComplexity), true

	case "HPIgCrawlArgs.commentsCount":
		if e.complexity.HPIgCrawlArgs.CommentsCount == nil {
			break
		}

		return e.complexity.HPIgCrawlArgs.CommentsCount(childComplexity), true

	case "HPIgCrawlArgs.displayUrl":
		if e.complexity.HPIgCrawlArgs.DisplayURL == nil {
			break
		}

		return e.complexity.HPIgCrawlArgs.DisplayURL(childComplexity), true

	case "HPIgCrawlArgs.hashtags":
		if e.complexity.HPIgCrawlArgs.Hashtags == nil {
			break
		}

		return e.complexity.HPIgCrawlArgs.Hashtags(childComplexity), true

	case "HPIgCrawlArgs.id":
		if e.complexity.HPIgCrawlArgs.ID == nil {
			break
		}

		return e.complexity.HPIgCrawlArgs.ID(childComplexity), true

	case "HPIgCrawlArgs.likesCount":
		if e.complexity.HPIgCrawlArgs.LikesCount == nil {
			break
		}

		return e.complexity.HPIgCrawlArgs.LikesCount(childComplexity), true

	case "HPIgCrawlArgs.ownerId":
		if e.complexity.HPIgCrawlArgs.OwnerID == nil {
			break
		}

		return e.complexity.HPIgCrawlArgs.OwnerID(childComplexity), true

	case "HPIgCrawlArgs.ownerUsername":
		if e.complexity.HPIgCrawlArgs.OwnerUsername == nil {
			break
		}

		return e.complexity.HPIgCrawlArgs.OwnerUsername(childComplexity), true

	case "HPIgCrawlArgs.shortcode":
		if e.complexity.HPIgCrawlArgs.Shortcode == nil {
			break
		}

		return e.complexity.HPIgCrawlArgs.Shortcode(childComplexity), true

	case "HPIgCrawlArgs.timestamp":
		if e.complexity.HPIgCrawlArgs.Timestamp == nil {
			break
		}

		return e.complexity.HPIgCrawlArgs.Timestamp(childComplexity), true

	case "HPIgCrawlArgs.videoUrl":
		if e.complexity.HPIgCrawlArgs.VideoURL == nil {
			break
		}

		return e.complexity.HPIgCrawlArgs.VideoURL(childComplexity), true

	case "HPIgCrawlArgs.videoViewCount":
		if e.complexity.HPIgCrawlArgs.VideoViewCount == nil {
			break
		}

		return e.complexity.HPIgCrawlArgs.VideoViewCount(childComplexity), true

	case "HPIgCrawlArgsChildPost.displayUrl":
		if e.complexity.HPIgCrawlArgsChildPost.DisplayURL == nil {
			break
		}

		return e.complexity.HPIgCrawlArgsChildPost.DisplayURL(childComplexity), true

	case "HPIgCrawlArgsChildPost.id":
		if e.complexity.HPIgCrawlArgsChildPost.ID == nil {
			break
		}

		return e.complexity.HPIgCrawlArgsChildPost.ID(childComplexity), true

	case "HPIgCrawlArgsChildPost.likesCount":
		if e.complexity.HPIgCrawlArgsChildPost.LikesCount == nil {
			break
		}

		return e.complexity.HPIgCrawlArgsChildPost.LikesCount(childComplexity), true

	case "HPIgCrawlArgsChildPost.type":
		if e.complexity.HPIgCrawlArgsChildPost.Type == nil {
			break
		}

		return e.complexity.HPIgCrawlArgsChildPost.Type(childComplexity), true

	case "HPIgCrawlArgsChildPost.videoUrl":
		if e.complexity.HPIgCrawlArgsChildPost.VideoURL == nil {
			break
		}

		return e.complexity.HPIgCrawlArgsChildPost.VideoURL(childComplexity), true

	case "HPIgCrawlArgsChildPost.videoViewCount":
		if e.complexity.HPIgCrawlArgsChildPost.VideoViewCount == nil {
			break
		}

		return e.complexity.HPIgCrawlArgsChildPost.VideoViewCount(childComplexity), true

	case "HPIgPost.blobs":
		if e.complexity.HPIgPost.Blobs == nil {
			break
		}

		return e.complexity.HPIgPost.Blobs(childComplexity), true

	case "HPIgPost.comments":
		if e.complexity.HPIgPost.Comments == nil {
			break
		}

		return e.complexity.HPIgPost.Comments(childComplexity), true

	case "HPIgPost.crawledAt":
		if e.complexity.HPIgPost.CrawledAt == nil {
			break
		}

		return e.complexity.HPIgPost.CrawledAt(childComplexity), true

	case "HPIgPost.createdAt":
		if e.complexity.HPIgPost.CreatedAt == nil {
			break
		}

		return e.complexity.HPIgPost.CreatedAt(childComplexity), true

	case "HPIgPost.description":
		if e.complexity.HPIgPost.Description == nil {
			break
		}

		return e.complexity.HPIgPost.Description(childComplexity), true

	case "HPIgPost.errorCount":
		if e.complexity.HPIgPost.ErrorCount == nil {
			break
		}

		return e.complexity.HPIgPost.ErrorCount(childComplexity), true

	case "HPIgPost.id":
		if e.complexity.HPIgPost.ID == nil {
			break
		}

		return e.complexity.HPIgPost.ID(childComplexity), true

	case "HPIgPost.lastErrorMessage":
		if e.complexity.HPIgPost.LastErrorMessage == nil {
			break
		}

		return e.complexity.HPIgPost.LastErrorMessage(childComplexity), true

	case "HPIgPost.likes":
		if e.complexity.HPIgPost.Likes == nil {
			break
		}

		return e.complexity.HPIgPost.Likes(childComplexity), true

	case "HPIgPost.media":
		if e.complexity.HPIgPost.Media == nil {
			break
		}

		return e.complexity.HPIgPost.Media(childComplexity), true

	case "HPIgPost.ownerArtist":
		if e.complexity.HPIgPost.OwnerArtist == nil {
			break
		}

		return e.complexity.HPIgPost.OwnerArtist(childComplexity), true

	case "HPIgPost.ownerArtistID":
		if e.complexity.HPIgPost.OwnerArtistID == nil {
			break
		}

		return e.complexity.HPIgPost.OwnerArtistID(childComplexity), true

	case "HPIgPost.ownerMember":
		if e.complexity.HPIgPost.OwnerMember == nil {
			break
		}

		return e.complexity.HPIgPost.OwnerMember(childComplexity), true

	case "HPIgPost.ownerMemberID":
		if e.complexity.HPIgPost.OwnerMemberID == nil {
			break
		}

		return e.complexity.HPIgPost.OwnerMemberID(childComplexity), true

	case "HPIgPost.postAt":
		if e.complexity.HPIgPost.PostAt == nil {
			break
		}

		return e.complexity.HPIgPost.PostAt(childComplexity), true

	case "HPIgPost.recrawlArgs":
		if e.complexity.HPIgPost.RecrawlArgs == nil {
			break
		}

		return e.complexity.HPIgPost.RecrawlArgs(childComplexity), true

	case "HPIgPost.recrawlRequired":
		if e.complexity.HPIgPost.RecrawlRequired == nil {
			break
		}

		return e.complexity.HPIgPost.RecrawlRequired(childComplexity), true

	case "HPIgPost.shortcode":
		if e.complexity.HPIgPost.Shortcode == nil {
			break
		}

		return e.complexity.HPIgPost.Shortcode(childComplexity), true

	case "HPIgPost.taggedArtists":
		if e.complexity.HPIgPost.TaggedArtists == nil {
			break
		}

		return e.complexity.HPIgPost.TaggedArtists(childComplexity), true

	case "HPIgPost.taggedMembers":
		if e.complexity.HPIgPost.TaggedMembers == nil {
			break
		}

		return e.complexity.HPIgPost.TaggedMembers(childComplexity), true

	case "HPIgPost.updatedAt":
		if e.complexity.HPIgPost.UpdatedAt == nil {
			break
		}

		return e.complexity.HPIgPost.UpdatedAt(childComplexity), true

	case "HPIgPostConnection.edges":
		if e.complexity.HPIgPostConnection.Edges == nil {
			break
		}

		return e.complexity.HPIgPostConnection.Edges(childComplexity), true

	case "HPIgPostConnection.pageInfo":
		if e.complexity.HPIgPostConnection.PageInfo == nil {
			break
		}

		return e.complexity.HPIgPostConnection.PageInfo(childComplexity), true

	case "HPIgPostConnection.totalCount":
		if e.complexity.HPIgPostConnection.TotalCount == nil {
			break
		}

		return e.complexity.HPIgPostConnection.TotalCount(childComplexity), true

	case "HPIgPostEdge.cursor":
		if e.complexity.HPIgPostEdge.Cursor == nil {
			break
		}

		return e.complexity.HPIgPostEdge.Cursor(childComplexity), true

	case "HPIgPostEdge.node":
		if e.complexity.HPIgPostEdge.Node == nil {
			break
		}

		return e.complexity.HPIgPostEdge.Node(childComplexity), true

	case "HPMember.artist":
		if e.complexity.HPMember.Artist == nil {
			break
		}

		return e.complexity.HPMember.Artist(childComplexity), true

	case "HPMember.artistID":
		if e.complexity.HPMember.ArtistID == nil {
			break
		}

		return e.complexity.HPMember.ArtistID(childComplexity), true

	case "HPMember.artistKey":
		if e.complexity.HPMember.ArtistKey == nil {
			break
		}

		return e.complexity.HPMember.ArtistKey(childComplexity), true

	case "HPMember.bloodType":
		if e.complexity.HPMember.BloodType == nil {
			break
		}

		return e.complexity.HPMember.BloodType(childComplexity), true

	case "HPMember.crawledAt":
		if e.complexity.HPMember.CrawledAt == nil {
			break
		}

		return e.complexity.HPMember.CrawledAt(childComplexity), true

	case "HPMember.createdAt":
		if e.complexity.HPMember.CreatedAt == nil {
			break
		}

		return e.complexity.HPMember.CreatedAt(childComplexity), true

	case "HPMember.dateOfBirth":
		if e.complexity.HPMember.DateOfBirth == nil {
			break
		}

		return e.complexity.HPMember.DateOfBirth(childComplexity), true

	case "HPMember.errorCount":
		if e.complexity.HPMember.ErrorCount == nil {
			break
		}

		return e.complexity.HPMember.ErrorCount(childComplexity), true

	case "HPMember.graduateAt":
		if e.complexity.HPMember.GraduateAt == nil {
			break
		}

		return e.complexity.HPMember.GraduateAt(childComplexity), true

	case "HPMember.hometown":
		if e.complexity.HPMember.Hometown == nil {
			break
		}

		return e.complexity.HPMember.Hometown(childComplexity), true

	case "HPMember.id":
		if e.complexity.HPMember.ID == nil {
			break
		}

		return e.complexity.HPMember.ID(childComplexity), true

	case "HPMember.joinAt":
		if e.complexity.HPMember.JoinAt == nil {
			break
		}

		return e.complexity.HPMember.JoinAt(childComplexity), true

	case "HPMember.key":
		if e.complexity.HPMember.Key == nil {
			break
		}

		return e.complexity.HPMember.Key(childComplexity), true

	case "HPMember.lastErrorMessage":
		if e.complexity.HPMember.LastErrorMessage == nil {
			break
		}

		return e.complexity.HPMember.LastErrorMessage(childComplexity), true

	case "HPMember.name":
		if e.complexity.HPMember.Name == nil {
			break
		}

		return e.complexity.HPMember.Name(childComplexity), true

	case "HPMember.nameKana":
		if e.complexity.HPMember.NameKana == nil {
			break
		}

		return e.complexity.HPMember.NameKana(childComplexity), true

	case "HPMember.recrawlRequired":
		if e.complexity.HPMember.RecrawlRequired == nil {
			break
		}

		return e.complexity.HPMember.RecrawlRequired(childComplexity), true

	case "HPMember.thumbnailURL":
		if e.complexity.HPMember.ThumbnailURL == nil {
			break
		}

		return e.complexity.HPMember.ThumbnailURL(childComplexity), true

	case "HPMember.updatedAt":
		if e.complexity.HPMember.UpdatedAt == nil {
			break
		}

		return e.complexity.HPMember.UpdatedAt(childComplexity), true

	case "HPMemberConnection.edges":
		if e.complexity.HPMemberConnection.Edges == nil {
			break
		}

		return e.complexity.HPMemberConnection.Edges(childComplexity), true

	case "HPMemberConnection.pageInfo":
		if e.complexity.HPMemberConnection.PageInfo == nil {
			break
		}

		return e.complexity.HPMemberConnection.PageInfo(childComplexity), true

	case "HPMemberConnection.totalCount":
		if e.complexity.HPMemberConnection.TotalCount == nil {
			break
		}

		return e.complexity.HPMemberConnection.TotalCount(childComplexity), true

	case "HPMemberEdge.cursor":
		if e.complexity.HPMemberEdge.Cursor == nil {
			break
		}

		return e.complexity.HPMemberEdge.Cursor(childComplexity), true

	case "HPMemberEdge.node":
		if e.complexity.HPMemberEdge.Node == nil {
			break
		}

		return e.complexity.HPMemberEdge.Node(childComplexity), true

	case "HPSortHistory.createdAt":
		if e.complexity.HPSortHistory.CreatedAt == nil {
			break
		}

		return e.complexity.HPSortHistory.CreatedAt(childComplexity), true

	case "HPSortHistory.id":
		if e.complexity.HPSortHistory.ID == nil {
			break
		}

		return e.complexity.HPSortHistory.ID(childComplexity), true

	case "HPSortHistory.owner":
		if e.complexity.HPSortHistory.Owner == nil {
			break
		}

		return e.complexity.HPSortHistory.Owner(childComplexity), true

	case "HPSortHistory.sortResult":
		if e.complexity.HPSortHistory.SortResult == nil {
			break
		}

		return e.complexity.HPSortHistory.SortResult(childComplexity), true

	case "HPSortHistory.updatedAt":
		if e.complexity.HPSortHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.HPSortHistory.UpdatedAt(childComplexity), true

	case "HPSortHistoryConnection.edges":
		if e.complexity.HPSortHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.HPSortHistoryConnection.Edges(childComplexity), true

	case "HPSortHistoryConnection.pageInfo":
		if e.complexity.HPSortHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.HPSortHistoryConnection.PageInfo(childComplexity), true

	case "HPSortHistoryConnection.totalCount":
		if e.complexity.HPSortHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.HPSortHistoryConnection.TotalCount(childComplexity), true

	case "HPSortHistoryEdge.cursor":
		if e.complexity.HPSortHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.HPSortHistoryEdge.Cursor(childComplexity), true

	case "HPSortHistoryEdge.node":
		if e.complexity.HPSortHistoryEdge.Node == nil {
			break
		}

		return e.complexity.HPSortHistoryEdge.Node(childComplexity), true

	case "HPSortResult.records":
		if e.complexity.HPSortResult.Records == nil {
			break
		}

		return e.complexity.HPSortResult.Records(childComplexity), true

	case "HPSortResultRecord.artistId":
		if e.complexity.HPSortResultRecord.ArtistID == nil {
			break
		}

		return e.complexity.HPSortResultRecord.ArtistID(childComplexity), true

	case "HPSortResultRecord.artistKey":
		if e.complexity.HPSortResultRecord.ArtistKey == nil {
			break
		}

		return e.complexity.HPSortResultRecord.ArtistKey(childComplexity), true

	case "HPSortResultRecord.memberId":
		if e.complexity.HPSortResultRecord.MemberID == nil {
			break
		}

		return e.complexity.HPSortResultRecord.MemberID(childComplexity), true

	case "HPSortResultRecord.memberKey":
		if e.complexity.HPSortResultRecord.MemberKey == nil {
			break
		}

		return e.complexity.HPSortResultRecord.MemberKey(childComplexity), true

	case "HPViewHistory.assetType":
		if e.complexity.HPViewHistory.AssetType == nil {
			break
		}

		return e.complexity.HPViewHistory.AssetType(childComplexity), true

	case "HPViewHistory.contentID":
		if e.complexity.HPViewHistory.ContentID == nil {
			break
		}

		return e.complexity.HPViewHistory.ContentID(childComplexity), true

	case "HPViewHistory.contentPostAt":
		if e.complexity.HPViewHistory.ContentPostAt == nil {
			break
		}

		return e.complexity.HPViewHistory.ContentPostAt(childComplexity), true

	case "HPViewHistory.createdAt":
		if e.complexity.HPViewHistory.CreatedAt == nil {
			break
		}

		return e.complexity.HPViewHistory.CreatedAt(childComplexity), true

	case "HPViewHistory.feed":
		if e.complexity.HPViewHistory.Feed == nil {
			break
		}

		return e.complexity.HPViewHistory.Feed(childComplexity), true

	case "HPViewHistory.id":
		if e.complexity.HPViewHistory.ID == nil {
			break
		}

		return e.complexity.HPViewHistory.ID(childComplexity), true

	case "HPViewHistory.isFavorite":
		if e.complexity.HPViewHistory.IsFavorite == nil {
			break
		}

		return e.complexity.HPViewHistory.IsFavorite(childComplexity), true

	case "HPViewHistory.updatedAt":
		if e.complexity.HPViewHistory.UpdatedAt == nil {
			break
		}

		return e.complexity.HPViewHistory.UpdatedAt(childComplexity), true

	case "HPViewHistoryConnection.edges":
		if e.complexity.HPViewHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.HPViewHistoryConnection.Edges(childComplexity), true

	case "HPViewHistoryConnection.pageInfo":
		if e.complexity.HPViewHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.HPViewHistoryConnection.PageInfo(childComplexity), true

	case "HPViewHistoryConnection.totalCount":
		if e.complexity.HPViewHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.HPViewHistoryConnection.TotalCount(childComplexity), true

	case "HPViewHistoryEdge.cursor":
		if e.complexity.HPViewHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.HPViewHistoryEdge.Cursor(childComplexity), true

	case "HPViewHistoryEdge.node":
		if e.complexity.HPViewHistoryEdge.Node == nil {
			break
		}

		return e.complexity.HPViewHistoryEdge.Node(childComplexity), true

	case "HelloProjectQuery.artists":
		if e.complexity.HelloProjectQuery.Artists == nil {
			break
		}

		args, err := ec.field_HelloProjectQuery_artists_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.HelloProjectQuery.Artists(childComplexity, args["after"].(*entgql.Cursor[int]), args["first"].(*int), args["before"].(*entgql.Cursor[int]), args["last"].(*int)), true

	case "HelloProjectQuery.elineupMallItems":
		if e.complexity.HelloProjectQuery.ElineupMallItems == nil {
			break
		}

		args, err := ec.field_HelloProjectQuery_elineupMallItems_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.HelloProjectQuery.ElineupMallItems(childComplexity, args["params"].(helloproject.HPElineumpMallItemsParams), args["after"].(*entgql.Cursor[int]), args["first"].(*int), args["before"].(*entgql.Cursor[int]), args["last"].(*int)), true

	case "HelloProjectQuery.feed":
		if e.complexity.HelloProjectQuery.Feed == nil {
			break
		}

		args, err := ec.field_HelloProjectQuery_feed_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.HelloProjectQuery.Feed(childComplexity, args["params"].(helloproject.HPFeedQueryParams), args["after"].(*entgql.Cursor[int]), args["first"].(*int), args["before"].(*entgql.Cursor[int]), args["last"].(*int)), true

	case "HelloProjectQuery.id":
		if e.complexity.HelloProjectQuery.ID == nil {
			break
		}

		return e.complexity.HelloProjectQuery.ID(childComplexity), true

	case "MeMutation.authenticate":
		if e.complexity.MeMutation.Authenticate == nil {
			break
		}

		return e.complexity.MeMutation.Authenticate(childComplexity), true

	case "MeMutation.removeAuthentication":
		if e.complexity.MeMutation.RemoveAuthentication == nil {
			break
		}

		return e.complexity.MeMutation.RemoveAuthentication(childComplexity), true

	case "MeMutation.upsertEvents":
		if e.complexity.MeMutation.UpsertEvents == nil {
			break
		}

		args, err := ec.field_MeMutation_upsertEvents_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MeMutation.UpsertEvents(childComplexity, args["params"].(upfc.HPFCEventTicketApplicationUpsertParams)), true

	case "MeMutation.upsertFollow":
		if e.complexity.MeMutation.UpsertFollow == nil {
			break
		}

		args, err := ec.field_MeMutation_upsertFollow_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MeMutation.UpsertFollow(childComplexity, args["params"].(user.HPFollowUpsertParams)), true

	case "MeMutation.upsertViewHistory":
		if e.complexity.MeMutation.UpsertViewHistory == nil {
			break
		}

		args, err := ec.field_MeMutation_upsertViewHistory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MeMutation.UpsertViewHistory(childComplexity, args["params"].(feed.HPViewHistoryUpsertParams)), true

	case "MeQuery.authentications":
		if e.complexity.MeQuery.Authentications == nil {
			break
		}

		return e.complexity.MeQuery.Authentications(childComplexity), true

	case "MeQuery.clientId":
		if e.complexity.MeQuery.ClientID == nil {
			break
		}

		return e.complexity.MeQuery.ClientID(childComplexity), true

	case "MeQuery.clientIsVerified":
		if e.complexity.MeQuery.ClientIsVerified == nil {
			break
		}

		return e.complexity.MeQuery.ClientIsVerified(childComplexity), true

	case "MeQuery.clientName":
		if e.complexity.MeQuery.ClientName == nil {
			break
		}

		return e.complexity.MeQuery.ClientName(childComplexity), true

	case "MeQuery.events":
		if e.complexity.MeQuery.Events == nil {
			break
		}

		args, err := ec.field_MeQuery_events_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MeQuery.Events(childComplexity, args["after"].(*entgql.Cursor[int]), args["first"].(*int), args["before"].(*entgql.Cursor[int]), args["last"].(*int)), true

	case "MeQuery.favorites":
		if e.complexity.MeQuery.Favorites == nil {
			break
		}

		args, err := ec.field_MeQuery_favorites_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MeQuery.Favorites(childComplexity, args["params"].(me.MeFavoriteQueryParams), args["after"].(*entgql.Cursor[int]), args["first"].(*int), args["before"].(*entgql.Cursor[int]), args["last"].(*int)), true

	case "MeQuery.followings":
		if e.complexity.MeQuery.Followings == nil {
			break
		}

		return e.complexity.MeQuery.Followings(childComplexity), true

	case "MeQuery.id":
		if e.complexity.MeQuery.ID == nil {
			break
		}

		return e.complexity.MeQuery.ID(childComplexity), true

	case "MeQuery.sortHistories":
		if e.complexity.MeQuery.SortHistories == nil {
			break
		}

		args, err := ec.field_MeQuery_sortHistories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MeQuery.SortHistories(childComplexity, args["after"].(*entgql.Cursor[int]), args["first"].(*int), args["before"].(*entgql.Cursor[int]), args["last"].(*int)), true

	case "MeQuery.userId":
		if e.complexity.MeQuery.UserID == nil {
			break
		}

		return e.complexity.MeQuery.UserID(childComplexity), true

	case "MeQuery.username":
		if e.complexity.MeQuery.Username == nil {
			break
		}

		return e.complexity.MeQuery.Username(childComplexity), true

	case "Media.blobId":
		if e.complexity.Media.BlobID == nil {
			break
		}

		return e.complexity.Media.BlobID(childComplexity), true

	case "Media.height":
		if e.complexity.Media.Height == nil {
			break
		}

		return e.complexity.Media.Height(childComplexity), true

	case "Media.thumbnailHeight":
		if e.complexity.Media.ThumbnailHeight == nil {
			break
		}

		return e.complexity.Media.ThumbnailHeight(childComplexity), true

	case "Media.thumbnailUrl":
		if e.complexity.Media.ThumbnailUrl == nil {
			break
		}

		return e.complexity.Media.ThumbnailUrl(childComplexity), true

	case "Media.thumbnailWidth":
		if e.complexity.Media.ThumbnailWidth == nil {
			break
		}

		return e.complexity.Media.ThumbnailWidth(childComplexity), true

	case "Media.type":
		if e.complexity.Media.Type == nil {
			break
		}

		return e.complexity.Media.Type(childComplexity), true

	case "Media.url":
		if e.complexity.Media.Url == nil {
			break
		}

		return e.complexity.Media.Url(childComplexity), true

	case "Media.width":
		if e.complexity.Media.Width == nil {
			break
		}

		return e.complexity.Media.Width(childComplexity), true

	case "Message.badge":
		if e.complexity.Message.Badge == nil {
			break
		}

		return e.complexity.Message.Badge(childComplexity), true

	case "Message.body":
		if e.complexity.Message.Body == nil {
			break
		}

		return e.complexity.Message.Body(childComplexity), true

	case "Message.data":
		if e.complexity.Message.Data == nil {
			break
		}

		return e.complexity.Message.Data(childComplexity), true

	case "Message.imageUrl":
		if e.complexity.Message.ImageUrl == nil {
			break
		}

		return e.complexity.Message.ImageUrl(childComplexity), true

	case "Message.priority":
		if e.complexity.Message.Priority == nil {
			break
		}

		return e.complexity.Message.Priority(childComplexity), true

	case "Message.sound":
		if e.complexity.Message.Sound == nil {
			break
		}

		return e.complexity.Message.Sound(childComplexity), true

	case "Message.ttlSeconds":
		if e.complexity.Message.TTLSeconds == nil {
			break
		}

		return e.complexity.Message.TTLSeconds(childComplexity), true

	case "Message.title":
		if e.complexity.Message.Title == nil {
			break
		}

		return e.complexity.Message.Title(childComplexity), true

	case "Message.to":
		if e.complexity.Message.To == nil {
			break
		}

		return e.complexity.Message.To(childComplexity), true

	case "Misc.version":
		if e.complexity.Misc.Version == nil {
			break
		}

		return e.complexity.Misc.Version(childComplexity), true

	case "Mutation.authenticate":
		if e.complexity.Mutation.Authenticate == nil {
			break
		}

		return e.complexity.Mutation.Authenticate(childComplexity), true

	case "Mutation.me":
		if e.complexity.Mutation.Me == nil {
			break
		}

		return e.complexity.Mutation.Me(childComplexity), true

	case "PageInfo.endCursor":
		if e.complexity.PageInfo.EndCursor == nil {
			break
		}

		return e.complexity.PageInfo.EndCursor(childComplexity), true

	case "PageInfo.hasNextPage":
		if e.complexity.PageInfo.HasNextPage == nil {
			break
		}

		return e.complexity.PageInfo.HasNextPage(childComplexity), true

	case "PageInfo.hasPreviousPage":
		if e.complexity.PageInfo.HasPreviousPage == nil {
			break
		}

		return e.complexity.PageInfo.HasPreviousPage(childComplexity), true

	case "PageInfo.startCursor":
		if e.complexity.PageInfo.StartCursor == nil {
			break
		}

		return e.complexity.PageInfo.StartCursor(childComplexity), true

	case "Query.helloproject":
		if e.complexity.Query.Helloproject == nil {
			break
		}

		return e.complexity.Query.Helloproject(childComplexity), true

	case "Query.me":
		if e.complexity.Query.Me == nil {
			break
		}

		return e.complexity.Query.Me(childComplexity), true

	case "Query.node":
		if e.complexity.Query.Node == nil {
			break
		}

		args, err := ec.field_Query_node_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Node(childComplexity, args["id"].(string)), true

	case "Query.nodes":
		if e.complexity.Query.Nodes == nil {
			break
		}

		args, err := ec.field_Query_nodes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Nodes(childComplexity, args["ids"].([]string)), true

	case "ReactNavigationPush.params":
		if e.complexity.ReactNavigationPush.Params == nil {
			break
		}

		return e.complexity.ReactNavigationPush.Params(childComplexity), true

	case "ReactNavigationPush.path":
		if e.complexity.ReactNavigationPush.Path == nil {
			break
		}

		return e.complexity.ReactNavigationPush.Path(childComplexity), true

	case "ReactNavigationPush.pushMessage":
		if e.complexity.ReactNavigationPush.PushMessage == nil {
			break
		}

		return e.complexity.ReactNavigationPush.PushMessage(childComplexity), true

	case "ReactNavigationPush.toPushMessage":
		if e.complexity.ReactNavigationPush.ToPushMessage == nil {
			break
		}

		args, err := ec.field_ReactNavigationPush_toPushMessage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ReactNavigationPush.ToPushMessage(childComplexity, args["tokens"].([]string)), true

	case "User.accessToken":
		if e.complexity.User.AccessToken == nil {
			break
		}

		return e.complexity.User.AccessToken(childComplexity), true

	case "User.auth":
		if e.complexity.User.Auth == nil {
			break
		}

		return e.complexity.User.Auth(childComplexity), true

	case "User.createdAt":
		if e.complexity.User.CreatedAt == nil {
			break
		}

		return e.complexity.User.CreatedAt(childComplexity), true

	case "User.hpfcEventTickets":
		if e.complexity.User.HpfcEventTickets == nil {
			break
		}

		return e.complexity.User.HpfcEventTickets(childComplexity), true

	case "User.hpmemberFollowing":
		if e.complexity.User.HpmemberFollowing == nil {
			break
		}

		return e.complexity.User.HpmemberFollowing(childComplexity), true

	case "User.hpsortHistory":
		if e.complexity.User.HpsortHistory == nil {
			break
		}

		return e.complexity.User.HpsortHistory(childComplexity), true

	case "User.hpviewHistory":
		if e.complexity.User.HpviewHistory == nil {
			break
		}

		return e.complexity.User.HpviewHistory(childComplexity), true

	case "User.id":
		if e.complexity.User.ID == nil {
			break
		}

		return e.complexity.User.ID(childComplexity), true

	case "User.notificationSettings":
		if e.complexity.User.NotificationSettings == nil {
			break
		}

		return e.complexity.User.NotificationSettings(childComplexity), true

	case "User.updatedAt":
		if e.complexity.User.UpdatedAt == nil {
			break
		}

		return e.complexity.User.UpdatedAt(childComplexity), true

	case "User.username":
		if e.complexity.User.Username == nil {
			break
		}

		return e.complexity.User.Username(childComplexity), true

	case "UserNotificationSetting.createdAt":
		if e.complexity.UserNotificationSetting.CreatedAt == nil {
			break
		}

		return e.complexity.UserNotificationSetting.CreatedAt(childComplexity), true

	case "UserNotificationSetting.enableNewPosts":
		if e.complexity.UserNotificationSetting.EnableNewPosts == nil {
			break
		}

		return e.complexity.UserNotificationSetting.EnableNewPosts(childComplexity), true

	case "UserNotificationSetting.enablePaymentDue":
		if e.complexity.UserNotificationSetting.EnablePaymentDue == nil {
			break
		}

		return e.complexity.UserNotificationSetting.EnablePaymentDue(childComplexity), true

	case "UserNotificationSetting.enablePaymentStart":
		if e.complexity.UserNotificationSetting.EnablePaymentStart == nil {
			break
		}

		return e.complexity.UserNotificationSetting.EnablePaymentStart(childComplexity), true

	case "UserNotificationSetting.id":
		if e.complexity.UserNotificationSetting.ID == nil {
			break
		}

		return e.complexity.UserNotificationSetting.ID(childComplexity), true

	case "UserNotificationSetting.name":
		if e.complexity.UserNotificationSetting.Name == nil {
			break
		}

		return e.complexity.UserNotificationSetting.Name(childComplexity), true

	case "UserNotificationSetting.slug":
		if e.complexity.UserNotificationSetting.Slug == nil {
			break
		}

		return e.complexity.UserNotificationSetting.Slug(childComplexity), true

	case "UserNotificationSetting.token":
		if e.complexity.UserNotificationSetting.Token == nil {
			break
		}

		return e.complexity.UserNotificationSetting.Token(childComplexity), true

	case "UserNotificationSetting.updatedAt":
		if e.complexity.UserNotificationSetting.UpdatedAt == nil {
			break
		}

		return e.complexity.UserNotificationSetting.UpdatedAt(childComplexity), true

	case "UserNotificationSetting.user":
		if e.complexity.UserNotificationSetting.User == nil {
			break
		}

		return e.complexity.UserNotificationSetting.User(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputAuthOrder,
		ec.unmarshalInputHPAmebloPostOrder,
		ec.unmarshalInputHPArtistOrder,
		ec.unmarshalInputHPBlobOrder,
		ec.unmarshalInputHPElineumpMallItemsParamsInput,
		ec.unmarshalInputHPElineupMallItemOrder,
		ec.unmarshalInputHPEventOrder,
		ec.unmarshalInputHPFCEventTicketApplicationInput,
		ec.unmarshalInputHPFCEventTicketApplicationUpsertParamsInput,
		ec.unmarshalInputHPFCEventTicketOrder,
		ec.unmarshalInputHPFeedItemOrder,
		ec.unmarshalInputHPFeedQueryParamsInput,
		ec.unmarshalInputHPFollowOrder,
		ec.unmarshalInputHPFollowUpsertParamsInput,
		ec.unmarshalInputHPIgPostOrder,
		ec.unmarshalInputHPMemberOrder,
		ec.unmarshalInputHPSortHistoryOrder,
		ec.unmarshalInputHPViewHistoryOrder,
		ec.unmarshalInputHPViewHistoryUpsertParamsInput,
		ec.unmarshalInputMeFavoriteQueryParamsInput,
		ec.unmarshalInputUserNotificationSettingOrder,
		ec.unmarshalInputUserOrder,
	)
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

//go:embed "schema.graphql" "ent.graphql"
var sourcesFS embed.FS

func sourceData(filename string) string {
	data, err := sourcesFS.ReadFile(filename)
	if err != nil {
		panic(fmt.Sprintf("codegen problem: %s not available", filename))
	}
	return string(data)
}

var sources = []*ast.Source{
	{Name: "../v3.graphql", Input: `extend type Query {
  helloproject: HelloProjectQuery!
  me: MeQuery!
}

scalar Time
scalar Upload
scalar Any
scalar Map

extend type HPEvent {
  tickets: [HPFCEventTicket!]
}

extend type HPFeedItem {
  myViewHistory: HPViewHistory
}
`, BuiltIn: false},
	{Name: "schema.graphql", Input: sourceData("schema.graphql"), BuiltIn: false},
	{Name: "ent.graphql", Input: sourceData("ent.graphql"), BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_HelloProjectQuery_artists_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *entgql.Cursor[int]
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg1
	var arg2 *entgql.Cursor[int]
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg2, err = ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg3
	return args, nil
}

func (ec *executionContext) field_HelloProjectQuery_elineupMallItems_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 helloproject.HPElineumpMallItemsParams
	if tmp, ok := rawArgs["params"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("params"))
		arg0, err = ec.unmarshalNHPElineumpMallItemsParamsInput2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋgraphqlᚋv3ᚋhelloprojectᚐHPElineumpMallItemsParams(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg0
	var arg1 *entgql.Cursor[int]
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg1, err = ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *entgql.Cursor[int]
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg3, err = ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg3
	var arg4 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg4, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg4
	return args, nil
}

func (ec *executionContext) field_HelloProjectQuery_feed_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 helloproject.HPFeedQueryParams
	if tmp, ok := rawArgs["params"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("params"))
		arg0, err = ec.unmarshalNHPFeedQueryParamsInput2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋgraphqlᚋv3ᚋhelloprojectᚐHPFeedQueryParams(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg0
	var arg1 *entgql.Cursor[int]
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg1, err = ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *entgql.Cursor[int]
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg3, err = ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg3
	var arg4 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg4, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg4
	return args, nil
}

func (ec *executionContext) field_MeMutation_upsertEvents_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 upfc.HPFCEventTicketApplicationUpsertParams
	if tmp, ok := rawArgs["params"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("params"))
		arg0, err = ec.unmarshalNHPFCEventTicketApplicationUpsertParamsInput2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋhelloprojectᚋupfcᚐHPFCEventTicketApplicationUpsertParams(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg0
	return args, nil
}

func (ec *executionContext) field_MeMutation_upsertFollow_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 user.HPFollowUpsertParams
	if tmp, ok := rawArgs["params"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("params"))
		arg0, err = ec.unmarshalNHPFollowUpsertParamsInput2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋhelloprojectᚋuserᚐHPFollowUpsertParams(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg0
	return args, nil
}

func (ec *executionContext) field_MeMutation_upsertViewHistory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 feed.HPViewHistoryUpsertParams
	if tmp, ok := rawArgs["params"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("params"))
		arg0, err = ec.unmarshalNHPViewHistoryUpsertParamsInput2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋhelloprojectᚋfeedᚐHPViewHistoryUpsertParams(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg0
	return args, nil
}

func (ec *executionContext) field_MeQuery_events_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *entgql.Cursor[int]
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg1
	var arg2 *entgql.Cursor[int]
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg2, err = ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg3
	return args, nil
}

func (ec *executionContext) field_MeQuery_favorites_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 me.MeFavoriteQueryParams
	if tmp, ok := rawArgs["params"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("params"))
		arg0, err = ec.unmarshalNMeFavoriteQueryParamsInput2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋgraphqlᚋv3ᚋmeᚐMeFavoriteQueryParams(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg0
	var arg1 *entgql.Cursor[int]
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg1, err = ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *entgql.Cursor[int]
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg3, err = ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg3
	var arg4 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg4, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg4
	return args, nil
}

func (ec *executionContext) field_MeQuery_sortHistories_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *entgql.Cursor[int]
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg1
	var arg2 *entgql.Cursor[int]
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg2, err = ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_node_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_nodes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		arg0, err = ec.unmarshalNID2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ids"] = arg0
	return args, nil
}

func (ec *executionContext) field_ReactNavigationPush_toPushMessage_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["tokens"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokens"))
		arg0, err = ec.unmarshalOString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["tokens"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Auth_id(ctx context.Context, field graphql.CollectedField, obj *ent.Auth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Auth_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Auth_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Auth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Auth_createdAt(ctx context.Context, field graphql.CollectedField, obj *ent.Auth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Auth_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Auth_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Auth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Auth_updatedAt(ctx context.Context, field graphql.CollectedField, obj *ent.Auth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Auth_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Auth_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Auth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Auth_providerName(ctx context.Context, field graphql.CollectedField, obj *ent.Auth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Auth_providerName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProviderName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Auth_providerName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Auth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExpoPushMessage_title(ctx context.Context, field graphql.CollectedField, obj *jsonfields.ExpoPushMessage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExpoPushMessage_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExpoPushMessage_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExpoPushMessage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExpoPushMessage_body(ctx context.Context, field graphql.CollectedField, obj *jsonfields.ExpoPushMessage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExpoPushMessage_body(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Body, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExpoPushMessage_body(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExpoPushMessage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExpoPushMessage_ttlSeconds(ctx context.Context, field graphql.CollectedField, obj *jsonfields.ExpoPushMessage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExpoPushMessage_ttlSeconds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TTLSeconds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExpoPushMessage_ttlSeconds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExpoPushMessage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExpoPushMessage_priority(ctx context.Context, field graphql.CollectedField, obj *jsonfields.ExpoPushMessage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExpoPushMessage_priority(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Priority, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(push.MessagePriority)
	fc.Result = res
	return ec.marshalNMessagePriority2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋsystemᚋpushᚐMessagePriority(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExpoPushMessage_priority(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExpoPushMessage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type MessagePriority does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExpoPushMessage_sound(ctx context.Context, field graphql.CollectedField, obj *jsonfields.ExpoPushMessage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExpoPushMessage_sound(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sound, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExpoPushMessage_sound(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExpoPushMessage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExpoPushMessage_badge(ctx context.Context, field graphql.CollectedField, obj *jsonfields.ExpoPushMessage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExpoPushMessage_badge(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Badge, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExpoPushMessage_badge(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExpoPushMessage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExpoPushMessage_imageUrl(ctx context.Context, field graphql.CollectedField, obj *jsonfields.ExpoPushMessage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExpoPushMessage_imageUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ImageUrl, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExpoPushMessage_imageUrl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExpoPushMessage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPAmebloPost_id(ctx context.Context, field graphql.CollectedField, obj *ent.HPAmebloPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPAmebloPost_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPAmebloPost_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPAmebloPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPAmebloPost_crawledAt(ctx context.Context, field graphql.CollectedField, obj *ent.HPAmebloPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPAmebloPost_crawledAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CrawledAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPAmebloPost_crawledAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPAmebloPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPAmebloPost_errorCount(ctx context.Context, field graphql.CollectedField, obj *ent.HPAmebloPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPAmebloPost_errorCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ErrorCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPAmebloPost_errorCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPAmebloPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPAmebloPost_lastErrorMessage(ctx context.Context, field graphql.CollectedField, obj *ent.HPAmebloPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPAmebloPost_lastErrorMessage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastErrorMessage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPAmebloPost_lastErrorMessage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPAmebloPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPAmebloPost_recrawlRequired(ctx context.Context, field graphql.CollectedField, obj *ent.HPAmebloPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPAmebloPost_recrawlRequired(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecrawlRequired, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPAmebloPost_recrawlRequired(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPAmebloPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPAmebloPost_createdAt(ctx context.Context, field graphql.CollectedField, obj *ent.HPAmebloPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPAmebloPost_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPAmebloPost_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPAmebloPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPAmebloPost_updatedAt(ctx context.Context, field graphql.CollectedField, obj *ent.HPAmebloPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPAmebloPost_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPAmebloPost_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPAmebloPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPAmebloPost_path(ctx context.Context, field graphql.CollectedField, obj *ent.HPAmebloPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPAmebloPost_path(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Path, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPAmebloPost_path(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPAmebloPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPAmebloPost_nextPath(ctx context.Context, field graphql.CollectedField, obj *ent.HPAmebloPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPAmebloPost_nextPath(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NextPath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPAmebloPost_nextPath(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPAmebloPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPAmebloPost_prevPath(ctx context.Context, field graphql.CollectedField, obj *ent.HPAmebloPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPAmebloPost_prevPath(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PrevPath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPAmebloPost_prevPath(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPAmebloPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPAmebloPost_artistKey(ctx context.Context, field graphql.CollectedField, obj *ent.HPAmebloPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPAmebloPost_artistKey(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ArtistKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPAmebloPost_artistKey(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPAmebloPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPAmebloPost_memberKey(ctx context.Context, field graphql.CollectedField, obj *ent.HPAmebloPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPAmebloPost_memberKey(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MemberKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPAmebloPost_memberKey(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPAmebloPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPAmebloPost_title(ctx context.Context, field graphql.CollectedField, obj *ent.HPAmebloPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPAmebloPost_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPAmebloPost_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPAmebloPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPAmebloPost_description(ctx context.Context, field graphql.CollectedField, obj *ent.HPAmebloPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPAmebloPost_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPAmebloPost_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPAmebloPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPAmebloPost_theme(ctx context.Context, field graphql.CollectedField, obj *ent.HPAmebloPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPAmebloPost_theme(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Theme, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPAmebloPost_theme(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPAmebloPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPAmebloPost_postAt(ctx context.Context, field graphql.CollectedField, obj *ent.HPAmebloPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPAmebloPost_postAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PostAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPAmebloPost_postAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPAmebloPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPAmebloPost_source(ctx context.Context, field graphql.CollectedField, obj *ent.HPAmebloPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPAmebloPost_source(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(hpameblopost.Source)
	fc.Result = res
	return ec.marshalNHPAmebloPostSource2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚋhpameblopostᚐSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPAmebloPost_source(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPAmebloPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type HPAmebloPostSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPAmebloPost_images(ctx context.Context, field graphql.CollectedField, obj *ent.HPAmebloPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPAmebloPost_images(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Images, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]jsonfields.Media)
	fc.Result = res
	return ec.marshalOMedia2ᚕgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋjsonfieldsᚐMediaᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPAmebloPost_images(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPAmebloPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "url":
				return ec.fieldContext_Media_url(ctx, field)
			case "blobId":
				return ec.fieldContext_Media_blobId(ctx, field)
			case "type":
				return ec.fieldContext_Media_type(ctx, field)
			case "width":
				return ec.fieldContext_Media_width(ctx, field)
			case "height":
				return ec.fieldContext_Media_height(ctx, field)
			case "thumbnailUrl":
				return ec.fieldContext_Media_thumbnailUrl(ctx, field)
			case "thumbnailWidth":
				return ec.fieldContext_Media_thumbnailWidth(ctx, field)
			case "thumbnailHeight":
				return ec.fieldContext_Media_thumbnailHeight(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Media", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPAmebloPost_likes(ctx context.Context, field graphql.CollectedField, obj *ent.HPAmebloPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPAmebloPost_likes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Likes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPAmebloPost_likes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPAmebloPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPAmebloPost_comments(ctx context.Context, field graphql.CollectedField, obj *ent.HPAmebloPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPAmebloPost_comments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Comments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPAmebloPost_comments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPAmebloPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPAmebloPost_reblogs(ctx context.Context, field graphql.CollectedField, obj *ent.HPAmebloPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPAmebloPost_reblogs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reblogs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPAmebloPost_reblogs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPAmebloPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPAmebloPost_ownerArtistID(ctx context.Context, field graphql.CollectedField, obj *ent.HPAmebloPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPAmebloPost_ownerArtistID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnerArtistID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOID2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPAmebloPost_ownerArtistID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPAmebloPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPAmebloPost_ownerMemberID(ctx context.Context, field graphql.CollectedField, obj *ent.HPAmebloPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPAmebloPost_ownerMemberID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnerMemberID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOID2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPAmebloPost_ownerMemberID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPAmebloPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPAmebloPost_ownerArtist(ctx context.Context, field graphql.CollectedField, obj *ent.HPAmebloPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPAmebloPost_ownerArtist(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnerArtist(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.HPArtist)
	fc.Result = res
	return ec.marshalOHPArtist2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPArtist(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPAmebloPost_ownerArtist(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPAmebloPost",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_HPArtist_id(ctx, field)
			case "crawledAt":
				return ec.fieldContext_HPArtist_crawledAt(ctx, field)
			case "errorCount":
				return ec.fieldContext_HPArtist_errorCount(ctx, field)
			case "lastErrorMessage":
				return ec.fieldContext_HPArtist_lastErrorMessage(ctx, field)
			case "recrawlRequired":
				return ec.fieldContext_HPArtist_recrawlRequired(ctx, field)
			case "createdAt":
				return ec.fieldContext_HPArtist_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_HPArtist_updatedAt(ctx, field)
			case "key":
				return ec.fieldContext_HPArtist_key(ctx, field)
			case "name":
				return ec.fieldContext_HPArtist_name(ctx, field)
			case "thumbnailURL":
				return ec.fieldContext_HPArtist_thumbnailURL(ctx, field)
			case "index":
				return ec.fieldContext_HPArtist_index(ctx, field)
			case "members":
				return ec.fieldContext_HPArtist_members(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HPArtist", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPAmebloPost_ownerMember(ctx context.Context, field graphql.CollectedField, obj *ent.HPAmebloPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPAmebloPost_ownerMember(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnerMember(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.HPMember)
	fc.Result = res
	return ec.marshalOHPMember2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPMember(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPAmebloPost_ownerMember(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPAmebloPost",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_HPMember_id(ctx, field)
			case "crawledAt":
				return ec.fieldContext_HPMember_crawledAt(ctx, field)
			case "errorCount":
				return ec.fieldContext_HPMember_errorCount(ctx, field)
			case "lastErrorMessage":
				return ec.fieldContext_HPMember_lastErrorMessage(ctx, field)
			case "recrawlRequired":
				return ec.fieldContext_HPMember_recrawlRequired(ctx, field)
			case "createdAt":
				return ec.fieldContext_HPMember_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_HPMember_updatedAt(ctx, field)
			case "key":
				return ec.fieldContext_HPMember_key(ctx, field)
			case "artistKey":
				return ec.fieldContext_HPMember_artistKey(ctx, field)
			case "name":
				return ec.fieldContext_HPMember_name(ctx, field)
			case "nameKana":
				return ec.fieldContext_HPMember_nameKana(ctx, field)
			case "thumbnailURL":
				return ec.fieldContext_HPMember_thumbnailURL(ctx, field)
			case "dateOfBirth":
				return ec.fieldContext_HPMember_dateOfBirth(ctx, field)
			case "bloodType":
				return ec.fieldContext_HPMember_bloodType(ctx, field)
			case "hometown":
				return ec.fieldContext_HPMember_hometown(ctx, field)
			case "joinAt":
				return ec.fieldContext_HPMember_joinAt(ctx, field)
			case "graduateAt":
				return ec.fieldContext_HPMember_graduateAt(ctx, field)
			case "artistID":
				return ec.fieldContext_HPMember_artistID(ctx, field)
			case "artist":
				return ec.fieldContext_HPMember_artist(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HPMember", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPAmebloPost_taggedArtists(ctx context.Context, field graphql.CollectedField, obj *ent.HPAmebloPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPAmebloPost_taggedArtists(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaggedArtists(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.HPArtist)
	fc.Result = res
	return ec.marshalOHPArtist2ᚕᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPArtistᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPAmebloPost_taggedArtists(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPAmebloPost",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_HPArtist_id(ctx, field)
			case "crawledAt":
				return ec.fieldContext_HPArtist_crawledAt(ctx, field)
			case "errorCount":
				return ec.fieldContext_HPArtist_errorCount(ctx, field)
			case "lastErrorMessage":
				return ec.fieldContext_HPArtist_lastErrorMessage(ctx, field)
			case "recrawlRequired":
				return ec.fieldContext_HPArtist_recrawlRequired(ctx, field)
			case "createdAt":
				return ec.fieldContext_HPArtist_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_HPArtist_updatedAt(ctx, field)
			case "key":
				return ec.fieldContext_HPArtist_key(ctx, field)
			case "name":
				return ec.fieldContext_HPArtist_name(ctx, field)
			case "thumbnailURL":
				return ec.fieldContext_HPArtist_thumbnailURL(ctx, field)
			case "index":
				return ec.fieldContext_HPArtist_index(ctx, field)
			case "members":
				return ec.fieldContext_HPArtist_members(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HPArtist", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPAmebloPost_taggedMembers(ctx context.Context, field graphql.CollectedField, obj *ent.HPAmebloPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPAmebloPost_taggedMembers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaggedMembers(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.HPMember)
	fc.Result = res
	return ec.marshalOHPMember2ᚕᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPMemberᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPAmebloPost_taggedMembers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPAmebloPost",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_HPMember_id(ctx, field)
			case "crawledAt":
				return ec.fieldContext_HPMember_crawledAt(ctx, field)
			case "errorCount":
				return ec.fieldContext_HPMember_errorCount(ctx, field)
			case "lastErrorMessage":
				return ec.fieldContext_HPMember_lastErrorMessage(ctx, field)
			case "recrawlRequired":
				return ec.fieldContext_HPMember_recrawlRequired(ctx, field)
			case "createdAt":
				return ec.fieldContext_HPMember_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_HPMember_updatedAt(ctx, field)
			case "key":
				return ec.fieldContext_HPMember_key(ctx, field)
			case "artistKey":
				return ec.fieldContext_HPMember_artistKey(ctx, field)
			case "name":
				return ec.fieldContext_HPMember_name(ctx, field)
			case "nameKana":
				return ec.fieldContext_HPMember_nameKana(ctx, field)
			case "thumbnailURL":
				return ec.fieldContext_HPMember_thumbnailURL(ctx, field)
			case "dateOfBirth":
				return ec.fieldContext_HPMember_dateOfBirth(ctx, field)
			case "bloodType":
				return ec.fieldContext_HPMember_bloodType(ctx, field)
			case "hometown":
				return ec.fieldContext_HPMember_hometown(ctx, field)
			case "joinAt":
				return ec.fieldContext_HPMember_joinAt(ctx, field)
			case "graduateAt":
				return ec.fieldContext_HPMember_graduateAt(ctx, field)
			case "artistID":
				return ec.fieldContext_HPMember_artistID(ctx, field)
			case "artist":
				return ec.fieldContext_HPMember_artist(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HPMember", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPAmebloPost_blobs(ctx context.Context, field graphql.CollectedField, obj *ent.HPAmebloPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPAmebloPost_blobs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Blobs(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.HPBlob)
	fc.Result = res
	return ec.marshalOHPBlob2ᚕᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPBlobᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPAmebloPost_blobs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPAmebloPost",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_HPBlob_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_HPBlob_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_HPBlob_updatedAt(ctx, field)
			case "storagePath":
				return ec.fieldContext_HPBlob_storagePath(ctx, field)
			case "sourceURL":
				return ec.fieldContext_HPBlob_sourceURL(ctx, field)
			case "sourceHTMLURL":
				return ec.fieldContext_HPBlob_sourceHTMLURL(ctx, field)
			case "status":
				return ec.fieldContext_HPBlob_status(ctx, field)
			case "statusMessage":
				return ec.fieldContext_HPBlob_statusMessage(ctx, field)
			case "statusErrorCount":
				return ec.fieldContext_HPBlob_statusErrorCount(ctx, field)
			case "type":
				return ec.fieldContext_HPBlob_type(ctx, field)
			case "subType":
				return ec.fieldContext_HPBlob_subType(ctx, field)
			case "width":
				return ec.fieldContext_HPBlob_width(ctx, field)
			case "height":
				return ec.fieldContext_HPBlob_height(ctx, field)
			case "size":
				return ec.fieldContext_HPBlob_size(ctx, field)
			case "ownerArtistID":
				return ec.fieldContext_HPBlob_ownerArtistID(ctx, field)
			case "ownerMemberID":
				return ec.fieldContext_HPBlob_ownerMemberID(ctx, field)
			case "numFaces":
				return ec.fieldContext_HPBlob_numFaces(ctx, field)
			case "faceRecognitionStatus":
				return ec.fieldContext_HPBlob_faceRecognitionStatus(ctx, field)
			case "thumbnail":
				return ec.fieldContext_HPBlob_thumbnail(ctx, field)
			case "durationSeconds":
				return ec.fieldContext_HPBlob_durationSeconds(ctx, field)
			case "ownerArtist":
				return ec.fieldContext_HPBlob_ownerArtist(ctx, field)
			case "ownerMember":
				return ec.fieldContext_HPBlob_ownerMember(ctx, field)
			case "amebloPosts":
				return ec.fieldContext_HPBlob_amebloPosts(ctx, field)
			case "igPosts":
				return ec.fieldContext_HPBlob_igPosts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HPBlob", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPArtist_id(ctx context.Context, field graphql.CollectedField, obj *ent.HPArtist) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPArtist_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPArtist_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPArtist",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPArtist_crawledAt(ctx context.Context, field graphql.CollectedField, obj *ent.HPArtist) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPArtist_crawledAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CrawledAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPArtist_crawledAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPArtist",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPArtist_errorCount(ctx context.Context, field graphql.CollectedField, obj *ent.HPArtist) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPArtist_errorCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ErrorCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPArtist_errorCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPArtist",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPArtist_lastErrorMessage(ctx context.Context, field graphql.CollectedField, obj *ent.HPArtist) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPArtist_lastErrorMessage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastErrorMessage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPArtist_lastErrorMessage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPArtist",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPArtist_recrawlRequired(ctx context.Context, field graphql.CollectedField, obj *ent.HPArtist) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPArtist_recrawlRequired(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecrawlRequired, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPArtist_recrawlRequired(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPArtist",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPArtist_createdAt(ctx context.Context, field graphql.CollectedField, obj *ent.HPArtist) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPArtist_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPArtist_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPArtist",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPArtist_updatedAt(ctx context.Context, field graphql.CollectedField, obj *ent.HPArtist) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPArtist_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPArtist_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPArtist",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPArtist_key(ctx context.Context, field graphql.CollectedField, obj *ent.HPArtist) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPArtist_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPArtist_key(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPArtist",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPArtist_name(ctx context.Context, field graphql.CollectedField, obj *ent.HPArtist) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPArtist_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPArtist_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPArtist",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPArtist_thumbnailURL(ctx context.Context, field graphql.CollectedField, obj *ent.HPArtist) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPArtist_thumbnailURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ThumbnailURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPArtist_thumbnailURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPArtist",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPArtist_index(ctx context.Context, field graphql.CollectedField, obj *ent.HPArtist) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPArtist_index(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Index, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPArtist_index(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPArtist",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPArtist_members(ctx context.Context, field graphql.CollectedField, obj *ent.HPArtist) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPArtist_members(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Members(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.HPMember)
	fc.Result = res
	return ec.marshalOHPMember2ᚕᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPMemberᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPArtist_members(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPArtist",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_HPMember_id(ctx, field)
			case "crawledAt":
				return ec.fieldContext_HPMember_crawledAt(ctx, field)
			case "errorCount":
				return ec.fieldContext_HPMember_errorCount(ctx, field)
			case "lastErrorMessage":
				return ec.fieldContext_HPMember_lastErrorMessage(ctx, field)
			case "recrawlRequired":
				return ec.fieldContext_HPMember_recrawlRequired(ctx, field)
			case "createdAt":
				return ec.fieldContext_HPMember_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_HPMember_updatedAt(ctx, field)
			case "key":
				return ec.fieldContext_HPMember_key(ctx, field)
			case "artistKey":
				return ec.fieldContext_HPMember_artistKey(ctx, field)
			case "name":
				return ec.fieldContext_HPMember_name(ctx, field)
			case "nameKana":
				return ec.fieldContext_HPMember_nameKana(ctx, field)
			case "thumbnailURL":
				return ec.fieldContext_HPMember_thumbnailURL(ctx, field)
			case "dateOfBirth":
				return ec.fieldContext_HPMember_dateOfBirth(ctx, field)
			case "bloodType":
				return ec.fieldContext_HPMember_bloodType(ctx, field)
			case "hometown":
				return ec.fieldContext_HPMember_hometown(ctx, field)
			case "joinAt":
				return ec.fieldContext_HPMember_joinAt(ctx, field)
			case "graduateAt":
				return ec.fieldContext_HPMember_graduateAt(ctx, field)
			case "artistID":
				return ec.fieldContext_HPMember_artistID(ctx, field)
			case "artist":
				return ec.fieldContext_HPMember_artist(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HPMember", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPBlob_id(ctx context.Context, field graphql.CollectedField, obj *ent.HPBlob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPBlob_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPBlob_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPBlob",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPBlob_createdAt(ctx context.Context, field graphql.CollectedField, obj *ent.HPBlob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPBlob_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPBlob_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPBlob",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPBlob_updatedAt(ctx context.Context, field graphql.CollectedField, obj *ent.HPBlob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPBlob_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPBlob_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPBlob",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPBlob_storagePath(ctx context.Context, field graphql.CollectedField, obj *ent.HPBlob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPBlob_storagePath(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StoragePath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPBlob_storagePath(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPBlob",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPBlob_sourceURL(ctx context.Context, field graphql.CollectedField, obj *ent.HPBlob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPBlob_sourceURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPBlob_sourceURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPBlob",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPBlob_sourceHTMLURL(ctx context.Context, field graphql.CollectedField, obj *ent.HPBlob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPBlob_sourceHTMLURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceHTMLURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPBlob_sourceHTMLURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPBlob",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPBlob_status(ctx context.Context, field graphql.CollectedField, obj *ent.HPBlob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPBlob_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(enums.HPBlobStatus)
	fc.Result = res
	return ec.marshalNHPBlobHPBlobStatus2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋenumsᚐHPBlobStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPBlob_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPBlob",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type HPBlobHPBlobStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPBlob_statusMessage(ctx context.Context, field graphql.CollectedField, obj *ent.HPBlob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPBlob_statusMessage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StatusMessage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPBlob_statusMessage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPBlob",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPBlob_statusErrorCount(ctx context.Context, field graphql.CollectedField, obj *ent.HPBlob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPBlob_statusErrorCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StatusErrorCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPBlob_statusErrorCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPBlob",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPBlob_type(ctx context.Context, field graphql.CollectedField, obj *ent.HPBlob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPBlob_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(enums.HPBlobType)
	fc.Result = res
	return ec.marshalNHPBlobHPBlobType2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋenumsᚐHPBlobType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPBlob_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPBlob",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type HPBlobHPBlobType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPBlob_subType(ctx context.Context, field graphql.CollectedField, obj *ent.HPBlob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPBlob_subType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(enums.HPBlobSubType)
	fc.Result = res
	return ec.marshalNHPBlobHPBlobSubType2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋenumsᚐHPBlobSubType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPBlob_subType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPBlob",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type HPBlobHPBlobSubType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPBlob_width(ctx context.Context, field graphql.CollectedField, obj *ent.HPBlob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPBlob_width(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Width, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPBlob_width(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPBlob",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPBlob_height(ctx context.Context, field graphql.CollectedField, obj *ent.HPBlob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPBlob_height(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Height, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPBlob_height(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPBlob",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPBlob_size(ctx context.Context, field graphql.CollectedField, obj *ent.HPBlob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPBlob_size(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Size, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPBlob_size(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPBlob",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPBlob_ownerArtistID(ctx context.Context, field graphql.CollectedField, obj *ent.HPBlob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPBlob_ownerArtistID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnerArtistID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPBlob_ownerArtistID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPBlob",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPBlob_ownerMemberID(ctx context.Context, field graphql.CollectedField, obj *ent.HPBlob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPBlob_ownerMemberID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnerMemberID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPBlob_ownerMemberID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPBlob",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPBlob_numFaces(ctx context.Context, field graphql.CollectedField, obj *ent.HPBlob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPBlob_numFaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumFaces, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPBlob_numFaces(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPBlob",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPBlob_faceRecognitionStatus(ctx context.Context, field graphql.CollectedField, obj *ent.HPBlob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPBlob_faceRecognitionStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FaceRecognitionStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(enums.HPBlobFaceRecognitionStatus)
	fc.Result = res
	return ec.marshalOHPBlobHPBlobFaceRecognitionStatus2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋenumsᚐHPBlobFaceRecognitionStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPBlob_faceRecognitionStatus(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPBlob",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type HPBlobHPBlobFaceRecognitionStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPBlob_thumbnail(ctx context.Context, field graphql.CollectedField, obj *ent.HPBlob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPBlob_thumbnail(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Thumbnail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*jsonfields.HPBlobThumbnail)
	fc.Result = res
	return ec.marshalOHPBlobThumbnail2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋjsonfieldsᚐHPBlobThumbnail(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPBlob_thumbnail(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPBlob",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "storagePath":
				return ec.fieldContext_HPBlobThumbnail_storagePath(ctx, field)
			case "sourceImageUrl":
				return ec.fieldContext_HPBlobThumbnail_sourceImageUrl(ctx, field)
			case "width":
				return ec.fieldContext_HPBlobThumbnail_width(ctx, field)
			case "height":
				return ec.fieldContext_HPBlobThumbnail_height(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HPBlobThumbnail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPBlob_durationSeconds(ctx context.Context, field graphql.CollectedField, obj *ent.HPBlob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPBlob_durationSeconds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DurationSeconds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalOFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPBlob_durationSeconds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPBlob",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPBlob_ownerArtist(ctx context.Context, field graphql.CollectedField, obj *ent.HPBlob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPBlob_ownerArtist(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnerArtist(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.HPArtist)
	fc.Result = res
	return ec.marshalOHPArtist2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPArtist(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPBlob_ownerArtist(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPBlob",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_HPArtist_id(ctx, field)
			case "crawledAt":
				return ec.fieldContext_HPArtist_crawledAt(ctx, field)
			case "errorCount":
				return ec.fieldContext_HPArtist_errorCount(ctx, field)
			case "lastErrorMessage":
				return ec.fieldContext_HPArtist_lastErrorMessage(ctx, field)
			case "recrawlRequired":
				return ec.fieldContext_HPArtist_recrawlRequired(ctx, field)
			case "createdAt":
				return ec.fieldContext_HPArtist_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_HPArtist_updatedAt(ctx, field)
			case "key":
				return ec.fieldContext_HPArtist_key(ctx, field)
			case "name":
				return ec.fieldContext_HPArtist_name(ctx, field)
			case "thumbnailURL":
				return ec.fieldContext_HPArtist_thumbnailURL(ctx, field)
			case "index":
				return ec.fieldContext_HPArtist_index(ctx, field)
			case "members":
				return ec.fieldContext_HPArtist_members(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HPArtist", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPBlob_ownerMember(ctx context.Context, field graphql.CollectedField, obj *ent.HPBlob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPBlob_ownerMember(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnerMember(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.HPMember)
	fc.Result = res
	return ec.marshalOHPMember2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPMember(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPBlob_ownerMember(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPBlob",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_HPMember_id(ctx, field)
			case "crawledAt":
				return ec.fieldContext_HPMember_crawledAt(ctx, field)
			case "errorCount":
				return ec.fieldContext_HPMember_errorCount(ctx, field)
			case "lastErrorMessage":
				return ec.fieldContext_HPMember_lastErrorMessage(ctx, field)
			case "recrawlRequired":
				return ec.fieldContext_HPMember_recrawlRequired(ctx, field)
			case "createdAt":
				return ec.fieldContext_HPMember_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_HPMember_updatedAt(ctx, field)
			case "key":
				return ec.fieldContext_HPMember_key(ctx, field)
			case "artistKey":
				return ec.fieldContext_HPMember_artistKey(ctx, field)
			case "name":
				return ec.fieldContext_HPMember_name(ctx, field)
			case "nameKana":
				return ec.fieldContext_HPMember_nameKana(ctx, field)
			case "thumbnailURL":
				return ec.fieldContext_HPMember_thumbnailURL(ctx, field)
			case "dateOfBirth":
				return ec.fieldContext_HPMember_dateOfBirth(ctx, field)
			case "bloodType":
				return ec.fieldContext_HPMember_bloodType(ctx, field)
			case "hometown":
				return ec.fieldContext_HPMember_hometown(ctx, field)
			case "joinAt":
				return ec.fieldContext_HPMember_joinAt(ctx, field)
			case "graduateAt":
				return ec.fieldContext_HPMember_graduateAt(ctx, field)
			case "artistID":
				return ec.fieldContext_HPMember_artistID(ctx, field)
			case "artist":
				return ec.fieldContext_HPMember_artist(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HPMember", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPBlob_amebloPosts(ctx context.Context, field graphql.CollectedField, obj *ent.HPBlob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPBlob_amebloPosts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AmebloPosts(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.HPAmebloPost)
	fc.Result = res
	return ec.marshalOHPAmebloPost2ᚕᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPAmebloPostᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPBlob_amebloPosts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPBlob",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_HPAmebloPost_id(ctx, field)
			case "crawledAt":
				return ec.fieldContext_HPAmebloPost_crawledAt(ctx, field)
			case "errorCount":
				return ec.fieldContext_HPAmebloPost_errorCount(ctx, field)
			case "lastErrorMessage":
				return ec.fieldContext_HPAmebloPost_lastErrorMessage(ctx, field)
			case "recrawlRequired":
				return ec.fieldContext_HPAmebloPost_recrawlRequired(ctx, field)
			case "createdAt":
				return ec.fieldContext_HPAmebloPost_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_HPAmebloPost_updatedAt(ctx, field)
			case "path":
				return ec.fieldContext_HPAmebloPost_path(ctx, field)
			case "nextPath":
				return ec.fieldContext_HPAmebloPost_nextPath(ctx, field)
			case "prevPath":
				return ec.fieldContext_HPAmebloPost_prevPath(ctx, field)
			case "artistKey":
				return ec.fieldContext_HPAmebloPost_artistKey(ctx, field)
			case "memberKey":
				return ec.fieldContext_HPAmebloPost_memberKey(ctx, field)
			case "title":
				return ec.fieldContext_HPAmebloPost_title(ctx, field)
			case "description":
				return ec.fieldContext_HPAmebloPost_description(ctx, field)
			case "theme":
				return ec.fieldContext_HPAmebloPost_theme(ctx, field)
			case "postAt":
				return ec.fieldContext_HPAmebloPost_postAt(ctx, field)
			case "source":
				return ec.fieldContext_HPAmebloPost_source(ctx, field)
			case "images":
				return ec.fieldContext_HPAmebloPost_images(ctx, field)
			case "likes":
				return ec.fieldContext_HPAmebloPost_likes(ctx, field)
			case "comments":
				return ec.fieldContext_HPAmebloPost_comments(ctx, field)
			case "reblogs":
				return ec.fieldContext_HPAmebloPost_reblogs(ctx, field)
			case "ownerArtistID":
				return ec.fieldContext_HPAmebloPost_ownerArtistID(ctx, field)
			case "ownerMemberID":
				return ec.fieldContext_HPAmebloPost_ownerMemberID(ctx, field)
			case "ownerArtist":
				return ec.fieldContext_HPAmebloPost_ownerArtist(ctx, field)
			case "ownerMember":
				return ec.fieldContext_HPAmebloPost_ownerMember(ctx, field)
			case "taggedArtists":
				return ec.fieldContext_HPAmebloPost_taggedArtists(ctx, field)
			case "taggedMembers":
				return ec.fieldContext_HPAmebloPost_taggedMembers(ctx, field)
			case "blobs":
				return ec.fieldContext_HPAmebloPost_blobs(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HPAmebloPost", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPBlob_igPosts(ctx context.Context, field graphql.CollectedField, obj *ent.HPBlob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPBlob_igPosts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IgPosts(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.HPIgPost)
	fc.Result = res
	return ec.marshalOHPIgPost2ᚕᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPIgPostᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPBlob_igPosts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPBlob",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_HPIgPost_id(ctx, field)
			case "crawledAt":
				return ec.fieldContext_HPIgPost_crawledAt(ctx, field)
			case "errorCount":
				return ec.fieldContext_HPIgPost_errorCount(ctx, field)
			case "lastErrorMessage":
				return ec.fieldContext_HPIgPost_lastErrorMessage(ctx, field)
			case "recrawlRequired":
				return ec.fieldContext_HPIgPost_recrawlRequired(ctx, field)
			case "createdAt":
				return ec.fieldContext_HPIgPost_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_HPIgPost_updatedAt(ctx, field)
			case "shortcode":
				return ec.fieldContext_HPIgPost_shortcode(ctx, field)
			case "description":
				return ec.fieldContext_HPIgPost_description(ctx, field)
			case "postAt":
				return ec.fieldContext_HPIgPost_postAt(ctx, field)
			case "media":
				return ec.fieldContext_HPIgPost_media(ctx, field)
			case "likes":
				return ec.fieldContext_HPIgPost_likes(ctx, field)
			case "comments":
				return ec.fieldContext_HPIgPost_comments(ctx, field)
			case "recrawlArgs":
				return ec.fieldContext_HPIgPost_recrawlArgs(ctx, field)
			case "ownerArtistID":
				return ec.fieldContext_HPIgPost_ownerArtistID(ctx, field)
			case "ownerMemberID":
				return ec.fieldContext_HPIgPost_ownerMemberID(ctx, field)
			case "ownerArtist":
				return ec.fieldContext_HPIgPost_ownerArtist(ctx, field)
			case "ownerMember":
				return ec.fieldContext_HPIgPost_ownerMember(ctx, field)
			case "taggedArtists":
				return ec.fieldContext_HPIgPost_taggedArtists(ctx, field)
			case "taggedMembers":
				return ec.fieldContext_HPIgPost_taggedMembers(ctx, field)
			case "blobs":
				return ec.fieldContext_HPIgPost_blobs(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HPIgPost", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPBlobThumbnail_storagePath(ctx context.Context, field graphql.CollectedField, obj *jsonfields.HPBlobThumbnail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPBlobThumbnail_storagePath(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StoragePath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPBlobThumbnail_storagePath(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPBlobThumbnail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPBlobThumbnail_sourceImageUrl(ctx context.Context, field graphql.CollectedField, obj *jsonfields.HPBlobThumbnail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPBlobThumbnail_sourceImageUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceImageURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPBlobThumbnail_sourceImageUrl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPBlobThumbnail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPBlobThumbnail_width(ctx context.Context, field graphql.CollectedField, obj *jsonfields.HPBlobThumbnail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPBlobThumbnail_width(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Width, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPBlobThumbnail_width(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPBlobThumbnail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPBlobThumbnail_height(ctx context.Context, field graphql.CollectedField, obj *jsonfields.HPBlobThumbnail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPBlobThumbnail_height(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Height, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPBlobThumbnail_height(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPBlobThumbnail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPElineupMallItem_id(ctx context.Context, field graphql.CollectedField, obj *ent.HPElineupMallItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPElineupMallItem_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPElineupMallItem_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPElineupMallItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPElineupMallItem_crawledAt(ctx context.Context, field graphql.CollectedField, obj *ent.HPElineupMallItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPElineupMallItem_crawledAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CrawledAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPElineupMallItem_crawledAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPElineupMallItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPElineupMallItem_errorCount(ctx context.Context, field graphql.CollectedField, obj *ent.HPElineupMallItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPElineupMallItem_errorCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ErrorCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPElineupMallItem_errorCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPElineupMallItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPElineupMallItem_lastErrorMessage(ctx context.Context, field graphql.CollectedField, obj *ent.HPElineupMallItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPElineupMallItem_lastErrorMessage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastErrorMessage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPElineupMallItem_lastErrorMessage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPElineupMallItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPElineupMallItem_recrawlRequired(ctx context.Context, field graphql.CollectedField, obj *ent.HPElineupMallItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPElineupMallItem_recrawlRequired(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecrawlRequired, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPElineupMallItem_recrawlRequired(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPElineupMallItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPElineupMallItem_createdAt(ctx context.Context, field graphql.CollectedField, obj *ent.HPElineupMallItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPElineupMallItem_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPElineupMallItem_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPElineupMallItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPElineupMallItem_updatedAt(ctx context.Context, field graphql.CollectedField, obj *ent.HPElineupMallItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPElineupMallItem_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPElineupMallItem_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPElineupMallItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPElineupMallItem_permalink(ctx context.Context, field graphql.CollectedField, obj *ent.HPElineupMallItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPElineupMallItem_permalink(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Permalink, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPElineupMallItem_permalink(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPElineupMallItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPElineupMallItem_name(ctx context.Context, field graphql.CollectedField, obj *ent.HPElineupMallItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPElineupMallItem_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPElineupMallItem_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPElineupMallItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPElineupMallItem_description(ctx context.Context, field graphql.CollectedField, obj *ent.HPElineupMallItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPElineupMallItem_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPElineupMallItem_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPElineupMallItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPElineupMallItem_supplier(ctx context.Context, field graphql.CollectedField, obj *ent.HPElineupMallItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPElineupMallItem_supplier(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Supplier, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPElineupMallItem_supplier(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPElineupMallItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPElineupMallItem_price(ctx context.Context, field graphql.CollectedField, obj *ent.HPElineupMallItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPElineupMallItem_price(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Price, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPElineupMallItem_price(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPElineupMallItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPElineupMallItem_isLimitedToFc(ctx context.Context, field graphql.CollectedField, obj *ent.HPElineupMallItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPElineupMallItem_isLimitedToFc(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsLimitedToFc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPElineupMallItem_isLimitedToFc(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPElineupMallItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPElineupMallItem_isOutOfStock(ctx context.Context, field graphql.CollectedField, obj *ent.HPElineupMallItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPElineupMallItem_isOutOfStock(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsOutOfStock, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPElineupMallItem_isOutOfStock(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPElineupMallItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPElineupMallItem_images(ctx context.Context, field graphql.CollectedField, obj *ent.HPElineupMallItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPElineupMallItem_images(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Images, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]jsonfields.Media)
	fc.Result = res
	return ec.marshalNMedia2ᚕgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋjsonfieldsᚐMediaᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPElineupMallItem_images(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPElineupMallItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "url":
				return ec.fieldContext_Media_url(ctx, field)
			case "blobId":
				return ec.fieldContext_Media_blobId(ctx, field)
			case "type":
				return ec.fieldContext_Media_type(ctx, field)
			case "width":
				return ec.fieldContext_Media_width(ctx, field)
			case "height":
				return ec.fieldContext_Media_height(ctx, field)
			case "thumbnailUrl":
				return ec.fieldContext_Media_thumbnailUrl(ctx, field)
			case "thumbnailWidth":
				return ec.fieldContext_Media_thumbnailWidth(ctx, field)
			case "thumbnailHeight":
				return ec.fieldContext_Media_thumbnailHeight(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Media", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPElineupMallItem_category(ctx context.Context, field graphql.CollectedField, obj *ent.HPElineupMallItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPElineupMallItem_category(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(enums.HPElineupMallItemCategory)
	fc.Result = res
	return ec.marshalNHPElineupMallItemHPElineupMallItemCategory2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋenumsᚐHPElineupMallItemCategory(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPElineupMallItem_category(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPElineupMallItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type HPElineupMallItemHPElineupMallItemCategory does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPElineupMallItem_orderStartAt(ctx context.Context, field graphql.CollectedField, obj *ent.HPElineupMallItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPElineupMallItem_orderStartAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderStartAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPElineupMallItem_orderStartAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPElineupMallItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPElineupMallItem_orderEndAt(ctx context.Context, field graphql.CollectedField, obj *ent.HPElineupMallItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPElineupMallItem_orderEndAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderEndAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPElineupMallItem_orderEndAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPElineupMallItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPElineupMallItem_taggedArtists(ctx context.Context, field graphql.CollectedField, obj *ent.HPElineupMallItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPElineupMallItem_taggedArtists(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaggedArtists(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.HPArtist)
	fc.Result = res
	return ec.marshalOHPArtist2ᚕᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPArtistᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPElineupMallItem_taggedArtists(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPElineupMallItem",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_HPArtist_id(ctx, field)
			case "crawledAt":
				return ec.fieldContext_HPArtist_crawledAt(ctx, field)
			case "errorCount":
				return ec.fieldContext_HPArtist_errorCount(ctx, field)
			case "lastErrorMessage":
				return ec.fieldContext_HPArtist_lastErrorMessage(ctx, field)
			case "recrawlRequired":
				return ec.fieldContext_HPArtist_recrawlRequired(ctx, field)
			case "createdAt":
				return ec.fieldContext_HPArtist_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_HPArtist_updatedAt(ctx, field)
			case "key":
				return ec.fieldContext_HPArtist_key(ctx, field)
			case "name":
				return ec.fieldContext_HPArtist_name(ctx, field)
			case "thumbnailURL":
				return ec.fieldContext_HPArtist_thumbnailURL(ctx, field)
			case "index":
				return ec.fieldContext_HPArtist_index(ctx, field)
			case "members":
				return ec.fieldContext_HPArtist_members(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HPArtist", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPElineupMallItem_taggedMembers(ctx context.Context, field graphql.CollectedField, obj *ent.HPElineupMallItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPElineupMallItem_taggedMembers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaggedMembers(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.HPMember)
	fc.Result = res
	return ec.marshalOHPMember2ᚕᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPMemberᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPElineupMallItem_taggedMembers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPElineupMallItem",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_HPMember_id(ctx, field)
			case "crawledAt":
				return ec.fieldContext_HPMember_crawledAt(ctx, field)
			case "errorCount":
				return ec.fieldContext_HPMember_errorCount(ctx, field)
			case "lastErrorMessage":
				return ec.fieldContext_HPMember_lastErrorMessage(ctx, field)
			case "recrawlRequired":
				return ec.fieldContext_HPMember_recrawlRequired(ctx, field)
			case "createdAt":
				return ec.fieldContext_HPMember_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_HPMember_updatedAt(ctx, field)
			case "key":
				return ec.fieldContext_HPMember_key(ctx, field)
			case "artistKey":
				return ec.fieldContext_HPMember_artistKey(ctx, field)
			case "name":
				return ec.fieldContext_HPMember_name(ctx, field)
			case "nameKana":
				return ec.fieldContext_HPMember_nameKana(ctx, field)
			case "thumbnailURL":
				return ec.fieldContext_HPMember_thumbnailURL(ctx, field)
			case "dateOfBirth":
				return ec.fieldContext_HPMember_dateOfBirth(ctx, field)
			case "bloodType":
				return ec.fieldContext_HPMember_bloodType(ctx, field)
			case "hometown":
				return ec.fieldContext_HPMember_hometown(ctx, field)
			case "joinAt":
				return ec.fieldContext_HPMember_joinAt(ctx, field)
			case "graduateAt":
				return ec.fieldContext_HPMember_graduateAt(ctx, field)
			case "artistID":
				return ec.fieldContext_HPMember_artistID(ctx, field)
			case "artist":
				return ec.fieldContext_HPMember_artist(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HPMember", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPElineupMallItemConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.HPElineupMallItemConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPElineupMallItemConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.HPElineupMallItemEdge)
	fc.Result = res
	return ec.marshalOHPElineupMallItemEdge2ᚕᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPElineupMallItemEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPElineupMallItemConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPElineupMallItemConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_HPElineupMallItemEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_HPElineupMallItemEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HPElineupMallItemEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPElineupMallItemConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.HPElineupMallItemConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPElineupMallItemConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.PageInfo[int])
	fc.Result = res
	return ec.marshalNPageInfo2entgoᚗioᚋcontribᚋentgqlᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPElineupMallItemConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPElineupMallItemConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPElineupMallItemConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.HPElineupMallItemConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPElineupMallItemConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPElineupMallItemConnection_totalCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPElineupMallItemConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPElineupMallItemEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.HPElineupMallItemEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPElineupMallItemEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.HPElineupMallItem)
	fc.Result = res
	return ec.marshalOHPElineupMallItem2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPElineupMallItem(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPElineupMallItemEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPElineupMallItemEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_HPElineupMallItem_id(ctx, field)
			case "crawledAt":
				return ec.fieldContext_HPElineupMallItem_crawledAt(ctx, field)
			case "errorCount":
				return ec.fieldContext_HPElineupMallItem_errorCount(ctx, field)
			case "lastErrorMessage":
				return ec.fieldContext_HPElineupMallItem_lastErrorMessage(ctx, field)
			case "recrawlRequired":
				return ec.fieldContext_HPElineupMallItem_recrawlRequired(ctx, field)
			case "createdAt":
				return ec.fieldContext_HPElineupMallItem_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_HPElineupMallItem_updatedAt(ctx, field)
			case "permalink":
				return ec.fieldContext_HPElineupMallItem_permalink(ctx, field)
			case "name":
				return ec.fieldContext_HPElineupMallItem_name(ctx, field)
			case "description":
				return ec.fieldContext_HPElineupMallItem_description(ctx, field)
			case "supplier":
				return ec.fieldContext_HPElineupMallItem_supplier(ctx, field)
			case "price":
				return ec.fieldContext_HPElineupMallItem_price(ctx, field)
			case "isLimitedToFc":
				return ec.fieldContext_HPElineupMallItem_isLimitedToFc(ctx, field)
			case "isOutOfStock":
				return ec.fieldContext_HPElineupMallItem_isOutOfStock(ctx, field)
			case "images":
				return ec.fieldContext_HPElineupMallItem_images(ctx, field)
			case "category":
				return ec.fieldContext_HPElineupMallItem_category(ctx, field)
			case "orderStartAt":
				return ec.fieldContext_HPElineupMallItem_orderStartAt(ctx, field)
			case "orderEndAt":
				return ec.fieldContext_HPElineupMallItem_orderEndAt(ctx, field)
			case "taggedArtists":
				return ec.fieldContext_HPElineupMallItem_taggedArtists(ctx, field)
			case "taggedMembers":
				return ec.fieldContext_HPElineupMallItem_taggedMembers(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HPElineupMallItem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPElineupMallItemEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.HPElineupMallItemEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPElineupMallItemEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.Cursor[int])
	fc.Result = res
	return ec.marshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPElineupMallItemEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPElineupMallItemEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPEvent_id(ctx context.Context, field graphql.CollectedField, obj *ent.HPEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPEvent_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPEvent_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPEvent_createdAt(ctx context.Context, field graphql.CollectedField, obj *ent.HPEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPEvent_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPEvent_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPEvent_updatedAt(ctx context.Context, field graphql.CollectedField, obj *ent.HPEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPEvent_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPEvent_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPEvent_key(ctx context.Context, field graphql.CollectedField, obj *ent.HPEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPEvent_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPEvent_key(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPEvent_displayTitles(ctx context.Context, field graphql.CollectedField, obj *ent.HPEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPEvent_displayTitles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayTitles, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPEvent_displayTitles(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPEvent_openAt(ctx context.Context, field graphql.CollectedField, obj *ent.HPEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPEvent_openAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OpenAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPEvent_openAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPEvent_startAt(ctx context.Context, field graphql.CollectedField, obj *ent.HPEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPEvent_startAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPEvent_startAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPEvent_venue(ctx context.Context, field graphql.CollectedField, obj *ent.HPEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPEvent_venue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Venue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPEvent_venue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPEvent_prefecture(ctx context.Context, field graphql.CollectedField, obj *ent.HPEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPEvent_prefecture(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Prefecture, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPEvent_prefecture(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPEvent_source(ctx context.Context, field graphql.CollectedField, obj *ent.HPEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPEvent_source(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(enums.HPEventSource)
	fc.Result = res
	return ec.marshalNHPEventHPEventSource2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋenumsᚐHPEventSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPEvent_source(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type HPEventHPEventSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPEvent_tickets(ctx context.Context, field graphql.CollectedField, obj *ent.HPEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPEvent_tickets(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.HPEvent().Tickets(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.HPFCEventTicket)
	fc.Result = res
	return ec.marshalOHPFCEventTicket2ᚕᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPFCEventTicketᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPEvent_tickets(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPEvent",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_HPFCEventTicket_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_HPFCEventTicket_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_HPFCEventTicket_updatedAt(ctx, field)
			case "num":
				return ec.fieldContext_HPFCEventTicket_num(ctx, field)
			case "status":
				return ec.fieldContext_HPFCEventTicket_status(ctx, field)
			case "fcMemberSha256":
				return ec.fieldContext_HPFCEventTicket_fcMemberSha256(ctx, field)
			case "applicationTitle":
				return ec.fieldContext_HPFCEventTicket_applicationTitle(ctx, field)
			case "applicationID":
				return ec.fieldContext_HPFCEventTicket_applicationID(ctx, field)
			case "applicationSite":
				return ec.fieldContext_HPFCEventTicket_applicationSite(ctx, field)
			case "applicationStartDate":
				return ec.fieldContext_HPFCEventTicket_applicationStartDate(ctx, field)
			case "applicationDueDate":
				return ec.fieldContext_HPFCEventTicket_applicationDueDate(ctx, field)
			case "paymentStartDate":
				return ec.fieldContext_HPFCEventTicket_paymentStartDate(ctx, field)
			case "paymentDueDate":
				return ec.fieldContext_HPFCEventTicket_paymentDueDate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HPFCEventTicket", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPEventConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.HPEventConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPEventConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.HPEventEdge)
	fc.Result = res
	return ec.marshalOHPEventEdge2ᚕᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPEventEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPEventConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPEventConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_HPEventEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_HPEventEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HPEventEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPEventConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.HPEventConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPEventConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.PageInfo[int])
	fc.Result = res
	return ec.marshalNPageInfo2entgoᚗioᚋcontribᚋentgqlᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPEventConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPEventConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPEventConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.HPEventConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPEventConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPEventConnection_totalCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPEventConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPEventEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.HPEventEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPEventEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.HPEvent)
	fc.Result = res
	return ec.marshalOHPEvent2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPEvent(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPEventEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPEventEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_HPEvent_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_HPEvent_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_HPEvent_updatedAt(ctx, field)
			case "key":
				return ec.fieldContext_HPEvent_key(ctx, field)
			case "displayTitles":
				return ec.fieldContext_HPEvent_displayTitles(ctx, field)
			case "openAt":
				return ec.fieldContext_HPEvent_openAt(ctx, field)
			case "startAt":
				return ec.fieldContext_HPEvent_startAt(ctx, field)
			case "venue":
				return ec.fieldContext_HPEvent_venue(ctx, field)
			case "prefecture":
				return ec.fieldContext_HPEvent_prefecture(ctx, field)
			case "source":
				return ec.fieldContext_HPEvent_source(ctx, field)
			case "tickets":
				return ec.fieldContext_HPEvent_tickets(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HPEvent", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPEventEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.HPEventEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPEventEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.Cursor[int])
	fc.Result = res
	return ec.marshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPEventEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPEventEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPFCEventTicket_id(ctx context.Context, field graphql.CollectedField, obj *ent.HPFCEventTicket) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPFCEventTicket_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPFCEventTicket_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPFCEventTicket",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPFCEventTicket_createdAt(ctx context.Context, field graphql.CollectedField, obj *ent.HPFCEventTicket) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPFCEventTicket_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPFCEventTicket_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPFCEventTicket",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPFCEventTicket_updatedAt(ctx context.Context, field graphql.CollectedField, obj *ent.HPFCEventTicket) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPFCEventTicket_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPFCEventTicket_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPFCEventTicket",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPFCEventTicket_num(ctx context.Context, field graphql.CollectedField, obj *ent.HPFCEventTicket) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPFCEventTicket_num(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Num, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPFCEventTicket_num(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPFCEventTicket",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPFCEventTicket_status(ctx context.Context, field graphql.CollectedField, obj *ent.HPFCEventTicket) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPFCEventTicket_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(enums.HPFCEventTicketApplicationStatus)
	fc.Result = res
	return ec.marshalNHPFCEventTicketHPFCEventTicketApplicationStatus2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋenumsᚐHPFCEventTicketApplicationStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPFCEventTicket_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPFCEventTicket",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type HPFCEventTicketHPFCEventTicketApplicationStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPFCEventTicket_fcMemberSha256(ctx context.Context, field graphql.CollectedField, obj *ent.HPFCEventTicket) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPFCEventTicket_fcMemberSha256(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FcMemberSha256, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPFCEventTicket_fcMemberSha256(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPFCEventTicket",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPFCEventTicket_applicationTitle(ctx context.Context, field graphql.CollectedField, obj *ent.HPFCEventTicket) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPFCEventTicket_applicationTitle(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApplicationTitle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPFCEventTicket_applicationTitle(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPFCEventTicket",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPFCEventTicket_applicationID(ctx context.Context, field graphql.CollectedField, obj *ent.HPFCEventTicket) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPFCEventTicket_applicationID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApplicationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPFCEventTicket_applicationID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPFCEventTicket",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPFCEventTicket_applicationSite(ctx context.Context, field graphql.CollectedField, obj *ent.HPFCEventTicket) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPFCEventTicket_applicationSite(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApplicationSite, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(enums.HPFCEventTicketApplicationSite)
	fc.Result = res
	return ec.marshalNHPFCEventTicketHPFCEventTicketApplicationSite2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋenumsᚐHPFCEventTicketApplicationSite(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPFCEventTicket_applicationSite(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPFCEventTicket",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type HPFCEventTicketHPFCEventTicketApplicationSite does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPFCEventTicket_applicationStartDate(ctx context.Context, field graphql.CollectedField, obj *ent.HPFCEventTicket) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPFCEventTicket_applicationStartDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApplicationStartDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPFCEventTicket_applicationStartDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPFCEventTicket",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPFCEventTicket_applicationDueDate(ctx context.Context, field graphql.CollectedField, obj *ent.HPFCEventTicket) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPFCEventTicket_applicationDueDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApplicationDueDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPFCEventTicket_applicationDueDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPFCEventTicket",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPFCEventTicket_paymentStartDate(ctx context.Context, field graphql.CollectedField, obj *ent.HPFCEventTicket) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPFCEventTicket_paymentStartDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentStartDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPFCEventTicket_paymentStartDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPFCEventTicket",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPFCEventTicket_paymentDueDate(ctx context.Context, field graphql.CollectedField, obj *ent.HPFCEventTicket) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPFCEventTicket_paymentDueDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentDueDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPFCEventTicket_paymentDueDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPFCEventTicket",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPFeedItem_id(ctx context.Context, field graphql.CollectedField, obj *ent.HPFeedItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPFeedItem_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPFeedItem_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPFeedItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPFeedItem_createdAt(ctx context.Context, field graphql.CollectedField, obj *ent.HPFeedItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPFeedItem_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPFeedItem_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPFeedItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPFeedItem_updatedAt(ctx context.Context, field graphql.CollectedField, obj *ent.HPFeedItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPFeedItem_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPFeedItem_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPFeedItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPFeedItem_sourceID(ctx context.Context, field graphql.CollectedField, obj *ent.HPFeedItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPFeedItem_sourceID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPFeedItem_sourceID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPFeedItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPFeedItem_assetType(ctx context.Context, field graphql.CollectedField, obj *ent.HPFeedItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPFeedItem_assetType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssetType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(enums.HPAssetType)
	fc.Result = res
	return ec.marshalNHPFeedItemHPAssetType2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋenumsᚐHPAssetType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPFeedItem_assetType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPFeedItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type HPFeedItemHPAssetType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPFeedItem_title(ctx context.Context, field graphql.CollectedField, obj *ent.HPFeedItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPFeedItem_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPFeedItem_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPFeedItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPFeedItem_postAt(ctx context.Context, field graphql.CollectedField, obj *ent.HPFeedItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPFeedItem_postAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PostAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPFeedItem_postAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPFeedItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPFeedItem_sourceURL(ctx context.Context, field graphql.CollectedField, obj *ent.HPFeedItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPFeedItem_sourceURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPFeedItem_sourceURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPFeedItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPFeedItem_imageURL(ctx context.Context, field graphql.CollectedField, obj *ent.HPFeedItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPFeedItem_imageURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ImageURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPFeedItem_imageURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPFeedItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPFeedItem_media(ctx context.Context, field graphql.CollectedField, obj *ent.HPFeedItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPFeedItem_media(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Media, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]jsonfields.Media)
	fc.Result = res
	return ec.marshalNMedia2ᚕgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋjsonfieldsᚐMediaᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPFeedItem_media(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPFeedItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "url":
				return ec.fieldContext_Media_url(ctx, field)
			case "blobId":
				return ec.fieldContext_Media_blobId(ctx, field)
			case "type":
				return ec.fieldContext_Media_type(ctx, field)
			case "width":
				return ec.fieldContext_Media_width(ctx, field)
			case "height":
				return ec.fieldContext_Media_height(ctx, field)
			case "thumbnailUrl":
				return ec.fieldContext_Media_thumbnailUrl(ctx, field)
			case "thumbnailWidth":
				return ec.fieldContext_Media_thumbnailWidth(ctx, field)
			case "thumbnailHeight":
				return ec.fieldContext_Media_thumbnailHeight(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Media", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPFeedItem_ownerArtistID(ctx context.Context, field graphql.CollectedField, obj *ent.HPFeedItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPFeedItem_ownerArtistID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnerArtistID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOID2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPFeedItem_ownerArtistID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPFeedItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPFeedItem_ownerMemberID(ctx context.Context, field graphql.CollectedField, obj *ent.HPFeedItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPFeedItem_ownerMemberID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnerMemberID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOID2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPFeedItem_ownerMemberID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPFeedItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPFeedItem_ownerArtist(ctx context.Context, field graphql.CollectedField, obj *ent.HPFeedItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPFeedItem_ownerArtist(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnerArtist(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.HPArtist)
	fc.Result = res
	return ec.marshalOHPArtist2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPArtist(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPFeedItem_ownerArtist(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPFeedItem",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_HPArtist_id(ctx, field)
			case "crawledAt":
				return ec.fieldContext_HPArtist_crawledAt(ctx, field)
			case "errorCount":
				return ec.fieldContext_HPArtist_errorCount(ctx, field)
			case "lastErrorMessage":
				return ec.fieldContext_HPArtist_lastErrorMessage(ctx, field)
			case "recrawlRequired":
				return ec.fieldContext_HPArtist_recrawlRequired(ctx, field)
			case "createdAt":
				return ec.fieldContext_HPArtist_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_HPArtist_updatedAt(ctx, field)
			case "key":
				return ec.fieldContext_HPArtist_key(ctx, field)
			case "name":
				return ec.fieldContext_HPArtist_name(ctx, field)
			case "thumbnailURL":
				return ec.fieldContext_HPArtist_thumbnailURL(ctx, field)
			case "index":
				return ec.fieldContext_HPArtist_index(ctx, field)
			case "members":
				return ec.fieldContext_HPArtist_members(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HPArtist", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPFeedItem_ownerMember(ctx context.Context, field graphql.CollectedField, obj *ent.HPFeedItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPFeedItem_ownerMember(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnerMember(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.HPMember)
	fc.Result = res
	return ec.marshalOHPMember2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPMember(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPFeedItem_ownerMember(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPFeedItem",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_HPMember_id(ctx, field)
			case "crawledAt":
				return ec.fieldContext_HPMember_crawledAt(ctx, field)
			case "errorCount":
				return ec.fieldContext_HPMember_errorCount(ctx, field)
			case "lastErrorMessage":
				return ec.fieldContext_HPMember_lastErrorMessage(ctx, field)
			case "recrawlRequired":
				return ec.fieldContext_HPMember_recrawlRequired(ctx, field)
			case "createdAt":
				return ec.fieldContext_HPMember_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_HPMember_updatedAt(ctx, field)
			case "key":
				return ec.fieldContext_HPMember_key(ctx, field)
			case "artistKey":
				return ec.fieldContext_HPMember_artistKey(ctx, field)
			case "name":
				return ec.fieldContext_HPMember_name(ctx, field)
			case "nameKana":
				return ec.fieldContext_HPMember_nameKana(ctx, field)
			case "thumbnailURL":
				return ec.fieldContext_HPMember_thumbnailURL(ctx, field)
			case "dateOfBirth":
				return ec.fieldContext_HPMember_dateOfBirth(ctx, field)
			case "bloodType":
				return ec.fieldContext_HPMember_bloodType(ctx, field)
			case "hometown":
				return ec.fieldContext_HPMember_hometown(ctx, field)
			case "joinAt":
				return ec.fieldContext_HPMember_joinAt(ctx, field)
			case "graduateAt":
				return ec.fieldContext_HPMember_graduateAt(ctx, field)
			case "artistID":
				return ec.fieldContext_HPMember_artistID(ctx, field)
			case "artist":
				return ec.fieldContext_HPMember_artist(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HPMember", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPFeedItem_taggedArtists(ctx context.Context, field graphql.CollectedField, obj *ent.HPFeedItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPFeedItem_taggedArtists(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaggedArtists(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.HPArtist)
	fc.Result = res
	return ec.marshalOHPArtist2ᚕᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPArtistᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPFeedItem_taggedArtists(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPFeedItem",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_HPArtist_id(ctx, field)
			case "crawledAt":
				return ec.fieldContext_HPArtist_crawledAt(ctx, field)
			case "errorCount":
				return ec.fieldContext_HPArtist_errorCount(ctx, field)
			case "lastErrorMessage":
				return ec.fieldContext_HPArtist_lastErrorMessage(ctx, field)
			case "recrawlRequired":
				return ec.fieldContext_HPArtist_recrawlRequired(ctx, field)
			case "createdAt":
				return ec.fieldContext_HPArtist_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_HPArtist_updatedAt(ctx, field)
			case "key":
				return ec.fieldContext_HPArtist_key(ctx, field)
			case "name":
				return ec.fieldContext_HPArtist_name(ctx, field)
			case "thumbnailURL":
				return ec.fieldContext_HPArtist_thumbnailURL(ctx, field)
			case "index":
				return ec.fieldContext_HPArtist_index(ctx, field)
			case "members":
				return ec.fieldContext_HPArtist_members(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HPArtist", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPFeedItem_taggedMembers(ctx context.Context, field graphql.CollectedField, obj *ent.HPFeedItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPFeedItem_taggedMembers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaggedMembers(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.HPMember)
	fc.Result = res
	return ec.marshalOHPMember2ᚕᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPMemberᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPFeedItem_taggedMembers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPFeedItem",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_HPMember_id(ctx, field)
			case "crawledAt":
				return ec.fieldContext_HPMember_crawledAt(ctx, field)
			case "errorCount":
				return ec.fieldContext_HPMember_errorCount(ctx, field)
			case "lastErrorMessage":
				return ec.fieldContext_HPMember_lastErrorMessage(ctx, field)
			case "recrawlRequired":
				return ec.fieldContext_HPMember_recrawlRequired(ctx, field)
			case "createdAt":
				return ec.fieldContext_HPMember_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_HPMember_updatedAt(ctx, field)
			case "key":
				return ec.fieldContext_HPMember_key(ctx, field)
			case "artistKey":
				return ec.fieldContext_HPMember_artistKey(ctx, field)
			case "name":
				return ec.fieldContext_HPMember_name(ctx, field)
			case "nameKana":
				return ec.fieldContext_HPMember_nameKana(ctx, field)
			case "thumbnailURL":
				return ec.fieldContext_HPMember_thumbnailURL(ctx, field)
			case "dateOfBirth":
				return ec.fieldContext_HPMember_dateOfBirth(ctx, field)
			case "bloodType":
				return ec.fieldContext_HPMember_bloodType(ctx, field)
			case "hometown":
				return ec.fieldContext_HPMember_hometown(ctx, field)
			case "joinAt":
				return ec.fieldContext_HPMember_joinAt(ctx, field)
			case "graduateAt":
				return ec.fieldContext_HPMember_graduateAt(ctx, field)
			case "artistID":
				return ec.fieldContext_HPMember_artistID(ctx, field)
			case "artist":
				return ec.fieldContext_HPMember_artist(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HPMember", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPFeedItem_myViewHistory(ctx context.Context, field graphql.CollectedField, obj *ent.HPFeedItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPFeedItem_myViewHistory(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.HPFeedItem().MyViewHistory(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.HPViewHistory)
	fc.Result = res
	return ec.marshalOHPViewHistory2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPViewHistory(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPFeedItem_myViewHistory(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPFeedItem",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_HPViewHistory_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_HPViewHistory_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_HPViewHistory_updatedAt(ctx, field)
			case "contentID":
				return ec.fieldContext_HPViewHistory_contentID(ctx, field)
			case "contentPostAt":
				return ec.fieldContext_HPViewHistory_contentPostAt(ctx, field)
			case "assetType":
				return ec.fieldContext_HPViewHistory_assetType(ctx, field)
			case "isFavorite":
				return ec.fieldContext_HPViewHistory_isFavorite(ctx, field)
			case "feed":
				return ec.fieldContext_HPViewHistory_feed(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HPViewHistory", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPFeedItemConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.HPFeedItemConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPFeedItemConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.HPFeedItemEdge)
	fc.Result = res
	return ec.marshalOHPFeedItemEdge2ᚕᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPFeedItemEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPFeedItemConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPFeedItemConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_HPFeedItemEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_HPFeedItemEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HPFeedItemEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPFeedItemConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.HPFeedItemConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPFeedItemConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.PageInfo[int])
	fc.Result = res
	return ec.marshalNPageInfo2entgoᚗioᚋcontribᚋentgqlᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPFeedItemConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPFeedItemConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPFeedItemConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.HPFeedItemConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPFeedItemConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPFeedItemConnection_totalCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPFeedItemConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPFeedItemEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.HPFeedItemEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPFeedItemEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.HPFeedItem)
	fc.Result = res
	return ec.marshalOHPFeedItem2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPFeedItem(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPFeedItemEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPFeedItemEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_HPFeedItem_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_HPFeedItem_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_HPFeedItem_updatedAt(ctx, field)
			case "sourceID":
				return ec.fieldContext_HPFeedItem_sourceID(ctx, field)
			case "assetType":
				return ec.fieldContext_HPFeedItem_assetType(ctx, field)
			case "title":
				return ec.fieldContext_HPFeedItem_title(ctx, field)
			case "postAt":
				return ec.fieldContext_HPFeedItem_postAt(ctx, field)
			case "sourceURL":
				return ec.fieldContext_HPFeedItem_sourceURL(ctx, field)
			case "imageURL":
				return ec.fieldContext_HPFeedItem_imageURL(ctx, field)
			case "media":
				return ec.fieldContext_HPFeedItem_media(ctx, field)
			case "ownerArtistID":
				return ec.fieldContext_HPFeedItem_ownerArtistID(ctx, field)
			case "ownerMemberID":
				return ec.fieldContext_HPFeedItem_ownerMemberID(ctx, field)
			case "ownerArtist":
				return ec.fieldContext_HPFeedItem_ownerArtist(ctx, field)
			case "ownerMember":
				return ec.fieldContext_HPFeedItem_ownerMember(ctx, field)
			case "taggedArtists":
				return ec.fieldContext_HPFeedItem_taggedArtists(ctx, field)
			case "taggedMembers":
				return ec.fieldContext_HPFeedItem_taggedMembers(ctx, field)
			case "myViewHistory":
				return ec.fieldContext_HPFeedItem_myViewHistory(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HPFeedItem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPFeedItemEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.HPFeedItemEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPFeedItemEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.Cursor[int])
	fc.Result = res
	return ec.marshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPFeedItemEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPFeedItemEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPFollow_id(ctx context.Context, field graphql.CollectedField, obj *ent.HPFollow) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPFollow_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPFollow_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPFollow",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPFollow_createdAt(ctx context.Context, field graphql.CollectedField, obj *ent.HPFollow) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPFollow_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPFollow_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPFollow",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPFollow_updatedAt(ctx context.Context, field graphql.CollectedField, obj *ent.HPFollow) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPFollow_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPFollow_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPFollow",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPFollow_type(ctx context.Context, field graphql.CollectedField, obj *ent.HPFollow) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPFollow_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(enums.HPFollowType)
	fc.Result = res
	return ec.marshalNHPFollowHPFollowType2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋenumsᚐHPFollowType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPFollow_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPFollow",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type HPFollowHPFollowType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPFollow_user(ctx context.Context, field graphql.CollectedField, obj *ent.HPFollow) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPFollow_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.User)
	fc.Result = res
	return ec.marshalNUser2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPFollow_user(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPFollow",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "accessToken":
				return ec.fieldContext_User_accessToken(ctx, field)
			case "auth":
				return ec.fieldContext_User_auth(ctx, field)
			case "notificationSettings":
				return ec.fieldContext_User_notificationSettings(ctx, field)
			case "hpviewHistory":
				return ec.fieldContext_User_hpviewHistory(ctx, field)
			case "hpmemberFollowing":
				return ec.fieldContext_User_hpmemberFollowing(ctx, field)
			case "hpsortHistory":
				return ec.fieldContext_User_hpsortHistory(ctx, field)
			case "hpfcEventTickets":
				return ec.fieldContext_User_hpfcEventTickets(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPFollow_member(ctx context.Context, field graphql.CollectedField, obj *ent.HPFollow) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPFollow_member(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Member(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.HPMember)
	fc.Result = res
	return ec.marshalNHPMember2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPMember(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPFollow_member(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPFollow",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_HPMember_id(ctx, field)
			case "crawledAt":
				return ec.fieldContext_HPMember_crawledAt(ctx, field)
			case "errorCount":
				return ec.fieldContext_HPMember_errorCount(ctx, field)
			case "lastErrorMessage":
				return ec.fieldContext_HPMember_lastErrorMessage(ctx, field)
			case "recrawlRequired":
				return ec.fieldContext_HPMember_recrawlRequired(ctx, field)
			case "createdAt":
				return ec.fieldContext_HPMember_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_HPMember_updatedAt(ctx, field)
			case "key":
				return ec.fieldContext_HPMember_key(ctx, field)
			case "artistKey":
				return ec.fieldContext_HPMember_artistKey(ctx, field)
			case "name":
				return ec.fieldContext_HPMember_name(ctx, field)
			case "nameKana":
				return ec.fieldContext_HPMember_nameKana(ctx, field)
			case "thumbnailURL":
				return ec.fieldContext_HPMember_thumbnailURL(ctx, field)
			case "dateOfBirth":
				return ec.fieldContext_HPMember_dateOfBirth(ctx, field)
			case "bloodType":
				return ec.fieldContext_HPMember_bloodType(ctx, field)
			case "hometown":
				return ec.fieldContext_HPMember_hometown(ctx, field)
			case "joinAt":
				return ec.fieldContext_HPMember_joinAt(ctx, field)
			case "graduateAt":
				return ec.fieldContext_HPMember_graduateAt(ctx, field)
			case "artistID":
				return ec.fieldContext_HPMember_artistID(ctx, field)
			case "artist":
				return ec.fieldContext_HPMember_artist(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HPMember", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPIgCrawlArgs_id(ctx context.Context, field graphql.CollectedField, obj *jsonfields.HPIgCrawlArgs) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPIgCrawlArgs_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPIgCrawlArgs_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPIgCrawlArgs",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPIgCrawlArgs_shortcode(ctx context.Context, field graphql.CollectedField, obj *jsonfields.HPIgCrawlArgs) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPIgCrawlArgs_shortcode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Shortcode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPIgCrawlArgs_shortcode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPIgCrawlArgs",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPIgCrawlArgs_caption(ctx context.Context, field graphql.CollectedField, obj *jsonfields.HPIgCrawlArgs) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPIgCrawlArgs_caption(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Caption, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPIgCrawlArgs_caption(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPIgCrawlArgs",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPIgCrawlArgs_displayUrl(ctx context.Context, field graphql.CollectedField, obj *jsonfields.HPIgCrawlArgs) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPIgCrawlArgs_displayUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPIgCrawlArgs_displayUrl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPIgCrawlArgs",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPIgCrawlArgs_videoUrl(ctx context.Context, field graphql.CollectedField, obj *jsonfields.HPIgCrawlArgs) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPIgCrawlArgs_videoUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VideoURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPIgCrawlArgs_videoUrl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPIgCrawlArgs",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPIgCrawlArgs_ownerUsername(ctx context.Context, field graphql.CollectedField, obj *jsonfields.HPIgCrawlArgs) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPIgCrawlArgs_ownerUsername(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnerUsername, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPIgCrawlArgs_ownerUsername(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPIgCrawlArgs",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPIgCrawlArgs_ownerId(ctx context.Context, field graphql.CollectedField, obj *jsonfields.HPIgCrawlArgs) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPIgCrawlArgs_ownerId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPIgCrawlArgs_ownerId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPIgCrawlArgs",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPIgCrawlArgs_hashtags(ctx context.Context, field graphql.CollectedField, obj *jsonfields.HPIgCrawlArgs) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPIgCrawlArgs_hashtags(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Hashtags, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPIgCrawlArgs_hashtags(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPIgCrawlArgs",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPIgCrawlArgs_childPosts(ctx context.Context, field graphql.CollectedField, obj *jsonfields.HPIgCrawlArgs) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPIgCrawlArgs_childPosts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChildPosts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]jsonfields.HPIgCrawlArgsChildPost)
	fc.Result = res
	return ec.marshalOHPIgCrawlArgsChildPost2ᚕgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋjsonfieldsᚐHPIgCrawlArgsChildPostᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPIgCrawlArgs_childPosts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPIgCrawlArgs",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_HPIgCrawlArgsChildPost_id(ctx, field)
			case "type":
				return ec.fieldContext_HPIgCrawlArgsChildPost_type(ctx, field)
			case "displayUrl":
				return ec.fieldContext_HPIgCrawlArgsChildPost_displayUrl(ctx, field)
			case "videoUrl":
				return ec.fieldContext_HPIgCrawlArgsChildPost_videoUrl(ctx, field)
			case "likesCount":
				return ec.fieldContext_HPIgCrawlArgsChildPost_likesCount(ctx, field)
			case "videoViewCount":
				return ec.fieldContext_HPIgCrawlArgsChildPost_videoViewCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HPIgCrawlArgsChildPost", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPIgCrawlArgs_timestamp(ctx context.Context, field graphql.CollectedField, obj *jsonfields.HPIgCrawlArgs) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPIgCrawlArgs_timestamp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timestamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPIgCrawlArgs_timestamp(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPIgCrawlArgs",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPIgCrawlArgs_commentsCount(ctx context.Context, field graphql.CollectedField, obj *jsonfields.HPIgCrawlArgs) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPIgCrawlArgs_commentsCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommentsCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPIgCrawlArgs_commentsCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPIgCrawlArgs",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPIgCrawlArgs_likesCount(ctx context.Context, field graphql.CollectedField, obj *jsonfields.HPIgCrawlArgs) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPIgCrawlArgs_likesCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LikesCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPIgCrawlArgs_likesCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPIgCrawlArgs",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPIgCrawlArgs_videoViewCount(ctx context.Context, field graphql.CollectedField, obj *jsonfields.HPIgCrawlArgs) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPIgCrawlArgs_videoViewCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VideoViewCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPIgCrawlArgs_videoViewCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPIgCrawlArgs",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPIgCrawlArgsChildPost_id(ctx context.Context, field graphql.CollectedField, obj *jsonfields.HPIgCrawlArgsChildPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPIgCrawlArgsChildPost_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPIgCrawlArgsChildPost_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPIgCrawlArgsChildPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPIgCrawlArgsChildPost_type(ctx context.Context, field graphql.CollectedField, obj *jsonfields.HPIgCrawlArgsChildPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPIgCrawlArgsChildPost_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPIgCrawlArgsChildPost_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPIgCrawlArgsChildPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPIgCrawlArgsChildPost_displayUrl(ctx context.Context, field graphql.CollectedField, obj *jsonfields.HPIgCrawlArgsChildPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPIgCrawlArgsChildPost_displayUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPIgCrawlArgsChildPost_displayUrl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPIgCrawlArgsChildPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPIgCrawlArgsChildPost_videoUrl(ctx context.Context, field graphql.CollectedField, obj *jsonfields.HPIgCrawlArgsChildPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPIgCrawlArgsChildPost_videoUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VideoURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPIgCrawlArgsChildPost_videoUrl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPIgCrawlArgsChildPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPIgCrawlArgsChildPost_likesCount(ctx context.Context, field graphql.CollectedField, obj *jsonfields.HPIgCrawlArgsChildPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPIgCrawlArgsChildPost_likesCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LikesCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPIgCrawlArgsChildPost_likesCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPIgCrawlArgsChildPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPIgCrawlArgsChildPost_videoViewCount(ctx context.Context, field graphql.CollectedField, obj *jsonfields.HPIgCrawlArgsChildPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPIgCrawlArgsChildPost_videoViewCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VideoViewCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPIgCrawlArgsChildPost_videoViewCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPIgCrawlArgsChildPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPIgPost_id(ctx context.Context, field graphql.CollectedField, obj *ent.HPIgPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPIgPost_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPIgPost_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPIgPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPIgPost_crawledAt(ctx context.Context, field graphql.CollectedField, obj *ent.HPIgPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPIgPost_crawledAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CrawledAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPIgPost_crawledAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPIgPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPIgPost_errorCount(ctx context.Context, field graphql.CollectedField, obj *ent.HPIgPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPIgPost_errorCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ErrorCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPIgPost_errorCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPIgPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPIgPost_lastErrorMessage(ctx context.Context, field graphql.CollectedField, obj *ent.HPIgPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPIgPost_lastErrorMessage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastErrorMessage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPIgPost_lastErrorMessage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPIgPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPIgPost_recrawlRequired(ctx context.Context, field graphql.CollectedField, obj *ent.HPIgPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPIgPost_recrawlRequired(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecrawlRequired, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPIgPost_recrawlRequired(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPIgPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPIgPost_createdAt(ctx context.Context, field graphql.CollectedField, obj *ent.HPIgPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPIgPost_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPIgPost_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPIgPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPIgPost_updatedAt(ctx context.Context, field graphql.CollectedField, obj *ent.HPIgPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPIgPost_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPIgPost_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPIgPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPIgPost_shortcode(ctx context.Context, field graphql.CollectedField, obj *ent.HPIgPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPIgPost_shortcode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Shortcode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPIgPost_shortcode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPIgPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPIgPost_description(ctx context.Context, field graphql.CollectedField, obj *ent.HPIgPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPIgPost_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPIgPost_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPIgPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPIgPost_postAt(ctx context.Context, field graphql.CollectedField, obj *ent.HPIgPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPIgPost_postAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PostAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPIgPost_postAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPIgPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPIgPost_media(ctx context.Context, field graphql.CollectedField, obj *ent.HPIgPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPIgPost_media(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Media, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]jsonfields.Media)
	fc.Result = res
	return ec.marshalNMedia2ᚕgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋjsonfieldsᚐMediaᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPIgPost_media(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPIgPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "url":
				return ec.fieldContext_Media_url(ctx, field)
			case "blobId":
				return ec.fieldContext_Media_blobId(ctx, field)
			case "type":
				return ec.fieldContext_Media_type(ctx, field)
			case "width":
				return ec.fieldContext_Media_width(ctx, field)
			case "height":
				return ec.fieldContext_Media_height(ctx, field)
			case "thumbnailUrl":
				return ec.fieldContext_Media_thumbnailUrl(ctx, field)
			case "thumbnailWidth":
				return ec.fieldContext_Media_thumbnailWidth(ctx, field)
			case "thumbnailHeight":
				return ec.fieldContext_Media_thumbnailHeight(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Media", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPIgPost_likes(ctx context.Context, field graphql.CollectedField, obj *ent.HPIgPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPIgPost_likes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Likes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPIgPost_likes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPIgPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPIgPost_comments(ctx context.Context, field graphql.CollectedField, obj *ent.HPIgPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPIgPost_comments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Comments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPIgPost_comments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPIgPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPIgPost_recrawlArgs(ctx context.Context, field graphql.CollectedField, obj *ent.HPIgPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPIgPost_recrawlArgs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecrawlArgs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*jsonfields.HPIgCrawlArgs)
	fc.Result = res
	return ec.marshalOHPIgCrawlArgs2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋjsonfieldsᚐHPIgCrawlArgs(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPIgPost_recrawlArgs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPIgPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_HPIgCrawlArgs_id(ctx, field)
			case "shortcode":
				return ec.fieldContext_HPIgCrawlArgs_shortcode(ctx, field)
			case "caption":
				return ec.fieldContext_HPIgCrawlArgs_caption(ctx, field)
			case "displayUrl":
				return ec.fieldContext_HPIgCrawlArgs_displayUrl(ctx, field)
			case "videoUrl":
				return ec.fieldContext_HPIgCrawlArgs_videoUrl(ctx, field)
			case "ownerUsername":
				return ec.fieldContext_HPIgCrawlArgs_ownerUsername(ctx, field)
			case "ownerId":
				return ec.fieldContext_HPIgCrawlArgs_ownerId(ctx, field)
			case "hashtags":
				return ec.fieldContext_HPIgCrawlArgs_hashtags(ctx, field)
			case "childPosts":
				return ec.fieldContext_HPIgCrawlArgs_childPosts(ctx, field)
			case "timestamp":
				return ec.fieldContext_HPIgCrawlArgs_timestamp(ctx, field)
			case "commentsCount":
				return ec.fieldContext_HPIgCrawlArgs_commentsCount(ctx, field)
			case "likesCount":
				return ec.fieldContext_HPIgCrawlArgs_likesCount(ctx, field)
			case "videoViewCount":
				return ec.fieldContext_HPIgCrawlArgs_videoViewCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HPIgCrawlArgs", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPIgPost_ownerArtistID(ctx context.Context, field graphql.CollectedField, obj *ent.HPIgPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPIgPost_ownerArtistID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnerArtistID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOID2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPIgPost_ownerArtistID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPIgPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPIgPost_ownerMemberID(ctx context.Context, field graphql.CollectedField, obj *ent.HPIgPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPIgPost_ownerMemberID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnerMemberID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOID2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPIgPost_ownerMemberID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPIgPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPIgPost_ownerArtist(ctx context.Context, field graphql.CollectedField, obj *ent.HPIgPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPIgPost_ownerArtist(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnerArtist(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.HPArtist)
	fc.Result = res
	return ec.marshalOHPArtist2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPArtist(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPIgPost_ownerArtist(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPIgPost",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_HPArtist_id(ctx, field)
			case "crawledAt":
				return ec.fieldContext_HPArtist_crawledAt(ctx, field)
			case "errorCount":
				return ec.fieldContext_HPArtist_errorCount(ctx, field)
			case "lastErrorMessage":
				return ec.fieldContext_HPArtist_lastErrorMessage(ctx, field)
			case "recrawlRequired":
				return ec.fieldContext_HPArtist_recrawlRequired(ctx, field)
			case "createdAt":
				return ec.fieldContext_HPArtist_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_HPArtist_updatedAt(ctx, field)
			case "key":
				return ec.fieldContext_HPArtist_key(ctx, field)
			case "name":
				return ec.fieldContext_HPArtist_name(ctx, field)
			case "thumbnailURL":
				return ec.fieldContext_HPArtist_thumbnailURL(ctx, field)
			case "index":
				return ec.fieldContext_HPArtist_index(ctx, field)
			case "members":
				return ec.fieldContext_HPArtist_members(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HPArtist", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPIgPost_ownerMember(ctx context.Context, field graphql.CollectedField, obj *ent.HPIgPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPIgPost_ownerMember(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnerMember(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.HPMember)
	fc.Result = res
	return ec.marshalOHPMember2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPMember(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPIgPost_ownerMember(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPIgPost",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_HPMember_id(ctx, field)
			case "crawledAt":
				return ec.fieldContext_HPMember_crawledAt(ctx, field)
			case "errorCount":
				return ec.fieldContext_HPMember_errorCount(ctx, field)
			case "lastErrorMessage":
				return ec.fieldContext_HPMember_lastErrorMessage(ctx, field)
			case "recrawlRequired":
				return ec.fieldContext_HPMember_recrawlRequired(ctx, field)
			case "createdAt":
				return ec.fieldContext_HPMember_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_HPMember_updatedAt(ctx, field)
			case "key":
				return ec.fieldContext_HPMember_key(ctx, field)
			case "artistKey":
				return ec.fieldContext_HPMember_artistKey(ctx, field)
			case "name":
				return ec.fieldContext_HPMember_name(ctx, field)
			case "nameKana":
				return ec.fieldContext_HPMember_nameKana(ctx, field)
			case "thumbnailURL":
				return ec.fieldContext_HPMember_thumbnailURL(ctx, field)
			case "dateOfBirth":
				return ec.fieldContext_HPMember_dateOfBirth(ctx, field)
			case "bloodType":
				return ec.fieldContext_HPMember_bloodType(ctx, field)
			case "hometown":
				return ec.fieldContext_HPMember_hometown(ctx, field)
			case "joinAt":
				return ec.fieldContext_HPMember_joinAt(ctx, field)
			case "graduateAt":
				return ec.fieldContext_HPMember_graduateAt(ctx, field)
			case "artistID":
				return ec.fieldContext_HPMember_artistID(ctx, field)
			case "artist":
				return ec.fieldContext_HPMember_artist(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HPMember", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPIgPost_taggedArtists(ctx context.Context, field graphql.CollectedField, obj *ent.HPIgPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPIgPost_taggedArtists(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaggedArtists(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.HPArtist)
	fc.Result = res
	return ec.marshalOHPArtist2ᚕᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPArtistᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPIgPost_taggedArtists(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPIgPost",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_HPArtist_id(ctx, field)
			case "crawledAt":
				return ec.fieldContext_HPArtist_crawledAt(ctx, field)
			case "errorCount":
				return ec.fieldContext_HPArtist_errorCount(ctx, field)
			case "lastErrorMessage":
				return ec.fieldContext_HPArtist_lastErrorMessage(ctx, field)
			case "recrawlRequired":
				return ec.fieldContext_HPArtist_recrawlRequired(ctx, field)
			case "createdAt":
				return ec.fieldContext_HPArtist_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_HPArtist_updatedAt(ctx, field)
			case "key":
				return ec.fieldContext_HPArtist_key(ctx, field)
			case "name":
				return ec.fieldContext_HPArtist_name(ctx, field)
			case "thumbnailURL":
				return ec.fieldContext_HPArtist_thumbnailURL(ctx, field)
			case "index":
				return ec.fieldContext_HPArtist_index(ctx, field)
			case "members":
				return ec.fieldContext_HPArtist_members(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HPArtist", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPIgPost_taggedMembers(ctx context.Context, field graphql.CollectedField, obj *ent.HPIgPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPIgPost_taggedMembers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaggedMembers(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.HPMember)
	fc.Result = res
	return ec.marshalOHPMember2ᚕᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPMemberᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPIgPost_taggedMembers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPIgPost",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_HPMember_id(ctx, field)
			case "crawledAt":
				return ec.fieldContext_HPMember_crawledAt(ctx, field)
			case "errorCount":
				return ec.fieldContext_HPMember_errorCount(ctx, field)
			case "lastErrorMessage":
				return ec.fieldContext_HPMember_lastErrorMessage(ctx, field)
			case "recrawlRequired":
				return ec.fieldContext_HPMember_recrawlRequired(ctx, field)
			case "createdAt":
				return ec.fieldContext_HPMember_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_HPMember_updatedAt(ctx, field)
			case "key":
				return ec.fieldContext_HPMember_key(ctx, field)
			case "artistKey":
				return ec.fieldContext_HPMember_artistKey(ctx, field)
			case "name":
				return ec.fieldContext_HPMember_name(ctx, field)
			case "nameKana":
				return ec.fieldContext_HPMember_nameKana(ctx, field)
			case "thumbnailURL":
				return ec.fieldContext_HPMember_thumbnailURL(ctx, field)
			case "dateOfBirth":
				return ec.fieldContext_HPMember_dateOfBirth(ctx, field)
			case "bloodType":
				return ec.fieldContext_HPMember_bloodType(ctx, field)
			case "hometown":
				return ec.fieldContext_HPMember_hometown(ctx, field)
			case "joinAt":
				return ec.fieldContext_HPMember_joinAt(ctx, field)
			case "graduateAt":
				return ec.fieldContext_HPMember_graduateAt(ctx, field)
			case "artistID":
				return ec.fieldContext_HPMember_artistID(ctx, field)
			case "artist":
				return ec.fieldContext_HPMember_artist(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HPMember", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPIgPost_blobs(ctx context.Context, field graphql.CollectedField, obj *ent.HPIgPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPIgPost_blobs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Blobs(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.HPBlob)
	fc.Result = res
	return ec.marshalOHPBlob2ᚕᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPBlobᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPIgPost_blobs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPIgPost",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_HPBlob_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_HPBlob_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_HPBlob_updatedAt(ctx, field)
			case "storagePath":
				return ec.fieldContext_HPBlob_storagePath(ctx, field)
			case "sourceURL":
				return ec.fieldContext_HPBlob_sourceURL(ctx, field)
			case "sourceHTMLURL":
				return ec.fieldContext_HPBlob_sourceHTMLURL(ctx, field)
			case "status":
				return ec.fieldContext_HPBlob_status(ctx, field)
			case "statusMessage":
				return ec.fieldContext_HPBlob_statusMessage(ctx, field)
			case "statusErrorCount":
				return ec.fieldContext_HPBlob_statusErrorCount(ctx, field)
			case "type":
				return ec.fieldContext_HPBlob_type(ctx, field)
			case "subType":
				return ec.fieldContext_HPBlob_subType(ctx, field)
			case "width":
				return ec.fieldContext_HPBlob_width(ctx, field)
			case "height":
				return ec.fieldContext_HPBlob_height(ctx, field)
			case "size":
				return ec.fieldContext_HPBlob_size(ctx, field)
			case "ownerArtistID":
				return ec.fieldContext_HPBlob_ownerArtistID(ctx, field)
			case "ownerMemberID":
				return ec.fieldContext_HPBlob_ownerMemberID(ctx, field)
			case "numFaces":
				return ec.fieldContext_HPBlob_numFaces(ctx, field)
			case "faceRecognitionStatus":
				return ec.fieldContext_HPBlob_faceRecognitionStatus(ctx, field)
			case "thumbnail":
				return ec.fieldContext_HPBlob_thumbnail(ctx, field)
			case "durationSeconds":
				return ec.fieldContext_HPBlob_durationSeconds(ctx, field)
			case "ownerArtist":
				return ec.fieldContext_HPBlob_ownerArtist(ctx, field)
			case "ownerMember":
				return ec.fieldContext_HPBlob_ownerMember(ctx, field)
			case "amebloPosts":
				return ec.fieldContext_HPBlob_amebloPosts(ctx, field)
			case "igPosts":
				return ec.fieldContext_HPBlob_igPosts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HPBlob", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPIgPostConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.HPIgPostConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPIgPostConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.HPIgPostEdge)
	fc.Result = res
	return ec.marshalOHPIgPostEdge2ᚕᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPIgPostEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPIgPostConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPIgPostConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_HPIgPostEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_HPIgPostEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HPIgPostEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPIgPostConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.HPIgPostConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPIgPostConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.PageInfo[int])
	fc.Result = res
	return ec.marshalNPageInfo2entgoᚗioᚋcontribᚋentgqlᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPIgPostConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPIgPostConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPIgPostConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.HPIgPostConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPIgPostConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPIgPostConnection_totalCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPIgPostConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPIgPostEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.HPIgPostEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPIgPostEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.HPIgPost)
	fc.Result = res
	return ec.marshalOHPIgPost2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPIgPost(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPIgPostEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPIgPostEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_HPIgPost_id(ctx, field)
			case "crawledAt":
				return ec.fieldContext_HPIgPost_crawledAt(ctx, field)
			case "errorCount":
				return ec.fieldContext_HPIgPost_errorCount(ctx, field)
			case "lastErrorMessage":
				return ec.fieldContext_HPIgPost_lastErrorMessage(ctx, field)
			case "recrawlRequired":
				return ec.fieldContext_HPIgPost_recrawlRequired(ctx, field)
			case "createdAt":
				return ec.fieldContext_HPIgPost_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_HPIgPost_updatedAt(ctx, field)
			case "shortcode":
				return ec.fieldContext_HPIgPost_shortcode(ctx, field)
			case "description":
				return ec.fieldContext_HPIgPost_description(ctx, field)
			case "postAt":
				return ec.fieldContext_HPIgPost_postAt(ctx, field)
			case "media":
				return ec.fieldContext_HPIgPost_media(ctx, field)
			case "likes":
				return ec.fieldContext_HPIgPost_likes(ctx, field)
			case "comments":
				return ec.fieldContext_HPIgPost_comments(ctx, field)
			case "recrawlArgs":
				return ec.fieldContext_HPIgPost_recrawlArgs(ctx, field)
			case "ownerArtistID":
				return ec.fieldContext_HPIgPost_ownerArtistID(ctx, field)
			case "ownerMemberID":
				return ec.fieldContext_HPIgPost_ownerMemberID(ctx, field)
			case "ownerArtist":
				return ec.fieldContext_HPIgPost_ownerArtist(ctx, field)
			case "ownerMember":
				return ec.fieldContext_HPIgPost_ownerMember(ctx, field)
			case "taggedArtists":
				return ec.fieldContext_HPIgPost_taggedArtists(ctx, field)
			case "taggedMembers":
				return ec.fieldContext_HPIgPost_taggedMembers(ctx, field)
			case "blobs":
				return ec.fieldContext_HPIgPost_blobs(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HPIgPost", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPIgPostEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.HPIgPostEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPIgPostEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.Cursor[int])
	fc.Result = res
	return ec.marshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPIgPostEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPIgPostEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPMember_id(ctx context.Context, field graphql.CollectedField, obj *ent.HPMember) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPMember_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPMember_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPMember",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPMember_crawledAt(ctx context.Context, field graphql.CollectedField, obj *ent.HPMember) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPMember_crawledAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CrawledAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPMember_crawledAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPMember",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPMember_errorCount(ctx context.Context, field graphql.CollectedField, obj *ent.HPMember) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPMember_errorCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ErrorCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPMember_errorCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPMember",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPMember_lastErrorMessage(ctx context.Context, field graphql.CollectedField, obj *ent.HPMember) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPMember_lastErrorMessage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastErrorMessage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPMember_lastErrorMessage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPMember",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPMember_recrawlRequired(ctx context.Context, field graphql.CollectedField, obj *ent.HPMember) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPMember_recrawlRequired(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecrawlRequired, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPMember_recrawlRequired(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPMember",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPMember_createdAt(ctx context.Context, field graphql.CollectedField, obj *ent.HPMember) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPMember_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPMember_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPMember",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPMember_updatedAt(ctx context.Context, field graphql.CollectedField, obj *ent.HPMember) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPMember_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPMember_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPMember",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPMember_key(ctx context.Context, field graphql.CollectedField, obj *ent.HPMember) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPMember_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPMember_key(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPMember",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPMember_artistKey(ctx context.Context, field graphql.CollectedField, obj *ent.HPMember) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPMember_artistKey(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ArtistKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPMember_artistKey(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPMember",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPMember_name(ctx context.Context, field graphql.CollectedField, obj *ent.HPMember) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPMember_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPMember_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPMember",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPMember_nameKana(ctx context.Context, field graphql.CollectedField, obj *ent.HPMember) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPMember_nameKana(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NameKana, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPMember_nameKana(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPMember",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPMember_thumbnailURL(ctx context.Context, field graphql.CollectedField, obj *ent.HPMember) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPMember_thumbnailURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ThumbnailURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPMember_thumbnailURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPMember",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPMember_dateOfBirth(ctx context.Context, field graphql.CollectedField, obj *ent.HPMember) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPMember_dateOfBirth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DateOfBirth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPMember_dateOfBirth(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPMember",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPMember_bloodType(ctx context.Context, field graphql.CollectedField, obj *ent.HPMember) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPMember_bloodType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BloodType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPMember_bloodType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPMember",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPMember_hometown(ctx context.Context, field graphql.CollectedField, obj *ent.HPMember) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPMember_hometown(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Hometown, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPMember_hometown(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPMember",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPMember_joinAt(ctx context.Context, field graphql.CollectedField, obj *ent.HPMember) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPMember_joinAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JoinAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPMember_joinAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPMember",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPMember_graduateAt(ctx context.Context, field graphql.CollectedField, obj *ent.HPMember) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPMember_graduateAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GraduateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPMember_graduateAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPMember",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPMember_artistID(ctx context.Context, field graphql.CollectedField, obj *ent.HPMember) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPMember_artistID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ArtistID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOID2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPMember_artistID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPMember",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPMember_artist(ctx context.Context, field graphql.CollectedField, obj *ent.HPMember) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPMember_artist(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Artist(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.HPArtist)
	fc.Result = res
	return ec.marshalOHPArtist2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPArtist(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPMember_artist(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPMember",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_HPArtist_id(ctx, field)
			case "crawledAt":
				return ec.fieldContext_HPArtist_crawledAt(ctx, field)
			case "errorCount":
				return ec.fieldContext_HPArtist_errorCount(ctx, field)
			case "lastErrorMessage":
				return ec.fieldContext_HPArtist_lastErrorMessage(ctx, field)
			case "recrawlRequired":
				return ec.fieldContext_HPArtist_recrawlRequired(ctx, field)
			case "createdAt":
				return ec.fieldContext_HPArtist_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_HPArtist_updatedAt(ctx, field)
			case "key":
				return ec.fieldContext_HPArtist_key(ctx, field)
			case "name":
				return ec.fieldContext_HPArtist_name(ctx, field)
			case "thumbnailURL":
				return ec.fieldContext_HPArtist_thumbnailURL(ctx, field)
			case "index":
				return ec.fieldContext_HPArtist_index(ctx, field)
			case "members":
				return ec.fieldContext_HPArtist_members(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HPArtist", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPMemberConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.HPMemberConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPMemberConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.HPMemberEdge)
	fc.Result = res
	return ec.marshalOHPMemberEdge2ᚕᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPMemberEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPMemberConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPMemberConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_HPMemberEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_HPMemberEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HPMemberEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPMemberConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.HPMemberConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPMemberConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.PageInfo[int])
	fc.Result = res
	return ec.marshalNPageInfo2entgoᚗioᚋcontribᚋentgqlᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPMemberConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPMemberConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPMemberConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.HPMemberConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPMemberConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPMemberConnection_totalCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPMemberConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPMemberEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.HPMemberEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPMemberEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.HPMember)
	fc.Result = res
	return ec.marshalOHPMember2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPMember(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPMemberEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPMemberEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_HPMember_id(ctx, field)
			case "crawledAt":
				return ec.fieldContext_HPMember_crawledAt(ctx, field)
			case "errorCount":
				return ec.fieldContext_HPMember_errorCount(ctx, field)
			case "lastErrorMessage":
				return ec.fieldContext_HPMember_lastErrorMessage(ctx, field)
			case "recrawlRequired":
				return ec.fieldContext_HPMember_recrawlRequired(ctx, field)
			case "createdAt":
				return ec.fieldContext_HPMember_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_HPMember_updatedAt(ctx, field)
			case "key":
				return ec.fieldContext_HPMember_key(ctx, field)
			case "artistKey":
				return ec.fieldContext_HPMember_artistKey(ctx, field)
			case "name":
				return ec.fieldContext_HPMember_name(ctx, field)
			case "nameKana":
				return ec.fieldContext_HPMember_nameKana(ctx, field)
			case "thumbnailURL":
				return ec.fieldContext_HPMember_thumbnailURL(ctx, field)
			case "dateOfBirth":
				return ec.fieldContext_HPMember_dateOfBirth(ctx, field)
			case "bloodType":
				return ec.fieldContext_HPMember_bloodType(ctx, field)
			case "hometown":
				return ec.fieldContext_HPMember_hometown(ctx, field)
			case "joinAt":
				return ec.fieldContext_HPMember_joinAt(ctx, field)
			case "graduateAt":
				return ec.fieldContext_HPMember_graduateAt(ctx, field)
			case "artistID":
				return ec.fieldContext_HPMember_artistID(ctx, field)
			case "artist":
				return ec.fieldContext_HPMember_artist(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HPMember", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPMemberEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.HPMemberEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPMemberEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.Cursor[int])
	fc.Result = res
	return ec.marshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPMemberEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPMemberEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPSortHistory_id(ctx context.Context, field graphql.CollectedField, obj *ent.HPSortHistory) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPSortHistory_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPSortHistory_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPSortHistory",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPSortHistory_createdAt(ctx context.Context, field graphql.CollectedField, obj *ent.HPSortHistory) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPSortHistory_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPSortHistory_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPSortHistory",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPSortHistory_updatedAt(ctx context.Context, field graphql.CollectedField, obj *ent.HPSortHistory) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPSortHistory_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPSortHistory_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPSortHistory",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPSortHistory_sortResult(ctx context.Context, field graphql.CollectedField, obj *ent.HPSortHistory) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPSortHistory_sortResult(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SortResult, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(jsonfields.HPSortResult)
	fc.Result = res
	return ec.marshalNHPSortResult2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋjsonfieldsᚐHPSortResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPSortHistory_sortResult(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPSortHistory",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "records":
				return ec.fieldContext_HPSortResult_records(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HPSortResult", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPSortHistory_owner(ctx context.Context, field graphql.CollectedField, obj *ent.HPSortHistory) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPSortHistory_owner(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Owner(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPSortHistory_owner(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPSortHistory",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "accessToken":
				return ec.fieldContext_User_accessToken(ctx, field)
			case "auth":
				return ec.fieldContext_User_auth(ctx, field)
			case "notificationSettings":
				return ec.fieldContext_User_notificationSettings(ctx, field)
			case "hpviewHistory":
				return ec.fieldContext_User_hpviewHistory(ctx, field)
			case "hpmemberFollowing":
				return ec.fieldContext_User_hpmemberFollowing(ctx, field)
			case "hpsortHistory":
				return ec.fieldContext_User_hpsortHistory(ctx, field)
			case "hpfcEventTickets":
				return ec.fieldContext_User_hpfcEventTickets(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPSortHistoryConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.HPSortHistoryConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPSortHistoryConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.HPSortHistoryEdge)
	fc.Result = res
	return ec.marshalOHPSortHistoryEdge2ᚕᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPSortHistoryEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPSortHistoryConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPSortHistoryConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_HPSortHistoryEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_HPSortHistoryEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HPSortHistoryEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPSortHistoryConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.HPSortHistoryConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPSortHistoryConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.PageInfo[int])
	fc.Result = res
	return ec.marshalNPageInfo2entgoᚗioᚋcontribᚋentgqlᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPSortHistoryConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPSortHistoryConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPSortHistoryConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.HPSortHistoryConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPSortHistoryConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPSortHistoryConnection_totalCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPSortHistoryConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPSortHistoryEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.HPSortHistoryEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPSortHistoryEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.HPSortHistory)
	fc.Result = res
	return ec.marshalOHPSortHistory2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPSortHistory(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPSortHistoryEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPSortHistoryEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_HPSortHistory_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_HPSortHistory_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_HPSortHistory_updatedAt(ctx, field)
			case "sortResult":
				return ec.fieldContext_HPSortHistory_sortResult(ctx, field)
			case "owner":
				return ec.fieldContext_HPSortHistory_owner(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HPSortHistory", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPSortHistoryEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.HPSortHistoryEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPSortHistoryEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.Cursor[int])
	fc.Result = res
	return ec.marshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPSortHistoryEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPSortHistoryEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPSortResult_records(ctx context.Context, field graphql.CollectedField, obj *jsonfields.HPSortResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPSortResult_records(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Records, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]jsonfields.HPSortResultRecord)
	fc.Result = res
	return ec.marshalOHPSortResultRecord2ᚕgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋjsonfieldsᚐHPSortResultRecordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPSortResult_records(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPSortResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "artistId":
				return ec.fieldContext_HPSortResultRecord_artistId(ctx, field)
			case "artistKey":
				return ec.fieldContext_HPSortResultRecord_artistKey(ctx, field)
			case "memberId":
				return ec.fieldContext_HPSortResultRecord_memberId(ctx, field)
			case "memberKey":
				return ec.fieldContext_HPSortResultRecord_memberKey(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HPSortResultRecord", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPSortResultRecord_artistId(ctx context.Context, field graphql.CollectedField, obj *jsonfields.HPSortResultRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPSortResultRecord_artistId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ArtistID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPSortResultRecord_artistId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPSortResultRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPSortResultRecord_artistKey(ctx context.Context, field graphql.CollectedField, obj *jsonfields.HPSortResultRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPSortResultRecord_artistKey(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ArtistKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPSortResultRecord_artistKey(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPSortResultRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPSortResultRecord_memberId(ctx context.Context, field graphql.CollectedField, obj *jsonfields.HPSortResultRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPSortResultRecord_memberId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MemberID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPSortResultRecord_memberId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPSortResultRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPSortResultRecord_memberKey(ctx context.Context, field graphql.CollectedField, obj *jsonfields.HPSortResultRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPSortResultRecord_memberKey(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MemberKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPSortResultRecord_memberKey(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPSortResultRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPViewHistory_id(ctx context.Context, field graphql.CollectedField, obj *ent.HPViewHistory) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPViewHistory_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPViewHistory_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPViewHistory",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPViewHistory_createdAt(ctx context.Context, field graphql.CollectedField, obj *ent.HPViewHistory) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPViewHistory_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPViewHistory_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPViewHistory",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPViewHistory_updatedAt(ctx context.Context, field graphql.CollectedField, obj *ent.HPViewHistory) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPViewHistory_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPViewHistory_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPViewHistory",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPViewHistory_contentID(ctx context.Context, field graphql.CollectedField, obj *ent.HPViewHistory) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPViewHistory_contentID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPViewHistory_contentID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPViewHistory",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPViewHistory_contentPostAt(ctx context.Context, field graphql.CollectedField, obj *ent.HPViewHistory) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPViewHistory_contentPostAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContentPostAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPViewHistory_contentPostAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPViewHistory",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPViewHistory_assetType(ctx context.Context, field graphql.CollectedField, obj *ent.HPViewHistory) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPViewHistory_assetType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssetType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(enums.HPAssetType)
	fc.Result = res
	return ec.marshalNHPViewHistoryHPAssetType2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋenumsᚐHPAssetType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPViewHistory_assetType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPViewHistory",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type HPViewHistoryHPAssetType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPViewHistory_isFavorite(ctx context.Context, field graphql.CollectedField, obj *ent.HPViewHistory) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPViewHistory_isFavorite(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsFavorite, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPViewHistory_isFavorite(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPViewHistory",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPViewHistory_feed(ctx context.Context, field graphql.CollectedField, obj *ent.HPViewHistory) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPViewHistory_feed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Feed(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.HPFeedItem)
	fc.Result = res
	return ec.marshalOHPFeedItem2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPFeedItem(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPViewHistory_feed(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPViewHistory",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_HPFeedItem_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_HPFeedItem_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_HPFeedItem_updatedAt(ctx, field)
			case "sourceID":
				return ec.fieldContext_HPFeedItem_sourceID(ctx, field)
			case "assetType":
				return ec.fieldContext_HPFeedItem_assetType(ctx, field)
			case "title":
				return ec.fieldContext_HPFeedItem_title(ctx, field)
			case "postAt":
				return ec.fieldContext_HPFeedItem_postAt(ctx, field)
			case "sourceURL":
				return ec.fieldContext_HPFeedItem_sourceURL(ctx, field)
			case "imageURL":
				return ec.fieldContext_HPFeedItem_imageURL(ctx, field)
			case "media":
				return ec.fieldContext_HPFeedItem_media(ctx, field)
			case "ownerArtistID":
				return ec.fieldContext_HPFeedItem_ownerArtistID(ctx, field)
			case "ownerMemberID":
				return ec.fieldContext_HPFeedItem_ownerMemberID(ctx, field)
			case "ownerArtist":
				return ec.fieldContext_HPFeedItem_ownerArtist(ctx, field)
			case "ownerMember":
				return ec.fieldContext_HPFeedItem_ownerMember(ctx, field)
			case "taggedArtists":
				return ec.fieldContext_HPFeedItem_taggedArtists(ctx, field)
			case "taggedMembers":
				return ec.fieldContext_HPFeedItem_taggedMembers(ctx, field)
			case "myViewHistory":
				return ec.fieldContext_HPFeedItem_myViewHistory(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HPFeedItem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPViewHistoryConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.HPViewHistoryConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPViewHistoryConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.HPViewHistoryEdge)
	fc.Result = res
	return ec.marshalOHPViewHistoryEdge2ᚕᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPViewHistoryEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPViewHistoryConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPViewHistoryConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_HPViewHistoryEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_HPViewHistoryEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HPViewHistoryEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPViewHistoryConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.HPViewHistoryConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPViewHistoryConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.PageInfo[int])
	fc.Result = res
	return ec.marshalNPageInfo2entgoᚗioᚋcontribᚋentgqlᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPViewHistoryConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPViewHistoryConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPViewHistoryConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.HPViewHistoryConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPViewHistoryConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPViewHistoryConnection_totalCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPViewHistoryConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPViewHistoryEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.HPViewHistoryEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPViewHistoryEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.HPViewHistory)
	fc.Result = res
	return ec.marshalOHPViewHistory2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPViewHistory(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPViewHistoryEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPViewHistoryEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_HPViewHistory_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_HPViewHistory_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_HPViewHistory_updatedAt(ctx, field)
			case "contentID":
				return ec.fieldContext_HPViewHistory_contentID(ctx, field)
			case "contentPostAt":
				return ec.fieldContext_HPViewHistory_contentPostAt(ctx, field)
			case "assetType":
				return ec.fieldContext_HPViewHistory_assetType(ctx, field)
			case "isFavorite":
				return ec.fieldContext_HPViewHistory_isFavorite(ctx, field)
			case "feed":
				return ec.fieldContext_HPViewHistory_feed(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HPViewHistory", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HPViewHistoryEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.HPViewHistoryEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HPViewHistoryEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.Cursor[int])
	fc.Result = res
	return ec.marshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HPViewHistoryEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HPViewHistoryEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HelloProjectQuery_id(ctx context.Context, field graphql.CollectedField, obj *helloproject.HelloProjectQuery) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HelloProjectQuery_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HelloProjectQuery_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HelloProjectQuery",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HelloProjectQuery_artists(ctx context.Context, field graphql.CollectedField, obj *helloproject.HelloProjectQuery) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HelloProjectQuery_artists(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Artists(ctx, fc.Args["after"].(*entgql.Cursor[int]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[int]), fc.Args["last"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.HPArtist)
	fc.Result = res
	return ec.marshalOHPArtist2ᚕᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPArtist(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HelloProjectQuery_artists(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HelloProjectQuery",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_HPArtist_id(ctx, field)
			case "crawledAt":
				return ec.fieldContext_HPArtist_crawledAt(ctx, field)
			case "errorCount":
				return ec.fieldContext_HPArtist_errorCount(ctx, field)
			case "lastErrorMessage":
				return ec.fieldContext_HPArtist_lastErrorMessage(ctx, field)
			case "recrawlRequired":
				return ec.fieldContext_HPArtist_recrawlRequired(ctx, field)
			case "createdAt":
				return ec.fieldContext_HPArtist_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_HPArtist_updatedAt(ctx, field)
			case "key":
				return ec.fieldContext_HPArtist_key(ctx, field)
			case "name":
				return ec.fieldContext_HPArtist_name(ctx, field)
			case "thumbnailURL":
				return ec.fieldContext_HPArtist_thumbnailURL(ctx, field)
			case "index":
				return ec.fieldContext_HPArtist_index(ctx, field)
			case "members":
				return ec.fieldContext_HPArtist_members(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HPArtist", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_HelloProjectQuery_artists_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _HelloProjectQuery_feed(ctx context.Context, field graphql.CollectedField, obj *helloproject.HelloProjectQuery) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HelloProjectQuery_feed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Feed(ctx, fc.Args["params"].(helloproject.HPFeedQueryParams), fc.Args["after"].(*entgql.Cursor[int]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[int]), fc.Args["last"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.HPFeedItemConnection)
	fc.Result = res
	return ec.marshalOHPFeedItemConnection2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPFeedItemConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HelloProjectQuery_feed(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HelloProjectQuery",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_HPFeedItemConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_HPFeedItemConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_HPFeedItemConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HPFeedItemConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_HelloProjectQuery_feed_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _HelloProjectQuery_elineupMallItems(ctx context.Context, field graphql.CollectedField, obj *helloproject.HelloProjectQuery) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HelloProjectQuery_elineupMallItems(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ElineupMallItems(ctx, fc.Args["params"].(helloproject.HPElineumpMallItemsParams), fc.Args["after"].(*entgql.Cursor[int]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[int]), fc.Args["last"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.HPElineupMallItemConnection)
	fc.Result = res
	return ec.marshalOHPElineupMallItemConnection2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPElineupMallItemConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HelloProjectQuery_elineupMallItems(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HelloProjectQuery",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_HPElineupMallItemConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_HPElineupMallItemConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_HPElineupMallItemConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HPElineupMallItemConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_HelloProjectQuery_elineupMallItems_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _MeMutation_authenticate(ctx context.Context, field graphql.CollectedField, obj *me.MeMutation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MeMutation_authenticate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Authenticate(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MeMutation_authenticate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MeMutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "accessToken":
				return ec.fieldContext_User_accessToken(ctx, field)
			case "auth":
				return ec.fieldContext_User_auth(ctx, field)
			case "notificationSettings":
				return ec.fieldContext_User_notificationSettings(ctx, field)
			case "hpviewHistory":
				return ec.fieldContext_User_hpviewHistory(ctx, field)
			case "hpmemberFollowing":
				return ec.fieldContext_User_hpmemberFollowing(ctx, field)
			case "hpsortHistory":
				return ec.fieldContext_User_hpsortHistory(ctx, field)
			case "hpfcEventTickets":
				return ec.fieldContext_User_hpfcEventTickets(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MeMutation_removeAuthentication(ctx context.Context, field graphql.CollectedField, obj *me.MeMutation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MeMutation_removeAuthentication(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RemoveAuthentication(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Auth)
	fc.Result = res
	return ec.marshalOAuth2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐAuth(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MeMutation_removeAuthentication(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MeMutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Auth_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Auth_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Auth_updatedAt(ctx, field)
			case "providerName":
				return ec.fieldContext_Auth_providerName(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Auth", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MeMutation_upsertFollow(ctx context.Context, field graphql.CollectedField, obj *me.MeMutation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MeMutation_upsertFollow(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpsertFollow(ctx, fc.Args["params"].(user.HPFollowUpsertParams))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.HPFollow)
	fc.Result = res
	return ec.marshalOHPFollow2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPFollow(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MeMutation_upsertFollow(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MeMutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_HPFollow_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_HPFollow_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_HPFollow_updatedAt(ctx, field)
			case "type":
				return ec.fieldContext_HPFollow_type(ctx, field)
			case "user":
				return ec.fieldContext_HPFollow_user(ctx, field)
			case "member":
				return ec.fieldContext_HPFollow_member(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HPFollow", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_MeMutation_upsertFollow_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _MeMutation_upsertEvents(ctx context.Context, field graphql.CollectedField, obj *me.MeMutation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MeMutation_upsertEvents(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpsertEvents(ctx, fc.Args["params"].(upfc.HPFCEventTicketApplicationUpsertParams))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.HPEvent)
	fc.Result = res
	return ec.marshalOHPEvent2ᚕᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPEvent(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MeMutation_upsertEvents(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MeMutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_HPEvent_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_HPEvent_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_HPEvent_updatedAt(ctx, field)
			case "key":
				return ec.fieldContext_HPEvent_key(ctx, field)
			case "displayTitles":
				return ec.fieldContext_HPEvent_displayTitles(ctx, field)
			case "openAt":
				return ec.fieldContext_HPEvent_openAt(ctx, field)
			case "startAt":
				return ec.fieldContext_HPEvent_startAt(ctx, field)
			case "venue":
				return ec.fieldContext_HPEvent_venue(ctx, field)
			case "prefecture":
				return ec.fieldContext_HPEvent_prefecture(ctx, field)
			case "source":
				return ec.fieldContext_HPEvent_source(ctx, field)
			case "tickets":
				return ec.fieldContext_HPEvent_tickets(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HPEvent", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_MeMutation_upsertEvents_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _MeMutation_upsertViewHistory(ctx context.Context, field graphql.CollectedField, obj *me.MeMutation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MeMutation_upsertViewHistory(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpsertViewHistory(ctx, fc.Args["params"].(feed.HPViewHistoryUpsertParams))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.HPViewHistory)
	fc.Result = res
	return ec.marshalOHPViewHistory2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPViewHistory(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MeMutation_upsertViewHistory(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MeMutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_HPViewHistory_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_HPViewHistory_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_HPViewHistory_updatedAt(ctx, field)
			case "contentID":
				return ec.fieldContext_HPViewHistory_contentID(ctx, field)
			case "contentPostAt":
				return ec.fieldContext_HPViewHistory_contentPostAt(ctx, field)
			case "assetType":
				return ec.fieldContext_HPViewHistory_assetType(ctx, field)
			case "isFavorite":
				return ec.fieldContext_HPViewHistory_isFavorite(ctx, field)
			case "feed":
				return ec.fieldContext_HPViewHistory_feed(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HPViewHistory", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_MeMutation_upsertViewHistory_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _MeQuery_id(ctx context.Context, field graphql.CollectedField, obj *me.MeQuery) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MeQuery_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MeQuery_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MeQuery",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MeQuery_userId(ctx context.Context, field graphql.CollectedField, obj *me.MeQuery) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MeQuery_userId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MeQuery_userId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MeQuery",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MeQuery_username(ctx context.Context, field graphql.CollectedField, obj *me.MeQuery) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MeQuery_username(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Username(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MeQuery_username(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MeQuery",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MeQuery_clientId(ctx context.Context, field graphql.CollectedField, obj *me.MeQuery) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MeQuery_clientId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientID(ctx), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MeQuery_clientId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MeQuery",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MeQuery_clientName(ctx context.Context, field graphql.CollectedField, obj *me.MeQuery) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MeQuery_clientName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientName(ctx), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MeQuery_clientName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MeQuery",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MeQuery_clientIsVerified(ctx context.Context, field graphql.CollectedField, obj *me.MeQuery) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MeQuery_clientIsVerified(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientIsVerified(ctx), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MeQuery_clientIsVerified(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MeQuery",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MeQuery_authentications(ctx context.Context, field graphql.CollectedField, obj *me.MeQuery) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MeQuery_authentications(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Authentications(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Auth)
	fc.Result = res
	return ec.marshalOAuth2ᚕᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐAuth(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MeQuery_authentications(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MeQuery",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Auth_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Auth_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Auth_updatedAt(ctx, field)
			case "providerName":
				return ec.fieldContext_Auth_providerName(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Auth", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MeQuery_followings(ctx context.Context, field graphql.CollectedField, obj *me.MeQuery) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MeQuery_followings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Followings(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.HPFollow)
	fc.Result = res
	return ec.marshalOHPFollow2ᚕᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPFollow(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MeQuery_followings(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MeQuery",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_HPFollow_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_HPFollow_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_HPFollow_updatedAt(ctx, field)
			case "type":
				return ec.fieldContext_HPFollow_type(ctx, field)
			case "user":
				return ec.fieldContext_HPFollow_user(ctx, field)
			case "member":
				return ec.fieldContext_HPFollow_member(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HPFollow", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MeQuery_sortHistories(ctx context.Context, field graphql.CollectedField, obj *me.MeQuery) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MeQuery_sortHistories(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SortHistories(ctx, fc.Args["after"].(*entgql.Cursor[int]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[int]), fc.Args["last"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.HPSortHistoryConnection)
	fc.Result = res
	return ec.marshalOHPSortHistoryConnection2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPSortHistoryConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MeQuery_sortHistories(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MeQuery",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_HPSortHistoryConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_HPSortHistoryConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_HPSortHistoryConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HPSortHistoryConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_MeQuery_sortHistories_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _MeQuery_events(ctx context.Context, field graphql.CollectedField, obj *me.MeQuery) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MeQuery_events(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Events(ctx, fc.Args["after"].(*entgql.Cursor[int]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[int]), fc.Args["last"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.HPEventConnection)
	fc.Result = res
	return ec.marshalOHPEventConnection2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPEventConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MeQuery_events(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MeQuery",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_HPEventConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_HPEventConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_HPEventConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HPEventConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_MeQuery_events_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _MeQuery_favorites(ctx context.Context, field graphql.CollectedField, obj *me.MeQuery) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MeQuery_favorites(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Favorites(ctx, fc.Args["params"].(me.MeFavoriteQueryParams), fc.Args["after"].(*entgql.Cursor[int]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[int]), fc.Args["last"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.HPFeedItemConnection)
	fc.Result = res
	return ec.marshalOHPFeedItemConnection2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPFeedItemConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MeQuery_favorites(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MeQuery",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_HPFeedItemConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_HPFeedItemConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_HPFeedItemConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HPFeedItemConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_MeQuery_favorites_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Media_url(ctx context.Context, field graphql.CollectedField, obj *jsonfields.Media) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Media_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Url, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Media_url(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Media",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Media_blobId(ctx context.Context, field graphql.CollectedField, obj *jsonfields.Media) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Media_blobId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlobID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Media_blobId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Media",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Media_type(ctx context.Context, field graphql.CollectedField, obj *jsonfields.Media) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Media_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(enums.HPBlobType)
	fc.Result = res
	return ec.marshalNHPBlobType2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋenumsᚐHPBlobType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Media_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Media",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type HPBlobType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Media_width(ctx context.Context, field graphql.CollectedField, obj *jsonfields.Media) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Media_width(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Width, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Media_width(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Media",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Media_height(ctx context.Context, field graphql.CollectedField, obj *jsonfields.Media) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Media_height(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Height, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Media_height(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Media",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Media_thumbnailUrl(ctx context.Context, field graphql.CollectedField, obj *jsonfields.Media) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Media_thumbnailUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ThumbnailUrl, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Media_thumbnailUrl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Media",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Media_thumbnailWidth(ctx context.Context, field graphql.CollectedField, obj *jsonfields.Media) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Media_thumbnailWidth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ThumbnailWidth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Media_thumbnailWidth(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Media",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Media_thumbnailHeight(ctx context.Context, field graphql.CollectedField, obj *jsonfields.Media) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Media_thumbnailHeight(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ThumbnailHeight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Media_thumbnailHeight(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Media",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Message_to(ctx context.Context, field graphql.CollectedField, obj *push.Message) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Message_to(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.To, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Message_to(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Message",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Message_title(ctx context.Context, field graphql.CollectedField, obj *push.Message) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Message_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Message_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Message",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Message_body(ctx context.Context, field graphql.CollectedField, obj *push.Message) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Message_body(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Body, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Message_body(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Message",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Message_ttlSeconds(ctx context.Context, field graphql.CollectedField, obj *push.Message) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Message_ttlSeconds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TTLSeconds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Message_ttlSeconds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Message",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Message_priority(ctx context.Context, field graphql.CollectedField, obj *push.Message) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Message_priority(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Priority, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(push.MessagePriority)
	fc.Result = res
	return ec.marshalNMessagePriority2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋsystemᚋpushᚐMessagePriority(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Message_priority(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Message",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type MessagePriority does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Message_sound(ctx context.Context, field graphql.CollectedField, obj *push.Message) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Message_sound(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sound, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Message_sound(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Message",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Message_badge(ctx context.Context, field graphql.CollectedField, obj *push.Message) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Message_badge(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Badge, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Message_badge(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Message",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Message_imageUrl(ctx context.Context, field graphql.CollectedField, obj *push.Message) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Message_imageUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ImageUrl, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Message_imageUrl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Message",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Message_data(ctx context.Context, field graphql.CollectedField, obj *push.Message) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Message_data(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(map[string]interface{})
	fc.Result = res
	return ec.marshalOMap2map(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Message_data(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Message",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Map does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Misc_version(ctx context.Context, field graphql.CollectedField, obj *v3.Misc) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Misc_version(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Misc_version(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Misc",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_authenticate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_authenticate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Authenticate(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_authenticate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "accessToken":
				return ec.fieldContext_User_accessToken(ctx, field)
			case "auth":
				return ec.fieldContext_User_auth(ctx, field)
			case "notificationSettings":
				return ec.fieldContext_User_notificationSettings(ctx, field)
			case "hpviewHistory":
				return ec.fieldContext_User_hpviewHistory(ctx, field)
			case "hpmemberFollowing":
				return ec.fieldContext_User_hpmemberFollowing(ctx, field)
			case "hpsortHistory":
				return ec.fieldContext_User_hpsortHistory(ctx, field)
			case "hpfcEventTickets":
				return ec.fieldContext_User_hpfcEventTickets(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_me(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_me(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Me(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*me.MeMutation)
	fc.Result = res
	return ec.marshalOMeMutation2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋgraphqlᚋv3ᚋmeᚐMeMutation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_me(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "authenticate":
				return ec.fieldContext_MeMutation_authenticate(ctx, field)
			case "removeAuthentication":
				return ec.fieldContext_MeMutation_removeAuthentication(ctx, field)
			case "upsertFollow":
				return ec.fieldContext_MeMutation_upsertFollow(ctx, field)
			case "upsertEvents":
				return ec.fieldContext_MeMutation_upsertEvents(ctx, field)
			case "upsertViewHistory":
				return ec.fieldContext_MeMutation_upsertViewHistory(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MeMutation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_hasNextPage(ctx context.Context, field graphql.CollectedField, obj *entgql.PageInfo[int]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_hasNextPage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasNextPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_hasNextPage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_hasPreviousPage(ctx context.Context, field graphql.CollectedField, obj *entgql.PageInfo[int]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasPreviousPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_hasPreviousPage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_startCursor(ctx context.Context, field graphql.CollectedField, obj *entgql.PageInfo[int]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_startCursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entgql.Cursor[int])
	fc.Result = res
	return ec.marshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_startCursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_endCursor(ctx context.Context, field graphql.CollectedField, obj *entgql.PageInfo[int]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_endCursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entgql.Cursor[int])
	fc.Result = res
	return ec.marshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_endCursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_node(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Node(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(ent.Noder)
	fc.Result = res
	return ec.marshalONode2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐNoder(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_node_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_nodes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Nodes(rctx, fc.Args["ids"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]ent.Noder)
	fc.Result = res
	return ec.marshalNNode2ᚕgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐNoder(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_nodes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_nodes_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_helloproject(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_helloproject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Helloproject(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*helloproject.HelloProjectQuery)
	fc.Result = res
	return ec.marshalNHelloProjectQuery2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋgraphqlᚋv3ᚋhelloprojectᚐHelloProjectQuery(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_helloproject(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_HelloProjectQuery_id(ctx, field)
			case "artists":
				return ec.fieldContext_HelloProjectQuery_artists(ctx, field)
			case "feed":
				return ec.fieldContext_HelloProjectQuery_feed(ctx, field)
			case "elineupMallItems":
				return ec.fieldContext_HelloProjectQuery_elineupMallItems(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HelloProjectQuery", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_me(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_me(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Me(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*me.MeQuery)
	fc.Result = res
	return ec.marshalNMeQuery2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋgraphqlᚋv3ᚋmeᚐMeQuery(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_me(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MeQuery_id(ctx, field)
			case "userId":
				return ec.fieldContext_MeQuery_userId(ctx, field)
			case "username":
				return ec.fieldContext_MeQuery_username(ctx, field)
			case "clientId":
				return ec.fieldContext_MeQuery_clientId(ctx, field)
			case "clientName":
				return ec.fieldContext_MeQuery_clientName(ctx, field)
			case "clientIsVerified":
				return ec.fieldContext_MeQuery_clientIsVerified(ctx, field)
			case "authentications":
				return ec.fieldContext_MeQuery_authentications(ctx, field)
			case "followings":
				return ec.fieldContext_MeQuery_followings(ctx, field)
			case "sortHistories":
				return ec.fieldContext_MeQuery_sortHistories(ctx, field)
			case "events":
				return ec.fieldContext_MeQuery_events(ctx, field)
			case "favorites":
				return ec.fieldContext_MeQuery_favorites(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MeQuery", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReactNavigationPush_path(ctx context.Context, field graphql.CollectedField, obj *jsonfields.ReactNavigationPush) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ReactNavigationPush_path(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Path, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ReactNavigationPush_path(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReactNavigationPush",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReactNavigationPush_params(ctx context.Context, field graphql.CollectedField, obj *jsonfields.ReactNavigationPush) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ReactNavigationPush_params(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Params, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(map[string]interface{})
	fc.Result = res
	return ec.marshalOMap2map(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ReactNavigationPush_params(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReactNavigationPush",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Map does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReactNavigationPush_pushMessage(ctx context.Context, field graphql.CollectedField, obj *jsonfields.ReactNavigationPush) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ReactNavigationPush_pushMessage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PushMessage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(jsonfields.ExpoPushMessage)
	fc.Result = res
	return ec.marshalNExpoPushMessage2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋjsonfieldsᚐExpoPushMessage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ReactNavigationPush_pushMessage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReactNavigationPush",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "title":
				return ec.fieldContext_ExpoPushMessage_title(ctx, field)
			case "body":
				return ec.fieldContext_ExpoPushMessage_body(ctx, field)
			case "ttlSeconds":
				return ec.fieldContext_ExpoPushMessage_ttlSeconds(ctx, field)
			case "priority":
				return ec.fieldContext_ExpoPushMessage_priority(ctx, field)
			case "sound":
				return ec.fieldContext_ExpoPushMessage_sound(ctx, field)
			case "badge":
				return ec.fieldContext_ExpoPushMessage_badge(ctx, field)
			case "imageUrl":
				return ec.fieldContext_ExpoPushMessage_imageUrl(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ExpoPushMessage", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReactNavigationPush_toPushMessage(ctx context.Context, field graphql.CollectedField, obj *jsonfields.ReactNavigationPush) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ReactNavigationPush_toPushMessage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ToPushMessage(fc.Args["tokens"].([]string)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*push.Message)
	fc.Result = res
	return ec.marshalOMessage2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋsystemᚋpushᚐMessage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ReactNavigationPush_toPushMessage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReactNavigationPush",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "to":
				return ec.fieldContext_Message_to(ctx, field)
			case "title":
				return ec.fieldContext_Message_title(ctx, field)
			case "body":
				return ec.fieldContext_Message_body(ctx, field)
			case "ttlSeconds":
				return ec.fieldContext_Message_ttlSeconds(ctx, field)
			case "priority":
				return ec.fieldContext_Message_priority(ctx, field)
			case "sound":
				return ec.fieldContext_Message_sound(ctx, field)
			case "badge":
				return ec.fieldContext_Message_badge(ctx, field)
			case "imageUrl":
				return ec.fieldContext_Message_imageUrl(ctx, field)
			case "data":
				return ec.fieldContext_Message_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Message", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_ReactNavigationPush_toPushMessage_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _User_id(ctx context.Context, field graphql.CollectedField, obj *ent.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_createdAt(ctx context.Context, field graphql.CollectedField, obj *ent.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_updatedAt(ctx context.Context, field graphql.CollectedField, obj *ent.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_username(ctx context.Context, field graphql.CollectedField, obj *ent.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_username(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Username, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_username(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_accessToken(ctx context.Context, field graphql.CollectedField, obj *ent.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_accessToken(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccessToken, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_accessToken(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_auth(ctx context.Context, field graphql.CollectedField, obj *ent.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_auth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Auth(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Auth)
	fc.Result = res
	return ec.marshalOAuth2ᚕᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐAuthᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_auth(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Auth_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Auth_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Auth_updatedAt(ctx, field)
			case "providerName":
				return ec.fieldContext_Auth_providerName(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Auth", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_notificationSettings(ctx context.Context, field graphql.CollectedField, obj *ent.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_notificationSettings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NotificationSettings(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.UserNotificationSetting)
	fc.Result = res
	return ec.marshalOUserNotificationSetting2ᚕᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐUserNotificationSettingᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_notificationSettings(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserNotificationSetting_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_UserNotificationSetting_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_UserNotificationSetting_updatedAt(ctx, field)
			case "token":
				return ec.fieldContext_UserNotificationSetting_token(ctx, field)
			case "slug":
				return ec.fieldContext_UserNotificationSetting_slug(ctx, field)
			case "name":
				return ec.fieldContext_UserNotificationSetting_name(ctx, field)
			case "enableNewPosts":
				return ec.fieldContext_UserNotificationSetting_enableNewPosts(ctx, field)
			case "enablePaymentStart":
				return ec.fieldContext_UserNotificationSetting_enablePaymentStart(ctx, field)
			case "enablePaymentDue":
				return ec.fieldContext_UserNotificationSetting_enablePaymentDue(ctx, field)
			case "user":
				return ec.fieldContext_UserNotificationSetting_user(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserNotificationSetting", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_hpviewHistory(ctx context.Context, field graphql.CollectedField, obj *ent.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_hpviewHistory(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HpviewHistory(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.HPViewHistory)
	fc.Result = res
	return ec.marshalOHPViewHistory2ᚕᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPViewHistoryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_hpviewHistory(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_HPViewHistory_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_HPViewHistory_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_HPViewHistory_updatedAt(ctx, field)
			case "contentID":
				return ec.fieldContext_HPViewHistory_contentID(ctx, field)
			case "contentPostAt":
				return ec.fieldContext_HPViewHistory_contentPostAt(ctx, field)
			case "assetType":
				return ec.fieldContext_HPViewHistory_assetType(ctx, field)
			case "isFavorite":
				return ec.fieldContext_HPViewHistory_isFavorite(ctx, field)
			case "feed":
				return ec.fieldContext_HPViewHistory_feed(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HPViewHistory", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_hpmemberFollowing(ctx context.Context, field graphql.CollectedField, obj *ent.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_hpmemberFollowing(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HpmemberFollowing(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.HPFollow)
	fc.Result = res
	return ec.marshalOHPFollow2ᚕᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPFollowᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_hpmemberFollowing(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_HPFollow_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_HPFollow_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_HPFollow_updatedAt(ctx, field)
			case "type":
				return ec.fieldContext_HPFollow_type(ctx, field)
			case "user":
				return ec.fieldContext_HPFollow_user(ctx, field)
			case "member":
				return ec.fieldContext_HPFollow_member(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HPFollow", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_hpsortHistory(ctx context.Context, field graphql.CollectedField, obj *ent.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_hpsortHistory(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HpsortHistory(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.HPSortHistory)
	fc.Result = res
	return ec.marshalOHPSortHistory2ᚕᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPSortHistoryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_hpsortHistory(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_HPSortHistory_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_HPSortHistory_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_HPSortHistory_updatedAt(ctx, field)
			case "sortResult":
				return ec.fieldContext_HPSortHistory_sortResult(ctx, field)
			case "owner":
				return ec.fieldContext_HPSortHistory_owner(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HPSortHistory", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_hpfcEventTickets(ctx context.Context, field graphql.CollectedField, obj *ent.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_hpfcEventTickets(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HpfcEventTickets(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.HPFCEventTicket)
	fc.Result = res
	return ec.marshalOHPFCEventTicket2ᚕᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPFCEventTicketᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_hpfcEventTickets(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_HPFCEventTicket_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_HPFCEventTicket_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_HPFCEventTicket_updatedAt(ctx, field)
			case "num":
				return ec.fieldContext_HPFCEventTicket_num(ctx, field)
			case "status":
				return ec.fieldContext_HPFCEventTicket_status(ctx, field)
			case "fcMemberSha256":
				return ec.fieldContext_HPFCEventTicket_fcMemberSha256(ctx, field)
			case "applicationTitle":
				return ec.fieldContext_HPFCEventTicket_applicationTitle(ctx, field)
			case "applicationID":
				return ec.fieldContext_HPFCEventTicket_applicationID(ctx, field)
			case "applicationSite":
				return ec.fieldContext_HPFCEventTicket_applicationSite(ctx, field)
			case "applicationStartDate":
				return ec.fieldContext_HPFCEventTicket_applicationStartDate(ctx, field)
			case "applicationDueDate":
				return ec.fieldContext_HPFCEventTicket_applicationDueDate(ctx, field)
			case "paymentStartDate":
				return ec.fieldContext_HPFCEventTicket_paymentStartDate(ctx, field)
			case "paymentDueDate":
				return ec.fieldContext_HPFCEventTicket_paymentDueDate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HPFCEventTicket", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserNotificationSetting_id(ctx context.Context, field graphql.CollectedField, obj *ent.UserNotificationSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserNotificationSetting_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserNotificationSetting_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserNotificationSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserNotificationSetting_createdAt(ctx context.Context, field graphql.CollectedField, obj *ent.UserNotificationSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserNotificationSetting_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserNotificationSetting_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserNotificationSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserNotificationSetting_updatedAt(ctx context.Context, field graphql.CollectedField, obj *ent.UserNotificationSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserNotificationSetting_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserNotificationSetting_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserNotificationSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserNotificationSetting_token(ctx context.Context, field graphql.CollectedField, obj *ent.UserNotificationSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserNotificationSetting_token(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Token, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserNotificationSetting_token(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserNotificationSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserNotificationSetting_slug(ctx context.Context, field graphql.CollectedField, obj *ent.UserNotificationSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserNotificationSetting_slug(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Slug, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserNotificationSetting_slug(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserNotificationSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserNotificationSetting_name(ctx context.Context, field graphql.CollectedField, obj *ent.UserNotificationSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserNotificationSetting_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserNotificationSetting_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserNotificationSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserNotificationSetting_enableNewPosts(ctx context.Context, field graphql.CollectedField, obj *ent.UserNotificationSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserNotificationSetting_enableNewPosts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnableNewPosts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserNotificationSetting_enableNewPosts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserNotificationSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserNotificationSetting_enablePaymentStart(ctx context.Context, field graphql.CollectedField, obj *ent.UserNotificationSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserNotificationSetting_enablePaymentStart(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnablePaymentStart, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserNotificationSetting_enablePaymentStart(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserNotificationSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserNotificationSetting_enablePaymentDue(ctx context.Context, field graphql.CollectedField, obj *ent.UserNotificationSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserNotificationSetting_enablePaymentDue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnablePaymentDue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserNotificationSetting_enablePaymentDue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserNotificationSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserNotificationSetting_user(ctx context.Context, field graphql.CollectedField, obj *ent.UserNotificationSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserNotificationSetting_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserNotificationSetting_user(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserNotificationSetting",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "accessToken":
				return ec.fieldContext_User_accessToken(ctx, field)
			case "auth":
				return ec.fieldContext_User_auth(ctx, field)
			case "notificationSettings":
				return ec.fieldContext_User_notificationSettings(ctx, field)
			case "hpviewHistory":
				return ec.fieldContext_User_hpviewHistory(ctx, field)
			case "hpmemberFollowing":
				return ec.fieldContext_User_hpmemberFollowing(ctx, field)
			case "hpsortHistory":
				return ec.fieldContext_User_hpsortHistory(ctx, field)
			case "hpfcEventTickets":
				return ec.fieldContext_User_hpfcEventTickets(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_locations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_types(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_queryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_queryType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_mutationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_mutationType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_directives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_directives(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_kind(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_interfaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_interfaces(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_possibleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_enumValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_inputFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_inputFields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_ofType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_ofType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputAuthOrder(ctx context.Context, obj interface{}) (ent.AuthOrder, error) {
	var it ent.AuthOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalNAuthOrderField2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐAuthOrderField(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputHPAmebloPostOrder(ctx context.Context, obj interface{}) (ent.HPAmebloPostOrder, error) {
	var it ent.HPAmebloPostOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalNHPAmebloPostOrderField2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPAmebloPostOrderField(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputHPArtistOrder(ctx context.Context, obj interface{}) (ent.HPArtistOrder, error) {
	var it ent.HPArtistOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalNHPArtistOrderField2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPArtistOrderField(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputHPBlobOrder(ctx context.Context, obj interface{}) (ent.HPBlobOrder, error) {
	var it ent.HPBlobOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalNHPBlobOrderField2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPBlobOrderField(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputHPElineumpMallItemsParamsInput(ctx context.Context, obj interface{}) (helloproject.HPElineumpMallItemsParams, error) {
	var it helloproject.HPElineumpMallItemsParams
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"memberIDs", "categories"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "memberIDs":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("memberIDs"))
			it.MemberIDs, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "categories":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("categories"))
			it.Categories, err = ec.unmarshalOHPElineupMallItemCategory2ᚕgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋenumsᚐHPElineupMallItemCategoryᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputHPElineupMallItemOrder(ctx context.Context, obj interface{}) (ent.HPElineupMallItemOrder, error) {
	var it ent.HPElineupMallItemOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalNHPElineupMallItemOrderField2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPElineupMallItemOrderField(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputHPEventOrder(ctx context.Context, obj interface{}) (ent.HPEventOrder, error) {
	var it ent.HPEventOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalNHPEventOrderField2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPEventOrderField(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputHPFCEventTicketApplicationInput(ctx context.Context, obj interface{}) (upfc.HPFCEventTicketApplication, error) {
	var it upfc.HPFCEventTicketApplication
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"memberSha256", "title", "openAt", "startAt", "fullyQualifiedVenueName", "num", "status", "applicationSite", "applicationId", "applicationStartDate", "applicationDueDate", "paymentStartDate", "paymentDueDate"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "memberSha256":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("memberSha256"))
			it.MemberSha256, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "openAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("openAt"))
			it.OpenAt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "startAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startAt"))
			it.StartAt, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "fullyQualifiedVenueName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fullyQualifiedVenueName"))
			it.FullyQualifiedVenueName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("num"))
			it.Num, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalNHPFCEventTicketApplicationStatus2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋenumsᚐHPFCEventTicketApplicationStatus(ctx, v)
			if err != nil {
				return it, err
			}
		case "applicationSite":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("applicationSite"))
			it.ApplicationSite, err = ec.unmarshalNHPFCEventTicketApplicationSite2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋenumsᚐHPFCEventTicketApplicationSite(ctx, v)
			if err != nil {
				return it, err
			}
		case "applicationId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("applicationId"))
			it.ApplicationID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "applicationStartDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("applicationStartDate"))
			it.ApplicationStartDate, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "applicationDueDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("applicationDueDate"))
			it.ApplicationDueDate, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentStartDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentStartDate"))
			it.PaymentStartDate, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentDueDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentDueDate"))
			it.PaymentDueDate, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputHPFCEventTicketApplicationUpsertParamsInput(ctx context.Context, obj interface{}) (upfc.HPFCEventTicketApplicationUpsertParams, error) {
	var it upfc.HPFCEventTicketApplicationUpsertParams
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"userId", "applications"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "userId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
			it.UserId, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "applications":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("applications"))
			it.Applications, err = ec.unmarshalOHPFCEventTicketApplicationInput2ᚕgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋhelloprojectᚋupfcᚐHPFCEventTicketApplicationᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputHPFCEventTicketOrder(ctx context.Context, obj interface{}) (ent.HPFCEventTicketOrder, error) {
	var it ent.HPFCEventTicketOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalNHPFCEventTicketOrderField2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPFCEventTicketOrderField(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputHPFeedItemOrder(ctx context.Context, obj interface{}) (ent.HPFeedItemOrder, error) {
	var it ent.HPFeedItemOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalNHPFeedItemOrderField2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPFeedItemOrderField(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputHPFeedQueryParamsInput(ctx context.Context, obj interface{}) (helloproject.HPFeedQueryParams, error) {
	var it helloproject.HPFeedQueryParams
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"memberIDs", "assetTypes", "useMemberTaggings", "minPostAt"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "memberIDs":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("memberIDs"))
			it.MemberIDs, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "assetTypes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("assetTypes"))
			it.AssetTypes, err = ec.unmarshalOHPAssetType2ᚕgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋenumsᚐHPAssetTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "useMemberTaggings":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("useMemberTaggings"))
			it.UseMemberTaggings, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "minPostAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("minPostAt"))
			it.MinPostAt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputHPFollowOrder(ctx context.Context, obj interface{}) (ent.HPFollowOrder, error) {
	var it ent.HPFollowOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalNHPFollowOrderField2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPFollowOrderField(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputHPFollowUpsertParamsInput(ctx context.Context, obj interface{}) (user.HPFollowUpsertParams, error) {
	var it user.HPFollowUpsertParams
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"memberId", "followType"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "memberId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("memberId"))
			it.MemberId, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "followType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("followType"))
			it.FollowType, err = ec.unmarshalNHPFollowType2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋenumsᚐHPFollowType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputHPIgPostOrder(ctx context.Context, obj interface{}) (ent.HPIgPostOrder, error) {
	var it ent.HPIgPostOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalNHPIgPostOrderField2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPIgPostOrderField(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputHPMemberOrder(ctx context.Context, obj interface{}) (ent.HPMemberOrder, error) {
	var it ent.HPMemberOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalNHPMemberOrderField2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPMemberOrderField(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputHPSortHistoryOrder(ctx context.Context, obj interface{}) (ent.HPSortHistoryOrder, error) {
	var it ent.HPSortHistoryOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalNHPSortHistoryOrderField2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPSortHistoryOrderField(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputHPViewHistoryOrder(ctx context.Context, obj interface{}) (ent.HPViewHistoryOrder, error) {
	var it ent.HPViewHistoryOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalNHPViewHistoryOrderField2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPViewHistoryOrderField(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputHPViewHistoryUpsertParamsInput(ctx context.Context, obj interface{}) (feed.HPViewHistoryUpsertParams, error) {
	var it feed.HPViewHistoryUpsertParams
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"feedId", "userId", "isFavorite"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "feedId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("feedId"))
			it.FeedID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
			it.UserID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "isFavorite":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isFavorite"))
			it.IsFavorite, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMeFavoriteQueryParamsInput(ctx context.Context, obj interface{}) (me.MeFavoriteQueryParams, error) {
	var it me.MeFavoriteQueryParams
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"memberIDs", "assetTypes"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "memberIDs":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("memberIDs"))
			it.MemberIDs, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "assetTypes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("assetTypes"))
			it.AssetTypes, err = ec.unmarshalOHPAssetType2ᚕgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋenumsᚐHPAssetTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserNotificationSettingOrder(ctx context.Context, obj interface{}) (ent.UserNotificationSettingOrder, error) {
	var it ent.UserNotificationSettingOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalNUserNotificationSettingOrderField2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐUserNotificationSettingOrderField(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserOrder(ctx context.Context, obj interface{}) (ent.UserOrder, error) {
	var it ent.UserOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalNUserOrderField2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐUserOrderField(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) _Node(ctx context.Context, sel ast.SelectionSet, obj ent.Noder) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case *helloproject.HelloProjectQuery:
		if obj == nil {
			return graphql.Null
		}
		return ec._HelloProjectQuery(ctx, sel, obj)
	case *me.MeQuery:
		if obj == nil {
			return graphql.Null
		}
		return ec._MeQuery(ctx, sel, obj)
	case *ent.Auth:
		if obj == nil {
			return graphql.Null
		}
		return ec._Auth(ctx, sel, obj)
	case *ent.HPAmebloPost:
		if obj == nil {
			return graphql.Null
		}
		return ec._HPAmebloPost(ctx, sel, obj)
	case *ent.HPArtist:
		if obj == nil {
			return graphql.Null
		}
		return ec._HPArtist(ctx, sel, obj)
	case *ent.HPBlob:
		if obj == nil {
			return graphql.Null
		}
		return ec._HPBlob(ctx, sel, obj)
	case *ent.HPElineupMallItem:
		if obj == nil {
			return graphql.Null
		}
		return ec._HPElineupMallItem(ctx, sel, obj)
	case *ent.HPEvent:
		if obj == nil {
			return graphql.Null
		}
		return ec._HPEvent(ctx, sel, obj)
	case *ent.HPFCEventTicket:
		if obj == nil {
			return graphql.Null
		}
		return ec._HPFCEventTicket(ctx, sel, obj)
	case *ent.HPFeedItem:
		if obj == nil {
			return graphql.Null
		}
		return ec._HPFeedItem(ctx, sel, obj)
	case *ent.HPFollow:
		if obj == nil {
			return graphql.Null
		}
		return ec._HPFollow(ctx, sel, obj)
	case *ent.HPIgPost:
		if obj == nil {
			return graphql.Null
		}
		return ec._HPIgPost(ctx, sel, obj)
	case *ent.HPMember:
		if obj == nil {
			return graphql.Null
		}
		return ec._HPMember(ctx, sel, obj)
	case *ent.HPSortHistory:
		if obj == nil {
			return graphql.Null
		}
		return ec._HPSortHistory(ctx, sel, obj)
	case *ent.HPViewHistory:
		if obj == nil {
			return graphql.Null
		}
		return ec._HPViewHistory(ctx, sel, obj)
	case *ent.User:
		if obj == nil {
			return graphql.Null
		}
		return ec._User(ctx, sel, obj)
	case *ent.UserNotificationSetting:
		if obj == nil {
			return graphql.Null
		}
		return ec._UserNotificationSetting(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var authImplementors = []string{"Auth", "Node"}

func (ec *executionContext) _Auth(ctx context.Context, sel ast.SelectionSet, obj *ent.Auth) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Auth")
		case "id":

			out.Values[i] = ec._Auth_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":

			out.Values[i] = ec._Auth_createdAt(ctx, field, obj)

		case "updatedAt":

			out.Values[i] = ec._Auth_updatedAt(ctx, field, obj)

		case "providerName":

			out.Values[i] = ec._Auth_providerName(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var expoPushMessageImplementors = []string{"ExpoPushMessage"}

func (ec *executionContext) _ExpoPushMessage(ctx context.Context, sel ast.SelectionSet, obj *jsonfields.ExpoPushMessage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, expoPushMessageImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ExpoPushMessage")
		case "title":

			out.Values[i] = ec._ExpoPushMessage_title(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "body":

			out.Values[i] = ec._ExpoPushMessage_body(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ttlSeconds":

			out.Values[i] = ec._ExpoPushMessage_ttlSeconds(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "priority":

			out.Values[i] = ec._ExpoPushMessage_priority(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sound":

			out.Values[i] = ec._ExpoPushMessage_sound(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "badge":

			out.Values[i] = ec._ExpoPushMessage_badge(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "imageUrl":

			out.Values[i] = ec._ExpoPushMessage_imageUrl(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var hPAmebloPostImplementors = []string{"HPAmebloPost", "Node"}

func (ec *executionContext) _HPAmebloPost(ctx context.Context, sel ast.SelectionSet, obj *ent.HPAmebloPost) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, hPAmebloPostImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HPAmebloPost")
		case "id":

			out.Values[i] = ec._HPAmebloPost_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "crawledAt":

			out.Values[i] = ec._HPAmebloPost_crawledAt(ctx, field, obj)

		case "errorCount":

			out.Values[i] = ec._HPAmebloPost_errorCount(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "lastErrorMessage":

			out.Values[i] = ec._HPAmebloPost_lastErrorMessage(ctx, field, obj)

		case "recrawlRequired":

			out.Values[i] = ec._HPAmebloPost_recrawlRequired(ctx, field, obj)

		case "createdAt":

			out.Values[i] = ec._HPAmebloPost_createdAt(ctx, field, obj)

		case "updatedAt":

			out.Values[i] = ec._HPAmebloPost_updatedAt(ctx, field, obj)

		case "path":

			out.Values[i] = ec._HPAmebloPost_path(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "nextPath":

			out.Values[i] = ec._HPAmebloPost_nextPath(ctx, field, obj)

		case "prevPath":

			out.Values[i] = ec._HPAmebloPost_prevPath(ctx, field, obj)

		case "artistKey":

			out.Values[i] = ec._HPAmebloPost_artistKey(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "memberKey":

			out.Values[i] = ec._HPAmebloPost_memberKey(ctx, field, obj)

		case "title":

			out.Values[i] = ec._HPAmebloPost_title(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "description":

			out.Values[i] = ec._HPAmebloPost_description(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "theme":

			out.Values[i] = ec._HPAmebloPost_theme(ctx, field, obj)

		case "postAt":

			out.Values[i] = ec._HPAmebloPost_postAt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "source":

			out.Values[i] = ec._HPAmebloPost_source(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "images":

			out.Values[i] = ec._HPAmebloPost_images(ctx, field, obj)

		case "likes":

			out.Values[i] = ec._HPAmebloPost_likes(ctx, field, obj)

		case "comments":

			out.Values[i] = ec._HPAmebloPost_comments(ctx, field, obj)

		case "reblogs":

			out.Values[i] = ec._HPAmebloPost_reblogs(ctx, field, obj)

		case "ownerArtistID":

			out.Values[i] = ec._HPAmebloPost_ownerArtistID(ctx, field, obj)

		case "ownerMemberID":

			out.Values[i] = ec._HPAmebloPost_ownerMemberID(ctx, field, obj)

		case "ownerArtist":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._HPAmebloPost_ownerArtist(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "ownerMember":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._HPAmebloPost_ownerMember(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "taggedArtists":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._HPAmebloPost_taggedArtists(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "taggedMembers":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._HPAmebloPost_taggedMembers(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "blobs":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._HPAmebloPost_blobs(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var hPArtistImplementors = []string{"HPArtist", "Node"}

func (ec *executionContext) _HPArtist(ctx context.Context, sel ast.SelectionSet, obj *ent.HPArtist) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, hPArtistImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HPArtist")
		case "id":

			out.Values[i] = ec._HPArtist_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "crawledAt":

			out.Values[i] = ec._HPArtist_crawledAt(ctx, field, obj)

		case "errorCount":

			out.Values[i] = ec._HPArtist_errorCount(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "lastErrorMessage":

			out.Values[i] = ec._HPArtist_lastErrorMessage(ctx, field, obj)

		case "recrawlRequired":

			out.Values[i] = ec._HPArtist_recrawlRequired(ctx, field, obj)

		case "createdAt":

			out.Values[i] = ec._HPArtist_createdAt(ctx, field, obj)

		case "updatedAt":

			out.Values[i] = ec._HPArtist_updatedAt(ctx, field, obj)

		case "key":

			out.Values[i] = ec._HPArtist_key(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":

			out.Values[i] = ec._HPArtist_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "thumbnailURL":

			out.Values[i] = ec._HPArtist_thumbnailURL(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "index":

			out.Values[i] = ec._HPArtist_index(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "members":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._HPArtist_members(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var hPBlobImplementors = []string{"HPBlob", "Node"}

func (ec *executionContext) _HPBlob(ctx context.Context, sel ast.SelectionSet, obj *ent.HPBlob) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, hPBlobImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HPBlob")
		case "id":

			out.Values[i] = ec._HPBlob_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdAt":

			out.Values[i] = ec._HPBlob_createdAt(ctx, field, obj)

		case "updatedAt":

			out.Values[i] = ec._HPBlob_updatedAt(ctx, field, obj)

		case "storagePath":

			out.Values[i] = ec._HPBlob_storagePath(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "sourceURL":

			out.Values[i] = ec._HPBlob_sourceURL(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "sourceHTMLURL":

			out.Values[i] = ec._HPBlob_sourceHTMLURL(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "status":

			out.Values[i] = ec._HPBlob_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "statusMessage":

			out.Values[i] = ec._HPBlob_statusMessage(ctx, field, obj)

		case "statusErrorCount":

			out.Values[i] = ec._HPBlob_statusErrorCount(ctx, field, obj)

		case "type":

			out.Values[i] = ec._HPBlob_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "subType":

			out.Values[i] = ec._HPBlob_subType(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "width":

			out.Values[i] = ec._HPBlob_width(ctx, field, obj)

		case "height":

			out.Values[i] = ec._HPBlob_height(ctx, field, obj)

		case "size":

			out.Values[i] = ec._HPBlob_size(ctx, field, obj)

		case "ownerArtistID":

			out.Values[i] = ec._HPBlob_ownerArtistID(ctx, field, obj)

		case "ownerMemberID":

			out.Values[i] = ec._HPBlob_ownerMemberID(ctx, field, obj)

		case "numFaces":

			out.Values[i] = ec._HPBlob_numFaces(ctx, field, obj)

		case "faceRecognitionStatus":

			out.Values[i] = ec._HPBlob_faceRecognitionStatus(ctx, field, obj)

		case "thumbnail":

			out.Values[i] = ec._HPBlob_thumbnail(ctx, field, obj)

		case "durationSeconds":

			out.Values[i] = ec._HPBlob_durationSeconds(ctx, field, obj)

		case "ownerArtist":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._HPBlob_ownerArtist(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "ownerMember":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._HPBlob_ownerMember(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "amebloPosts":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._HPBlob_amebloPosts(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "igPosts":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._HPBlob_igPosts(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var hPBlobThumbnailImplementors = []string{"HPBlobThumbnail"}

func (ec *executionContext) _HPBlobThumbnail(ctx context.Context, sel ast.SelectionSet, obj *jsonfields.HPBlobThumbnail) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, hPBlobThumbnailImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HPBlobThumbnail")
		case "storagePath":

			out.Values[i] = ec._HPBlobThumbnail_storagePath(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sourceImageUrl":

			out.Values[i] = ec._HPBlobThumbnail_sourceImageUrl(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "width":

			out.Values[i] = ec._HPBlobThumbnail_width(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "height":

			out.Values[i] = ec._HPBlobThumbnail_height(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var hPElineupMallItemImplementors = []string{"HPElineupMallItem", "Node"}

func (ec *executionContext) _HPElineupMallItem(ctx context.Context, sel ast.SelectionSet, obj *ent.HPElineupMallItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, hPElineupMallItemImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HPElineupMallItem")
		case "id":

			out.Values[i] = ec._HPElineupMallItem_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "crawledAt":

			out.Values[i] = ec._HPElineupMallItem_crawledAt(ctx, field, obj)

		case "errorCount":

			out.Values[i] = ec._HPElineupMallItem_errorCount(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "lastErrorMessage":

			out.Values[i] = ec._HPElineupMallItem_lastErrorMessage(ctx, field, obj)

		case "recrawlRequired":

			out.Values[i] = ec._HPElineupMallItem_recrawlRequired(ctx, field, obj)

		case "createdAt":

			out.Values[i] = ec._HPElineupMallItem_createdAt(ctx, field, obj)

		case "updatedAt":

			out.Values[i] = ec._HPElineupMallItem_updatedAt(ctx, field, obj)

		case "permalink":

			out.Values[i] = ec._HPElineupMallItem_permalink(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":

			out.Values[i] = ec._HPElineupMallItem_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "description":

			out.Values[i] = ec._HPElineupMallItem_description(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "supplier":

			out.Values[i] = ec._HPElineupMallItem_supplier(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "price":

			out.Values[i] = ec._HPElineupMallItem_price(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "isLimitedToFc":

			out.Values[i] = ec._HPElineupMallItem_isLimitedToFc(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "isOutOfStock":

			out.Values[i] = ec._HPElineupMallItem_isOutOfStock(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "images":

			out.Values[i] = ec._HPElineupMallItem_images(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "category":

			out.Values[i] = ec._HPElineupMallItem_category(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "orderStartAt":

			out.Values[i] = ec._HPElineupMallItem_orderStartAt(ctx, field, obj)

		case "orderEndAt":

			out.Values[i] = ec._HPElineupMallItem_orderEndAt(ctx, field, obj)

		case "taggedArtists":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._HPElineupMallItem_taggedArtists(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "taggedMembers":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._HPElineupMallItem_taggedMembers(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var hPElineupMallItemConnectionImplementors = []string{"HPElineupMallItemConnection"}

func (ec *executionContext) _HPElineupMallItemConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.HPElineupMallItemConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, hPElineupMallItemConnectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HPElineupMallItemConnection")
		case "edges":

			out.Values[i] = ec._HPElineupMallItemConnection_edges(ctx, field, obj)

		case "pageInfo":

			out.Values[i] = ec._HPElineupMallItemConnection_pageInfo(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "totalCount":

			out.Values[i] = ec._HPElineupMallItemConnection_totalCount(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var hPElineupMallItemEdgeImplementors = []string{"HPElineupMallItemEdge"}

func (ec *executionContext) _HPElineupMallItemEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.HPElineupMallItemEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, hPElineupMallItemEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HPElineupMallItemEdge")
		case "node":

			out.Values[i] = ec._HPElineupMallItemEdge_node(ctx, field, obj)

		case "cursor":

			out.Values[i] = ec._HPElineupMallItemEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var hPEventImplementors = []string{"HPEvent", "Node"}

func (ec *executionContext) _HPEvent(ctx context.Context, sel ast.SelectionSet, obj *ent.HPEvent) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, hPEventImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HPEvent")
		case "id":

			out.Values[i] = ec._HPEvent_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdAt":

			out.Values[i] = ec._HPEvent_createdAt(ctx, field, obj)

		case "updatedAt":

			out.Values[i] = ec._HPEvent_updatedAt(ctx, field, obj)

		case "key":

			out.Values[i] = ec._HPEvent_key(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "displayTitles":

			out.Values[i] = ec._HPEvent_displayTitles(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "openAt":

			out.Values[i] = ec._HPEvent_openAt(ctx, field, obj)

		case "startAt":

			out.Values[i] = ec._HPEvent_startAt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "venue":

			out.Values[i] = ec._HPEvent_venue(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "prefecture":

			out.Values[i] = ec._HPEvent_prefecture(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "source":

			out.Values[i] = ec._HPEvent_source(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "tickets":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._HPEvent_tickets(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var hPEventConnectionImplementors = []string{"HPEventConnection"}

func (ec *executionContext) _HPEventConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.HPEventConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, hPEventConnectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HPEventConnection")
		case "edges":

			out.Values[i] = ec._HPEventConnection_edges(ctx, field, obj)

		case "pageInfo":

			out.Values[i] = ec._HPEventConnection_pageInfo(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "totalCount":

			out.Values[i] = ec._HPEventConnection_totalCount(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var hPEventEdgeImplementors = []string{"HPEventEdge"}

func (ec *executionContext) _HPEventEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.HPEventEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, hPEventEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HPEventEdge")
		case "node":

			out.Values[i] = ec._HPEventEdge_node(ctx, field, obj)

		case "cursor":

			out.Values[i] = ec._HPEventEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var hPFCEventTicketImplementors = []string{"HPFCEventTicket", "Node"}

func (ec *executionContext) _HPFCEventTicket(ctx context.Context, sel ast.SelectionSet, obj *ent.HPFCEventTicket) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, hPFCEventTicketImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HPFCEventTicket")
		case "id":

			out.Values[i] = ec._HPFCEventTicket_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":

			out.Values[i] = ec._HPFCEventTicket_createdAt(ctx, field, obj)

		case "updatedAt":

			out.Values[i] = ec._HPFCEventTicket_updatedAt(ctx, field, obj)

		case "num":

			out.Values[i] = ec._HPFCEventTicket_num(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":

			out.Values[i] = ec._HPFCEventTicket_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fcMemberSha256":

			out.Values[i] = ec._HPFCEventTicket_fcMemberSha256(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "applicationTitle":

			out.Values[i] = ec._HPFCEventTicket_applicationTitle(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "applicationID":

			out.Values[i] = ec._HPFCEventTicket_applicationID(ctx, field, obj)

		case "applicationSite":

			out.Values[i] = ec._HPFCEventTicket_applicationSite(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "applicationStartDate":

			out.Values[i] = ec._HPFCEventTicket_applicationStartDate(ctx, field, obj)

		case "applicationDueDate":

			out.Values[i] = ec._HPFCEventTicket_applicationDueDate(ctx, field, obj)

		case "paymentStartDate":

			out.Values[i] = ec._HPFCEventTicket_paymentStartDate(ctx, field, obj)

		case "paymentDueDate":

			out.Values[i] = ec._HPFCEventTicket_paymentDueDate(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var hPFeedItemImplementors = []string{"HPFeedItem", "Node"}

func (ec *executionContext) _HPFeedItem(ctx context.Context, sel ast.SelectionSet, obj *ent.HPFeedItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, hPFeedItemImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HPFeedItem")
		case "id":

			out.Values[i] = ec._HPFeedItem_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdAt":

			out.Values[i] = ec._HPFeedItem_createdAt(ctx, field, obj)

		case "updatedAt":

			out.Values[i] = ec._HPFeedItem_updatedAt(ctx, field, obj)

		case "sourceID":

			out.Values[i] = ec._HPFeedItem_sourceID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "assetType":

			out.Values[i] = ec._HPFeedItem_assetType(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "title":

			out.Values[i] = ec._HPFeedItem_title(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "postAt":

			out.Values[i] = ec._HPFeedItem_postAt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "sourceURL":

			out.Values[i] = ec._HPFeedItem_sourceURL(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "imageURL":

			out.Values[i] = ec._HPFeedItem_imageURL(ctx, field, obj)

		case "media":

			out.Values[i] = ec._HPFeedItem_media(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "ownerArtistID":

			out.Values[i] = ec._HPFeedItem_ownerArtistID(ctx, field, obj)

		case "ownerMemberID":

			out.Values[i] = ec._HPFeedItem_ownerMemberID(ctx, field, obj)

		case "ownerArtist":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._HPFeedItem_ownerArtist(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "ownerMember":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._HPFeedItem_ownerMember(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "taggedArtists":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._HPFeedItem_taggedArtists(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "taggedMembers":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._HPFeedItem_taggedMembers(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "myViewHistory":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._HPFeedItem_myViewHistory(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var hPFeedItemConnectionImplementors = []string{"HPFeedItemConnection"}

func (ec *executionContext) _HPFeedItemConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.HPFeedItemConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, hPFeedItemConnectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HPFeedItemConnection")
		case "edges":

			out.Values[i] = ec._HPFeedItemConnection_edges(ctx, field, obj)

		case "pageInfo":

			out.Values[i] = ec._HPFeedItemConnection_pageInfo(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "totalCount":

			out.Values[i] = ec._HPFeedItemConnection_totalCount(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var hPFeedItemEdgeImplementors = []string{"HPFeedItemEdge"}

func (ec *executionContext) _HPFeedItemEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.HPFeedItemEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, hPFeedItemEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HPFeedItemEdge")
		case "node":

			out.Values[i] = ec._HPFeedItemEdge_node(ctx, field, obj)

		case "cursor":

			out.Values[i] = ec._HPFeedItemEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var hPFollowImplementors = []string{"HPFollow", "Node"}

func (ec *executionContext) _HPFollow(ctx context.Context, sel ast.SelectionSet, obj *ent.HPFollow) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, hPFollowImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HPFollow")
		case "id":

			out.Values[i] = ec._HPFollow_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdAt":

			out.Values[i] = ec._HPFollow_createdAt(ctx, field, obj)

		case "updatedAt":

			out.Values[i] = ec._HPFollow_updatedAt(ctx, field, obj)

		case "type":

			out.Values[i] = ec._HPFollow_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "user":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._HPFollow_user(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "member":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._HPFollow_member(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var hPIgCrawlArgsImplementors = []string{"HPIgCrawlArgs"}

func (ec *executionContext) _HPIgCrawlArgs(ctx context.Context, sel ast.SelectionSet, obj *jsonfields.HPIgCrawlArgs) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, hPIgCrawlArgsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HPIgCrawlArgs")
		case "id":

			out.Values[i] = ec._HPIgCrawlArgs_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "shortcode":

			out.Values[i] = ec._HPIgCrawlArgs_shortcode(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "caption":

			out.Values[i] = ec._HPIgCrawlArgs_caption(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "displayUrl":

			out.Values[i] = ec._HPIgCrawlArgs_displayUrl(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "videoUrl":

			out.Values[i] = ec._HPIgCrawlArgs_videoUrl(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ownerUsername":

			out.Values[i] = ec._HPIgCrawlArgs_ownerUsername(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ownerId":

			out.Values[i] = ec._HPIgCrawlArgs_ownerId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hashtags":

			out.Values[i] = ec._HPIgCrawlArgs_hashtags(ctx, field, obj)

		case "childPosts":

			out.Values[i] = ec._HPIgCrawlArgs_childPosts(ctx, field, obj)

		case "timestamp":

			out.Values[i] = ec._HPIgCrawlArgs_timestamp(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "commentsCount":

			out.Values[i] = ec._HPIgCrawlArgs_commentsCount(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "likesCount":

			out.Values[i] = ec._HPIgCrawlArgs_likesCount(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "videoViewCount":

			out.Values[i] = ec._HPIgCrawlArgs_videoViewCount(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var hPIgCrawlArgsChildPostImplementors = []string{"HPIgCrawlArgsChildPost"}

func (ec *executionContext) _HPIgCrawlArgsChildPost(ctx context.Context, sel ast.SelectionSet, obj *jsonfields.HPIgCrawlArgsChildPost) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, hPIgCrawlArgsChildPostImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HPIgCrawlArgsChildPost")
		case "id":

			out.Values[i] = ec._HPIgCrawlArgsChildPost_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":

			out.Values[i] = ec._HPIgCrawlArgsChildPost_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "displayUrl":

			out.Values[i] = ec._HPIgCrawlArgsChildPost_displayUrl(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "videoUrl":

			out.Values[i] = ec._HPIgCrawlArgsChildPost_videoUrl(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "likesCount":

			out.Values[i] = ec._HPIgCrawlArgsChildPost_likesCount(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "videoViewCount":

			out.Values[i] = ec._HPIgCrawlArgsChildPost_videoViewCount(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var hPIgPostImplementors = []string{"HPIgPost", "Node"}

func (ec *executionContext) _HPIgPost(ctx context.Context, sel ast.SelectionSet, obj *ent.HPIgPost) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, hPIgPostImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HPIgPost")
		case "id":

			out.Values[i] = ec._HPIgPost_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "crawledAt":

			out.Values[i] = ec._HPIgPost_crawledAt(ctx, field, obj)

		case "errorCount":

			out.Values[i] = ec._HPIgPost_errorCount(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "lastErrorMessage":

			out.Values[i] = ec._HPIgPost_lastErrorMessage(ctx, field, obj)

		case "recrawlRequired":

			out.Values[i] = ec._HPIgPost_recrawlRequired(ctx, field, obj)

		case "createdAt":

			out.Values[i] = ec._HPIgPost_createdAt(ctx, field, obj)

		case "updatedAt":

			out.Values[i] = ec._HPIgPost_updatedAt(ctx, field, obj)

		case "shortcode":

			out.Values[i] = ec._HPIgPost_shortcode(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "description":

			out.Values[i] = ec._HPIgPost_description(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "postAt":

			out.Values[i] = ec._HPIgPost_postAt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "media":

			out.Values[i] = ec._HPIgPost_media(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "likes":

			out.Values[i] = ec._HPIgPost_likes(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "comments":

			out.Values[i] = ec._HPIgPost_comments(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "recrawlArgs":

			out.Values[i] = ec._HPIgPost_recrawlArgs(ctx, field, obj)

		case "ownerArtistID":

			out.Values[i] = ec._HPIgPost_ownerArtistID(ctx, field, obj)

		case "ownerMemberID":

			out.Values[i] = ec._HPIgPost_ownerMemberID(ctx, field, obj)

		case "ownerArtist":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._HPIgPost_ownerArtist(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "ownerMember":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._HPIgPost_ownerMember(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "taggedArtists":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._HPIgPost_taggedArtists(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "taggedMembers":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._HPIgPost_taggedMembers(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "blobs":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._HPIgPost_blobs(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var hPIgPostConnectionImplementors = []string{"HPIgPostConnection"}

func (ec *executionContext) _HPIgPostConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.HPIgPostConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, hPIgPostConnectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HPIgPostConnection")
		case "edges":

			out.Values[i] = ec._HPIgPostConnection_edges(ctx, field, obj)

		case "pageInfo":

			out.Values[i] = ec._HPIgPostConnection_pageInfo(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "totalCount":

			out.Values[i] = ec._HPIgPostConnection_totalCount(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var hPIgPostEdgeImplementors = []string{"HPIgPostEdge"}

func (ec *executionContext) _HPIgPostEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.HPIgPostEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, hPIgPostEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HPIgPostEdge")
		case "node":

			out.Values[i] = ec._HPIgPostEdge_node(ctx, field, obj)

		case "cursor":

			out.Values[i] = ec._HPIgPostEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var hPMemberImplementors = []string{"HPMember", "Node"}

func (ec *executionContext) _HPMember(ctx context.Context, sel ast.SelectionSet, obj *ent.HPMember) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, hPMemberImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HPMember")
		case "id":

			out.Values[i] = ec._HPMember_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "crawledAt":

			out.Values[i] = ec._HPMember_crawledAt(ctx, field, obj)

		case "errorCount":

			out.Values[i] = ec._HPMember_errorCount(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "lastErrorMessage":

			out.Values[i] = ec._HPMember_lastErrorMessage(ctx, field, obj)

		case "recrawlRequired":

			out.Values[i] = ec._HPMember_recrawlRequired(ctx, field, obj)

		case "createdAt":

			out.Values[i] = ec._HPMember_createdAt(ctx, field, obj)

		case "updatedAt":

			out.Values[i] = ec._HPMember_updatedAt(ctx, field, obj)

		case "key":

			out.Values[i] = ec._HPMember_key(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "artistKey":

			out.Values[i] = ec._HPMember_artistKey(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":

			out.Values[i] = ec._HPMember_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "nameKana":

			out.Values[i] = ec._HPMember_nameKana(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "thumbnailURL":

			out.Values[i] = ec._HPMember_thumbnailURL(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "dateOfBirth":

			out.Values[i] = ec._HPMember_dateOfBirth(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "bloodType":

			out.Values[i] = ec._HPMember_bloodType(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "hometown":

			out.Values[i] = ec._HPMember_hometown(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "joinAt":

			out.Values[i] = ec._HPMember_joinAt(ctx, field, obj)

		case "graduateAt":

			out.Values[i] = ec._HPMember_graduateAt(ctx, field, obj)

		case "artistID":

			out.Values[i] = ec._HPMember_artistID(ctx, field, obj)

		case "artist":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._HPMember_artist(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var hPMemberConnectionImplementors = []string{"HPMemberConnection"}

func (ec *executionContext) _HPMemberConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.HPMemberConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, hPMemberConnectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HPMemberConnection")
		case "edges":

			out.Values[i] = ec._HPMemberConnection_edges(ctx, field, obj)

		case "pageInfo":

			out.Values[i] = ec._HPMemberConnection_pageInfo(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "totalCount":

			out.Values[i] = ec._HPMemberConnection_totalCount(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var hPMemberEdgeImplementors = []string{"HPMemberEdge"}

func (ec *executionContext) _HPMemberEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.HPMemberEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, hPMemberEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HPMemberEdge")
		case "node":

			out.Values[i] = ec._HPMemberEdge_node(ctx, field, obj)

		case "cursor":

			out.Values[i] = ec._HPMemberEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var hPSortHistoryImplementors = []string{"HPSortHistory", "Node"}

func (ec *executionContext) _HPSortHistory(ctx context.Context, sel ast.SelectionSet, obj *ent.HPSortHistory) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, hPSortHistoryImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HPSortHistory")
		case "id":

			out.Values[i] = ec._HPSortHistory_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdAt":

			out.Values[i] = ec._HPSortHistory_createdAt(ctx, field, obj)

		case "updatedAt":

			out.Values[i] = ec._HPSortHistory_updatedAt(ctx, field, obj)

		case "sortResult":

			out.Values[i] = ec._HPSortHistory_sortResult(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "owner":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._HPSortHistory_owner(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var hPSortHistoryConnectionImplementors = []string{"HPSortHistoryConnection"}

func (ec *executionContext) _HPSortHistoryConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.HPSortHistoryConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, hPSortHistoryConnectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HPSortHistoryConnection")
		case "edges":

			out.Values[i] = ec._HPSortHistoryConnection_edges(ctx, field, obj)

		case "pageInfo":

			out.Values[i] = ec._HPSortHistoryConnection_pageInfo(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "totalCount":

			out.Values[i] = ec._HPSortHistoryConnection_totalCount(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var hPSortHistoryEdgeImplementors = []string{"HPSortHistoryEdge"}

func (ec *executionContext) _HPSortHistoryEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.HPSortHistoryEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, hPSortHistoryEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HPSortHistoryEdge")
		case "node":

			out.Values[i] = ec._HPSortHistoryEdge_node(ctx, field, obj)

		case "cursor":

			out.Values[i] = ec._HPSortHistoryEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var hPSortResultImplementors = []string{"HPSortResult"}

func (ec *executionContext) _HPSortResult(ctx context.Context, sel ast.SelectionSet, obj *jsonfields.HPSortResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, hPSortResultImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HPSortResult")
		case "records":

			out.Values[i] = ec._HPSortResult_records(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var hPSortResultRecordImplementors = []string{"HPSortResultRecord"}

func (ec *executionContext) _HPSortResultRecord(ctx context.Context, sel ast.SelectionSet, obj *jsonfields.HPSortResultRecord) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, hPSortResultRecordImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HPSortResultRecord")
		case "artistId":

			out.Values[i] = ec._HPSortResultRecord_artistId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "artistKey":

			out.Values[i] = ec._HPSortResultRecord_artistKey(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "memberId":

			out.Values[i] = ec._HPSortResultRecord_memberId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "memberKey":

			out.Values[i] = ec._HPSortResultRecord_memberKey(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var hPViewHistoryImplementors = []string{"HPViewHistory", "Node"}

func (ec *executionContext) _HPViewHistory(ctx context.Context, sel ast.SelectionSet, obj *ent.HPViewHistory) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, hPViewHistoryImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HPViewHistory")
		case "id":

			out.Values[i] = ec._HPViewHistory_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdAt":

			out.Values[i] = ec._HPViewHistory_createdAt(ctx, field, obj)

		case "updatedAt":

			out.Values[i] = ec._HPViewHistory_updatedAt(ctx, field, obj)

		case "contentID":

			out.Values[i] = ec._HPViewHistory_contentID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "contentPostAt":

			out.Values[i] = ec._HPViewHistory_contentPostAt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "assetType":

			out.Values[i] = ec._HPViewHistory_assetType(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "isFavorite":

			out.Values[i] = ec._HPViewHistory_isFavorite(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "feed":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._HPViewHistory_feed(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var hPViewHistoryConnectionImplementors = []string{"HPViewHistoryConnection"}

func (ec *executionContext) _HPViewHistoryConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.HPViewHistoryConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, hPViewHistoryConnectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HPViewHistoryConnection")
		case "edges":

			out.Values[i] = ec._HPViewHistoryConnection_edges(ctx, field, obj)

		case "pageInfo":

			out.Values[i] = ec._HPViewHistoryConnection_pageInfo(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "totalCount":

			out.Values[i] = ec._HPViewHistoryConnection_totalCount(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var hPViewHistoryEdgeImplementors = []string{"HPViewHistoryEdge"}

func (ec *executionContext) _HPViewHistoryEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.HPViewHistoryEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, hPViewHistoryEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HPViewHistoryEdge")
		case "node":

			out.Values[i] = ec._HPViewHistoryEdge_node(ctx, field, obj)

		case "cursor":

			out.Values[i] = ec._HPViewHistoryEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var helloProjectQueryImplementors = []string{"HelloProjectQuery", "Node"}

func (ec *executionContext) _HelloProjectQuery(ctx context.Context, sel ast.SelectionSet, obj *helloproject.HelloProjectQuery) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, helloProjectQueryImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HelloProjectQuery")
		case "id":

			out.Values[i] = ec._HelloProjectQuery_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "artists":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._HelloProjectQuery_artists(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "feed":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._HelloProjectQuery_feed(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "elineupMallItems":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._HelloProjectQuery_elineupMallItems(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var meMutationImplementors = []string{"MeMutation"}

func (ec *executionContext) _MeMutation(ctx context.Context, sel ast.SelectionSet, obj *me.MeMutation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, meMutationImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MeMutation")
		case "authenticate":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MeMutation_authenticate(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "removeAuthentication":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MeMutation_removeAuthentication(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "upsertFollow":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MeMutation_upsertFollow(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "upsertEvents":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MeMutation_upsertEvents(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "upsertViewHistory":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MeMutation_upsertViewHistory(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var meQueryImplementors = []string{"MeQuery", "Node"}

func (ec *executionContext) _MeQuery(ctx context.Context, sel ast.SelectionSet, obj *me.MeQuery) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, meQueryImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MeQuery")
		case "id":

			out.Values[i] = ec._MeQuery_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "userId":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MeQuery_userId(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "username":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MeQuery_username(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "clientId":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MeQuery_clientId(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "clientName":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MeQuery_clientName(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "clientIsVerified":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MeQuery_clientIsVerified(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "authentications":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MeQuery_authentications(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "followings":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MeQuery_followings(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "sortHistories":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MeQuery_sortHistories(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "events":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MeQuery_events(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "favorites":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MeQuery_favorites(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mediaImplementors = []string{"Media"}

func (ec *executionContext) _Media(ctx context.Context, sel ast.SelectionSet, obj *jsonfields.Media) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mediaImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Media")
		case "url":

			out.Values[i] = ec._Media_url(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "blobId":

			out.Values[i] = ec._Media_blobId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":

			out.Values[i] = ec._Media_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "width":

			out.Values[i] = ec._Media_width(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "height":

			out.Values[i] = ec._Media_height(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "thumbnailUrl":

			out.Values[i] = ec._Media_thumbnailUrl(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "thumbnailWidth":

			out.Values[i] = ec._Media_thumbnailWidth(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "thumbnailHeight":

			out.Values[i] = ec._Media_thumbnailHeight(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var messageImplementors = []string{"Message"}

func (ec *executionContext) _Message(ctx context.Context, sel ast.SelectionSet, obj *push.Message) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, messageImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Message")
		case "to":

			out.Values[i] = ec._Message_to(ctx, field, obj)

		case "title":

			out.Values[i] = ec._Message_title(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "body":

			out.Values[i] = ec._Message_body(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ttlSeconds":

			out.Values[i] = ec._Message_ttlSeconds(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "priority":

			out.Values[i] = ec._Message_priority(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sound":

			out.Values[i] = ec._Message_sound(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "badge":

			out.Values[i] = ec._Message_badge(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "imageUrl":

			out.Values[i] = ec._Message_imageUrl(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "data":

			out.Values[i] = ec._Message_data(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var miscImplementors = []string{"Misc"}

func (ec *executionContext) _Misc(ctx context.Context, sel ast.SelectionSet, obj *v3.Misc) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, miscImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Misc")
		case "version":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Misc_version(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "authenticate":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_authenticate(ctx, field)
			})

		case "me":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_me(ctx, field)
			})

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var pageInfoImplementors = []string{"PageInfo"}

func (ec *executionContext) _PageInfo(ctx context.Context, sel ast.SelectionSet, obj *entgql.PageInfo[int]) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pageInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PageInfo")
		case "hasNextPage":

			out.Values[i] = ec._PageInfo_hasNextPage(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hasPreviousPage":

			out.Values[i] = ec._PageInfo_hasPreviousPage(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "startCursor":

			out.Values[i] = ec._PageInfo_startCursor(ctx, field, obj)

		case "endCursor":

			out.Values[i] = ec._PageInfo_endCursor(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "node":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_node(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "nodes":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_nodes(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "helloproject":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_helloproject(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "me":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_me(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "__type":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})

		case "__schema":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var reactNavigationPushImplementors = []string{"ReactNavigationPush"}

func (ec *executionContext) _ReactNavigationPush(ctx context.Context, sel ast.SelectionSet, obj *jsonfields.ReactNavigationPush) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, reactNavigationPushImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ReactNavigationPush")
		case "path":

			out.Values[i] = ec._ReactNavigationPush_path(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "params":

			out.Values[i] = ec._ReactNavigationPush_params(ctx, field, obj)

		case "pushMessage":

			out.Values[i] = ec._ReactNavigationPush_pushMessage(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "toPushMessage":

			out.Values[i] = ec._ReactNavigationPush_toPushMessage(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userImplementors = []string{"User", "Node"}

func (ec *executionContext) _User(ctx context.Context, sel ast.SelectionSet, obj *ent.User) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("User")
		case "id":

			out.Values[i] = ec._User_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdAt":

			out.Values[i] = ec._User_createdAt(ctx, field, obj)

		case "updatedAt":

			out.Values[i] = ec._User_updatedAt(ctx, field, obj)

		case "username":

			out.Values[i] = ec._User_username(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "accessToken":

			out.Values[i] = ec._User_accessToken(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "auth":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_auth(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "notificationSettings":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_notificationSettings(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "hpviewHistory":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_hpviewHistory(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "hpmemberFollowing":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_hpmemberFollowing(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "hpsortHistory":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_hpsortHistory(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "hpfcEventTickets":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_hpfcEventTickets(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userNotificationSettingImplementors = []string{"UserNotificationSetting", "Node"}

func (ec *executionContext) _UserNotificationSetting(ctx context.Context, sel ast.SelectionSet, obj *ent.UserNotificationSetting) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userNotificationSettingImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserNotificationSetting")
		case "id":

			out.Values[i] = ec._UserNotificationSetting_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdAt":

			out.Values[i] = ec._UserNotificationSetting_createdAt(ctx, field, obj)

		case "updatedAt":

			out.Values[i] = ec._UserNotificationSetting_updatedAt(ctx, field, obj)

		case "token":

			out.Values[i] = ec._UserNotificationSetting_token(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "slug":

			out.Values[i] = ec._UserNotificationSetting_slug(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":

			out.Values[i] = ec._UserNotificationSetting_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "enableNewPosts":

			out.Values[i] = ec._UserNotificationSetting_enableNewPosts(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "enablePaymentStart":

			out.Values[i] = ec._UserNotificationSetting_enablePaymentStart(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "enablePaymentDue":

			out.Values[i] = ec._UserNotificationSetting_enablePaymentDue(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "user":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._UserNotificationSetting_user(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":

			out.Values[i] = ec.___Directive_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___Directive_description(ctx, field, obj)

		case "locations":

			out.Values[i] = ec.___Directive_locations(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":

			out.Values[i] = ec.___Directive_args(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isRepeatable":

			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":

			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)

		case "isDeprecated":

			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":

			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":

			out.Values[i] = ec.___Field_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___Field_description(ctx, field, obj)

		case "args":

			out.Values[i] = ec.___Field_args(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":

			out.Values[i] = ec.___Field_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":

			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":

			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":

			out.Values[i] = ec.___InputValue_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___InputValue_description(ctx, field, obj)

		case "type":

			out.Values[i] = ec.___InputValue_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":

			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":

			out.Values[i] = ec.___Schema_description(ctx, field, obj)

		case "types":

			out.Values[i] = ec.___Schema_types(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":

			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":

			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)

		case "subscriptionType":

			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)

		case "directives":

			out.Values[i] = ec.___Schema_directives(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":

			out.Values[i] = ec.___Type_kind(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec.___Type_name(ctx, field, obj)

		case "description":

			out.Values[i] = ec.___Type_description(ctx, field, obj)

		case "fields":

			out.Values[i] = ec.___Type_fields(ctx, field, obj)

		case "interfaces":

			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)

		case "possibleTypes":

			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)

		case "enumValues":

			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)

		case "inputFields":

			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)

		case "ofType":

			out.Values[i] = ec.___Type_ofType(ctx, field, obj)

		case "specifiedByURL":

			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNAuth2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐAuth(ctx context.Context, sel ast.SelectionSet, v *ent.Auth) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Auth(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAuthOrderField2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐAuthOrderField(ctx context.Context, v interface{}) (*ent.AuthOrderField, error) {
	var res = new(ent.AuthOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAuthOrderField2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐAuthOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.AuthOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor(ctx context.Context, v interface{}) (entgql.Cursor[int], error) {
	var res entgql.Cursor[int]
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor(ctx context.Context, sel ast.SelectionSet, v entgql.Cursor[int]) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNExpoPushMessage2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋjsonfieldsᚐExpoPushMessage(ctx context.Context, sel ast.SelectionSet, v jsonfields.ExpoPushMessage) graphql.Marshaler {
	return ec._ExpoPushMessage(ctx, sel, &v)
}

func (ec *executionContext) marshalNHPAmebloPost2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPAmebloPost(ctx context.Context, sel ast.SelectionSet, v *ent.HPAmebloPost) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._HPAmebloPost(ctx, sel, v)
}

func (ec *executionContext) unmarshalNHPAmebloPostOrderField2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPAmebloPostOrderField(ctx context.Context, v interface{}) (*ent.HPAmebloPostOrderField, error) {
	var res = new(ent.HPAmebloPostOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNHPAmebloPostOrderField2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPAmebloPostOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.HPAmebloPostOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalNHPAmebloPostSource2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚋhpameblopostᚐSource(ctx context.Context, v interface{}) (hpameblopost.Source, error) {
	var res hpameblopost.Source
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNHPAmebloPostSource2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚋhpameblopostᚐSource(ctx context.Context, sel ast.SelectionSet, v hpameblopost.Source) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNHPArtist2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPArtist(ctx context.Context, sel ast.SelectionSet, v *ent.HPArtist) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._HPArtist(ctx, sel, v)
}

func (ec *executionContext) unmarshalNHPArtistOrderField2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPArtistOrderField(ctx context.Context, v interface{}) (*ent.HPArtistOrderField, error) {
	var res = new(ent.HPArtistOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNHPArtistOrderField2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPArtistOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.HPArtistOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalNHPAssetType2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋenumsᚐHPAssetType(ctx context.Context, v interface{}) (enums.HPAssetType, error) {
	var res enums.HPAssetType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNHPAssetType2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋenumsᚐHPAssetType(ctx context.Context, sel ast.SelectionSet, v enums.HPAssetType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNHPBlob2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPBlob(ctx context.Context, sel ast.SelectionSet, v *ent.HPBlob) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._HPBlob(ctx, sel, v)
}

func (ec *executionContext) unmarshalNHPBlobHPBlobStatus2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋenumsᚐHPBlobStatus(ctx context.Context, v interface{}) (enums.HPBlobStatus, error) {
	var res enums.HPBlobStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNHPBlobHPBlobStatus2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋenumsᚐHPBlobStatus(ctx context.Context, sel ast.SelectionSet, v enums.HPBlobStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNHPBlobHPBlobSubType2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋenumsᚐHPBlobSubType(ctx context.Context, v interface{}) (enums.HPBlobSubType, error) {
	var res enums.HPBlobSubType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNHPBlobHPBlobSubType2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋenumsᚐHPBlobSubType(ctx context.Context, sel ast.SelectionSet, v enums.HPBlobSubType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNHPBlobHPBlobType2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋenumsᚐHPBlobType(ctx context.Context, v interface{}) (enums.HPBlobType, error) {
	var res enums.HPBlobType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNHPBlobHPBlobType2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋenumsᚐHPBlobType(ctx context.Context, sel ast.SelectionSet, v enums.HPBlobType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNHPBlobOrderField2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPBlobOrderField(ctx context.Context, v interface{}) (*ent.HPBlobOrderField, error) {
	var res = new(ent.HPBlobOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNHPBlobOrderField2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPBlobOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.HPBlobOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalNHPBlobType2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋenumsᚐHPBlobType(ctx context.Context, v interface{}) (enums.HPBlobType, error) {
	var res enums.HPBlobType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNHPBlobType2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋenumsᚐHPBlobType(ctx context.Context, sel ast.SelectionSet, v enums.HPBlobType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNHPElineumpMallItemsParamsInput2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋgraphqlᚋv3ᚋhelloprojectᚐHPElineumpMallItemsParams(ctx context.Context, v interface{}) (helloproject.HPElineumpMallItemsParams, error) {
	res, err := ec.unmarshalInputHPElineumpMallItemsParamsInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNHPElineupMallItemCategory2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋenumsᚐHPElineupMallItemCategory(ctx context.Context, v interface{}) (enums.HPElineupMallItemCategory, error) {
	var res enums.HPElineupMallItemCategory
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNHPElineupMallItemCategory2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋenumsᚐHPElineupMallItemCategory(ctx context.Context, sel ast.SelectionSet, v enums.HPElineupMallItemCategory) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNHPElineupMallItemHPElineupMallItemCategory2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋenumsᚐHPElineupMallItemCategory(ctx context.Context, v interface{}) (enums.HPElineupMallItemCategory, error) {
	var res enums.HPElineupMallItemCategory
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNHPElineupMallItemHPElineupMallItemCategory2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋenumsᚐHPElineupMallItemCategory(ctx context.Context, sel ast.SelectionSet, v enums.HPElineupMallItemCategory) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNHPElineupMallItemOrderField2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPElineupMallItemOrderField(ctx context.Context, v interface{}) (*ent.HPElineupMallItemOrderField, error) {
	var res = new(ent.HPElineupMallItemOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNHPElineupMallItemOrderField2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPElineupMallItemOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.HPElineupMallItemOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalNHPEventHPEventSource2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋenumsᚐHPEventSource(ctx context.Context, v interface{}) (enums.HPEventSource, error) {
	var res enums.HPEventSource
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNHPEventHPEventSource2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋenumsᚐHPEventSource(ctx context.Context, sel ast.SelectionSet, v enums.HPEventSource) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNHPEventOrderField2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPEventOrderField(ctx context.Context, v interface{}) (*ent.HPEventOrderField, error) {
	var res = new(ent.HPEventOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNHPEventOrderField2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPEventOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.HPEventOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalNHPFCEventTicket2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPFCEventTicket(ctx context.Context, sel ast.SelectionSet, v *ent.HPFCEventTicket) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._HPFCEventTicket(ctx, sel, v)
}

func (ec *executionContext) unmarshalNHPFCEventTicketApplicationInput2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋhelloprojectᚋupfcᚐHPFCEventTicketApplication(ctx context.Context, v interface{}) (upfc.HPFCEventTicketApplication, error) {
	res, err := ec.unmarshalInputHPFCEventTicketApplicationInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNHPFCEventTicketApplicationSite2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋenumsᚐHPFCEventTicketApplicationSite(ctx context.Context, v interface{}) (enums.HPFCEventTicketApplicationSite, error) {
	var res enums.HPFCEventTicketApplicationSite
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNHPFCEventTicketApplicationSite2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋenumsᚐHPFCEventTicketApplicationSite(ctx context.Context, sel ast.SelectionSet, v enums.HPFCEventTicketApplicationSite) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNHPFCEventTicketApplicationStatus2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋenumsᚐHPFCEventTicketApplicationStatus(ctx context.Context, v interface{}) (enums.HPFCEventTicketApplicationStatus, error) {
	var res enums.HPFCEventTicketApplicationStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNHPFCEventTicketApplicationStatus2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋenumsᚐHPFCEventTicketApplicationStatus(ctx context.Context, sel ast.SelectionSet, v enums.HPFCEventTicketApplicationStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNHPFCEventTicketApplicationUpsertParamsInput2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋhelloprojectᚋupfcᚐHPFCEventTicketApplicationUpsertParams(ctx context.Context, v interface{}) (upfc.HPFCEventTicketApplicationUpsertParams, error) {
	res, err := ec.unmarshalInputHPFCEventTicketApplicationUpsertParamsInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNHPFCEventTicketHPFCEventTicketApplicationSite2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋenumsᚐHPFCEventTicketApplicationSite(ctx context.Context, v interface{}) (enums.HPFCEventTicketApplicationSite, error) {
	var res enums.HPFCEventTicketApplicationSite
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNHPFCEventTicketHPFCEventTicketApplicationSite2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋenumsᚐHPFCEventTicketApplicationSite(ctx context.Context, sel ast.SelectionSet, v enums.HPFCEventTicketApplicationSite) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNHPFCEventTicketHPFCEventTicketApplicationStatus2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋenumsᚐHPFCEventTicketApplicationStatus(ctx context.Context, v interface{}) (enums.HPFCEventTicketApplicationStatus, error) {
	var res enums.HPFCEventTicketApplicationStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNHPFCEventTicketHPFCEventTicketApplicationStatus2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋenumsᚐHPFCEventTicketApplicationStatus(ctx context.Context, sel ast.SelectionSet, v enums.HPFCEventTicketApplicationStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNHPFCEventTicketOrderField2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPFCEventTicketOrderField(ctx context.Context, v interface{}) (*ent.HPFCEventTicketOrderField, error) {
	var res = new(ent.HPFCEventTicketOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNHPFCEventTicketOrderField2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPFCEventTicketOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.HPFCEventTicketOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalNHPFeedItemHPAssetType2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋenumsᚐHPAssetType(ctx context.Context, v interface{}) (enums.HPAssetType, error) {
	var res enums.HPAssetType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNHPFeedItemHPAssetType2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋenumsᚐHPAssetType(ctx context.Context, sel ast.SelectionSet, v enums.HPAssetType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNHPFeedItemOrderField2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPFeedItemOrderField(ctx context.Context, v interface{}) (*ent.HPFeedItemOrderField, error) {
	var res = new(ent.HPFeedItemOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNHPFeedItemOrderField2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPFeedItemOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.HPFeedItemOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalNHPFeedQueryParamsInput2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋgraphqlᚋv3ᚋhelloprojectᚐHPFeedQueryParams(ctx context.Context, v interface{}) (helloproject.HPFeedQueryParams, error) {
	res, err := ec.unmarshalInputHPFeedQueryParamsInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNHPFollow2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPFollow(ctx context.Context, sel ast.SelectionSet, v *ent.HPFollow) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._HPFollow(ctx, sel, v)
}

func (ec *executionContext) unmarshalNHPFollowHPFollowType2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋenumsᚐHPFollowType(ctx context.Context, v interface{}) (enums.HPFollowType, error) {
	var res enums.HPFollowType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNHPFollowHPFollowType2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋenumsᚐHPFollowType(ctx context.Context, sel ast.SelectionSet, v enums.HPFollowType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNHPFollowOrderField2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPFollowOrderField(ctx context.Context, v interface{}) (*ent.HPFollowOrderField, error) {
	var res = new(ent.HPFollowOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNHPFollowOrderField2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPFollowOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.HPFollowOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalNHPFollowType2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋenumsᚐHPFollowType(ctx context.Context, v interface{}) (enums.HPFollowType, error) {
	var res enums.HPFollowType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNHPFollowType2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋenumsᚐHPFollowType(ctx context.Context, sel ast.SelectionSet, v enums.HPFollowType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNHPFollowUpsertParamsInput2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋhelloprojectᚋuserᚐHPFollowUpsertParams(ctx context.Context, v interface{}) (user.HPFollowUpsertParams, error) {
	res, err := ec.unmarshalInputHPFollowUpsertParamsInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNHPIgCrawlArgsChildPost2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋjsonfieldsᚐHPIgCrawlArgsChildPost(ctx context.Context, sel ast.SelectionSet, v jsonfields.HPIgCrawlArgsChildPost) graphql.Marshaler {
	return ec._HPIgCrawlArgsChildPost(ctx, sel, &v)
}

func (ec *executionContext) marshalNHPIgPost2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPIgPost(ctx context.Context, sel ast.SelectionSet, v *ent.HPIgPost) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._HPIgPost(ctx, sel, v)
}

func (ec *executionContext) unmarshalNHPIgPostOrderField2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPIgPostOrderField(ctx context.Context, v interface{}) (*ent.HPIgPostOrderField, error) {
	var res = new(ent.HPIgPostOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNHPIgPostOrderField2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPIgPostOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.HPIgPostOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalNHPMember2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPMember(ctx context.Context, sel ast.SelectionSet, v *ent.HPMember) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._HPMember(ctx, sel, v)
}

func (ec *executionContext) unmarshalNHPMemberOrderField2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPMemberOrderField(ctx context.Context, v interface{}) (*ent.HPMemberOrderField, error) {
	var res = new(ent.HPMemberOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNHPMemberOrderField2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPMemberOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.HPMemberOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalNHPSortHistory2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPSortHistory(ctx context.Context, sel ast.SelectionSet, v *ent.HPSortHistory) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._HPSortHistory(ctx, sel, v)
}

func (ec *executionContext) unmarshalNHPSortHistoryOrderField2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPSortHistoryOrderField(ctx context.Context, v interface{}) (*ent.HPSortHistoryOrderField, error) {
	var res = new(ent.HPSortHistoryOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNHPSortHistoryOrderField2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPSortHistoryOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.HPSortHistoryOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalNHPSortResult2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋjsonfieldsᚐHPSortResult(ctx context.Context, sel ast.SelectionSet, v jsonfields.HPSortResult) graphql.Marshaler {
	return ec._HPSortResult(ctx, sel, &v)
}

func (ec *executionContext) marshalNHPSortResultRecord2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋjsonfieldsᚐHPSortResultRecord(ctx context.Context, sel ast.SelectionSet, v jsonfields.HPSortResultRecord) graphql.Marshaler {
	return ec._HPSortResultRecord(ctx, sel, &v)
}

func (ec *executionContext) marshalNHPViewHistory2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPViewHistory(ctx context.Context, sel ast.SelectionSet, v *ent.HPViewHistory) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._HPViewHistory(ctx, sel, v)
}

func (ec *executionContext) unmarshalNHPViewHistoryHPAssetType2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋenumsᚐHPAssetType(ctx context.Context, v interface{}) (enums.HPAssetType, error) {
	var res enums.HPAssetType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNHPViewHistoryHPAssetType2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋenumsᚐHPAssetType(ctx context.Context, sel ast.SelectionSet, v enums.HPAssetType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNHPViewHistoryOrderField2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPViewHistoryOrderField(ctx context.Context, v interface{}) (*ent.HPViewHistoryOrderField, error) {
	var res = new(ent.HPViewHistoryOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNHPViewHistoryOrderField2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPViewHistoryOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.HPViewHistoryOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalNHPViewHistoryUpsertParamsInput2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋhelloprojectᚋfeedᚐHPViewHistoryUpsertParams(ctx context.Context, v interface{}) (feed.HPViewHistoryUpsertParams, error) {
	res, err := ec.unmarshalInputHPViewHistoryUpsertParamsInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNHelloProjectQuery2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋgraphqlᚋv3ᚋhelloprojectᚐHelloProjectQuery(ctx context.Context, sel ast.SelectionSet, v helloproject.HelloProjectQuery) graphql.Marshaler {
	return ec._HelloProjectQuery(ctx, sel, &v)
}

func (ec *executionContext) marshalNHelloProjectQuery2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋgraphqlᚋv3ᚋhelloprojectᚐHelloProjectQuery(ctx context.Context, sel ast.SelectionSet, v *helloproject.HelloProjectQuery) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._HelloProjectQuery(ctx, sel, v)
}

func (ec *executionContext) unmarshalNID2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalIntID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalIntID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNID2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNID2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNID2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNMeFavoriteQueryParamsInput2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋgraphqlᚋv3ᚋmeᚐMeFavoriteQueryParams(ctx context.Context, v interface{}) (me.MeFavoriteQueryParams, error) {
	res, err := ec.unmarshalInputMeFavoriteQueryParamsInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMeQuery2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋgraphqlᚋv3ᚋmeᚐMeQuery(ctx context.Context, sel ast.SelectionSet, v me.MeQuery) graphql.Marshaler {
	return ec._MeQuery(ctx, sel, &v)
}

func (ec *executionContext) marshalNMeQuery2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋgraphqlᚋv3ᚋmeᚐMeQuery(ctx context.Context, sel ast.SelectionSet, v *me.MeQuery) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MeQuery(ctx, sel, v)
}

func (ec *executionContext) marshalNMedia2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋjsonfieldsᚐMedia(ctx context.Context, sel ast.SelectionSet, v jsonfields.Media) graphql.Marshaler {
	return ec._Media(ctx, sel, &v)
}

func (ec *executionContext) marshalNMedia2ᚕgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋjsonfieldsᚐMediaᚄ(ctx context.Context, sel ast.SelectionSet, v []jsonfields.Media) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMedia2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋjsonfieldsᚐMedia(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNMessagePriority2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋsystemᚋpushᚐMessagePriority(ctx context.Context, v interface{}) (push.MessagePriority, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := push.MessagePriority(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMessagePriority2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋsystemᚋpushᚐMessagePriority(ctx context.Context, sel ast.SelectionSet, v push.MessagePriority) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNNode2ᚕgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐNoder(ctx context.Context, sel ast.SelectionSet, v []ent.Noder) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalONode2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐNoder(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx context.Context, v interface{}) (entgql.OrderDirection, error) {
	var res entgql.OrderDirection
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx context.Context, sel ast.SelectionSet, v entgql.OrderDirection) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNPageInfo2entgoᚗioᚋcontribᚋentgqlᚐPageInfo(ctx context.Context, sel ast.SelectionSet, v entgql.PageInfo[int]) graphql.Marshaler {
	return ec._PageInfo(ctx, sel, &v)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := graphql.MarshalTime(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNUser2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐUser(ctx context.Context, sel ast.SelectionSet, v *ent.User) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) marshalNUserNotificationSetting2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐUserNotificationSetting(ctx context.Context, sel ast.SelectionSet, v *ent.UserNotificationSetting) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UserNotificationSetting(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUserNotificationSettingOrderField2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐUserNotificationSettingOrderField(ctx context.Context, v interface{}) (*ent.UserNotificationSettingOrderField, error) {
	var res = new(ent.UserNotificationSettingOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUserNotificationSettingOrderField2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐUserNotificationSettingOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.UserNotificationSettingOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalNUserOrderField2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐUserOrderField(ctx context.Context, v interface{}) (*ent.UserOrderField, error) {
	var res = new(ent.UserOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUserOrderField2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐUserOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.UserOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalOAuth2ᚕᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐAuth(ctx context.Context, sel ast.SelectionSet, v []*ent.Auth) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAuth2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐAuth(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOAuth2ᚕᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐAuthᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.Auth) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAuth2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐAuth(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOAuth2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐAuth(ctx context.Context, sel ast.SelectionSet, v *ent.Auth) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Auth(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx context.Context, v interface{}) (*entgql.Cursor[int], error) {
	if v == nil {
		return nil, nil
	}
	var res = new(entgql.Cursor[int])
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx context.Context, sel ast.SelectionSet, v *entgql.Cursor[int]) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloatContext(v)
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) marshalOHPAmebloPost2ᚕᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPAmebloPostᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.HPAmebloPost) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNHPAmebloPost2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPAmebloPost(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOHPArtist2ᚕᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPArtist(ctx context.Context, sel ast.SelectionSet, v []*ent.HPArtist) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOHPArtist2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPArtist(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOHPArtist2ᚕᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPArtistᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.HPArtist) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNHPArtist2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPArtist(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOHPArtist2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPArtist(ctx context.Context, sel ast.SelectionSet, v *ent.HPArtist) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._HPArtist(ctx, sel, v)
}

func (ec *executionContext) unmarshalOHPAssetType2ᚕgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋenumsᚐHPAssetTypeᚄ(ctx context.Context, v interface{}) ([]enums.HPAssetType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]enums.HPAssetType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNHPAssetType2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋenumsᚐHPAssetType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOHPAssetType2ᚕgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋenumsᚐHPAssetTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []enums.HPAssetType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNHPAssetType2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋenumsᚐHPAssetType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOHPBlob2ᚕᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPBlobᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.HPBlob) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNHPBlob2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPBlob(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOHPBlobHPBlobFaceRecognitionStatus2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋenumsᚐHPBlobFaceRecognitionStatus(ctx context.Context, v interface{}) (enums.HPBlobFaceRecognitionStatus, error) {
	var res enums.HPBlobFaceRecognitionStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOHPBlobHPBlobFaceRecognitionStatus2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋenumsᚐHPBlobFaceRecognitionStatus(ctx context.Context, sel ast.SelectionSet, v enums.HPBlobFaceRecognitionStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalOHPBlobThumbnail2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋjsonfieldsᚐHPBlobThumbnail(ctx context.Context, sel ast.SelectionSet, v *jsonfields.HPBlobThumbnail) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._HPBlobThumbnail(ctx, sel, v)
}

func (ec *executionContext) marshalOHPElineupMallItem2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPElineupMallItem(ctx context.Context, sel ast.SelectionSet, v *ent.HPElineupMallItem) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._HPElineupMallItem(ctx, sel, v)
}

func (ec *executionContext) unmarshalOHPElineupMallItemCategory2ᚕgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋenumsᚐHPElineupMallItemCategoryᚄ(ctx context.Context, v interface{}) ([]enums.HPElineupMallItemCategory, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]enums.HPElineupMallItemCategory, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNHPElineupMallItemCategory2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋenumsᚐHPElineupMallItemCategory(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOHPElineupMallItemCategory2ᚕgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋenumsᚐHPElineupMallItemCategoryᚄ(ctx context.Context, sel ast.SelectionSet, v []enums.HPElineupMallItemCategory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNHPElineupMallItemCategory2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋenumsᚐHPElineupMallItemCategory(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOHPElineupMallItemConnection2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPElineupMallItemConnection(ctx context.Context, sel ast.SelectionSet, v *ent.HPElineupMallItemConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._HPElineupMallItemConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOHPElineupMallItemEdge2ᚕᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPElineupMallItemEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.HPElineupMallItemEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOHPElineupMallItemEdge2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPElineupMallItemEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOHPElineupMallItemEdge2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPElineupMallItemEdge(ctx context.Context, sel ast.SelectionSet, v *ent.HPElineupMallItemEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._HPElineupMallItemEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOHPEvent2ᚕᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPEvent(ctx context.Context, sel ast.SelectionSet, v []*ent.HPEvent) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOHPEvent2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPEvent(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOHPEvent2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPEvent(ctx context.Context, sel ast.SelectionSet, v *ent.HPEvent) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._HPEvent(ctx, sel, v)
}

func (ec *executionContext) marshalOHPEventConnection2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPEventConnection(ctx context.Context, sel ast.SelectionSet, v *ent.HPEventConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._HPEventConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOHPEventEdge2ᚕᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPEventEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.HPEventEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOHPEventEdge2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPEventEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOHPEventEdge2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPEventEdge(ctx context.Context, sel ast.SelectionSet, v *ent.HPEventEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._HPEventEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOHPFCEventTicket2ᚕᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPFCEventTicketᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.HPFCEventTicket) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNHPFCEventTicket2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPFCEventTicket(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOHPFCEventTicketApplicationInput2ᚕgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋhelloprojectᚋupfcᚐHPFCEventTicketApplicationᚄ(ctx context.Context, v interface{}) ([]upfc.HPFCEventTicketApplication, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]upfc.HPFCEventTicketApplication, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNHPFCEventTicketApplicationInput2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋhelloprojectᚋupfcᚐHPFCEventTicketApplication(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOHPFeedItem2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPFeedItem(ctx context.Context, sel ast.SelectionSet, v *ent.HPFeedItem) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._HPFeedItem(ctx, sel, v)
}

func (ec *executionContext) marshalOHPFeedItemConnection2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPFeedItemConnection(ctx context.Context, sel ast.SelectionSet, v *ent.HPFeedItemConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._HPFeedItemConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOHPFeedItemEdge2ᚕᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPFeedItemEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.HPFeedItemEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOHPFeedItemEdge2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPFeedItemEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOHPFeedItemEdge2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPFeedItemEdge(ctx context.Context, sel ast.SelectionSet, v *ent.HPFeedItemEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._HPFeedItemEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOHPFollow2ᚕᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPFollow(ctx context.Context, sel ast.SelectionSet, v []*ent.HPFollow) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOHPFollow2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPFollow(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOHPFollow2ᚕᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPFollowᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.HPFollow) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNHPFollow2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPFollow(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOHPFollow2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPFollow(ctx context.Context, sel ast.SelectionSet, v *ent.HPFollow) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._HPFollow(ctx, sel, v)
}

func (ec *executionContext) marshalOHPIgCrawlArgs2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋjsonfieldsᚐHPIgCrawlArgs(ctx context.Context, sel ast.SelectionSet, v *jsonfields.HPIgCrawlArgs) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._HPIgCrawlArgs(ctx, sel, v)
}

func (ec *executionContext) marshalOHPIgCrawlArgsChildPost2ᚕgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋjsonfieldsᚐHPIgCrawlArgsChildPostᚄ(ctx context.Context, sel ast.SelectionSet, v []jsonfields.HPIgCrawlArgsChildPost) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNHPIgCrawlArgsChildPost2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋjsonfieldsᚐHPIgCrawlArgsChildPost(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOHPIgPost2ᚕᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPIgPostᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.HPIgPost) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNHPIgPost2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPIgPost(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOHPIgPost2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPIgPost(ctx context.Context, sel ast.SelectionSet, v *ent.HPIgPost) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._HPIgPost(ctx, sel, v)
}

func (ec *executionContext) marshalOHPIgPostEdge2ᚕᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPIgPostEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.HPIgPostEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOHPIgPostEdge2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPIgPostEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOHPIgPostEdge2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPIgPostEdge(ctx context.Context, sel ast.SelectionSet, v *ent.HPIgPostEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._HPIgPostEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOHPMember2ᚕᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPMemberᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.HPMember) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNHPMember2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPMember(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOHPMember2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPMember(ctx context.Context, sel ast.SelectionSet, v *ent.HPMember) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._HPMember(ctx, sel, v)
}

func (ec *executionContext) marshalOHPMemberEdge2ᚕᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPMemberEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.HPMemberEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOHPMemberEdge2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPMemberEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOHPMemberEdge2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPMemberEdge(ctx context.Context, sel ast.SelectionSet, v *ent.HPMemberEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._HPMemberEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOHPSortHistory2ᚕᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPSortHistoryᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.HPSortHistory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNHPSortHistory2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPSortHistory(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOHPSortHistory2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPSortHistory(ctx context.Context, sel ast.SelectionSet, v *ent.HPSortHistory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._HPSortHistory(ctx, sel, v)
}

func (ec *executionContext) marshalOHPSortHistoryConnection2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPSortHistoryConnection(ctx context.Context, sel ast.SelectionSet, v *ent.HPSortHistoryConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._HPSortHistoryConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOHPSortHistoryEdge2ᚕᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPSortHistoryEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.HPSortHistoryEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOHPSortHistoryEdge2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPSortHistoryEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOHPSortHistoryEdge2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPSortHistoryEdge(ctx context.Context, sel ast.SelectionSet, v *ent.HPSortHistoryEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._HPSortHistoryEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOHPSortResultRecord2ᚕgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋjsonfieldsᚐHPSortResultRecordᚄ(ctx context.Context, sel ast.SelectionSet, v []jsonfields.HPSortResultRecord) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNHPSortResultRecord2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋjsonfieldsᚐHPSortResultRecord(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOHPViewHistory2ᚕᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPViewHistoryᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.HPViewHistory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNHPViewHistory2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPViewHistory(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOHPViewHistory2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPViewHistory(ctx context.Context, sel ast.SelectionSet, v *ent.HPViewHistory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._HPViewHistory(ctx, sel, v)
}

func (ec *executionContext) marshalOHPViewHistoryEdge2ᚕᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPViewHistoryEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.HPViewHistoryEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOHPViewHistoryEdge2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPViewHistoryEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOHPViewHistoryEdge2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐHPViewHistoryEdge(ctx context.Context, sel ast.SelectionSet, v *ent.HPViewHistoryEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._HPViewHistoryEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOID2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalIntID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalIntID(v)
	return res
}

func (ec *executionContext) unmarshalOID2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalIntID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalIntID(*v)
	return res
}

func (ec *executionContext) unmarshalOInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	return res
}

func (ec *executionContext) unmarshalOInt2int64(ctx context.Context, v interface{}) (int64, error) {
	res, err := graphql.UnmarshalInt64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2int64(ctx context.Context, sel ast.SelectionSet, v int64) graphql.Marshaler {
	res := graphql.MarshalInt64(v)
	return res
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt(*v)
	return res
}

func (ec *executionContext) unmarshalOMap2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalMap(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMap2map(ctx context.Context, sel ast.SelectionSet, v map[string]interface{}) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalMap(v)
	return res
}

func (ec *executionContext) marshalOMeMutation2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋgraphqlᚋv3ᚋmeᚐMeMutation(ctx context.Context, sel ast.SelectionSet, v *me.MeMutation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MeMutation(ctx, sel, v)
}

func (ec *executionContext) marshalOMedia2ᚕgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋjsonfieldsᚐMediaᚄ(ctx context.Context, sel ast.SelectionSet, v []jsonfields.Media) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMedia2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋschemaᚋjsonfieldsᚐMedia(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOMessage2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋsystemᚋpushᚐMessage(ctx context.Context, sel ast.SelectionSet, v *push.Message) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Message(ctx, sel, v)
}

func (ec *executionContext) marshalONode2githubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐNoder(ctx context.Context, sel ast.SelectionSet, v ent.Noder) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Node(ctx, sel, v)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	return res
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) unmarshalOTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := graphql.MarshalTime(v)
	return res
}

func (ec *executionContext) unmarshalOTime2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalTime(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalTime(*v)
	return res
}

func (ec *executionContext) marshalOUser2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐUser(ctx context.Context, sel ast.SelectionSet, v *ent.User) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) marshalOUserNotificationSetting2ᚕᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐUserNotificationSettingᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.UserNotificationSetting) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUserNotificationSetting2ᚖgithubᚗcomᚋyssk22ᚋhpappᚋgoᚋserviceᚋentᚐUserNotificationSetting(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
